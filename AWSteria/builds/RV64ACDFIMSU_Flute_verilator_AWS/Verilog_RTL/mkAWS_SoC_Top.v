//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// to_ddr4_awid                   O    15
// to_ddr4_awaddr                 O    64
// to_ddr4_awlen                  O     8
// to_ddr4_awsize                 O     3
// to_ddr4_awburst                O     2
// to_ddr4_awlock                 O     1
// to_ddr4_awcache                O     4
// to_ddr4_awprot                 O     3
// to_ddr4_awqos                  O     4
// to_ddr4_awregion               O     4
// to_ddr4_awvalid                O     1
// to_ddr4_wdata                  O   512
// to_ddr4_wstrb                  O    64
// to_ddr4_wlast                  O     1
// to_ddr4_wvalid                 O     1
// to_ddr4_bready                 O     1
// to_ddr4_arid                   O    15
// to_ddr4_araddr                 O    64
// to_ddr4_arlen                  O     8
// to_ddr4_arsize                 O     3
// to_ddr4_arburst                O     2
// to_ddr4_arlock                 O     1
// to_ddr4_arcache                O     4
// to_ddr4_arprot                 O     3
// to_ddr4_arqos                  O     4
// to_ddr4_arregion               O     4
// to_ddr4_arvalid                O     1
// to_ddr4_rready                 O     1
// get_to_console_get             O     8 reg
// RDY_get_to_console_get         O     1 reg
// RDY_put_from_console_put       O     1 reg
// to_aws_host_get                O    32 reg
// RDY_to_aws_host_get            O     1 reg
// RDY_from_aws_host_put          O     1 reg
// RDY_ma_aws_host_to_hw_interrupt  O     1 const
// RDY_ma_set_verbosity           O     1 const
// RDY_ma_set_watch_tohost        O     1
// RDY_ma_ddr4_ready              O     1
// mv_status                      O     8 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// to_ddr4_awready                I     1
// to_ddr4_wready                 I     1
// to_ddr4_bid                    I    15
// to_ddr4_bresp                  I     2
// to_ddr4_arready                I     1
// to_ddr4_rid                    I    15
// to_ddr4_rdata                  I   512
// to_ddr4_rresp                  I     2
// to_ddr4_rlast                  I     1
// put_from_console_put           I     8 reg
// from_aws_host_put              I    32 reg
// ma_aws_host_to_hw_interrupt_x  I     1 reg
// ma_set_verbosity_verbosity1    I     4 reg
// ma_set_verbosity_logdelay1     I    64 reg
// ma_set_watch_tohost_watch_tohost  I     1 reg
// ma_set_watch_tohost_tohost_addr  I    64 reg
// to_ddr4_bvalid                 I     1
// to_ddr4_rvalid                 I     1
// EN_put_from_console_put        I     1
// EN_from_aws_host_put           I     1
// EN_ma_aws_host_to_hw_interrupt  I     1
// EN_ma_set_verbosity            I     1
// EN_ma_set_watch_tohost         I     1
// EN_ma_ddr4_ready               I     1
// EN_get_to_console_get          I     1
// EN_to_aws_host_get             I     1
//
// Combinational paths from inputs to outputs:
//   EN_ma_ddr4_ready -> to_ddr4_arid
//   EN_ma_ddr4_ready -> to_ddr4_araddr
//   EN_ma_ddr4_ready -> to_ddr4_arlen
//   EN_ma_ddr4_ready -> to_ddr4_arsize
//   EN_ma_ddr4_ready -> to_ddr4_arburst
//   EN_ma_ddr4_ready -> to_ddr4_arlock
//   EN_ma_ddr4_ready -> to_ddr4_arcache
//   EN_ma_ddr4_ready -> to_ddr4_arprot
//   EN_ma_ddr4_ready -> to_ddr4_arqos
//   EN_ma_ddr4_ready -> to_ddr4_arregion
//   EN_ma_ddr4_ready -> to_ddr4_aruser
//   EN_ma_ddr4_ready -> to_ddr4_arvalid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAWS_SoC_Top(CLK,
		     RST_N,

		     to_ddr4_awid,

		     to_ddr4_awaddr,

		     to_ddr4_awlen,

		     to_ddr4_awsize,

		     to_ddr4_awburst,

		     to_ddr4_awlock,

		     to_ddr4_awcache,

		     to_ddr4_awprot,

		     to_ddr4_awqos,

		     to_ddr4_awregion,

		     to_ddr4_awvalid,

		     to_ddr4_awready,

		     to_ddr4_wdata,

		     to_ddr4_wstrb,

		     to_ddr4_wlast,

		     to_ddr4_wvalid,

		     to_ddr4_wready,

		     to_ddr4_bid,
		     to_ddr4_bresp,
		     to_ddr4_bvalid,

		     to_ddr4_bready,

		     to_ddr4_arid,

		     to_ddr4_araddr,

		     to_ddr4_arlen,

		     to_ddr4_arsize,

		     to_ddr4_arburst,

		     to_ddr4_arlock,

		     to_ddr4_arcache,

		     to_ddr4_arprot,

		     to_ddr4_arqos,

		     to_ddr4_arregion,

		     to_ddr4_arvalid,

		     to_ddr4_arready,

		     to_ddr4_rid,
		     to_ddr4_rdata,
		     to_ddr4_rresp,
		     to_ddr4_rlast,
		     to_ddr4_rvalid,

		     to_ddr4_rready,

		     EN_get_to_console_get,
		     get_to_console_get,
		     RDY_get_to_console_get,

		     put_from_console_put,
		     EN_put_from_console_put,
		     RDY_put_from_console_put,

		     EN_to_aws_host_get,
		     to_aws_host_get,
		     RDY_to_aws_host_get,

		     from_aws_host_put,
		     EN_from_aws_host_put,
		     RDY_from_aws_host_put,

		     ma_aws_host_to_hw_interrupt_x,
		     EN_ma_aws_host_to_hw_interrupt,
		     RDY_ma_aws_host_to_hw_interrupt,

		     ma_set_verbosity_verbosity1,
		     ma_set_verbosity_logdelay1,
		     EN_ma_set_verbosity,
		     RDY_ma_set_verbosity,

		     ma_set_watch_tohost_watch_tohost,
		     ma_set_watch_tohost_tohost_addr,
		     EN_ma_set_watch_tohost,
		     RDY_ma_set_watch_tohost,

		     EN_ma_ddr4_ready,
		     RDY_ma_ddr4_ready,

		     mv_status);
  input  CLK;
  input  RST_N;

  // value method to_ddr4_aw_awid
  output [14 : 0] to_ddr4_awid;

  // value method to_ddr4_aw_awaddr
  output [63 : 0] to_ddr4_awaddr;

  // value method to_ddr4_aw_awlen
  output [7 : 0] to_ddr4_awlen;

  // value method to_ddr4_aw_awsize
  output [2 : 0] to_ddr4_awsize;

  // value method to_ddr4_aw_awburst
  output [1 : 0] to_ddr4_awburst;

  // value method to_ddr4_aw_awlock
  output to_ddr4_awlock;

  // value method to_ddr4_aw_awcache
  output [3 : 0] to_ddr4_awcache;

  // value method to_ddr4_aw_awprot
  output [2 : 0] to_ddr4_awprot;

  // value method to_ddr4_aw_awqos
  output [3 : 0] to_ddr4_awqos;

  // value method to_ddr4_aw_awregion
  output [3 : 0] to_ddr4_awregion;

  // value method to_ddr4_aw_awuser

  // value method to_ddr4_aw_awvalid
  output to_ddr4_awvalid;

  // action method to_ddr4_aw_awready
  input  to_ddr4_awready;

  // value method to_ddr4_w_wdata
  output [511 : 0] to_ddr4_wdata;

  // value method to_ddr4_w_wstrb
  output [63 : 0] to_ddr4_wstrb;

  // value method to_ddr4_w_wlast
  output to_ddr4_wlast;

  // value method to_ddr4_w_wuser

  // value method to_ddr4_w_wvalid
  output to_ddr4_wvalid;

  // action method to_ddr4_w_wready
  input  to_ddr4_wready;

  // action method to_ddr4_b_bflit
  input  [14 : 0] to_ddr4_bid;
  input  [1 : 0] to_ddr4_bresp;
  input  to_ddr4_bvalid;

  // value method to_ddr4_b_bready
  output to_ddr4_bready;

  // value method to_ddr4_ar_arid
  output [14 : 0] to_ddr4_arid;

  // value method to_ddr4_ar_araddr
  output [63 : 0] to_ddr4_araddr;

  // value method to_ddr4_ar_arlen
  output [7 : 0] to_ddr4_arlen;

  // value method to_ddr4_ar_arsize
  output [2 : 0] to_ddr4_arsize;

  // value method to_ddr4_ar_arburst
  output [1 : 0] to_ddr4_arburst;

  // value method to_ddr4_ar_arlock
  output to_ddr4_arlock;

  // value method to_ddr4_ar_arcache
  output [3 : 0] to_ddr4_arcache;

  // value method to_ddr4_ar_arprot
  output [2 : 0] to_ddr4_arprot;

  // value method to_ddr4_ar_arqos
  output [3 : 0] to_ddr4_arqos;

  // value method to_ddr4_ar_arregion
  output [3 : 0] to_ddr4_arregion;

  // value method to_ddr4_ar_aruser

  // value method to_ddr4_ar_arvalid
  output to_ddr4_arvalid;

  // action method to_ddr4_ar_arready
  input  to_ddr4_arready;

  // action method to_ddr4_r_rflit
  input  [14 : 0] to_ddr4_rid;
  input  [511 : 0] to_ddr4_rdata;
  input  [1 : 0] to_ddr4_rresp;
  input  to_ddr4_rlast;
  input  to_ddr4_rvalid;

  // value method to_ddr4_r_rready
  output to_ddr4_rready;

  // actionvalue method get_to_console_get
  input  EN_get_to_console_get;
  output [7 : 0] get_to_console_get;
  output RDY_get_to_console_get;

  // action method put_from_console_put
  input  [7 : 0] put_from_console_put;
  input  EN_put_from_console_put;
  output RDY_put_from_console_put;

  // actionvalue method to_aws_host_get
  input  EN_to_aws_host_get;
  output [31 : 0] to_aws_host_get;
  output RDY_to_aws_host_get;

  // action method from_aws_host_put
  input  [31 : 0] from_aws_host_put;
  input  EN_from_aws_host_put;
  output RDY_from_aws_host_put;

  // action method ma_aws_host_to_hw_interrupt
  input  ma_aws_host_to_hw_interrupt_x;
  input  EN_ma_aws_host_to_hw_interrupt;
  output RDY_ma_aws_host_to_hw_interrupt;

  // action method ma_set_verbosity
  input  [3 : 0] ma_set_verbosity_verbosity1;
  input  [63 : 0] ma_set_verbosity_logdelay1;
  input  EN_ma_set_verbosity;
  output RDY_ma_set_verbosity;

  // action method ma_set_watch_tohost
  input  ma_set_watch_tohost_watch_tohost;
  input  [63 : 0] ma_set_watch_tohost_tohost_addr;
  input  EN_ma_set_watch_tohost;
  output RDY_ma_set_watch_tohost;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [511 : 0] to_ddr4_wdata;
  wire [63 : 0] to_ddr4_araddr, to_ddr4_awaddr, to_ddr4_wstrb;
  wire [31 : 0] to_aws_host_get;
  wire [14 : 0] to_ddr4_arid, to_ddr4_awid;
  wire [7 : 0] get_to_console_get, mv_status, to_ddr4_arlen, to_ddr4_awlen;
  wire [3 : 0] to_ddr4_arcache,
	       to_ddr4_arqos,
	       to_ddr4_arregion,
	       to_ddr4_awcache,
	       to_ddr4_awqos,
	       to_ddr4_awregion;
  wire [2 : 0] to_ddr4_arprot, to_ddr4_arsize, to_ddr4_awprot, to_ddr4_awsize;
  wire [1 : 0] to_ddr4_arburst, to_ddr4_awburst;
  wire RDY_from_aws_host_put,
       RDY_get_to_console_get,
       RDY_ma_aws_host_to_hw_interrupt,
       RDY_ma_ddr4_ready,
       RDY_ma_set_verbosity,
       RDY_ma_set_watch_tohost,
       RDY_put_from_console_put,
       RDY_to_aws_host_get,
       to_ddr4_arlock,
       to_ddr4_arvalid,
       to_ddr4_awlock,
       to_ddr4_awvalid,
       to_ddr4_bready,
       to_ddr4_rready,
       to_ddr4_wlast,
       to_ddr4_wvalid;

  // inlined wires
  wire [173 : 0] bus_split_0_doPut$wget,
		 bus_split_1_doPut$wget,
		 bus_split_2_doPut$wget,
		 bus_split_3_doPut$wget;
  wire [107 : 0] mem_ar_buffer_enqw$wget, mem_aw_buffer_enqw$wget;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1,
		 boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read,
		 boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read,
		 boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read,
		 mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read,
		 mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read;
  wire [99 : 0] aws_host_access_slave_ar_buffer_enqw$wget,
		aws_host_access_slave_aw_buffer_enqw$wget,
		bus_ssNoSynth_0_ar_buffer_enqw$wget,
		bus_ssNoSynth_1_ar_buffer_enqw$wget,
		bus_ssNoSynth_2_ar_buffer_enqw$wget,
		bus_ssNoSynth_3_ar_buffer_enqw$wget,
		uart0_slave_ar_buffer_enqw$wget,
		uart0_slave_aw_buffer_enqw$wget,
		ug_boot_rom_slave_u_ar_putWire$wget,
		ug_boot_rom_slave_u_aw_putWire$wget,
		ug_mem0_slave_u_ar_putWire$wget,
		ug_mem0_slave_u_aw_putWire$wget;
  wire [98 : 0] bus_1_ifcs_0_noRoute_currentReq$port0__write_1,
		bus_1_ifcs_0_noRoute_currentReq$port1__read,
		bus_1_ifcs_1_noRoute_currentReq$port0__write_1,
		bus_1_ifcs_1_noRoute_currentReq$port1__read,
		bus_ifcs_0_noRoute_inner_currentReq$port0__write_1,
		bus_ifcs_0_noRoute_inner_currentReq$port1__read,
		bus_ifcs_1_noRoute_inner_currentReq$port0__write_1,
		bus_ifcs_1_noRoute_inner_currentReq$port1__read;
  wire [74 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1,
		boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read,
		boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read,
		mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read;
  wire [73 : 0] aws_host_access_slave_w_buffer_enqw$wget,
		boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1,
		boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read,
		boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read,
		mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read,
		uart0_slave_w_buffer_enqw$wget;
  wire [72 : 0] bus_msNoSynth_0_r_buffer_enqw$wget,
		bus_msNoSynth_1_r_buffer_enqw$wget,
		ug_boot_rom_slave_u_w_putWire$wget,
		ug_mem0_slave_u_w_putWire$wget;
  wire [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1,
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read,
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read,
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read;
  wire [8 : 0] bus_1_ifcs_0_noRoute_flitCount$port0__write_1,
	       bus_1_ifcs_0_noRoute_flitCount$port1__write_1,
	       bus_1_ifcs_0_noRoute_flitCount$port2__read,
	       bus_1_ifcs_1_noRoute_flitCount$port0__write_1,
	       bus_1_ifcs_1_noRoute_flitCount$port1__write_1,
	       bus_1_ifcs_1_noRoute_flitCount$port2__read;
  wire [7 : 0] boot_rom_axi4_deburster_flitReceived$port0__write_1,
	       boot_rom_axi4_deburster_flitReceived$port1__read,
	       boot_rom_axi4_deburster_flitReceived$port2__read,
	       boot_rom_axi4_deburster_readsSent$port0__write_1,
	       boot_rom_axi4_deburster_readsSent$port1__read,
	       boot_rom_axi4_deburster_readsSent$port2__read,
	       boot_rom_axi4_deburster_writesSent$port0__write_1,
	       boot_rom_axi4_deburster_writesSent$port1__read,
	       boot_rom_axi4_deburster_writesSent$port2__read,
	       bus_msNoSynth_0_b_buffer_enqw$wget,
	       bus_msNoSynth_1_b_buffer_enqw$wget,
	       mem0_controller_axi4_deburster_flitReceived$port0__write_1,
	       mem0_controller_axi4_deburster_flitReceived$port1__read,
	       mem0_controller_axi4_deburster_flitReceived$port2__read,
	       mem0_controller_axi4_deburster_readsSent$port0__write_1,
	       mem0_controller_axi4_deburster_readsSent$port1__read,
	       mem0_controller_axi4_deburster_readsSent$port2__read,
	       mem0_controller_axi4_deburster_writesSent$port0__write_1,
	       mem0_controller_axi4_deburster_writesSent$port1__read,
	       mem0_controller_axi4_deburster_writesSent$port2__read;
  wire [1 : 0] boot_rom_axi4_deburster_inSerial_state$port0__write_1,
	       boot_rom_axi4_deburster_inSerial_state$port1__read,
	       boot_rom_axi4_deburster_inSerial_state$port1__write_1,
	       boot_rom_axi4_deburster_inSerial_state$port2__read,
	       mem0_controller_axi4_deburster_inSerial_state$port0__write_1,
	       mem0_controller_axi4_deburster_inSerial_state$port1__read,
	       mem0_controller_axi4_deburster_inSerial_state$port1__write_1,
	       mem0_controller_axi4_deburster_inSerial_state$port2__read;
  wire aws_host_access_slave_ar_buffer_enqw$whas,
       aws_host_access_slave_aw_buffer_enqw$whas,
       aws_host_access_slave_b_dwReady$whas,
       aws_host_access_slave_r_dwReady$whas,
       aws_host_access_slave_w_buffer_enqw$whas,
       boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write,
       boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write,
       boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write,
       boot_rom_axi4_deburster_inSerial_state$EN_port0__write,
       boot_rom_axi4_deburster_inSerial_state$EN_port1__write,
       bus_1_1_flitToSink_0$whas,
       bus_1_1_flitToSink_1$whas,
       bus_1_1_reqWires_0$wget,
       bus_1_1_reqWires_1$wget,
       bus_1_1_reqWires_2$wget,
       bus_1_1_reqWires_3$wget,
       bus_1_flitToSink_0$whas,
       bus_1_flitToSink_0_1$whas,
       bus_1_flitToSink_1$whas,
       bus_1_flitToSink_1_1$whas,
       bus_1_flitToSink_2$whas,
       bus_1_flitToSink_3$whas,
       bus_1_reqWires_0$wget,
       bus_1_reqWires_0_1$wget,
       bus_1_reqWires_1$wget,
       bus_1_reqWires_1_1$wget,
       bus_1_reqWires_2$wget,
       bus_1_reqWires_3$wget,
       bus_1_sourceSelect_0$whas,
       bus_1_sourceSelect_0_1$whas,
       bus_1_sourceSelect_1$whas,
       bus_1_sourceSelect_1_1$whas,
       bus_1_sourceSelect_2$whas,
       bus_1_sourceSelect_3$whas,
       bus_flitToSink_0$whas,
       bus_flitToSink_1$whas,
       bus_flitToSink_2$whas,
       bus_flitToSink_3$whas,
       bus_ifcs_0_noRoute_inner_currentReq$EN_port0__write,
       bus_ifcs_0_noRoute_inner_pendingReq$EN_port0__write,
       bus_ifcs_0_noRoute_inner_pendingReq$port1__read,
       bus_ifcs_0_noRoute_inner_pendingReq$port2__read,
       bus_ifcs_1_noRoute_inner_currentReq$EN_port0__write,
       bus_ifcs_1_noRoute_inner_pendingReq$EN_port0__write,
       bus_ifcs_1_noRoute_inner_pendingReq$port1__read,
       bus_ifcs_1_noRoute_inner_pendingReq$port2__read,
       bus_merged_0_doDrop$whas,
       bus_merged_1_doDrop$whas,
       bus_msNoSynth_0_ar_dwReady$whas,
       bus_msNoSynth_0_b_buffer_enqw$whas,
       bus_msNoSynth_0_r_buffer_enqw$whas,
       bus_msNoSynth_0_w_dwReady$whas,
       bus_msNoSynth_1_ar_dwReady$whas,
       bus_msNoSynth_1_b_buffer_enqw$whas,
       bus_msNoSynth_1_r_buffer_enqw$whas,
       bus_msNoSynth_1_w_dwReady$whas,
       bus_reqWires_0$wget,
       bus_reqWires_1$wget,
       bus_ssNoSynth_0_b_dwReady$whas,
       bus_ssNoSynth_0_r_dwReady$whas,
       bus_ssNoSynth_0_w_buffer_enqw$whas,
       bus_ssNoSynth_1_b_dwReady$whas,
       bus_ssNoSynth_1_r_dwReady$whas,
       bus_ssNoSynth_1_w_buffer_enqw$whas,
       bus_ssNoSynth_2_b_dwReady$whas,
       bus_ssNoSynth_2_r_dwReady$whas,
       bus_ssNoSynth_2_w_buffer_enqw$whas,
       bus_ssNoSynth_3_b_dwReady$whas,
       bus_ssNoSynth_3_r_dwReady$whas,
       bus_ssNoSynth_3_w_buffer_enqw$whas,
       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write,
       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write,
       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write,
       mem0_controller_axi4_deburster_inSerial_state$EN_port0__write,
       mem0_controller_axi4_deburster_inSerial_state$EN_port1__write,
       uart0_slave_ar_buffer_enqw$whas,
       uart0_slave_aw_buffer_enqw$whas,
       uart0_slave_b_dwReady$whas,
       uart0_slave_r_dwReady$whas,
       uart0_slave_w_buffer_enqw$whas,
       ug_boot_rom_slave_u_ar_putWire$whas,
       ug_boot_rom_slave_u_aw_putWire$whas,
       ug_boot_rom_slave_u_b_dropWire$whas,
       ug_boot_rom_slave_u_r_dropWire$whas,
       ug_boot_rom_slave_u_w_putWire$whas,
       ug_mem0_slave_u_ar_putWire$whas,
       ug_mem0_slave_u_aw_putWire$whas,
       ug_mem0_slave_u_b_dropWire$whas,
       ug_mem0_slave_u_r_dropWire$whas,
       ug_mem0_slave_u_w_putWire$whas;

  // register boot_rom_axi4_deburster_flitReceived
  reg [7 : 0] boot_rom_axi4_deburster_flitReceived;
  wire [7 : 0] boot_rom_axi4_deburster_flitReceived$D_IN;
  wire boot_rom_axi4_deburster_flitReceived$EN;

  // register boot_rom_axi4_deburster_inSerial_lastWasRead
  reg boot_rom_axi4_deburster_inSerial_lastWasRead;
  wire boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN,
       boot_rom_axi4_deburster_inSerial_lastWasRead$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_arff_rv
  reg [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_awff_rv
  reg [100 : 0] boot_rom_axi4_deburster_inSerial_shim_awff_rv;
  wire [100 : 0] boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_bff_rv
  reg [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv;
  wire [9 : 0] boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_rff_rv
  reg [74 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv;
  wire [74 : 0] boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_shim_wff_rv
  reg [73 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv;
  wire [73 : 0] boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN;
  wire boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN;

  // register boot_rom_axi4_deburster_inSerial_state
  reg [1 : 0] boot_rom_axi4_deburster_inSerial_state;
  wire [1 : 0] boot_rom_axi4_deburster_inSerial_state$D_IN;
  wire boot_rom_axi4_deburster_inSerial_state$EN;

  // register boot_rom_axi4_deburster_readsSent
  reg [7 : 0] boot_rom_axi4_deburster_readsSent;
  wire [7 : 0] boot_rom_axi4_deburster_readsSent$D_IN;
  wire boot_rom_axi4_deburster_readsSent$EN;

  // register boot_rom_axi4_deburster_writesSent
  reg [7 : 0] boot_rom_axi4_deburster_writesSent;
  wire [7 : 0] boot_rom_axi4_deburster_writesSent$D_IN;
  wire boot_rom_axi4_deburster_writesSent$EN;

  // register bus_1_1_activeSource_0
  reg bus_1_1_activeSource_0;
  reg bus_1_1_activeSource_0$D_IN;
  wire bus_1_1_activeSource_0$EN;

  // register bus_1_1_activeSource_1
  reg bus_1_1_activeSource_1;
  reg bus_1_1_activeSource_1$D_IN;
  wire bus_1_1_activeSource_1$EN;

  // register bus_1_1_activeSource_2
  reg bus_1_1_activeSource_2;
  reg bus_1_1_activeSource_2$D_IN;
  wire bus_1_1_activeSource_2$EN;

  // register bus_1_1_activeSource_3
  reg bus_1_1_activeSource_3;
  reg bus_1_1_activeSource_3$D_IN;
  wire bus_1_1_activeSource_3$EN;

  // register bus_1_1_arbiter_firstHot
  reg bus_1_1_arbiter_firstHot;
  wire bus_1_1_arbiter_firstHot$D_IN, bus_1_1_arbiter_firstHot$EN;

  // register bus_1_1_arbiter_lastSelect
  reg bus_1_1_arbiter_lastSelect;
  wire bus_1_1_arbiter_lastSelect$D_IN, bus_1_1_arbiter_lastSelect$EN;

  // register bus_1_1_arbiter_lastSelect_1
  reg bus_1_1_arbiter_lastSelect_1;
  wire bus_1_1_arbiter_lastSelect_1$D_IN, bus_1_1_arbiter_lastSelect_1$EN;

  // register bus_1_1_arbiter_lastSelect_2
  reg bus_1_1_arbiter_lastSelect_2;
  wire bus_1_1_arbiter_lastSelect_2$D_IN, bus_1_1_arbiter_lastSelect_2$EN;

  // register bus_1_1_state
  reg bus_1_1_state;
  wire bus_1_1_state$D_IN, bus_1_1_state$EN;

  // register bus_1_activeSource_0
  reg bus_1_activeSource_0;
  wire bus_1_activeSource_0$D_IN, bus_1_activeSource_0$EN;

  // register bus_1_activeSource_0_1
  reg bus_1_activeSource_0_1;
  wire bus_1_activeSource_0_1$D_IN, bus_1_activeSource_0_1$EN;

  // register bus_1_activeSource_1
  reg bus_1_activeSource_1;
  wire bus_1_activeSource_1$D_IN, bus_1_activeSource_1$EN;

  // register bus_1_activeSource_1_1
  reg bus_1_activeSource_1_1;
  wire bus_1_activeSource_1_1$D_IN, bus_1_activeSource_1_1$EN;

  // register bus_1_activeSource_2
  reg bus_1_activeSource_2;
  wire bus_1_activeSource_2$D_IN, bus_1_activeSource_2$EN;

  // register bus_1_activeSource_3
  reg bus_1_activeSource_3;
  wire bus_1_activeSource_3$D_IN, bus_1_activeSource_3$EN;

  // register bus_1_arbiter_firstHot
  reg bus_1_arbiter_firstHot;
  wire bus_1_arbiter_firstHot$D_IN, bus_1_arbiter_firstHot$EN;

  // register bus_1_arbiter_firstHot_1
  reg bus_1_arbiter_firstHot_1;
  wire bus_1_arbiter_firstHot_1$D_IN, bus_1_arbiter_firstHot_1$EN;

  // register bus_1_arbiter_lastSelect
  reg bus_1_arbiter_lastSelect;
  wire bus_1_arbiter_lastSelect$D_IN, bus_1_arbiter_lastSelect$EN;

  // register bus_1_arbiter_lastSelect_1
  reg bus_1_arbiter_lastSelect_1;
  wire bus_1_arbiter_lastSelect_1$D_IN, bus_1_arbiter_lastSelect_1$EN;

  // register bus_1_arbiter_lastSelect_2
  reg bus_1_arbiter_lastSelect_2;
  wire bus_1_arbiter_lastSelect_2$D_IN, bus_1_arbiter_lastSelect_2$EN;

  // register bus_1_arbiter_lastSelect_3
  reg bus_1_arbiter_lastSelect_3;
  wire bus_1_arbiter_lastSelect_3$D_IN, bus_1_arbiter_lastSelect_3$EN;

  // register bus_1_ifcs_0_noRoute_currentReq
  reg [98 : 0] bus_1_ifcs_0_noRoute_currentReq;
  wire [98 : 0] bus_1_ifcs_0_noRoute_currentReq$D_IN;
  wire bus_1_ifcs_0_noRoute_currentReq$EN;

  // register bus_1_ifcs_0_noRoute_flitCount
  reg [8 : 0] bus_1_ifcs_0_noRoute_flitCount;
  wire [8 : 0] bus_1_ifcs_0_noRoute_flitCount$D_IN;
  wire bus_1_ifcs_0_noRoute_flitCount$EN;

  // register bus_1_ifcs_0_state
  reg [1 : 0] bus_1_ifcs_0_state;
  wire [1 : 0] bus_1_ifcs_0_state$D_IN;
  wire bus_1_ifcs_0_state$EN;

  // register bus_1_ifcs_0_state_1
  reg bus_1_ifcs_0_state_1;
  wire bus_1_ifcs_0_state_1$D_IN, bus_1_ifcs_0_state_1$EN;

  // register bus_1_ifcs_1_noRoute_currentReq
  reg [98 : 0] bus_1_ifcs_1_noRoute_currentReq;
  wire [98 : 0] bus_1_ifcs_1_noRoute_currentReq$D_IN;
  wire bus_1_ifcs_1_noRoute_currentReq$EN;

  // register bus_1_ifcs_1_noRoute_flitCount
  reg [8 : 0] bus_1_ifcs_1_noRoute_flitCount;
  wire [8 : 0] bus_1_ifcs_1_noRoute_flitCount$D_IN;
  wire bus_1_ifcs_1_noRoute_flitCount$EN;

  // register bus_1_ifcs_1_state
  reg [1 : 0] bus_1_ifcs_1_state;
  wire [1 : 0] bus_1_ifcs_1_state$D_IN;
  wire bus_1_ifcs_1_state$EN;

  // register bus_1_ifcs_1_state_1
  reg bus_1_ifcs_1_state_1;
  wire bus_1_ifcs_1_state_1$D_IN, bus_1_ifcs_1_state_1$EN;

  // register bus_1_ifcs_2_state
  reg bus_1_ifcs_2_state;
  wire bus_1_ifcs_2_state$D_IN, bus_1_ifcs_2_state$EN;

  // register bus_1_ifcs_3_state
  reg bus_1_ifcs_3_state;
  wire bus_1_ifcs_3_state$D_IN, bus_1_ifcs_3_state$EN;

  // register bus_1_state
  reg bus_1_state;
  wire bus_1_state$D_IN, bus_1_state$EN;

  // register bus_1_state_1
  reg bus_1_state_1;
  wire bus_1_state_1$D_IN, bus_1_state_1$EN;

  // register bus_activeSource_0
  reg bus_activeSource_0;
  wire bus_activeSource_0$D_IN, bus_activeSource_0$EN;

  // register bus_activeSource_1
  reg bus_activeSource_1;
  wire bus_activeSource_1$D_IN, bus_activeSource_1$EN;

  // register bus_arbiter_firstHot
  reg bus_arbiter_firstHot;
  wire bus_arbiter_firstHot$D_IN, bus_arbiter_firstHot$EN;

  // register bus_arbiter_lastSelect
  reg bus_arbiter_lastSelect;
  wire bus_arbiter_lastSelect$D_IN, bus_arbiter_lastSelect$EN;

  // register bus_ifcs_0_noRoute_inner_currentReq
  reg [98 : 0] bus_ifcs_0_noRoute_inner_currentReq;
  wire [98 : 0] bus_ifcs_0_noRoute_inner_currentReq$D_IN;
  wire bus_ifcs_0_noRoute_inner_currentReq$EN;

  // register bus_ifcs_0_noRoute_inner_pendingReq
  reg bus_ifcs_0_noRoute_inner_pendingReq;
  wire bus_ifcs_0_noRoute_inner_pendingReq$D_IN,
       bus_ifcs_0_noRoute_inner_pendingReq$EN;

  // register bus_ifcs_0_state
  reg [1 : 0] bus_ifcs_0_state;
  reg [1 : 0] bus_ifcs_0_state$D_IN;
  wire bus_ifcs_0_state$EN;

  // register bus_ifcs_0_state_1
  reg bus_ifcs_0_state_1;
  wire bus_ifcs_0_state_1$D_IN, bus_ifcs_0_state_1$EN;

  // register bus_ifcs_1_noRoute_inner_currentReq
  reg [98 : 0] bus_ifcs_1_noRoute_inner_currentReq;
  wire [98 : 0] bus_ifcs_1_noRoute_inner_currentReq$D_IN;
  wire bus_ifcs_1_noRoute_inner_currentReq$EN;

  // register bus_ifcs_1_noRoute_inner_pendingReq
  reg bus_ifcs_1_noRoute_inner_pendingReq;
  wire bus_ifcs_1_noRoute_inner_pendingReq$D_IN,
       bus_ifcs_1_noRoute_inner_pendingReq$EN;

  // register bus_ifcs_1_state
  reg [1 : 0] bus_ifcs_1_state;
  reg [1 : 0] bus_ifcs_1_state$D_IN;
  wire bus_ifcs_1_state$EN;

  // register bus_ifcs_1_state_1
  reg bus_ifcs_1_state_1;
  wire bus_ifcs_1_state_1$D_IN, bus_ifcs_1_state_1$EN;

  // register bus_ifcs_2_state
  reg bus_ifcs_2_state;
  wire bus_ifcs_2_state$D_IN, bus_ifcs_2_state$EN;

  // register bus_ifcs_3_state
  reg bus_ifcs_3_state;
  wire bus_ifcs_3_state$D_IN, bus_ifcs_3_state$EN;

  // register bus_merged_0_flitLeft
  reg [7 : 0] bus_merged_0_flitLeft;
  wire [7 : 0] bus_merged_0_flitLeft$D_IN;
  wire bus_merged_0_flitLeft$EN;

  // register bus_merged_1_flitLeft
  reg [7 : 0] bus_merged_1_flitLeft;
  wire [7 : 0] bus_merged_1_flitLeft$D_IN;
  wire bus_merged_1_flitLeft$EN;

  // register bus_split_0_flitLeft
  reg [7 : 0] bus_split_0_flitLeft;
  wire [7 : 0] bus_split_0_flitLeft$D_IN;
  wire bus_split_0_flitLeft$EN;

  // register bus_split_1_flitLeft
  reg [7 : 0] bus_split_1_flitLeft;
  wire [7 : 0] bus_split_1_flitLeft$D_IN;
  wire bus_split_1_flitLeft$EN;

  // register bus_split_2_flitLeft
  reg [7 : 0] bus_split_2_flitLeft;
  wire [7 : 0] bus_split_2_flitLeft$D_IN;
  wire bus_split_2_flitLeft$EN;

  // register bus_split_3_flitLeft
  reg [7 : 0] bus_split_3_flitLeft;
  wire [7 : 0] bus_split_3_flitLeft$D_IN;
  wire bus_split_3_flitLeft$EN;

  // register bus_state
  reg bus_state;
  wire bus_state$D_IN, bus_state$EN;

  // register mem0_controller_axi4_deburster_flitReceived
  reg [7 : 0] mem0_controller_axi4_deburster_flitReceived;
  wire [7 : 0] mem0_controller_axi4_deburster_flitReceived$D_IN;
  wire mem0_controller_axi4_deburster_flitReceived$EN;

  // register mem0_controller_axi4_deburster_inSerial_lastWasRead
  reg mem0_controller_axi4_deburster_inSerial_lastWasRead;
  wire mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN,
       mem0_controller_axi4_deburster_inSerial_lastWasRead$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_arff_rv
  reg [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_arff_rv;
  wire [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_awff_rv
  reg [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_awff_rv;
  wire [100 : 0] mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_bff_rv
  reg [9 : 0] mem0_controller_axi4_deburster_inSerial_shim_bff_rv;
  wire [9 : 0] mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_rff_rv
  reg [74 : 0] mem0_controller_axi4_deburster_inSerial_shim_rff_rv;
  wire [74 : 0] mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_shim_wff_rv
  reg [73 : 0] mem0_controller_axi4_deburster_inSerial_shim_wff_rv;
  wire [73 : 0] mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN;

  // register mem0_controller_axi4_deburster_inSerial_state
  reg [1 : 0] mem0_controller_axi4_deburster_inSerial_state;
  wire [1 : 0] mem0_controller_axi4_deburster_inSerial_state$D_IN;
  wire mem0_controller_axi4_deburster_inSerial_state$EN;

  // register mem0_controller_axi4_deburster_readsSent
  reg [7 : 0] mem0_controller_axi4_deburster_readsSent;
  wire [7 : 0] mem0_controller_axi4_deburster_readsSent$D_IN;
  wire mem0_controller_axi4_deburster_readsSent$EN;

  // register mem0_controller_axi4_deburster_writesSent
  reg [7 : 0] mem0_controller_axi4_deburster_writesSent;
  wire [7 : 0] mem0_controller_axi4_deburster_writesSent$D_IN;
  wire mem0_controller_axi4_deburster_writesSent$EN;

  // register rg_aws_host_to_hw_interrupt
  reg rg_aws_host_to_hw_interrupt;
  wire rg_aws_host_to_hw_interrupt$D_IN, rg_aws_host_to_hw_interrupt$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  wire [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule aws_host_access
  wire [63 : 0] aws_host_access$slave_araddr,
		aws_host_access$slave_awaddr,
		aws_host_access$slave_rdata,
		aws_host_access$slave_wdata;
  wire [31 : 0] aws_host_access$from_aws_host_put,
		aws_host_access$to_aws_host_get;
  wire [7 : 0] aws_host_access$slave_arlen,
	       aws_host_access$slave_awlen,
	       aws_host_access$slave_wstrb;
  wire [6 : 0] aws_host_access$slave_arid,
	       aws_host_access$slave_awid,
	       aws_host_access$slave_bid,
	       aws_host_access$slave_rid;
  wire [3 : 0] aws_host_access$slave_arcache,
	       aws_host_access$slave_arqos,
	       aws_host_access$slave_arregion,
	       aws_host_access$slave_awcache,
	       aws_host_access$slave_awqos,
	       aws_host_access$slave_awregion;
  wire [2 : 0] aws_host_access$slave_arprot,
	       aws_host_access$slave_arsize,
	       aws_host_access$slave_awprot,
	       aws_host_access$slave_awsize;
  wire [1 : 0] aws_host_access$slave_arburst,
	       aws_host_access$slave_awburst,
	       aws_host_access$slave_bresp,
	       aws_host_access$slave_rresp;
  wire aws_host_access$EN_from_aws_host_put,
       aws_host_access$EN_to_aws_host_get,
       aws_host_access$RDY_from_aws_host_put,
       aws_host_access$RDY_to_aws_host_get,
       aws_host_access$slave_arlock,
       aws_host_access$slave_arready,
       aws_host_access$slave_arvalid,
       aws_host_access$slave_awlock,
       aws_host_access$slave_awready,
       aws_host_access$slave_awvalid,
       aws_host_access$slave_bready,
       aws_host_access$slave_bvalid,
       aws_host_access$slave_rlast,
       aws_host_access$slave_rready,
       aws_host_access$slave_rvalid,
       aws_host_access$slave_wlast,
       aws_host_access$slave_wready,
       aws_host_access$slave_wuser,
       aws_host_access$slave_wvalid;

  // ports of submodule aws_host_access_slave_ar_buffer_ff
  wire [99 : 0] aws_host_access_slave_ar_buffer_ff$D_IN,
		aws_host_access_slave_ar_buffer_ff$D_OUT;
  wire aws_host_access_slave_ar_buffer_ff$CLR,
       aws_host_access_slave_ar_buffer_ff$DEQ,
       aws_host_access_slave_ar_buffer_ff$EMPTY_N,
       aws_host_access_slave_ar_buffer_ff$ENQ,
       aws_host_access_slave_ar_buffer_ff$FULL_N;

  // ports of submodule aws_host_access_slave_ar_buffer_firstValid
  wire aws_host_access_slave_ar_buffer_firstValid$D_IN,
       aws_host_access_slave_ar_buffer_firstValid$EN,
       aws_host_access_slave_ar_buffer_firstValid$Q_OUT;

  // ports of submodule aws_host_access_slave_aw_buffer_ff
  wire [99 : 0] aws_host_access_slave_aw_buffer_ff$D_IN,
		aws_host_access_slave_aw_buffer_ff$D_OUT;
  wire aws_host_access_slave_aw_buffer_ff$CLR,
       aws_host_access_slave_aw_buffer_ff$DEQ,
       aws_host_access_slave_aw_buffer_ff$EMPTY_N,
       aws_host_access_slave_aw_buffer_ff$ENQ,
       aws_host_access_slave_aw_buffer_ff$FULL_N;

  // ports of submodule aws_host_access_slave_aw_buffer_firstValid
  wire aws_host_access_slave_aw_buffer_firstValid$D_IN,
       aws_host_access_slave_aw_buffer_firstValid$EN,
       aws_host_access_slave_aw_buffer_firstValid$Q_OUT;

  // ports of submodule aws_host_access_slave_w_buffer_ff
  wire [73 : 0] aws_host_access_slave_w_buffer_ff$D_IN,
		aws_host_access_slave_w_buffer_ff$D_OUT;
  wire aws_host_access_slave_w_buffer_ff$CLR,
       aws_host_access_slave_w_buffer_ff$DEQ,
       aws_host_access_slave_w_buffer_ff$EMPTY_N,
       aws_host_access_slave_w_buffer_ff$ENQ,
       aws_host_access_slave_w_buffer_ff$FULL_N;

  // ports of submodule aws_host_access_slave_w_buffer_firstValid
  wire aws_host_access_slave_w_buffer_firstValid$D_IN,
       aws_host_access_slave_w_buffer_firstValid$EN,
       aws_host_access_slave_w_buffer_firstValid$Q_OUT;

  // ports of submodule boot_rom
  wire [63 : 0] boot_rom$set_addr_map_addr_base,
		boot_rom$set_addr_map_addr_lim,
		boot_rom$slave_araddr,
		boot_rom$slave_awaddr,
		boot_rom$slave_rdata,
		boot_rom$slave_wdata;
  wire [7 : 0] boot_rom$slave_arlen,
	       boot_rom$slave_awlen,
	       boot_rom$slave_wstrb;
  wire [6 : 0] boot_rom$slave_arid,
	       boot_rom$slave_awid,
	       boot_rom$slave_bid,
	       boot_rom$slave_rid;
  wire [3 : 0] boot_rom$slave_arcache,
	       boot_rom$slave_arqos,
	       boot_rom$slave_arregion,
	       boot_rom$slave_awcache,
	       boot_rom$slave_awqos,
	       boot_rom$slave_awregion;
  wire [2 : 0] boot_rom$slave_arprot,
	       boot_rom$slave_arsize,
	       boot_rom$slave_awprot,
	       boot_rom$slave_awsize;
  wire [1 : 0] boot_rom$slave_arburst,
	       boot_rom$slave_awburst,
	       boot_rom$slave_bresp,
	       boot_rom$slave_rresp;
  wire boot_rom$EN_set_addr_map,
       boot_rom$RDY_set_addr_map,
       boot_rom$slave_arlock,
       boot_rom$slave_arready,
       boot_rom$slave_arvalid,
       boot_rom$slave_awlock,
       boot_rom$slave_awready,
       boot_rom$slave_awvalid,
       boot_rom$slave_bready,
       boot_rom$slave_bvalid,
       boot_rom$slave_rlast,
       boot_rom$slave_rready,
       boot_rom$slave_rvalid,
       boot_rom$slave_wlast,
       boot_rom$slave_wready,
       boot_rom$slave_wvalid;

  // ports of submodule boot_rom_axi4_deburster_countWriteRspFF
  wire [7 : 0] boot_rom_axi4_deburster_countWriteRspFF$D_IN,
	       boot_rom_axi4_deburster_countWriteRspFF$D_OUT;
  wire boot_rom_axi4_deburster_countWriteRspFF$CLR,
       boot_rom_axi4_deburster_countWriteRspFF$DEQ,
       boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N,
       boot_rom_axi4_deburster_countWriteRspFF$ENQ,
       boot_rom_axi4_deburster_countWriteRspFF$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_arff
  wire [99 : 0] boot_rom_axi4_deburster_inShim_arff$D_IN,
		boot_rom_axi4_deburster_inShim_arff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_arff$CLR,
       boot_rom_axi4_deburster_inShim_arff$DEQ,
       boot_rom_axi4_deburster_inShim_arff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_arff$ENQ,
       boot_rom_axi4_deburster_inShim_arff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_awff
  wire [99 : 0] boot_rom_axi4_deburster_inShim_awff$D_IN,
		boot_rom_axi4_deburster_inShim_awff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_awff$CLR,
       boot_rom_axi4_deburster_inShim_awff$DEQ,
       boot_rom_axi4_deburster_inShim_awff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_awff$ENQ,
       boot_rom_axi4_deburster_inShim_awff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_bff
  wire [8 : 0] boot_rom_axi4_deburster_inShim_bff$D_IN,
	       boot_rom_axi4_deburster_inShim_bff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_bff$CLR,
       boot_rom_axi4_deburster_inShim_bff$DEQ,
       boot_rom_axi4_deburster_inShim_bff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_bff$ENQ,
       boot_rom_axi4_deburster_inShim_bff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_rff
  wire [73 : 0] boot_rom_axi4_deburster_inShim_rff$D_IN,
		boot_rom_axi4_deburster_inShim_rff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_rff$CLR,
       boot_rom_axi4_deburster_inShim_rff$DEQ,
       boot_rom_axi4_deburster_inShim_rff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_rff$ENQ,
       boot_rom_axi4_deburster_inShim_rff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_inShim_wff
  wire [72 : 0] boot_rom_axi4_deburster_inShim_wff$D_IN,
		boot_rom_axi4_deburster_inShim_wff$D_OUT;
  wire boot_rom_axi4_deburster_inShim_wff$CLR,
       boot_rom_axi4_deburster_inShim_wff$DEQ,
       boot_rom_axi4_deburster_inShim_wff$EMPTY_N,
       boot_rom_axi4_deburster_inShim_wff$ENQ,
       boot_rom_axi4_deburster_inShim_wff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_lastReadRspFF
  wire boot_rom_axi4_deburster_lastReadRspFF$CLR,
       boot_rom_axi4_deburster_lastReadRspFF$DEQ,
       boot_rom_axi4_deburster_lastReadRspFF$D_IN,
       boot_rom_axi4_deburster_lastReadRspFF$D_OUT,
       boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N,
       boot_rom_axi4_deburster_lastReadRspFF$ENQ,
       boot_rom_axi4_deburster_lastReadRspFF$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_arff
  wire [99 : 0] boot_rom_axi4_deburster_outShim_arff$D_IN,
		boot_rom_axi4_deburster_outShim_arff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_arff$CLR,
       boot_rom_axi4_deburster_outShim_arff$DEQ,
       boot_rom_axi4_deburster_outShim_arff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_arff$ENQ,
       boot_rom_axi4_deburster_outShim_arff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_awff
  wire [99 : 0] boot_rom_axi4_deburster_outShim_awff$D_IN,
		boot_rom_axi4_deburster_outShim_awff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_awff$CLR,
       boot_rom_axi4_deburster_outShim_awff$DEQ,
       boot_rom_axi4_deburster_outShim_awff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_awff$ENQ,
       boot_rom_axi4_deburster_outShim_awff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_bff
  wire [8 : 0] boot_rom_axi4_deburster_outShim_bff$D_IN,
	       boot_rom_axi4_deburster_outShim_bff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_bff$CLR,
       boot_rom_axi4_deburster_outShim_bff$DEQ,
       boot_rom_axi4_deburster_outShim_bff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_bff$ENQ,
       boot_rom_axi4_deburster_outShim_bff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_rff
  wire [73 : 0] boot_rom_axi4_deburster_outShim_rff$D_IN,
		boot_rom_axi4_deburster_outShim_rff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_rff$CLR,
       boot_rom_axi4_deburster_outShim_rff$DEQ,
       boot_rom_axi4_deburster_outShim_rff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_rff$ENQ,
       boot_rom_axi4_deburster_outShim_rff$FULL_N;

  // ports of submodule boot_rom_axi4_deburster_outShim_wff
  wire [72 : 0] boot_rom_axi4_deburster_outShim_wff$D_IN,
		boot_rom_axi4_deburster_outShim_wff$D_OUT;
  wire boot_rom_axi4_deburster_outShim_wff$CLR,
       boot_rom_axi4_deburster_outShim_wff$DEQ,
       boot_rom_axi4_deburster_outShim_wff$EMPTY_N,
       boot_rom_axi4_deburster_outShim_wff$ENQ,
       boot_rom_axi4_deburster_outShim_wff$FULL_N;

  // ports of submodule br_ar_buffer_ff
  wire [99 : 0] br_ar_buffer_ff$D_IN, br_ar_buffer_ff$D_OUT;
  wire br_ar_buffer_ff$CLR,
       br_ar_buffer_ff$DEQ,
       br_ar_buffer_ff$EMPTY_N,
       br_ar_buffer_ff$ENQ,
       br_ar_buffer_ff$FULL_N;

  // ports of submodule br_ar_buffer_firstValid
  wire br_ar_buffer_firstValid$D_IN,
       br_ar_buffer_firstValid$EN,
       br_ar_buffer_firstValid$Q_OUT;

  // ports of submodule br_aw_buffer_ff
  wire [99 : 0] br_aw_buffer_ff$D_IN, br_aw_buffer_ff$D_OUT;
  wire br_aw_buffer_ff$CLR,
       br_aw_buffer_ff$DEQ,
       br_aw_buffer_ff$EMPTY_N,
       br_aw_buffer_ff$ENQ,
       br_aw_buffer_ff$FULL_N;

  // ports of submodule br_aw_buffer_firstValid
  wire br_aw_buffer_firstValid$D_IN,
       br_aw_buffer_firstValid$EN,
       br_aw_buffer_firstValid$Q_OUT;

  // ports of submodule br_w_buffer_ff
  wire [72 : 0] br_w_buffer_ff$D_IN, br_w_buffer_ff$D_OUT;
  wire br_w_buffer_ff$CLR,
       br_w_buffer_ff$DEQ,
       br_w_buffer_ff$EMPTY_N,
       br_w_buffer_ff$ENQ,
       br_w_buffer_ff$FULL_N;

  // ports of submodule br_w_buffer_firstValid
  wire br_w_buffer_firstValid$D_IN,
       br_w_buffer_firstValid$EN,
       br_w_buffer_firstValid$Q_OUT;

  // ports of submodule bus_1_ifcs_0_innerReq
  wire [99 : 0] bus_1_ifcs_0_innerReq$D_IN, bus_1_ifcs_0_innerReq$D_OUT;
  wire bus_1_ifcs_0_innerReq$CLR,
       bus_1_ifcs_0_innerReq$DEQ,
       bus_1_ifcs_0_innerReq$EMPTY_N,
       bus_1_ifcs_0_innerReq$ENQ,
       bus_1_ifcs_0_innerReq$FULL_N;

  // ports of submodule bus_1_ifcs_0_innerRoute
  wire [3 : 0] bus_1_ifcs_0_innerRoute$D_IN, bus_1_ifcs_0_innerRoute$D_OUT;
  wire bus_1_ifcs_0_innerRoute$CLR,
       bus_1_ifcs_0_innerRoute$DEQ,
       bus_1_ifcs_0_innerRoute$EMPTY_N,
       bus_1_ifcs_0_innerRoute$ENQ,
       bus_1_ifcs_0_innerRoute$FULL_N;

  // ports of submodule bus_1_ifcs_0_noRouteRsp
  wire [72 : 0] bus_1_ifcs_0_noRouteRsp$D_IN, bus_1_ifcs_0_noRouteRsp$D_OUT;
  wire bus_1_ifcs_0_noRouteRsp$CLR,
       bus_1_ifcs_0_noRouteRsp$DEQ,
       bus_1_ifcs_0_noRouteRsp$EMPTY_N,
       bus_1_ifcs_0_noRouteRsp$ENQ,
       bus_1_ifcs_0_noRouteRsp$FULL_N;

  // ports of submodule bus_1_ifcs_0_routeBack
  wire [1 : 0] bus_1_ifcs_0_routeBack$D_IN, bus_1_ifcs_0_routeBack$D_OUT;
  wire bus_1_ifcs_0_routeBack$CLR,
       bus_1_ifcs_0_routeBack$DEQ,
       bus_1_ifcs_0_routeBack$EMPTY_N,
       bus_1_ifcs_0_routeBack$ENQ,
       bus_1_ifcs_0_routeBack$FULL_N;

  // ports of submodule bus_1_ifcs_0_rspBack
  wire [72 : 0] bus_1_ifcs_0_rspBack$D_IN, bus_1_ifcs_0_rspBack$D_OUT;
  wire bus_1_ifcs_0_rspBack$CLR,
       bus_1_ifcs_0_rspBack$DEQ,
       bus_1_ifcs_0_rspBack$EMPTY_N,
       bus_1_ifcs_0_rspBack$ENQ,
       bus_1_ifcs_0_rspBack$FULL_N;

  // ports of submodule bus_1_ifcs_1_innerReq
  wire [99 : 0] bus_1_ifcs_1_innerReq$D_IN, bus_1_ifcs_1_innerReq$D_OUT;
  wire bus_1_ifcs_1_innerReq$CLR,
       bus_1_ifcs_1_innerReq$DEQ,
       bus_1_ifcs_1_innerReq$EMPTY_N,
       bus_1_ifcs_1_innerReq$ENQ,
       bus_1_ifcs_1_innerReq$FULL_N;

  // ports of submodule bus_1_ifcs_1_innerRoute
  wire [3 : 0] bus_1_ifcs_1_innerRoute$D_IN, bus_1_ifcs_1_innerRoute$D_OUT;
  wire bus_1_ifcs_1_innerRoute$CLR,
       bus_1_ifcs_1_innerRoute$DEQ,
       bus_1_ifcs_1_innerRoute$EMPTY_N,
       bus_1_ifcs_1_innerRoute$ENQ,
       bus_1_ifcs_1_innerRoute$FULL_N;

  // ports of submodule bus_1_ifcs_1_noRouteRsp
  wire [72 : 0] bus_1_ifcs_1_noRouteRsp$D_IN, bus_1_ifcs_1_noRouteRsp$D_OUT;
  wire bus_1_ifcs_1_noRouteRsp$CLR,
       bus_1_ifcs_1_noRouteRsp$DEQ,
       bus_1_ifcs_1_noRouteRsp$EMPTY_N,
       bus_1_ifcs_1_noRouteRsp$ENQ,
       bus_1_ifcs_1_noRouteRsp$FULL_N;

  // ports of submodule bus_1_ifcs_1_routeBack
  wire [1 : 0] bus_1_ifcs_1_routeBack$D_IN, bus_1_ifcs_1_routeBack$D_OUT;
  wire bus_1_ifcs_1_routeBack$CLR,
       bus_1_ifcs_1_routeBack$DEQ,
       bus_1_ifcs_1_routeBack$EMPTY_N,
       bus_1_ifcs_1_routeBack$ENQ,
       bus_1_ifcs_1_routeBack$FULL_N;

  // ports of submodule bus_1_ifcs_1_rspBack
  wire [72 : 0] bus_1_ifcs_1_rspBack$D_IN, bus_1_ifcs_1_rspBack$D_OUT;
  wire bus_1_ifcs_1_rspBack$CLR,
       bus_1_ifcs_1_rspBack$DEQ,
       bus_1_ifcs_1_rspBack$EMPTY_N,
       bus_1_ifcs_1_rspBack$ENQ,
       bus_1_ifcs_1_rspBack$FULL_N;

  // ports of submodule bus_1_ifcs_2_routeBack
  wire [1 : 0] bus_1_ifcs_2_routeBack$D_IN, bus_1_ifcs_2_routeBack$D_OUT;
  wire bus_1_ifcs_2_routeBack$CLR,
       bus_1_ifcs_2_routeBack$DEQ,
       bus_1_ifcs_2_routeBack$EMPTY_N,
       bus_1_ifcs_2_routeBack$ENQ,
       bus_1_ifcs_2_routeBack$FULL_N;

  // ports of submodule bus_1_ifcs_2_rspBack
  wire [72 : 0] bus_1_ifcs_2_rspBack$D_IN, bus_1_ifcs_2_rspBack$D_OUT;
  wire bus_1_ifcs_2_rspBack$CLR,
       bus_1_ifcs_2_rspBack$DEQ,
       bus_1_ifcs_2_rspBack$EMPTY_N,
       bus_1_ifcs_2_rspBack$ENQ,
       bus_1_ifcs_2_rspBack$FULL_N;

  // ports of submodule bus_1_ifcs_3_routeBack
  wire [1 : 0] bus_1_ifcs_3_routeBack$D_IN, bus_1_ifcs_3_routeBack$D_OUT;
  wire bus_1_ifcs_3_routeBack$CLR,
       bus_1_ifcs_3_routeBack$DEQ,
       bus_1_ifcs_3_routeBack$EMPTY_N,
       bus_1_ifcs_3_routeBack$ENQ,
       bus_1_ifcs_3_routeBack$FULL_N;

  // ports of submodule bus_1_ifcs_3_rspBack
  wire [72 : 0] bus_1_ifcs_3_rspBack$D_IN, bus_1_ifcs_3_rspBack$D_OUT;
  wire bus_1_ifcs_3_rspBack$CLR,
       bus_1_ifcs_3_rspBack$DEQ,
       bus_1_ifcs_3_rspBack$EMPTY_N,
       bus_1_ifcs_3_rspBack$ENQ,
       bus_1_ifcs_3_rspBack$FULL_N;

  // ports of submodule bus_ifcs_0_innerReq
  wire [173 : 0] bus_ifcs_0_innerReq$D_IN, bus_ifcs_0_innerReq$D_OUT;
  wire bus_ifcs_0_innerReq$CLR,
       bus_ifcs_0_innerReq$DEQ,
       bus_ifcs_0_innerReq$EMPTY_N,
       bus_ifcs_0_innerReq$ENQ,
       bus_ifcs_0_innerReq$FULL_N;

  // ports of submodule bus_ifcs_0_innerRoute
  wire [3 : 0] bus_ifcs_0_innerRoute$D_IN, bus_ifcs_0_innerRoute$D_OUT;
  wire bus_ifcs_0_innerRoute$CLR,
       bus_ifcs_0_innerRoute$DEQ,
       bus_ifcs_0_innerRoute$EMPTY_N,
       bus_ifcs_0_innerRoute$ENQ,
       bus_ifcs_0_innerRoute$FULL_N;

  // ports of submodule bus_ifcs_0_noRouteRsp
  wire [7 : 0] bus_ifcs_0_noRouteRsp$D_IN, bus_ifcs_0_noRouteRsp$D_OUT;
  wire bus_ifcs_0_noRouteRsp$CLR,
       bus_ifcs_0_noRouteRsp$DEQ,
       bus_ifcs_0_noRouteRsp$EMPTY_N,
       bus_ifcs_0_noRouteRsp$ENQ,
       bus_ifcs_0_noRouteRsp$FULL_N;

  // ports of submodule bus_ifcs_0_routeBack
  wire [1 : 0] bus_ifcs_0_routeBack$D_IN, bus_ifcs_0_routeBack$D_OUT;
  wire bus_ifcs_0_routeBack$CLR,
       bus_ifcs_0_routeBack$DEQ,
       bus_ifcs_0_routeBack$EMPTY_N,
       bus_ifcs_0_routeBack$ENQ,
       bus_ifcs_0_routeBack$FULL_N;

  // ports of submodule bus_ifcs_0_rspBack
  wire [7 : 0] bus_ifcs_0_rspBack$D_IN, bus_ifcs_0_rspBack$D_OUT;
  wire bus_ifcs_0_rspBack$CLR,
       bus_ifcs_0_rspBack$DEQ,
       bus_ifcs_0_rspBack$EMPTY_N,
       bus_ifcs_0_rspBack$ENQ,
       bus_ifcs_0_rspBack$FULL_N;

  // ports of submodule bus_ifcs_1_innerReq
  wire [173 : 0] bus_ifcs_1_innerReq$D_IN, bus_ifcs_1_innerReq$D_OUT;
  wire bus_ifcs_1_innerReq$CLR,
       bus_ifcs_1_innerReq$DEQ,
       bus_ifcs_1_innerReq$EMPTY_N,
       bus_ifcs_1_innerReq$ENQ,
       bus_ifcs_1_innerReq$FULL_N;

  // ports of submodule bus_ifcs_1_innerRoute
  wire [3 : 0] bus_ifcs_1_innerRoute$D_IN, bus_ifcs_1_innerRoute$D_OUT;
  wire bus_ifcs_1_innerRoute$CLR,
       bus_ifcs_1_innerRoute$DEQ,
       bus_ifcs_1_innerRoute$EMPTY_N,
       bus_ifcs_1_innerRoute$ENQ,
       bus_ifcs_1_innerRoute$FULL_N;

  // ports of submodule bus_ifcs_1_noRouteRsp
  wire [7 : 0] bus_ifcs_1_noRouteRsp$D_IN, bus_ifcs_1_noRouteRsp$D_OUT;
  wire bus_ifcs_1_noRouteRsp$CLR,
       bus_ifcs_1_noRouteRsp$DEQ,
       bus_ifcs_1_noRouteRsp$EMPTY_N,
       bus_ifcs_1_noRouteRsp$ENQ,
       bus_ifcs_1_noRouteRsp$FULL_N;

  // ports of submodule bus_ifcs_1_routeBack
  wire [1 : 0] bus_ifcs_1_routeBack$D_IN, bus_ifcs_1_routeBack$D_OUT;
  wire bus_ifcs_1_routeBack$CLR,
       bus_ifcs_1_routeBack$DEQ,
       bus_ifcs_1_routeBack$EMPTY_N,
       bus_ifcs_1_routeBack$ENQ,
       bus_ifcs_1_routeBack$FULL_N;

  // ports of submodule bus_ifcs_1_rspBack
  wire [7 : 0] bus_ifcs_1_rspBack$D_IN, bus_ifcs_1_rspBack$D_OUT;
  wire bus_ifcs_1_rspBack$CLR,
       bus_ifcs_1_rspBack$DEQ,
       bus_ifcs_1_rspBack$EMPTY_N,
       bus_ifcs_1_rspBack$ENQ,
       bus_ifcs_1_rspBack$FULL_N;

  // ports of submodule bus_ifcs_2_routeBack
  wire [1 : 0] bus_ifcs_2_routeBack$D_IN, bus_ifcs_2_routeBack$D_OUT;
  wire bus_ifcs_2_routeBack$CLR,
       bus_ifcs_2_routeBack$DEQ,
       bus_ifcs_2_routeBack$EMPTY_N,
       bus_ifcs_2_routeBack$ENQ,
       bus_ifcs_2_routeBack$FULL_N;

  // ports of submodule bus_ifcs_2_rspBack
  wire [7 : 0] bus_ifcs_2_rspBack$D_IN, bus_ifcs_2_rspBack$D_OUT;
  wire bus_ifcs_2_rspBack$CLR,
       bus_ifcs_2_rspBack$DEQ,
       bus_ifcs_2_rspBack$EMPTY_N,
       bus_ifcs_2_rspBack$ENQ,
       bus_ifcs_2_rspBack$FULL_N;

  // ports of submodule bus_ifcs_3_routeBack
  wire [1 : 0] bus_ifcs_3_routeBack$D_IN, bus_ifcs_3_routeBack$D_OUT;
  wire bus_ifcs_3_routeBack$CLR,
       bus_ifcs_3_routeBack$DEQ,
       bus_ifcs_3_routeBack$EMPTY_N,
       bus_ifcs_3_routeBack$ENQ,
       bus_ifcs_3_routeBack$FULL_N;

  // ports of submodule bus_ifcs_3_rspBack
  wire [7 : 0] bus_ifcs_3_rspBack$D_IN, bus_ifcs_3_rspBack$D_OUT;
  wire bus_ifcs_3_rspBack$CLR,
       bus_ifcs_3_rspBack$DEQ,
       bus_ifcs_3_rspBack$EMPTY_N,
       bus_ifcs_3_rspBack$ENQ,
       bus_ifcs_3_rspBack$FULL_N;

  // ports of submodule bus_msNoSynth_0_b_buffer_ff
  wire [7 : 0] bus_msNoSynth_0_b_buffer_ff$D_IN,
	       bus_msNoSynth_0_b_buffer_ff$D_OUT;
  wire bus_msNoSynth_0_b_buffer_ff$CLR,
       bus_msNoSynth_0_b_buffer_ff$DEQ,
       bus_msNoSynth_0_b_buffer_ff$EMPTY_N,
       bus_msNoSynth_0_b_buffer_ff$ENQ,
       bus_msNoSynth_0_b_buffer_ff$FULL_N;

  // ports of submodule bus_msNoSynth_0_b_buffer_firstValid
  wire bus_msNoSynth_0_b_buffer_firstValid$D_IN,
       bus_msNoSynth_0_b_buffer_firstValid$EN,
       bus_msNoSynth_0_b_buffer_firstValid$Q_OUT;

  // ports of submodule bus_msNoSynth_0_r_buffer_ff
  wire [72 : 0] bus_msNoSynth_0_r_buffer_ff$D_IN,
		bus_msNoSynth_0_r_buffer_ff$D_OUT;
  wire bus_msNoSynth_0_r_buffer_ff$CLR,
       bus_msNoSynth_0_r_buffer_ff$DEQ,
       bus_msNoSynth_0_r_buffer_ff$EMPTY_N,
       bus_msNoSynth_0_r_buffer_ff$ENQ,
       bus_msNoSynth_0_r_buffer_ff$FULL_N;

  // ports of submodule bus_msNoSynth_0_r_buffer_firstValid
  wire bus_msNoSynth_0_r_buffer_firstValid$D_IN,
       bus_msNoSynth_0_r_buffer_firstValid$EN,
       bus_msNoSynth_0_r_buffer_firstValid$Q_OUT;

  // ports of submodule bus_msNoSynth_1_b_buffer_ff
  wire [7 : 0] bus_msNoSynth_1_b_buffer_ff$D_IN,
	       bus_msNoSynth_1_b_buffer_ff$D_OUT;
  wire bus_msNoSynth_1_b_buffer_ff$CLR,
       bus_msNoSynth_1_b_buffer_ff$DEQ,
       bus_msNoSynth_1_b_buffer_ff$EMPTY_N,
       bus_msNoSynth_1_b_buffer_ff$ENQ,
       bus_msNoSynth_1_b_buffer_ff$FULL_N;

  // ports of submodule bus_msNoSynth_1_b_buffer_firstValid
  wire bus_msNoSynth_1_b_buffer_firstValid$D_IN,
       bus_msNoSynth_1_b_buffer_firstValid$EN,
       bus_msNoSynth_1_b_buffer_firstValid$Q_OUT;

  // ports of submodule bus_msNoSynth_1_r_buffer_ff
  wire [72 : 0] bus_msNoSynth_1_r_buffer_ff$D_IN,
		bus_msNoSynth_1_r_buffer_ff$D_OUT;
  wire bus_msNoSynth_1_r_buffer_ff$CLR,
       bus_msNoSynth_1_r_buffer_ff$DEQ,
       bus_msNoSynth_1_r_buffer_ff$EMPTY_N,
       bus_msNoSynth_1_r_buffer_ff$ENQ,
       bus_msNoSynth_1_r_buffer_ff$FULL_N;

  // ports of submodule bus_msNoSynth_1_r_buffer_firstValid
  wire bus_msNoSynth_1_r_buffer_firstValid$D_IN,
       bus_msNoSynth_1_r_buffer_firstValid$EN,
       bus_msNoSynth_1_r_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_0_ar_buffer_ff
  wire [99 : 0] bus_ssNoSynth_0_ar_buffer_ff$D_IN,
		bus_ssNoSynth_0_ar_buffer_ff$D_OUT;
  wire bus_ssNoSynth_0_ar_buffer_ff$CLR,
       bus_ssNoSynth_0_ar_buffer_ff$DEQ,
       bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N,
       bus_ssNoSynth_0_ar_buffer_ff$ENQ,
       bus_ssNoSynth_0_ar_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_0_ar_buffer_firstValid
  wire bus_ssNoSynth_0_ar_buffer_firstValid$D_IN,
       bus_ssNoSynth_0_ar_buffer_firstValid$EN,
       bus_ssNoSynth_0_ar_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_0_aw_buffer_ff
  wire [99 : 0] bus_ssNoSynth_0_aw_buffer_ff$D_IN,
		bus_ssNoSynth_0_aw_buffer_ff$D_OUT;
  wire bus_ssNoSynth_0_aw_buffer_ff$CLR,
       bus_ssNoSynth_0_aw_buffer_ff$DEQ,
       bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N,
       bus_ssNoSynth_0_aw_buffer_ff$ENQ,
       bus_ssNoSynth_0_aw_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_0_aw_buffer_firstValid
  wire bus_ssNoSynth_0_aw_buffer_firstValid$D_IN,
       bus_ssNoSynth_0_aw_buffer_firstValid$EN,
       bus_ssNoSynth_0_aw_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_0_w_buffer_ff
  wire [72 : 0] bus_ssNoSynth_0_w_buffer_ff$D_IN,
		bus_ssNoSynth_0_w_buffer_ff$D_OUT;
  wire bus_ssNoSynth_0_w_buffer_ff$CLR,
       bus_ssNoSynth_0_w_buffer_ff$DEQ,
       bus_ssNoSynth_0_w_buffer_ff$EMPTY_N,
       bus_ssNoSynth_0_w_buffer_ff$ENQ,
       bus_ssNoSynth_0_w_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_0_w_buffer_firstValid
  wire bus_ssNoSynth_0_w_buffer_firstValid$D_IN,
       bus_ssNoSynth_0_w_buffer_firstValid$EN,
       bus_ssNoSynth_0_w_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_1_ar_buffer_ff
  wire [99 : 0] bus_ssNoSynth_1_ar_buffer_ff$D_IN,
		bus_ssNoSynth_1_ar_buffer_ff$D_OUT;
  wire bus_ssNoSynth_1_ar_buffer_ff$CLR,
       bus_ssNoSynth_1_ar_buffer_ff$DEQ,
       bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N,
       bus_ssNoSynth_1_ar_buffer_ff$ENQ,
       bus_ssNoSynth_1_ar_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_1_ar_buffer_firstValid
  wire bus_ssNoSynth_1_ar_buffer_firstValid$D_IN,
       bus_ssNoSynth_1_ar_buffer_firstValid$EN,
       bus_ssNoSynth_1_ar_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_1_aw_buffer_ff
  wire [99 : 0] bus_ssNoSynth_1_aw_buffer_ff$D_IN,
		bus_ssNoSynth_1_aw_buffer_ff$D_OUT;
  wire bus_ssNoSynth_1_aw_buffer_ff$CLR,
       bus_ssNoSynth_1_aw_buffer_ff$DEQ,
       bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N,
       bus_ssNoSynth_1_aw_buffer_ff$ENQ,
       bus_ssNoSynth_1_aw_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_1_aw_buffer_firstValid
  wire bus_ssNoSynth_1_aw_buffer_firstValid$D_IN,
       bus_ssNoSynth_1_aw_buffer_firstValid$EN,
       bus_ssNoSynth_1_aw_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_1_w_buffer_ff
  wire [72 : 0] bus_ssNoSynth_1_w_buffer_ff$D_IN,
		bus_ssNoSynth_1_w_buffer_ff$D_OUT;
  wire bus_ssNoSynth_1_w_buffer_ff$CLR,
       bus_ssNoSynth_1_w_buffer_ff$DEQ,
       bus_ssNoSynth_1_w_buffer_ff$EMPTY_N,
       bus_ssNoSynth_1_w_buffer_ff$ENQ,
       bus_ssNoSynth_1_w_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_1_w_buffer_firstValid
  wire bus_ssNoSynth_1_w_buffer_firstValid$D_IN,
       bus_ssNoSynth_1_w_buffer_firstValid$EN,
       bus_ssNoSynth_1_w_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_2_ar_buffer_ff
  wire [99 : 0] bus_ssNoSynth_2_ar_buffer_ff$D_IN,
		bus_ssNoSynth_2_ar_buffer_ff$D_OUT;
  wire bus_ssNoSynth_2_ar_buffer_ff$CLR,
       bus_ssNoSynth_2_ar_buffer_ff$DEQ,
       bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N,
       bus_ssNoSynth_2_ar_buffer_ff$ENQ,
       bus_ssNoSynth_2_ar_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_2_ar_buffer_firstValid
  wire bus_ssNoSynth_2_ar_buffer_firstValid$D_IN,
       bus_ssNoSynth_2_ar_buffer_firstValid$EN,
       bus_ssNoSynth_2_ar_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_2_aw_buffer_ff
  wire [99 : 0] bus_ssNoSynth_2_aw_buffer_ff$D_IN,
		bus_ssNoSynth_2_aw_buffer_ff$D_OUT;
  wire bus_ssNoSynth_2_aw_buffer_ff$CLR,
       bus_ssNoSynth_2_aw_buffer_ff$DEQ,
       bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N,
       bus_ssNoSynth_2_aw_buffer_ff$ENQ,
       bus_ssNoSynth_2_aw_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_2_aw_buffer_firstValid
  wire bus_ssNoSynth_2_aw_buffer_firstValid$D_IN,
       bus_ssNoSynth_2_aw_buffer_firstValid$EN,
       bus_ssNoSynth_2_aw_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_2_w_buffer_ff
  wire [72 : 0] bus_ssNoSynth_2_w_buffer_ff$D_IN,
		bus_ssNoSynth_2_w_buffer_ff$D_OUT;
  wire bus_ssNoSynth_2_w_buffer_ff$CLR,
       bus_ssNoSynth_2_w_buffer_ff$DEQ,
       bus_ssNoSynth_2_w_buffer_ff$EMPTY_N,
       bus_ssNoSynth_2_w_buffer_ff$ENQ,
       bus_ssNoSynth_2_w_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_2_w_buffer_firstValid
  wire bus_ssNoSynth_2_w_buffer_firstValid$D_IN,
       bus_ssNoSynth_2_w_buffer_firstValid$EN,
       bus_ssNoSynth_2_w_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_3_ar_buffer_ff
  wire [99 : 0] bus_ssNoSynth_3_ar_buffer_ff$D_IN,
		bus_ssNoSynth_3_ar_buffer_ff$D_OUT;
  wire bus_ssNoSynth_3_ar_buffer_ff$CLR,
       bus_ssNoSynth_3_ar_buffer_ff$DEQ,
       bus_ssNoSynth_3_ar_buffer_ff$EMPTY_N,
       bus_ssNoSynth_3_ar_buffer_ff$ENQ,
       bus_ssNoSynth_3_ar_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_3_ar_buffer_firstValid
  wire bus_ssNoSynth_3_ar_buffer_firstValid$D_IN,
       bus_ssNoSynth_3_ar_buffer_firstValid$EN,
       bus_ssNoSynth_3_ar_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_3_aw_buffer_ff
  wire [99 : 0] bus_ssNoSynth_3_aw_buffer_ff$D_IN,
		bus_ssNoSynth_3_aw_buffer_ff$D_OUT;
  wire bus_ssNoSynth_3_aw_buffer_ff$CLR,
       bus_ssNoSynth_3_aw_buffer_ff$DEQ,
       bus_ssNoSynth_3_aw_buffer_ff$EMPTY_N,
       bus_ssNoSynth_3_aw_buffer_ff$ENQ,
       bus_ssNoSynth_3_aw_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_3_aw_buffer_firstValid
  wire bus_ssNoSynth_3_aw_buffer_firstValid$D_IN,
       bus_ssNoSynth_3_aw_buffer_firstValid$EN,
       bus_ssNoSynth_3_aw_buffer_firstValid$Q_OUT;

  // ports of submodule bus_ssNoSynth_3_w_buffer_ff
  wire [72 : 0] bus_ssNoSynth_3_w_buffer_ff$D_IN,
		bus_ssNoSynth_3_w_buffer_ff$D_OUT;
  wire bus_ssNoSynth_3_w_buffer_ff$CLR,
       bus_ssNoSynth_3_w_buffer_ff$DEQ,
       bus_ssNoSynth_3_w_buffer_ff$EMPTY_N,
       bus_ssNoSynth_3_w_buffer_ff$ENQ,
       bus_ssNoSynth_3_w_buffer_ff$FULL_N;

  // ports of submodule bus_ssNoSynth_3_w_buffer_firstValid
  wire bus_ssNoSynth_3_w_buffer_firstValid$D_IN,
       bus_ssNoSynth_3_w_buffer_firstValid$EN,
       bus_ssNoSynth_3_w_buffer_firstValid$Q_OUT;

  // ports of submodule core
  wire [63 : 0] core$cpu_dmem_master_araddr,
		core$cpu_dmem_master_awaddr,
		core$cpu_dmem_master_rdata,
		core$cpu_dmem_master_wdata,
		core$cpu_imem_master_araddr,
		core$cpu_imem_master_awaddr,
		core$cpu_imem_master_rdata,
		core$cpu_imem_master_wdata,
		core$set_verbosity_logdelay;
  wire [7 : 0] core$cpu_dmem_master_arlen,
	       core$cpu_dmem_master_awlen,
	       core$cpu_dmem_master_wstrb,
	       core$cpu_imem_master_arlen,
	       core$cpu_imem_master_awlen,
	       core$cpu_imem_master_wstrb;
  wire [5 : 0] core$cpu_dmem_master_arid,
	       core$cpu_dmem_master_awid,
	       core$cpu_dmem_master_bid,
	       core$cpu_dmem_master_rid,
	       core$cpu_imem_master_arid,
	       core$cpu_imem_master_awid,
	       core$cpu_imem_master_bid,
	       core$cpu_imem_master_rid;
  wire [3 : 0] core$cpu_dmem_master_arcache,
	       core$cpu_dmem_master_arqos,
	       core$cpu_dmem_master_arregion,
	       core$cpu_dmem_master_awcache,
	       core$cpu_dmem_master_awqos,
	       core$cpu_dmem_master_awregion,
	       core$cpu_imem_master_arcache,
	       core$cpu_imem_master_arqos,
	       core$cpu_imem_master_arregion,
	       core$cpu_imem_master_awcache,
	       core$cpu_imem_master_awqos,
	       core$cpu_imem_master_awregion,
	       core$set_verbosity_verbosity;
  wire [2 : 0] core$cpu_dmem_master_arprot,
	       core$cpu_dmem_master_arsize,
	       core$cpu_dmem_master_awprot,
	       core$cpu_dmem_master_awsize,
	       core$cpu_imem_master_arprot,
	       core$cpu_imem_master_arsize,
	       core$cpu_imem_master_awprot,
	       core$cpu_imem_master_awsize;
  wire [1 : 0] core$cpu_dmem_master_arburst,
	       core$cpu_dmem_master_awburst,
	       core$cpu_dmem_master_bresp,
	       core$cpu_dmem_master_rresp,
	       core$cpu_imem_master_arburst,
	       core$cpu_imem_master_awburst,
	       core$cpu_imem_master_bresp,
	       core$cpu_imem_master_rresp;
  wire core$EN_cpu_reset_server_request_put,
       core$EN_cpu_reset_server_response_get,
       core$EN_set_verbosity,
       core$RDY_cpu_reset_server_request_put,
       core$RDY_cpu_reset_server_response_get,
       core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,
       core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,
       core$cpu_dmem_master_arlock,
       core$cpu_dmem_master_arready,
       core$cpu_dmem_master_arvalid,
       core$cpu_dmem_master_awlock,
       core$cpu_dmem_master_awready,
       core$cpu_dmem_master_awvalid,
       core$cpu_dmem_master_bready,
       core$cpu_dmem_master_bvalid,
       core$cpu_dmem_master_rlast,
       core$cpu_dmem_master_rready,
       core$cpu_dmem_master_rvalid,
       core$cpu_dmem_master_wlast,
       core$cpu_dmem_master_wready,
       core$cpu_dmem_master_wvalid,
       core$cpu_imem_master_arlock,
       core$cpu_imem_master_arready,
       core$cpu_imem_master_arvalid,
       core$cpu_imem_master_awlock,
       core$cpu_imem_master_awready,
       core$cpu_imem_master_awvalid,
       core$cpu_imem_master_bready,
       core$cpu_imem_master_bvalid,
       core$cpu_imem_master_rlast,
       core$cpu_imem_master_rready,
       core$cpu_imem_master_rvalid,
       core$cpu_imem_master_wlast,
       core$cpu_imem_master_wready,
       core$cpu_imem_master_wvalid,
       core$cpu_reset_server_request_put,
       core$nmi_req_set_not_clear;

  // ports of submodule mem0_controller
  wire [511 : 0] mem0_controller$to_ddr4_rdata, mem0_controller$to_ddr4_wdata;
  wire [63 : 0] mem0_controller$ma_set_addr_map_addr_base,
		mem0_controller$ma_set_addr_map_addr_lim,
		mem0_controller$ma_set_watch_tohost_tohost_addr,
		mem0_controller$slave_araddr,
		mem0_controller$slave_awaddr,
		mem0_controller$slave_rdata,
		mem0_controller$slave_wdata,
		mem0_controller$to_ddr4_araddr,
		mem0_controller$to_ddr4_awaddr,
		mem0_controller$to_ddr4_wstrb;
  wire [14 : 0] mem0_controller$slave_arid,
		mem0_controller$slave_awid,
		mem0_controller$slave_bid,
		mem0_controller$slave_rid,
		mem0_controller$to_ddr4_arid,
		mem0_controller$to_ddr4_awid,
		mem0_controller$to_ddr4_bid,
		mem0_controller$to_ddr4_rid;
  wire [7 : 0] mem0_controller$mv_status,
	       mem0_controller$slave_arlen,
	       mem0_controller$slave_awlen,
	       mem0_controller$slave_wstrb,
	       mem0_controller$to_ddr4_arlen,
	       mem0_controller$to_ddr4_awlen;
  wire [3 : 0] mem0_controller$slave_arcache,
	       mem0_controller$slave_arqos,
	       mem0_controller$slave_arregion,
	       mem0_controller$slave_awcache,
	       mem0_controller$slave_awqos,
	       mem0_controller$slave_awregion,
	       mem0_controller$to_ddr4_arcache,
	       mem0_controller$to_ddr4_arqos,
	       mem0_controller$to_ddr4_arregion,
	       mem0_controller$to_ddr4_awcache,
	       mem0_controller$to_ddr4_awqos,
	       mem0_controller$to_ddr4_awregion;
  wire [2 : 0] mem0_controller$slave_arprot,
	       mem0_controller$slave_arsize,
	       mem0_controller$slave_awprot,
	       mem0_controller$slave_awsize,
	       mem0_controller$to_ddr4_arprot,
	       mem0_controller$to_ddr4_arsize,
	       mem0_controller$to_ddr4_awprot,
	       mem0_controller$to_ddr4_awsize;
  wire [1 : 0] mem0_controller$slave_arburst,
	       mem0_controller$slave_awburst,
	       mem0_controller$slave_bresp,
	       mem0_controller$slave_rresp,
	       mem0_controller$to_ddr4_arburst,
	       mem0_controller$to_ddr4_awburst,
	       mem0_controller$to_ddr4_bresp,
	       mem0_controller$to_ddr4_rresp;
  wire mem0_controller$EN_ma_ddr4_ready,
       mem0_controller$EN_ma_set_addr_map,
       mem0_controller$EN_ma_set_watch_tohost,
       mem0_controller$RDY_ma_ddr4_ready,
       mem0_controller$RDY_ma_set_addr_map,
       mem0_controller$RDY_ma_set_watch_tohost,
       mem0_controller$ma_set_watch_tohost_watch_tohost,
       mem0_controller$slave_arlock,
       mem0_controller$slave_arready,
       mem0_controller$slave_arvalid,
       mem0_controller$slave_awlock,
       mem0_controller$slave_awready,
       mem0_controller$slave_awvalid,
       mem0_controller$slave_bready,
       mem0_controller$slave_bvalid,
       mem0_controller$slave_rlast,
       mem0_controller$slave_rready,
       mem0_controller$slave_rvalid,
       mem0_controller$slave_wlast,
       mem0_controller$slave_wready,
       mem0_controller$slave_wvalid,
       mem0_controller$to_ddr4_arlock,
       mem0_controller$to_ddr4_arready,
       mem0_controller$to_ddr4_arvalid,
       mem0_controller$to_ddr4_awlock,
       mem0_controller$to_ddr4_awready,
       mem0_controller$to_ddr4_awvalid,
       mem0_controller$to_ddr4_bready,
       mem0_controller$to_ddr4_bvalid,
       mem0_controller$to_ddr4_rlast,
       mem0_controller$to_ddr4_rready,
       mem0_controller$to_ddr4_rvalid,
       mem0_controller$to_ddr4_wlast,
       mem0_controller$to_ddr4_wready,
       mem0_controller$to_ddr4_wvalid;

  // ports of submodule mem0_controller_axi4_deburster_countWriteRspFF
  wire [7 : 0] mem0_controller_axi4_deburster_countWriteRspFF$D_IN,
	       mem0_controller_axi4_deburster_countWriteRspFF$D_OUT;
  wire mem0_controller_axi4_deburster_countWriteRspFF$CLR,
       mem0_controller_axi4_deburster_countWriteRspFF$DEQ,
       mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N,
       mem0_controller_axi4_deburster_countWriteRspFF$ENQ,
       mem0_controller_axi4_deburster_countWriteRspFF$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_arff
  wire [99 : 0] mem0_controller_axi4_deburster_inShim_arff$D_IN,
		mem0_controller_axi4_deburster_inShim_arff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_arff$CLR,
       mem0_controller_axi4_deburster_inShim_arff$DEQ,
       mem0_controller_axi4_deburster_inShim_arff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_arff$ENQ,
       mem0_controller_axi4_deburster_inShim_arff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_awff
  wire [99 : 0] mem0_controller_axi4_deburster_inShim_awff$D_IN,
		mem0_controller_axi4_deburster_inShim_awff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_awff$CLR,
       mem0_controller_axi4_deburster_inShim_awff$DEQ,
       mem0_controller_axi4_deburster_inShim_awff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_awff$ENQ,
       mem0_controller_axi4_deburster_inShim_awff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_bff
  wire [8 : 0] mem0_controller_axi4_deburster_inShim_bff$D_IN,
	       mem0_controller_axi4_deburster_inShim_bff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_bff$CLR,
       mem0_controller_axi4_deburster_inShim_bff$DEQ,
       mem0_controller_axi4_deburster_inShim_bff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_bff$ENQ,
       mem0_controller_axi4_deburster_inShim_bff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_rff
  wire [73 : 0] mem0_controller_axi4_deburster_inShim_rff$D_IN,
		mem0_controller_axi4_deburster_inShim_rff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_rff$CLR,
       mem0_controller_axi4_deburster_inShim_rff$DEQ,
       mem0_controller_axi4_deburster_inShim_rff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_rff$ENQ,
       mem0_controller_axi4_deburster_inShim_rff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_inShim_wff
  wire [72 : 0] mem0_controller_axi4_deburster_inShim_wff$D_IN,
		mem0_controller_axi4_deburster_inShim_wff$D_OUT;
  wire mem0_controller_axi4_deburster_inShim_wff$CLR,
       mem0_controller_axi4_deburster_inShim_wff$DEQ,
       mem0_controller_axi4_deburster_inShim_wff$EMPTY_N,
       mem0_controller_axi4_deburster_inShim_wff$ENQ,
       mem0_controller_axi4_deburster_inShim_wff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_lastReadRspFF
  wire mem0_controller_axi4_deburster_lastReadRspFF$CLR,
       mem0_controller_axi4_deburster_lastReadRspFF$DEQ,
       mem0_controller_axi4_deburster_lastReadRspFF$D_IN,
       mem0_controller_axi4_deburster_lastReadRspFF$D_OUT,
       mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N,
       mem0_controller_axi4_deburster_lastReadRspFF$ENQ,
       mem0_controller_axi4_deburster_lastReadRspFF$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_arff
  wire [99 : 0] mem0_controller_axi4_deburster_outShim_arff$D_IN,
		mem0_controller_axi4_deburster_outShim_arff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_arff$CLR,
       mem0_controller_axi4_deburster_outShim_arff$DEQ,
       mem0_controller_axi4_deburster_outShim_arff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_arff$ENQ,
       mem0_controller_axi4_deburster_outShim_arff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_awff
  wire [99 : 0] mem0_controller_axi4_deburster_outShim_awff$D_IN,
		mem0_controller_axi4_deburster_outShim_awff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_awff$CLR,
       mem0_controller_axi4_deburster_outShim_awff$DEQ,
       mem0_controller_axi4_deburster_outShim_awff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_awff$ENQ,
       mem0_controller_axi4_deburster_outShim_awff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_bff
  wire [8 : 0] mem0_controller_axi4_deburster_outShim_bff$D_IN,
	       mem0_controller_axi4_deburster_outShim_bff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_bff$CLR,
       mem0_controller_axi4_deburster_outShim_bff$DEQ,
       mem0_controller_axi4_deburster_outShim_bff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_bff$ENQ,
       mem0_controller_axi4_deburster_outShim_bff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_rff
  wire [73 : 0] mem0_controller_axi4_deburster_outShim_rff$D_IN,
		mem0_controller_axi4_deburster_outShim_rff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_rff$CLR,
       mem0_controller_axi4_deburster_outShim_rff$DEQ,
       mem0_controller_axi4_deburster_outShim_rff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_rff$ENQ,
       mem0_controller_axi4_deburster_outShim_rff$FULL_N;

  // ports of submodule mem0_controller_axi4_deburster_outShim_wff
  wire [72 : 0] mem0_controller_axi4_deburster_outShim_wff$D_IN,
		mem0_controller_axi4_deburster_outShim_wff$D_OUT;
  wire mem0_controller_axi4_deburster_outShim_wff$CLR,
       mem0_controller_axi4_deburster_outShim_wff$DEQ,
       mem0_controller_axi4_deburster_outShim_wff$EMPTY_N,
       mem0_controller_axi4_deburster_outShim_wff$ENQ,
       mem0_controller_axi4_deburster_outShim_wff$FULL_N;

  // ports of submodule mem_ar_buffer_ff
  wire [107 : 0] mem_ar_buffer_ff$D_IN, mem_ar_buffer_ff$D_OUT;
  wire mem_ar_buffer_ff$CLR,
       mem_ar_buffer_ff$DEQ,
       mem_ar_buffer_ff$EMPTY_N,
       mem_ar_buffer_ff$ENQ,
       mem_ar_buffer_ff$FULL_N;

  // ports of submodule mem_ar_buffer_firstValid
  wire mem_ar_buffer_firstValid$D_IN,
       mem_ar_buffer_firstValid$EN,
       mem_ar_buffer_firstValid$Q_OUT;

  // ports of submodule mem_aw_buffer_ff
  wire [107 : 0] mem_aw_buffer_ff$D_IN, mem_aw_buffer_ff$D_OUT;
  wire mem_aw_buffer_ff$CLR,
       mem_aw_buffer_ff$DEQ,
       mem_aw_buffer_ff$EMPTY_N,
       mem_aw_buffer_ff$ENQ,
       mem_aw_buffer_ff$FULL_N;

  // ports of submodule mem_aw_buffer_firstValid
  wire mem_aw_buffer_firstValid$D_IN,
       mem_aw_buffer_firstValid$EN,
       mem_aw_buffer_firstValid$Q_OUT;

  // ports of submodule mem_w_buffer_ff
  wire [72 : 0] mem_w_buffer_ff$D_IN, mem_w_buffer_ff$D_OUT;
  wire mem_w_buffer_ff$CLR,
       mem_w_buffer_ff$DEQ,
       mem_w_buffer_ff$EMPTY_N,
       mem_w_buffer_ff$ENQ,
       mem_w_buffer_ff$FULL_N;

  // ports of submodule mem_w_buffer_firstValid
  wire mem_w_buffer_firstValid$D_IN,
       mem_w_buffer_firstValid$EN,
       mem_w_buffer_firstValid$Q_OUT;

  // ports of submodule soc_map
  wire [127 : 0] soc_map$m_boot_rom_addr_range,
		 soc_map$m_host_access_addr_range,
		 soc_map$m_mem0_controller_addr_range,
		 soc_map$m_uart16550_0_addr_range;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // ports of submodule uart0
  wire [63 : 0] uart0$set_addr_map_addr_base,
		uart0$set_addr_map_addr_lim,
		uart0$slave_araddr,
		uart0$slave_awaddr,
		uart0$slave_rdata,
		uart0$slave_wdata;
  wire [7 : 0] uart0$get_to_console_get,
	       uart0$put_from_console_put,
	       uart0$slave_arlen,
	       uart0$slave_awlen,
	       uart0$slave_wstrb;
  wire [6 : 0] uart0$slave_arid,
	       uart0$slave_awid,
	       uart0$slave_bid,
	       uart0$slave_rid;
  wire [3 : 0] uart0$slave_arcache,
	       uart0$slave_arqos,
	       uart0$slave_arregion,
	       uart0$slave_awcache,
	       uart0$slave_awqos,
	       uart0$slave_awregion;
  wire [2 : 0] uart0$slave_arprot,
	       uart0$slave_arsize,
	       uart0$slave_awprot,
	       uart0$slave_awsize;
  wire [1 : 0] uart0$slave_arburst,
	       uart0$slave_awburst,
	       uart0$slave_bresp,
	       uart0$slave_rresp;
  wire uart0$EN_get_to_console_get,
       uart0$EN_put_from_console_put,
       uart0$EN_server_reset_request_put,
       uart0$EN_server_reset_response_get,
       uart0$EN_set_addr_map,
       uart0$RDY_get_to_console_get,
       uart0$RDY_put_from_console_put,
       uart0$RDY_server_reset_request_put,
       uart0$RDY_server_reset_response_get,
       uart0$intr,
       uart0$slave_arlock,
       uart0$slave_arready,
       uart0$slave_arvalid,
       uart0$slave_awlock,
       uart0$slave_awready,
       uart0$slave_awvalid,
       uart0$slave_bready,
       uart0$slave_bvalid,
       uart0$slave_rlast,
       uart0$slave_rready,
       uart0$slave_rvalid,
       uart0$slave_wlast,
       uart0$slave_wready,
       uart0$slave_wuser,
       uart0$slave_wvalid;

  // ports of submodule uart0_slave_ar_buffer_ff
  wire [99 : 0] uart0_slave_ar_buffer_ff$D_IN, uart0_slave_ar_buffer_ff$D_OUT;
  wire uart0_slave_ar_buffer_ff$CLR,
       uart0_slave_ar_buffer_ff$DEQ,
       uart0_slave_ar_buffer_ff$EMPTY_N,
       uart0_slave_ar_buffer_ff$ENQ,
       uart0_slave_ar_buffer_ff$FULL_N;

  // ports of submodule uart0_slave_ar_buffer_firstValid
  wire uart0_slave_ar_buffer_firstValid$D_IN,
       uart0_slave_ar_buffer_firstValid$EN,
       uart0_slave_ar_buffer_firstValid$Q_OUT;

  // ports of submodule uart0_slave_aw_buffer_ff
  wire [99 : 0] uart0_slave_aw_buffer_ff$D_IN, uart0_slave_aw_buffer_ff$D_OUT;
  wire uart0_slave_aw_buffer_ff$CLR,
       uart0_slave_aw_buffer_ff$DEQ,
       uart0_slave_aw_buffer_ff$EMPTY_N,
       uart0_slave_aw_buffer_ff$ENQ,
       uart0_slave_aw_buffer_ff$FULL_N;

  // ports of submodule uart0_slave_aw_buffer_firstValid
  wire uart0_slave_aw_buffer_firstValid$D_IN,
       uart0_slave_aw_buffer_firstValid$EN,
       uart0_slave_aw_buffer_firstValid$Q_OUT;

  // ports of submodule uart0_slave_w_buffer_ff
  wire [73 : 0] uart0_slave_w_buffer_ff$D_IN, uart0_slave_w_buffer_ff$D_OUT;
  wire uart0_slave_w_buffer_ff$CLR,
       uart0_slave_w_buffer_ff$DEQ,
       uart0_slave_w_buffer_ff$EMPTY_N,
       uart0_slave_w_buffer_ff$ENQ,
       uart0_slave_w_buffer_ff$FULL_N;

  // ports of submodule uart0_slave_w_buffer_firstValid
  wire uart0_slave_w_buffer_firstValid$D_IN,
       uart0_slave_w_buffer_firstValid$EN,
       uart0_slave_w_buffer_firstValid$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_aws_host_access_slave_ar_buffer_dequeue,
       CAN_FIRE_RL_aws_host_access_slave_ar_buffer_enqueue,
       CAN_FIRE_RL_aws_host_access_slave_ar_dropFlit,
       CAN_FIRE_RL_aws_host_access_slave_ar_forwardFlit,
       CAN_FIRE_RL_aws_host_access_slave_aw_buffer_dequeue,
       CAN_FIRE_RL_aws_host_access_slave_aw_buffer_enqueue,
       CAN_FIRE_RL_aws_host_access_slave_aw_dropFlit,
       CAN_FIRE_RL_aws_host_access_slave_aw_forwardFlit,
       CAN_FIRE_RL_aws_host_access_slave_b_forwardReady,
       CAN_FIRE_RL_aws_host_access_slave_r_forwardReady,
       CAN_FIRE_RL_aws_host_access_slave_w_buffer_dequeue,
       CAN_FIRE_RL_aws_host_access_slave_w_buffer_enqueue,
       CAN_FIRE_RL_aws_host_access_slave_w_dropFlit,
       CAN_FIRE_RL_aws_host_access_slave_w_forwardFlit,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp,
       CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req,
       CAN_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR,
       CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW,
       CAN_FIRE_RL_br_ar_buffer_dequeue,
       CAN_FIRE_RL_br_ar_buffer_enqueue,
       CAN_FIRE_RL_br_ar_dropFlit,
       CAN_FIRE_RL_br_ar_forwardFlit,
       CAN_FIRE_RL_br_aw_buffer_dequeue,
       CAN_FIRE_RL_br_aw_buffer_enqueue,
       CAN_FIRE_RL_br_aw_dropFlit,
       CAN_FIRE_RL_br_aw_forwardFlit,
       CAN_FIRE_RL_br_b_forwardReady,
       CAN_FIRE_RL_br_r_forwardReady,
       CAN_FIRE_RL_br_w_buffer_dequeue,
       CAN_FIRE_RL_br_w_buffer_enqueue,
       CAN_FIRE_RL_br_w_dropFlit,
       CAN_FIRE_RL_br_w_forwardFlit,
       CAN_FIRE_RL_bus_1_1_arbitrate,
       CAN_FIRE_RL_bus_1_1_burst,
       CAN_FIRE_RL_bus_1_1_burst_1,
       CAN_FIRE_RL_bus_1_1_burst_2,
       CAN_FIRE_RL_bus_1_1_burst_3,
       CAN_FIRE_RL_bus_1_1_checkSinkReady,
       CAN_FIRE_RL_bus_1_1_checkSinkReady_1,
       CAN_FIRE_RL_bus_1_1_craftReq,
       CAN_FIRE_RL_bus_1_1_craftReq_1,
       CAN_FIRE_RL_bus_1_1_craftReq_2,
       CAN_FIRE_RL_bus_1_1_craftReq_3,
       CAN_FIRE_RL_bus_1_1_sink_selected,
       CAN_FIRE_RL_bus_1_1_sink_selected_1,
       CAN_FIRE_RL_bus_1_1_source_selected,
       CAN_FIRE_RL_bus_1_1_source_selected_1,
       CAN_FIRE_RL_bus_1_1_source_selected_2,
       CAN_FIRE_RL_bus_1_1_source_selected_3,
       CAN_FIRE_RL_bus_1_arbitrate,
       CAN_FIRE_RL_bus_1_arbitrate_1,
       CAN_FIRE_RL_bus_1_burst,
       CAN_FIRE_RL_bus_1_burst_1,
       CAN_FIRE_RL_bus_1_burst_2,
       CAN_FIRE_RL_bus_1_burst_3,
       CAN_FIRE_RL_bus_1_burst_4,
       CAN_FIRE_RL_bus_1_burst_5,
       CAN_FIRE_RL_bus_1_checkSinkReady,
       CAN_FIRE_RL_bus_1_checkSinkReady_1,
       CAN_FIRE_RL_bus_1_checkSinkReady_2,
       CAN_FIRE_RL_bus_1_checkSinkReady_3,
       CAN_FIRE_RL_bus_1_checkSinkReady_4,
       CAN_FIRE_RL_bus_1_checkSinkReady_5,
       CAN_FIRE_RL_bus_1_craftReq,
       CAN_FIRE_RL_bus_1_craftReq_1,
       CAN_FIRE_RL_bus_1_craftReq_2,
       CAN_FIRE_RL_bus_1_craftReq_3,
       CAN_FIRE_RL_bus_1_craftReq_4,
       CAN_FIRE_RL_bus_1_craftReq_5,
       CAN_FIRE_RL_bus_1_ifcs_0_drainFlits,
       CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse,
       CAN_FIRE_RL_bus_1_ifcs_0_firstFlit,
       CAN_FIRE_RL_bus_1_ifcs_0_firstFlit_1,
       CAN_FIRE_RL_bus_1_ifcs_0_followFlits,
       CAN_FIRE_RL_bus_1_ifcs_0_followFlits_1,
       CAN_FIRE_RL_bus_1_ifcs_0_forwardRsp,
       CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit,
       CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp,
       CAN_FIRE_RL_bus_1_ifcs_1_drainFlits,
       CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse,
       CAN_FIRE_RL_bus_1_ifcs_1_firstFlit,
       CAN_FIRE_RL_bus_1_ifcs_1_firstFlit_1,
       CAN_FIRE_RL_bus_1_ifcs_1_followFlits,
       CAN_FIRE_RL_bus_1_ifcs_1_followFlits_1,
       CAN_FIRE_RL_bus_1_ifcs_1_forwardRsp,
       CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit,
       CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp,
       CAN_FIRE_RL_bus_1_ifcs_2_firstFlit,
       CAN_FIRE_RL_bus_1_ifcs_2_followFlits,
       CAN_FIRE_RL_bus_1_ifcs_3_firstFlit,
       CAN_FIRE_RL_bus_1_ifcs_3_followFlits,
       CAN_FIRE_RL_bus_1_sink_selected,
       CAN_FIRE_RL_bus_1_sink_selected_1,
       CAN_FIRE_RL_bus_1_sink_selected_2,
       CAN_FIRE_RL_bus_1_sink_selected_3,
       CAN_FIRE_RL_bus_1_sink_selected_4,
       CAN_FIRE_RL_bus_1_sink_selected_5,
       CAN_FIRE_RL_bus_1_source_selected,
       CAN_FIRE_RL_bus_1_source_selected_1,
       CAN_FIRE_RL_bus_1_source_selected_2,
       CAN_FIRE_RL_bus_1_source_selected_3,
       CAN_FIRE_RL_bus_1_source_selected_4,
       CAN_FIRE_RL_bus_1_source_selected_5,
       CAN_FIRE_RL_bus_arbitrate,
       CAN_FIRE_RL_bus_burst,
       CAN_FIRE_RL_bus_burst_1,
       CAN_FIRE_RL_bus_checkSinkReady,
       CAN_FIRE_RL_bus_checkSinkReady_1,
       CAN_FIRE_RL_bus_checkSinkReady_2,
       CAN_FIRE_RL_bus_checkSinkReady_3,
       CAN_FIRE_RL_bus_craftReq,
       CAN_FIRE_RL_bus_craftReq_1,
       CAN_FIRE_RL_bus_ifcs_0_drainFlits,
       CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse,
       CAN_FIRE_RL_bus_ifcs_0_firstFlit,
       CAN_FIRE_RL_bus_ifcs_0_firstFlit_1,
       CAN_FIRE_RL_bus_ifcs_0_followFlits,
       CAN_FIRE_RL_bus_ifcs_0_followFlits_1,
       CAN_FIRE_RL_bus_ifcs_0_forwardRsp,
       CAN_FIRE_RL_bus_ifcs_0_nonRoutableFlit,
       CAN_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp,
       CAN_FIRE_RL_bus_ifcs_1_drainFlits,
       CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse,
       CAN_FIRE_RL_bus_ifcs_1_firstFlit,
       CAN_FIRE_RL_bus_ifcs_1_firstFlit_1,
       CAN_FIRE_RL_bus_ifcs_1_followFlits,
       CAN_FIRE_RL_bus_ifcs_1_followFlits_1,
       CAN_FIRE_RL_bus_ifcs_1_forwardRsp,
       CAN_FIRE_RL_bus_ifcs_1_nonRoutableFlit,
       CAN_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp,
       CAN_FIRE_RL_bus_ifcs_2_firstFlit,
       CAN_FIRE_RL_bus_ifcs_2_followFlits,
       CAN_FIRE_RL_bus_ifcs_3_firstFlit,
       CAN_FIRE_RL_bus_ifcs_3_followFlits,
       CAN_FIRE_RL_bus_merged_0_genFirst,
       CAN_FIRE_RL_bus_merged_0_genOther,
       CAN_FIRE_RL_bus_merged_1_genFirst,
       CAN_FIRE_RL_bus_merged_1_genOther,
       CAN_FIRE_RL_bus_msNoSynth_0_ar_forwardReady,
       CAN_FIRE_RL_bus_msNoSynth_0_aw_forwardReady,
       CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue,
       CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue,
       CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit,
       CAN_FIRE_RL_bus_msNoSynth_0_b_forwardFlit,
       CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue,
       CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue,
       CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit,
       CAN_FIRE_RL_bus_msNoSynth_0_r_forwardFlit,
       CAN_FIRE_RL_bus_msNoSynth_0_w_forwardReady,
       CAN_FIRE_RL_bus_msNoSynth_1_ar_forwardReady,
       CAN_FIRE_RL_bus_msNoSynth_1_aw_forwardReady,
       CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue,
       CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue,
       CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit,
       CAN_FIRE_RL_bus_msNoSynth_1_b_forwardFlit,
       CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue,
       CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue,
       CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit,
       CAN_FIRE_RL_bus_msNoSynth_1_r_forwardFlit,
       CAN_FIRE_RL_bus_msNoSynth_1_w_forwardReady,
       CAN_FIRE_RL_bus_sink_selected,
       CAN_FIRE_RL_bus_sink_selected_1,
       CAN_FIRE_RL_bus_sink_selected_2,
       CAN_FIRE_RL_bus_sink_selected_3,
       CAN_FIRE_RL_bus_source_selected,
       CAN_FIRE_RL_bus_source_selected_1,
       CAN_FIRE_RL_bus_split_0_putFirst,
       CAN_FIRE_RL_bus_split_0_putOther,
       CAN_FIRE_RL_bus_split_1_putFirst,
       CAN_FIRE_RL_bus_split_1_putOther,
       CAN_FIRE_RL_bus_split_2_putFirst,
       CAN_FIRE_RL_bus_split_2_putOther,
       CAN_FIRE_RL_bus_split_3_putFirst,
       CAN_FIRE_RL_bus_split_3_putOther,
       CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_0_b_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_0_r_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_b_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_1_r_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_b_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_2_r_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_3_ar_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_3_ar_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_3_ar_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_3_ar_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_3_aw_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_3_aw_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_3_aw_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_3_aw_forwardFlit,
       CAN_FIRE_RL_bus_ssNoSynth_3_b_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_3_r_forwardReady,
       CAN_FIRE_RL_bus_ssNoSynth_3_w_buffer_dequeue,
       CAN_FIRE_RL_bus_ssNoSynth_3_w_buffer_enqueue,
       CAN_FIRE_RL_bus_ssNoSynth_3_w_dropFlit,
       CAN_FIRE_RL_bus_ssNoSynth_3_w_forwardFlit,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR,
       CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW,
       CAN_FIRE_RL_mem_ar_buffer_dequeue,
       CAN_FIRE_RL_mem_ar_buffer_enqueue,
       CAN_FIRE_RL_mem_ar_dropFlit,
       CAN_FIRE_RL_mem_ar_forwardFlit,
       CAN_FIRE_RL_mem_aw_buffer_dequeue,
       CAN_FIRE_RL_mem_aw_buffer_enqueue,
       CAN_FIRE_RL_mem_aw_dropFlit,
       CAN_FIRE_RL_mem_aw_forwardFlit,
       CAN_FIRE_RL_mem_b_forwardReady,
       CAN_FIRE_RL_mem_r_forwardReady,
       CAN_FIRE_RL_mem_w_buffer_dequeue,
       CAN_FIRE_RL_mem_w_buffer_enqueue,
       CAN_FIRE_RL_mem_w_dropFlit,
       CAN_FIRE_RL_mem_w_forwardFlit,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionGetPut_4,
       CAN_FIRE_RL_mkConnectionGetPut_5,
       CAN_FIRE_RL_mkConnectionGetPut_6,
       CAN_FIRE_RL_mkConnectionGetPut_7,
       CAN_FIRE_RL_mkConnectionGetPut_8,
       CAN_FIRE_RL_mkConnectionGetPut_9,
       CAN_FIRE_RL_rl_connect_external_interrupt_requests,
       CAN_FIRE_RL_rl_reset_complete_initial,
       CAN_FIRE_RL_rl_reset_start_initial,
       CAN_FIRE_RL_uart0_slave_ar_buffer_dequeue,
       CAN_FIRE_RL_uart0_slave_ar_buffer_enqueue,
       CAN_FIRE_RL_uart0_slave_ar_dropFlit,
       CAN_FIRE_RL_uart0_slave_ar_forwardFlit,
       CAN_FIRE_RL_uart0_slave_aw_buffer_dequeue,
       CAN_FIRE_RL_uart0_slave_aw_buffer_enqueue,
       CAN_FIRE_RL_uart0_slave_aw_dropFlit,
       CAN_FIRE_RL_uart0_slave_aw_forwardFlit,
       CAN_FIRE_RL_uart0_slave_b_forwardReady,
       CAN_FIRE_RL_uart0_slave_r_forwardReady,
       CAN_FIRE_RL_uart0_slave_w_buffer_dequeue,
       CAN_FIRE_RL_uart0_slave_w_buffer_enqueue,
       CAN_FIRE_RL_uart0_slave_w_dropFlit,
       CAN_FIRE_RL_uart0_slave_w_forwardFlit,
       CAN_FIRE_RL_ug_boot_rom_slave_u_ar_doPut,
       CAN_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_ug_boot_rom_slave_u_aw_doPut,
       CAN_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_ug_boot_rom_slave_u_b_doDrop,
       CAN_FIRE_RL_ug_boot_rom_slave_u_b_setPeek,
       CAN_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_ug_boot_rom_slave_u_r_doDrop,
       CAN_FIRE_RL_ug_boot_rom_slave_u_r_setPeek,
       CAN_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_ug_boot_rom_slave_u_w_doPut,
       CAN_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut,
       CAN_FIRE_RL_ug_mem0_slave_u_ar_doPut,
       CAN_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_ug_mem0_slave_u_aw_doPut,
       CAN_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_ug_mem0_slave_u_b_doDrop,
       CAN_FIRE_RL_ug_mem0_slave_u_b_setPeek,
       CAN_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_ug_mem0_slave_u_r_doDrop,
       CAN_FIRE_RL_ug_mem0_slave_u_r_setPeek,
       CAN_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_ug_mem0_slave_u_w_doPut,
       CAN_FIRE_RL_ug_mem0_slave_u_w_warnDoPut,
       CAN_FIRE___me_check_13,
       CAN_FIRE___me_check_198,
       CAN_FIRE___me_check_199,
       CAN_FIRE___me_check_200,
       CAN_FIRE___me_check_202,
       CAN_FIRE___me_check_205,
       CAN_FIRE___me_check_206,
       CAN_FIRE___me_check_207,
       CAN_FIRE___me_check_209,
       CAN_FIRE___me_check_212,
       CAN_FIRE___me_check_214,
       CAN_FIRE___me_check_216,
       CAN_FIRE___me_check_218,
       CAN_FIRE___me_check_227,
       CAN_FIRE___me_check_229,
       CAN_FIRE___me_check_231,
       CAN_FIRE___me_check_242,
       CAN_FIRE___me_check_244,
       CAN_FIRE___me_check_246,
       CAN_FIRE___me_check_248,
       CAN_FIRE___me_check_250,
       CAN_FIRE___me_check_252,
       CAN_FIRE___me_check_253,
       CAN_FIRE___me_check_254,
       CAN_FIRE___me_check_256,
       CAN_FIRE___me_check_259,
       CAN_FIRE___me_check_260,
       CAN_FIRE___me_check_261,
       CAN_FIRE___me_check_263,
       CAN_FIRE___me_check_266,
       CAN_FIRE___me_check_268,
       CAN_FIRE___me_check_270,
       CAN_FIRE___me_check_272,
       CAN_FIRE___me_check_281,
       CAN_FIRE___me_check_283,
       CAN_FIRE___me_check_285,
       CAN_FIRE___me_check_296,
       CAN_FIRE___me_check_298,
       CAN_FIRE___me_check_300,
       CAN_FIRE___me_check_302,
       CAN_FIRE___me_check_304,
       CAN_FIRE___me_check_4,
       CAN_FIRE_from_aws_host_put,
       CAN_FIRE_get_to_console_get,
       CAN_FIRE_ma_aws_host_to_hw_interrupt,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_ma_set_verbosity,
       CAN_FIRE_ma_set_watch_tohost,
       CAN_FIRE_put_from_console_put,
       CAN_FIRE_to_aws_host_get,
       CAN_FIRE_to_ddr4_ar_arready,
       CAN_FIRE_to_ddr4_aw_awready,
       CAN_FIRE_to_ddr4_b_bflit,
       CAN_FIRE_to_ddr4_r_rflit,
       CAN_FIRE_to_ddr4_w_wready,
       WILL_FIRE_RL_aws_host_access_slave_ar_buffer_dequeue,
       WILL_FIRE_RL_aws_host_access_slave_ar_buffer_enqueue,
       WILL_FIRE_RL_aws_host_access_slave_ar_dropFlit,
       WILL_FIRE_RL_aws_host_access_slave_ar_forwardFlit,
       WILL_FIRE_RL_aws_host_access_slave_aw_buffer_dequeue,
       WILL_FIRE_RL_aws_host_access_slave_aw_buffer_enqueue,
       WILL_FIRE_RL_aws_host_access_slave_aw_dropFlit,
       WILL_FIRE_RL_aws_host_access_slave_aw_forwardFlit,
       WILL_FIRE_RL_aws_host_access_slave_b_forwardReady,
       WILL_FIRE_RL_aws_host_access_slave_r_forwardReady,
       WILL_FIRE_RL_aws_host_access_slave_w_buffer_dequeue,
       WILL_FIRE_RL_aws_host_access_slave_w_buffer_enqueue,
       WILL_FIRE_RL_aws_host_access_slave_w_dropFlit,
       WILL_FIRE_RL_aws_host_access_slave_w_forwardFlit,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp,
       WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req,
       WILL_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR,
       WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW,
       WILL_FIRE_RL_br_ar_buffer_dequeue,
       WILL_FIRE_RL_br_ar_buffer_enqueue,
       WILL_FIRE_RL_br_ar_dropFlit,
       WILL_FIRE_RL_br_ar_forwardFlit,
       WILL_FIRE_RL_br_aw_buffer_dequeue,
       WILL_FIRE_RL_br_aw_buffer_enqueue,
       WILL_FIRE_RL_br_aw_dropFlit,
       WILL_FIRE_RL_br_aw_forwardFlit,
       WILL_FIRE_RL_br_b_forwardReady,
       WILL_FIRE_RL_br_r_forwardReady,
       WILL_FIRE_RL_br_w_buffer_dequeue,
       WILL_FIRE_RL_br_w_buffer_enqueue,
       WILL_FIRE_RL_br_w_dropFlit,
       WILL_FIRE_RL_br_w_forwardFlit,
       WILL_FIRE_RL_bus_1_1_arbitrate,
       WILL_FIRE_RL_bus_1_1_burst,
       WILL_FIRE_RL_bus_1_1_burst_1,
       WILL_FIRE_RL_bus_1_1_burst_2,
       WILL_FIRE_RL_bus_1_1_burst_3,
       WILL_FIRE_RL_bus_1_1_checkSinkReady,
       WILL_FIRE_RL_bus_1_1_checkSinkReady_1,
       WILL_FIRE_RL_bus_1_1_craftReq,
       WILL_FIRE_RL_bus_1_1_craftReq_1,
       WILL_FIRE_RL_bus_1_1_craftReq_2,
       WILL_FIRE_RL_bus_1_1_craftReq_3,
       WILL_FIRE_RL_bus_1_1_sink_selected,
       WILL_FIRE_RL_bus_1_1_sink_selected_1,
       WILL_FIRE_RL_bus_1_1_source_selected,
       WILL_FIRE_RL_bus_1_1_source_selected_1,
       WILL_FIRE_RL_bus_1_1_source_selected_2,
       WILL_FIRE_RL_bus_1_1_source_selected_3,
       WILL_FIRE_RL_bus_1_arbitrate,
       WILL_FIRE_RL_bus_1_arbitrate_1,
       WILL_FIRE_RL_bus_1_burst,
       WILL_FIRE_RL_bus_1_burst_1,
       WILL_FIRE_RL_bus_1_burst_2,
       WILL_FIRE_RL_bus_1_burst_3,
       WILL_FIRE_RL_bus_1_burst_4,
       WILL_FIRE_RL_bus_1_burst_5,
       WILL_FIRE_RL_bus_1_checkSinkReady,
       WILL_FIRE_RL_bus_1_checkSinkReady_1,
       WILL_FIRE_RL_bus_1_checkSinkReady_2,
       WILL_FIRE_RL_bus_1_checkSinkReady_3,
       WILL_FIRE_RL_bus_1_checkSinkReady_4,
       WILL_FIRE_RL_bus_1_checkSinkReady_5,
       WILL_FIRE_RL_bus_1_craftReq,
       WILL_FIRE_RL_bus_1_craftReq_1,
       WILL_FIRE_RL_bus_1_craftReq_2,
       WILL_FIRE_RL_bus_1_craftReq_3,
       WILL_FIRE_RL_bus_1_craftReq_4,
       WILL_FIRE_RL_bus_1_craftReq_5,
       WILL_FIRE_RL_bus_1_ifcs_0_drainFlits,
       WILL_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse,
       WILL_FIRE_RL_bus_1_ifcs_0_firstFlit,
       WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1,
       WILL_FIRE_RL_bus_1_ifcs_0_followFlits,
       WILL_FIRE_RL_bus_1_ifcs_0_followFlits_1,
       WILL_FIRE_RL_bus_1_ifcs_0_forwardRsp,
       WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit,
       WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp,
       WILL_FIRE_RL_bus_1_ifcs_1_drainFlits,
       WILL_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse,
       WILL_FIRE_RL_bus_1_ifcs_1_firstFlit,
       WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1,
       WILL_FIRE_RL_bus_1_ifcs_1_followFlits,
       WILL_FIRE_RL_bus_1_ifcs_1_followFlits_1,
       WILL_FIRE_RL_bus_1_ifcs_1_forwardRsp,
       WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit,
       WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp,
       WILL_FIRE_RL_bus_1_ifcs_2_firstFlit,
       WILL_FIRE_RL_bus_1_ifcs_2_followFlits,
       WILL_FIRE_RL_bus_1_ifcs_3_firstFlit,
       WILL_FIRE_RL_bus_1_ifcs_3_followFlits,
       WILL_FIRE_RL_bus_1_sink_selected,
       WILL_FIRE_RL_bus_1_sink_selected_1,
       WILL_FIRE_RL_bus_1_sink_selected_2,
       WILL_FIRE_RL_bus_1_sink_selected_3,
       WILL_FIRE_RL_bus_1_sink_selected_4,
       WILL_FIRE_RL_bus_1_sink_selected_5,
       WILL_FIRE_RL_bus_1_source_selected,
       WILL_FIRE_RL_bus_1_source_selected_1,
       WILL_FIRE_RL_bus_1_source_selected_2,
       WILL_FIRE_RL_bus_1_source_selected_3,
       WILL_FIRE_RL_bus_1_source_selected_4,
       WILL_FIRE_RL_bus_1_source_selected_5,
       WILL_FIRE_RL_bus_arbitrate,
       WILL_FIRE_RL_bus_burst,
       WILL_FIRE_RL_bus_burst_1,
       WILL_FIRE_RL_bus_checkSinkReady,
       WILL_FIRE_RL_bus_checkSinkReady_1,
       WILL_FIRE_RL_bus_checkSinkReady_2,
       WILL_FIRE_RL_bus_checkSinkReady_3,
       WILL_FIRE_RL_bus_craftReq,
       WILL_FIRE_RL_bus_craftReq_1,
       WILL_FIRE_RL_bus_ifcs_0_drainFlits,
       WILL_FIRE_RL_bus_ifcs_0_drainNoRouteResponse,
       WILL_FIRE_RL_bus_ifcs_0_firstFlit,
       WILL_FIRE_RL_bus_ifcs_0_firstFlit_1,
       WILL_FIRE_RL_bus_ifcs_0_followFlits,
       WILL_FIRE_RL_bus_ifcs_0_followFlits_1,
       WILL_FIRE_RL_bus_ifcs_0_forwardRsp,
       WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit,
       WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp,
       WILL_FIRE_RL_bus_ifcs_1_drainFlits,
       WILL_FIRE_RL_bus_ifcs_1_drainNoRouteResponse,
       WILL_FIRE_RL_bus_ifcs_1_firstFlit,
       WILL_FIRE_RL_bus_ifcs_1_firstFlit_1,
       WILL_FIRE_RL_bus_ifcs_1_followFlits,
       WILL_FIRE_RL_bus_ifcs_1_followFlits_1,
       WILL_FIRE_RL_bus_ifcs_1_forwardRsp,
       WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit,
       WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp,
       WILL_FIRE_RL_bus_ifcs_2_firstFlit,
       WILL_FIRE_RL_bus_ifcs_2_followFlits,
       WILL_FIRE_RL_bus_ifcs_3_firstFlit,
       WILL_FIRE_RL_bus_ifcs_3_followFlits,
       WILL_FIRE_RL_bus_merged_0_genFirst,
       WILL_FIRE_RL_bus_merged_0_genOther,
       WILL_FIRE_RL_bus_merged_1_genFirst,
       WILL_FIRE_RL_bus_merged_1_genOther,
       WILL_FIRE_RL_bus_msNoSynth_0_ar_forwardReady,
       WILL_FIRE_RL_bus_msNoSynth_0_aw_forwardReady,
       WILL_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue,
       WILL_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue,
       WILL_FIRE_RL_bus_msNoSynth_0_b_dropFlit,
       WILL_FIRE_RL_bus_msNoSynth_0_b_forwardFlit,
       WILL_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue,
       WILL_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue,
       WILL_FIRE_RL_bus_msNoSynth_0_r_dropFlit,
       WILL_FIRE_RL_bus_msNoSynth_0_r_forwardFlit,
       WILL_FIRE_RL_bus_msNoSynth_0_w_forwardReady,
       WILL_FIRE_RL_bus_msNoSynth_1_ar_forwardReady,
       WILL_FIRE_RL_bus_msNoSynth_1_aw_forwardReady,
       WILL_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue,
       WILL_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue,
       WILL_FIRE_RL_bus_msNoSynth_1_b_dropFlit,
       WILL_FIRE_RL_bus_msNoSynth_1_b_forwardFlit,
       WILL_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue,
       WILL_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue,
       WILL_FIRE_RL_bus_msNoSynth_1_r_dropFlit,
       WILL_FIRE_RL_bus_msNoSynth_1_r_forwardFlit,
       WILL_FIRE_RL_bus_msNoSynth_1_w_forwardReady,
       WILL_FIRE_RL_bus_sink_selected,
       WILL_FIRE_RL_bus_sink_selected_1,
       WILL_FIRE_RL_bus_sink_selected_2,
       WILL_FIRE_RL_bus_sink_selected_3,
       WILL_FIRE_RL_bus_source_selected,
       WILL_FIRE_RL_bus_source_selected_1,
       WILL_FIRE_RL_bus_split_0_putFirst,
       WILL_FIRE_RL_bus_split_0_putOther,
       WILL_FIRE_RL_bus_split_1_putFirst,
       WILL_FIRE_RL_bus_split_1_putOther,
       WILL_FIRE_RL_bus_split_2_putFirst,
       WILL_FIRE_RL_bus_split_2_putOther,
       WILL_FIRE_RL_bus_split_3_putFirst,
       WILL_FIRE_RL_bus_split_3_putOther,
       WILL_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_0_b_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_0_r_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_0_w_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_b_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_1_r_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_1_w_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_b_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_2_r_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_2_w_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_3_ar_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_3_ar_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_3_ar_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_3_ar_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_3_aw_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_3_aw_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_3_aw_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_3_aw_forwardFlit,
       WILL_FIRE_RL_bus_ssNoSynth_3_b_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_3_r_forwardReady,
       WILL_FIRE_RL_bus_ssNoSynth_3_w_buffer_dequeue,
       WILL_FIRE_RL_bus_ssNoSynth_3_w_buffer_enqueue,
       WILL_FIRE_RL_bus_ssNoSynth_3_w_dropFlit,
       WILL_FIRE_RL_bus_ssNoSynth_3_w_forwardFlit,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR,
       WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW,
       WILL_FIRE_RL_mem_ar_buffer_dequeue,
       WILL_FIRE_RL_mem_ar_buffer_enqueue,
       WILL_FIRE_RL_mem_ar_dropFlit,
       WILL_FIRE_RL_mem_ar_forwardFlit,
       WILL_FIRE_RL_mem_aw_buffer_dequeue,
       WILL_FIRE_RL_mem_aw_buffer_enqueue,
       WILL_FIRE_RL_mem_aw_dropFlit,
       WILL_FIRE_RL_mem_aw_forwardFlit,
       WILL_FIRE_RL_mem_b_forwardReady,
       WILL_FIRE_RL_mem_r_forwardReady,
       WILL_FIRE_RL_mem_w_buffer_dequeue,
       WILL_FIRE_RL_mem_w_buffer_enqueue,
       WILL_FIRE_RL_mem_w_dropFlit,
       WILL_FIRE_RL_mem_w_forwardFlit,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionGetPut_4,
       WILL_FIRE_RL_mkConnectionGetPut_5,
       WILL_FIRE_RL_mkConnectionGetPut_6,
       WILL_FIRE_RL_mkConnectionGetPut_7,
       WILL_FIRE_RL_mkConnectionGetPut_8,
       WILL_FIRE_RL_mkConnectionGetPut_9,
       WILL_FIRE_RL_rl_connect_external_interrupt_requests,
       WILL_FIRE_RL_rl_reset_complete_initial,
       WILL_FIRE_RL_rl_reset_start_initial,
       WILL_FIRE_RL_uart0_slave_ar_buffer_dequeue,
       WILL_FIRE_RL_uart0_slave_ar_buffer_enqueue,
       WILL_FIRE_RL_uart0_slave_ar_dropFlit,
       WILL_FIRE_RL_uart0_slave_ar_forwardFlit,
       WILL_FIRE_RL_uart0_slave_aw_buffer_dequeue,
       WILL_FIRE_RL_uart0_slave_aw_buffer_enqueue,
       WILL_FIRE_RL_uart0_slave_aw_dropFlit,
       WILL_FIRE_RL_uart0_slave_aw_forwardFlit,
       WILL_FIRE_RL_uart0_slave_b_forwardReady,
       WILL_FIRE_RL_uart0_slave_r_forwardReady,
       WILL_FIRE_RL_uart0_slave_w_buffer_dequeue,
       WILL_FIRE_RL_uart0_slave_w_buffer_enqueue,
       WILL_FIRE_RL_uart0_slave_w_dropFlit,
       WILL_FIRE_RL_uart0_slave_w_forwardFlit,
       WILL_FIRE_RL_ug_boot_rom_slave_u_ar_doPut,
       WILL_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_ug_boot_rom_slave_u_aw_doPut,
       WILL_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_ug_boot_rom_slave_u_b_doDrop,
       WILL_FIRE_RL_ug_boot_rom_slave_u_b_setPeek,
       WILL_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_ug_boot_rom_slave_u_r_doDrop,
       WILL_FIRE_RL_ug_boot_rom_slave_u_r_setPeek,
       WILL_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_ug_boot_rom_slave_u_w_doPut,
       WILL_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut,
       WILL_FIRE_RL_ug_mem0_slave_u_ar_doPut,
       WILL_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_ug_mem0_slave_u_aw_doPut,
       WILL_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_ug_mem0_slave_u_b_doDrop,
       WILL_FIRE_RL_ug_mem0_slave_u_b_setPeek,
       WILL_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_ug_mem0_slave_u_r_doDrop,
       WILL_FIRE_RL_ug_mem0_slave_u_r_setPeek,
       WILL_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_ug_mem0_slave_u_w_doPut,
       WILL_FIRE_RL_ug_mem0_slave_u_w_warnDoPut,
       WILL_FIRE___me_check_13,
       WILL_FIRE___me_check_198,
       WILL_FIRE___me_check_199,
       WILL_FIRE___me_check_200,
       WILL_FIRE___me_check_202,
       WILL_FIRE___me_check_205,
       WILL_FIRE___me_check_206,
       WILL_FIRE___me_check_207,
       WILL_FIRE___me_check_209,
       WILL_FIRE___me_check_212,
       WILL_FIRE___me_check_214,
       WILL_FIRE___me_check_216,
       WILL_FIRE___me_check_218,
       WILL_FIRE___me_check_227,
       WILL_FIRE___me_check_229,
       WILL_FIRE___me_check_231,
       WILL_FIRE___me_check_242,
       WILL_FIRE___me_check_244,
       WILL_FIRE___me_check_246,
       WILL_FIRE___me_check_248,
       WILL_FIRE___me_check_250,
       WILL_FIRE___me_check_252,
       WILL_FIRE___me_check_253,
       WILL_FIRE___me_check_254,
       WILL_FIRE___me_check_256,
       WILL_FIRE___me_check_259,
       WILL_FIRE___me_check_260,
       WILL_FIRE___me_check_261,
       WILL_FIRE___me_check_263,
       WILL_FIRE___me_check_266,
       WILL_FIRE___me_check_268,
       WILL_FIRE___me_check_270,
       WILL_FIRE___me_check_272,
       WILL_FIRE___me_check_281,
       WILL_FIRE___me_check_283,
       WILL_FIRE___me_check_285,
       WILL_FIRE___me_check_296,
       WILL_FIRE___me_check_298,
       WILL_FIRE___me_check_300,
       WILL_FIRE___me_check_302,
       WILL_FIRE___me_check_304,
       WILL_FIRE___me_check_4,
       WILL_FIRE_from_aws_host_put,
       WILL_FIRE_get_to_console_get,
       WILL_FIRE_ma_aws_host_to_hw_interrupt,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_ma_set_verbosity,
       WILL_FIRE_ma_set_watch_tohost,
       WILL_FIRE_put_from_console_put,
       WILL_FIRE_to_aws_host_get,
       WILL_FIRE_to_ddr4_ar_arready,
       WILL_FIRE_to_ddr4_aw_awready,
       WILL_FIRE_to_ddr4_b_bflit,
       WILL_FIRE_to_ddr4_r_rflit,
       WILL_FIRE_to_ddr4_w_wready;

  // inputs to muxes for submodule ports
  reg [72 : 0] MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2,
	       MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2;
  reg [7 : 0] MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2,
	      MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2;
  wire [72 : 0] MUX_bus_ssNoSynth_2_w_buffer_enqw$wset_1__VAL_2,
		MUX_bus_ssNoSynth_3_w_buffer_enqw$wset_1__VAL_2;
  wire [7 : 0] MUX_bus_merged_0_flitLeft$write_1__VAL_1,
	       MUX_bus_merged_1_flitLeft$write_1__VAL_1,
	       MUX_bus_split_0_flitLeft$write_1__VAL_1,
	       MUX_bus_split_1_flitLeft$write_1__VAL_1,
	       MUX_bus_split_2_flitLeft$write_1__VAL_1,
	       MUX_bus_split_3_flitLeft$write_1__VAL_1;
  wire MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_1,
       MUX_bus_1_1_activeSource_0$write_1__SEL_1,
       MUX_bus_1_1_activeSource_0$write_1__SEL_2,
       MUX_bus_1_1_activeSource_0$write_1__SEL_3,
       MUX_bus_1_1_activeSource_0$write_1__SEL_4,
       MUX_bus_1_1_activeSource_0$write_1__VAL_1,
       MUX_bus_1_1_activeSource_1$write_1__VAL_1,
       MUX_bus_1_1_activeSource_2$write_1__VAL_1,
       MUX_bus_1_1_activeSource_3$write_1__VAL_1,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_1,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_2,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_3,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_4,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_5,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_6,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_7,
       MUX_bus_1_1_flitToSink_0$wset_1__SEL_8,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_1,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_2,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_3,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_4,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_5,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_6,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_7,
       MUX_bus_1_1_flitToSink_1$wset_1__SEL_8,
       MUX_bus_1_1_state$write_1__SEL_1,
       MUX_bus_1_1_state$write_1__SEL_2,
       MUX_bus_1_1_state$write_1__SEL_3,
       MUX_bus_1_1_state$write_1__SEL_4,
       MUX_bus_1_flitToSink_0$wset_1__SEL_1,
       MUX_bus_1_flitToSink_0$wset_1__SEL_2,
       MUX_bus_1_flitToSink_0$wset_1__SEL_3,
       MUX_bus_1_flitToSink_0$wset_1__SEL_4,
       MUX_bus_1_flitToSink_0$wset_1__SEL_5,
       MUX_bus_1_flitToSink_0$wset_1__SEL_6,
       MUX_bus_1_flitToSink_0$wset_1__SEL_7,
       MUX_bus_1_flitToSink_0$wset_1__SEL_8,
       MUX_bus_1_flitToSink_0_1$wset_1__SEL_1,
       MUX_bus_1_flitToSink_0_1$wset_1__SEL_3,
       MUX_bus_1_flitToSink_1$wset_1__SEL_1,
       MUX_bus_1_flitToSink_1$wset_1__SEL_2,
       MUX_bus_1_flitToSink_1$wset_1__SEL_3,
       MUX_bus_1_flitToSink_1$wset_1__SEL_4,
       MUX_bus_1_flitToSink_1$wset_1__SEL_5,
       MUX_bus_1_flitToSink_1$wset_1__SEL_6,
       MUX_bus_1_flitToSink_1$wset_1__SEL_7,
       MUX_bus_1_flitToSink_1$wset_1__SEL_8,
       MUX_bus_1_flitToSink_1_1$wset_1__SEL_1,
       MUX_bus_1_flitToSink_1_1$wset_1__SEL_3,
       MUX_bus_1_flitToSink_2$wset_1__SEL_1,
       MUX_bus_1_flitToSink_2$wset_1__SEL_3,
       MUX_bus_1_flitToSink_3$wset_1__SEL_1,
       MUX_bus_1_flitToSink_3$wset_1__SEL_3,
       MUX_bus_1_ifcs_0_state_1$write_1__SEL_1,
       MUX_bus_1_ifcs_1_state_1$write_1__SEL_1,
       MUX_bus_1_ifcs_2_state$write_1__SEL_1,
       MUX_bus_1_ifcs_3_state$write_1__SEL_1,
       MUX_bus_activeSource_0$write_1__SEL_1,
       MUX_bus_activeSource_0$write_1__VAL_1,
       MUX_bus_activeSource_1$write_1__VAL_1,
       MUX_bus_flitToSink_0$wset_1__SEL_1,
       MUX_bus_flitToSink_0$wset_1__SEL_3,
       MUX_bus_flitToSink_1$wset_1__SEL_1,
       MUX_bus_flitToSink_1$wset_1__SEL_3,
       MUX_bus_flitToSink_2$wset_1__SEL_1,
       MUX_bus_flitToSink_2$wset_1__SEL_3,
       MUX_bus_flitToSink_3$wset_1__SEL_1,
       MUX_bus_flitToSink_3$wset_1__SEL_3,
       MUX_bus_ifcs_0_state$write_1__PSEL_1,
       MUX_bus_ifcs_0_state$write_1__SEL_1,
       MUX_bus_ifcs_0_state$write_1__SEL_2,
       MUX_bus_ifcs_0_state$write_1__SEL_3,
       MUX_bus_ifcs_1_state$write_1__PSEL_1,
       MUX_bus_ifcs_1_state$write_1__SEL_1,
       MUX_bus_ifcs_1_state$write_1__SEL_2,
       MUX_bus_ifcs_1_state$write_1__SEL_3,
       MUX_bus_split_0_flitLeft$write_1__SEL_1,
       MUX_bus_split_0_flitLeft$write_1__SEL_2,
       MUX_bus_split_1_flitLeft$write_1__SEL_1,
       MUX_bus_split_1_flitLeft$write_1__SEL_2,
       MUX_bus_split_2_flitLeft$write_1__SEL_1,
       MUX_bus_split_2_flitLeft$write_1__SEL_2,
       MUX_bus_split_3_flitLeft$write_1__SEL_1,
       MUX_bus_split_3_flitLeft$write_1__SEL_2,
       MUX_bus_state$write_1__SEL_1,
       MUX_bus_state$write_1__SEL_2,
       MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_1,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h61631;
  reg [63 : 0] v__h60931;
  reg [63 : 0] v__h66493;
  reg [63 : 0] v__h65793;
  reg [63 : 0] v__h80113;
  reg [63 : 0] v__h79732;
  reg [63 : 0] v__h82210;
  reg [63 : 0] v__h81829;
  reg [63 : 0] v__h84109;
  reg [63 : 0] v__h83728;
  reg [63 : 0] v__h86008;
  reg [63 : 0] v__h85627;
  reg [63 : 0] v__h104645;
  reg [63 : 0] v__h103945;
  reg [63 : 0] v__h108141;
  reg [63 : 0] v__h107441;
  reg [63 : 0] v__h119993;
  reg [63 : 0] v__h119612;
  reg [63 : 0] v__h122622;
  reg [63 : 0] v__h122241;
  reg [31 : 0] v__h131805;
  reg [63 : 0] v__h125039;
  reg [63 : 0] v__h124658;
  reg [31 : 0] v__h132034;
  reg [63 : 0] v__h127456;
  reg [63 : 0] v__h127075;
  reg [31 : 0] v__h131799;
  reg [31 : 0] v__h132028;
  // synopsys translate_on

  // remaining internal signals
  wire [72 : 0] bus_split_2_doPutwget_BITS_72_TO_0__q5,
		bus_split_3_doPutwget_BITS_72_TO_0__q6;
  wire [63 : 0] x__h13835,
		x__h14604,
		x__h45393,
		x__h45466,
		x__h45550,
		x__h45623,
		x__h49111,
		x__h49174,
		x__h49248,
		x__h49311,
		x__h6725,
		x__h7496,
		x__h88923,
		x__h88986,
		x__h89060,
		x__h89123,
		x__h92264,
		x__h92327,
		x__h92401,
		x__h92464,
		x_araddr__h14484,
		x_araddr__h7376,
		x_awaddr__h13715,
		x_awaddr__h6601,
		x_wdata__h36727,
		x_wdata__h38959,
		y__h13823,
		y__h14592,
		y__h6713,
		y__h7484;
  wire [8 : 0] x_port1__read__h90572, x_port1__read__h93895;
  wire [7 : 0] x1__h14109,
	       x1__h14250,
	       x1__h14835,
	       x1__h7001,
	       x1__h7142,
	       x1__h7727,
	       x_wstrb__h36728,
	       x_wstrb__h38960;
  wire [6 : 0] a_awid__h47114,
	       a_awid__h50758,
	       boot_rom_axi4_deburster_inShim_bffD_OUT_BITS__ETC__q29,
	       boot_rom_axi4_deburster_inShim_rffD_OUT_BITS__ETC__q27,
	       fatReq_arid__h89921,
	       fatReq_arid__h93247,
	       mem0_controller_axi4_deburster_inShim_bffD_OU_ETC__q30,
	       mem0_controller_axi4_deburster_inShim_rffD_OU_ETC__q28;
  wire [2 : 0] IF_NOT_IF_bus_merged_0_flitLeft_405_EQ_0_406_T_ETC___d1594,
	       IF_NOT_IF_bus_merged_0_flitLeft_405_EQ_0_406_T_ETC___d1595,
	       IF_NOT_IF_bus_merged_0_flitLeft_405_EQ_0_406_T_ETC___d1623,
	       IF_NOT_IF_bus_merged_1_flitLeft_425_EQ_0_426_T_ETC___d1721,
	       IF_NOT_IF_bus_merged_1_flitLeft_425_EQ_0_426_T_ETC___d1722,
	       IF_NOT_IF_bus_merged_1_flitLeft_425_EQ_0_426_T_ETC___d1744,
	       IF_NOT_core_cpu_dmem_master_ar_araddr__524_ULT_ETC___d2539,
	       IF_NOT_core_cpu_dmem_master_ar_araddr__524_ULT_ETC___d2540,
	       IF_NOT_core_cpu_dmem_master_ar_araddr__524_ULT_ETC___d2562,
	       IF_NOT_core_cpu_imem_master_ar_araddr__414_ULT_ETC___d2429,
	       IF_NOT_core_cpu_imem_master_ar_araddr__414_ULT_ETC___d2430,
	       IF_NOT_core_cpu_imem_master_ar_araddr__414_ULT_ETC___d2452;
  wire [1 : 0] SEXT_SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_ETC__q23,
	       SEXT_SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_ETC__q11,
	       SEXT_SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_ETC__q17,
	       SEXT_SEXT_bus_arbiter_firstHot_955_956_BIT_0_9_ETC__q3,
	       SEXT_bus_1_1_arbiter_firstHot__q19,
	       SEXT_bus_1_1_arbiter_lastSelect_1__q21,
	       SEXT_bus_1_1_arbiter_lastSelect_2__q22,
	       SEXT_bus_1_1_arbiter_lastSelect__q20,
	       SEXT_bus_1_arbiter_firstHot_1__q15,
	       SEXT_bus_1_arbiter_firstHot__q7,
	       SEXT_bus_1_arbiter_lastSelect_1__q9,
	       SEXT_bus_1_arbiter_lastSelect_2__q10,
	       SEXT_bus_1_arbiter_lastSelect_3__q16,
	       SEXT_bus_1_arbiter_lastSelect__q8,
	       SEXT_bus_arbiter_firstHot__q1,
	       SEXT_bus_arbiter_lastSelect__q2,
	       SEXT_x0061__q4,
	       SEXT_x03081__q18,
	       SEXT_x17730__q24,
	       SEXT_x17767__q25,
	       SEXT_x17802__q26,
	       SEXT_x7854__q12,
	       SEXT_x7891__q13,
	       SEXT_x7926__q14;
  wire IF_NOT_bus_1_ifcs_0_innerRoute_first__720_BIT__ETC___d2751,
       IF_NOT_bus_1_ifcs_1_innerRoute_first__758_BIT__ETC___d2771,
       IF_NOT_bus_ifcs_0_innerRoute_first__888_BIT_1__ETC___d1919,
       IF_NOT_bus_ifcs_1_innerRoute_first__926_BIT_1__ETC___d1939,
       IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3064,
       IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3072,
       IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3080,
       IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3088,
       IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2242,
       IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2250,
       IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2258,
       IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2266,
       IF_SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_ETC___d2807,
       IF_SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_ETC___d2811,
       IF_SEXT_bus_arbiter_lastSelect_951_952_BIT_0_9_ETC___d1975,
       IF_SEXT_bus_arbiter_lastSelect_951_952_BIT_0_9_ETC___d1979,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_NOT_ETC___d1564,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_NOT_ETC___d1662,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1557,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1576,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1580,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1585,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1589,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1601,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1605,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1607,
       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1619,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_NOT_ETC___d1697,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_NOT_ETC___d1783,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1690,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1707,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1710,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1713,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1716,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1726,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1729,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1731,
       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1740,
       IF_bus_split_0_flitLeft_449_EQ_0_450_THEN_bus__ETC___d1879,
       IF_bus_split_1_flitLeft_478_EQ_0_479_THEN_bus__ETC___d1880,
       IF_bus_split_2_flitLeft_507_EQ_0_508_THEN_bus__ETC___d1881,
       IF_bus_split_3_flitLeft_536_EQ_0_537_THEN_bus__ETC___d1882,
       NOT_SEXT_bus_1_1_arbiter_lastSelect_996_997_BI_ETC___d3042,
       NOT_SEXT_bus_1_arbiter_lastSelect_174_175_BIT__ETC___d2220,
       SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_0_01_ETC___d3038,
       SEXT_bus_1_1_arbiter_lastSelect_1_000_001_BIT__ETC___d3022,
       SEXT_bus_1_1_arbiter_lastSelect_2_005_006_BIT__ETC___d3030,
       SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3014,
       SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3045,
       SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_189__ETC___d2216,
       SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_0_78_ETC___d2795,
       SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2192,
       SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2223,
       SEXT_bus_1_arbiter_lastSelect_1_178_179_BIT_0__ETC___d2200,
       SEXT_bus_1_arbiter_lastSelect_2_183_184_BIT_0__ETC___d2208,
       SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_0__ETC___d2791,
       SEXT_bus_arbiter_firstHot_955_956_BIT_0_957_AN_ETC___d1963,
       SEXT_bus_arbiter_lastSelect_951_952_BIT_0_953__ETC___d1959,
       boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d96,
       boot_rom_axi4_deburster_readsSent_port0__read__ETC___d129,
       bus_1_1_reqWires_0_whas__978_AND_bus_1_1_reqWi_ETC___d2992,
       bus_1_1_state_993_AND_bus_1_1_activeSource_0_1_ETC___d3127,
       bus_1_1_state_993_AND_bus_1_1_activeSource_1_1_ETC___d3163,
       bus_1_1_state_993_AND_bus_1_1_activeSource_2_1_ETC___d3199,
       bus_1_1_state_993_AND_bus_1_1_activeSource_3_2_ETC___d3235,
       bus_1_reqWires_0_whas__156_AND_bus_1_reqWires__ETC___d2170,
       bus_1_state_171_AND_bus_1_activeSource_0_295_2_ETC___d2298,
       bus_1_state_171_AND_bus_1_activeSource_1_328_3_ETC___d2331,
       bus_1_state_171_AND_bus_1_activeSource_2_362_3_ETC___d2365,
       bus_1_state_171_AND_bus_1_activeSource_3_396_3_ETC___d2399,
       bus_1_state_1_780_AND_bus_1_activeSource_0_1_8_ETC___d2857,
       bus_1_state_1_780_AND_bus_1_activeSource_1_1_9_ETC___d2904,
       bus_split_0_doPut_whas__441_AND_bus_split_0_do_ETC___d1448,
       bus_split_1_doPut_whas__470_AND_bus_split_1_do_ETC___d1477,
       bus_split_2_doPut_whas__499_AND_bus_split_2_do_ETC___d1506,
       bus_split_3_doPut_whas__528_AND_bus_split_3_do_ETC___d1535,
       bus_state_948_AND_bus_activeSource_0_028_029_A_ETC___d2031,
       bus_state_948_AND_bus_activeSource_1_079_080_A_ETC___d2082,
       core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2528,
       core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2534,
       core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2547,
       core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2525,
       core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2531,
       core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2544,
       core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2549,
       core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2558,
       core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2418,
       core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2424,
       core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2437,
       core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2415,
       core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2421,
       core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2434,
       core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2439,
       core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2448,
       mem0_controller_axi4_deburster_countWriteRspFF_ETC___d234,
       mem0_controller_axi4_deburster_readsSent_port0_ETC___d267,
       x__h102554,
       x__h102657,
       x__h103022,
       x__h103081,
       x__h103163,
       x__h116529,
       x__h116531,
       x__h116603,
       x__h116729,
       x__h116731,
       x__h116791,
       x__h116905,
       x__h116907,
       x__h116967,
       x__h117081,
       x__h117083,
       x__h117143,
       x__h117667,
       x__h117669,
       x__h117730,
       x__h117738,
       x__h117767,
       x__h117802,
       x__h117906,
       x__h117908,
       x__h117968,
       x__h118126,
       x__h118128,
       x__h118188,
       x__h118352,
       x__h118354,
       x__h118414,
       x__h59534,
       x__h59637,
       x__h60002,
       x__h60061,
       x__h60143,
       x__h76653,
       x__h76655,
       x__h76727,
       x__h76853,
       x__h76855,
       x__h76915,
       x__h77029,
       x__h77031,
       x__h77091,
       x__h77205,
       x__h77207,
       x__h77267,
       x__h77791,
       x__h77793,
       x__h77854,
       x__h77862,
       x__h77891,
       x__h77926,
       x__h78030,
       x__h78032,
       x__h78092,
       x__h78250,
       x__h78252,
       x__h78312,
       x__h78476,
       x__h78478,
       x__h78538,
       y__h102555,
       y__h102658,
       y__h103023,
       y__h103164,
       y__h116530,
       y__h116532,
       y__h116604,
       y__h116730,
       y__h116732,
       y__h116792,
       y__h116906,
       y__h116908,
       y__h116968,
       y__h117082,
       y__h117084,
       y__h117144,
       y__h117668,
       y__h117670,
       y__h117739,
       y__h117907,
       y__h117909,
       y__h117969,
       y__h118127,
       y__h118129,
       y__h118189,
       y__h118353,
       y__h118355,
       y__h118415,
       y__h59535,
       y__h59638,
       y__h60003,
       y__h60144,
       y__h76654,
       y__h76656,
       y__h76728,
       y__h76854,
       y__h76856,
       y__h76916,
       y__h77030,
       y__h77032,
       y__h77092,
       y__h77206,
       y__h77208,
       y__h77268,
       y__h77792,
       y__h77794,
       y__h77863,
       y__h78031,
       y__h78033,
       y__h78093,
       y__h78251,
       y__h78253,
       y__h78313,
       y__h78477,
       y__h78479,
       y__h78539;

  // value method to_ddr4_aw_awid
  assign to_ddr4_awid = mem0_controller$to_ddr4_awid ;

  // value method to_ddr4_aw_awaddr
  assign to_ddr4_awaddr = mem0_controller$to_ddr4_awaddr ;

  // value method to_ddr4_aw_awlen
  assign to_ddr4_awlen = mem0_controller$to_ddr4_awlen ;

  // value method to_ddr4_aw_awsize
  assign to_ddr4_awsize = mem0_controller$to_ddr4_awsize ;

  // value method to_ddr4_aw_awburst
  assign to_ddr4_awburst = mem0_controller$to_ddr4_awburst ;

  // value method to_ddr4_aw_awlock
  assign to_ddr4_awlock = mem0_controller$to_ddr4_awlock ;

  // value method to_ddr4_aw_awcache
  assign to_ddr4_awcache = mem0_controller$to_ddr4_awcache ;

  // value method to_ddr4_aw_awprot
  assign to_ddr4_awprot = mem0_controller$to_ddr4_awprot ;

  // value method to_ddr4_aw_awqos
  assign to_ddr4_awqos = mem0_controller$to_ddr4_awqos ;

  // value method to_ddr4_aw_awregion
  assign to_ddr4_awregion = mem0_controller$to_ddr4_awregion ;

  // value method to_ddr4_aw_awvalid
  assign to_ddr4_awvalid = mem0_controller$to_ddr4_awvalid ;

  // action method to_ddr4_aw_awready
  assign CAN_FIRE_to_ddr4_aw_awready = 1'd1 ;
  assign WILL_FIRE_to_ddr4_aw_awready = 1'd1 ;

  // value method to_ddr4_w_wdata
  assign to_ddr4_wdata = mem0_controller$to_ddr4_wdata ;

  // value method to_ddr4_w_wstrb
  assign to_ddr4_wstrb = mem0_controller$to_ddr4_wstrb ;

  // value method to_ddr4_w_wlast
  assign to_ddr4_wlast = mem0_controller$to_ddr4_wlast ;

  // value method to_ddr4_w_wvalid
  assign to_ddr4_wvalid = mem0_controller$to_ddr4_wvalid ;

  // action method to_ddr4_w_wready
  assign CAN_FIRE_to_ddr4_w_wready = 1'd1 ;
  assign WILL_FIRE_to_ddr4_w_wready = 1'd1 ;

  // action method to_ddr4_b_bflit
  assign CAN_FIRE_to_ddr4_b_bflit = 1'd1 ;
  assign WILL_FIRE_to_ddr4_b_bflit = to_ddr4_bvalid ;

  // value method to_ddr4_b_bready
  assign to_ddr4_bready = mem0_controller$to_ddr4_bready ;

  // value method to_ddr4_ar_arid
  assign to_ddr4_arid = mem0_controller$to_ddr4_arid ;

  // value method to_ddr4_ar_araddr
  assign to_ddr4_araddr = mem0_controller$to_ddr4_araddr ;

  // value method to_ddr4_ar_arlen
  assign to_ddr4_arlen = mem0_controller$to_ddr4_arlen ;

  // value method to_ddr4_ar_arsize
  assign to_ddr4_arsize = mem0_controller$to_ddr4_arsize ;

  // value method to_ddr4_ar_arburst
  assign to_ddr4_arburst = mem0_controller$to_ddr4_arburst ;

  // value method to_ddr4_ar_arlock
  assign to_ddr4_arlock = mem0_controller$to_ddr4_arlock ;

  // value method to_ddr4_ar_arcache
  assign to_ddr4_arcache = mem0_controller$to_ddr4_arcache ;

  // value method to_ddr4_ar_arprot
  assign to_ddr4_arprot = mem0_controller$to_ddr4_arprot ;

  // value method to_ddr4_ar_arqos
  assign to_ddr4_arqos = mem0_controller$to_ddr4_arqos ;

  // value method to_ddr4_ar_arregion
  assign to_ddr4_arregion = mem0_controller$to_ddr4_arregion ;

  // value method to_ddr4_ar_arvalid
  assign to_ddr4_arvalid = mem0_controller$to_ddr4_arvalid ;

  // action method to_ddr4_ar_arready
  assign CAN_FIRE_to_ddr4_ar_arready = 1'd1 ;
  assign WILL_FIRE_to_ddr4_ar_arready = 1'd1 ;

  // action method to_ddr4_r_rflit
  assign CAN_FIRE_to_ddr4_r_rflit = 1'd1 ;
  assign WILL_FIRE_to_ddr4_r_rflit = to_ddr4_rvalid ;

  // value method to_ddr4_r_rready
  assign to_ddr4_rready = mem0_controller$to_ddr4_rready ;

  // actionvalue method get_to_console_get
  assign get_to_console_get = uart0$get_to_console_get ;
  assign RDY_get_to_console_get = uart0$RDY_get_to_console_get ;
  assign CAN_FIRE_get_to_console_get = uart0$RDY_get_to_console_get ;
  assign WILL_FIRE_get_to_console_get = EN_get_to_console_get ;

  // action method put_from_console_put
  assign RDY_put_from_console_put = uart0$RDY_put_from_console_put ;
  assign CAN_FIRE_put_from_console_put = uart0$RDY_put_from_console_put ;
  assign WILL_FIRE_put_from_console_put = EN_put_from_console_put ;

  // actionvalue method to_aws_host_get
  assign to_aws_host_get = aws_host_access$to_aws_host_get ;
  assign RDY_to_aws_host_get = aws_host_access$RDY_to_aws_host_get ;
  assign CAN_FIRE_to_aws_host_get = aws_host_access$RDY_to_aws_host_get ;
  assign WILL_FIRE_to_aws_host_get = EN_to_aws_host_get ;

  // action method from_aws_host_put
  assign RDY_from_aws_host_put = aws_host_access$RDY_from_aws_host_put ;
  assign CAN_FIRE_from_aws_host_put = aws_host_access$RDY_from_aws_host_put ;
  assign WILL_FIRE_from_aws_host_put = EN_from_aws_host_put ;

  // action method ma_aws_host_to_hw_interrupt
  assign RDY_ma_aws_host_to_hw_interrupt = 1'd1 ;
  assign CAN_FIRE_ma_aws_host_to_hw_interrupt = 1'd1 ;
  assign WILL_FIRE_ma_aws_host_to_hw_interrupt =
	     EN_ma_aws_host_to_hw_interrupt ;

  // action method ma_set_verbosity
  assign RDY_ma_set_verbosity = 1'd1 ;
  assign CAN_FIRE_ma_set_verbosity = 1'd1 ;
  assign WILL_FIRE_ma_set_verbosity = EN_ma_set_verbosity ;

  // action method ma_set_watch_tohost
  assign RDY_ma_set_watch_tohost = mem0_controller$RDY_ma_set_watch_tohost ;
  assign CAN_FIRE_ma_set_watch_tohost =
	     mem0_controller$RDY_ma_set_watch_tohost ;
  assign WILL_FIRE_ma_set_watch_tohost = EN_ma_set_watch_tohost ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = mem0_controller$RDY_ma_ddr4_ready ;
  assign CAN_FIRE_ma_ddr4_ready = mem0_controller$RDY_ma_ddr4_ready ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = mem0_controller$mv_status ;

  // submodule aws_host_access
  mkAWS_Host_Access aws_host_access(.CLK(CLK),
				    .RST_N(RST_N),
				    .from_aws_host_put(aws_host_access$from_aws_host_put),
				    .slave_araddr(aws_host_access$slave_araddr),
				    .slave_arburst(aws_host_access$slave_arburst),
				    .slave_arcache(aws_host_access$slave_arcache),
				    .slave_arid(aws_host_access$slave_arid),
				    .slave_arlen(aws_host_access$slave_arlen),
				    .slave_arlock(aws_host_access$slave_arlock),
				    .slave_arprot(aws_host_access$slave_arprot),
				    .slave_arqos(aws_host_access$slave_arqos),
				    .slave_arregion(aws_host_access$slave_arregion),
				    .slave_arsize(aws_host_access$slave_arsize),
				    .slave_awaddr(aws_host_access$slave_awaddr),
				    .slave_awburst(aws_host_access$slave_awburst),
				    .slave_awcache(aws_host_access$slave_awcache),
				    .slave_awid(aws_host_access$slave_awid),
				    .slave_awlen(aws_host_access$slave_awlen),
				    .slave_awlock(aws_host_access$slave_awlock),
				    .slave_awprot(aws_host_access$slave_awprot),
				    .slave_awqos(aws_host_access$slave_awqos),
				    .slave_awregion(aws_host_access$slave_awregion),
				    .slave_awsize(aws_host_access$slave_awsize),
				    .slave_bready(aws_host_access$slave_bready),
				    .slave_rready(aws_host_access$slave_rready),
				    .slave_wdata(aws_host_access$slave_wdata),
				    .slave_wlast(aws_host_access$slave_wlast),
				    .slave_wstrb(aws_host_access$slave_wstrb),
				    .slave_wuser(aws_host_access$slave_wuser),
				    .slave_awvalid(aws_host_access$slave_awvalid),
				    .slave_wvalid(aws_host_access$slave_wvalid),
				    .slave_arvalid(aws_host_access$slave_arvalid),
				    .EN_to_aws_host_get(aws_host_access$EN_to_aws_host_get),
				    .EN_from_aws_host_put(aws_host_access$EN_from_aws_host_put),
				    .slave_awready(aws_host_access$slave_awready),
				    .slave_wready(aws_host_access$slave_wready),
				    .slave_bid(aws_host_access$slave_bid),
				    .slave_bresp(aws_host_access$slave_bresp),
				    .slave_bvalid(aws_host_access$slave_bvalid),
				    .slave_arready(aws_host_access$slave_arready),
				    .slave_rid(aws_host_access$slave_rid),
				    .slave_rdata(aws_host_access$slave_rdata),
				    .slave_rresp(aws_host_access$slave_rresp),
				    .slave_rlast(aws_host_access$slave_rlast),
				    .slave_ruser(),
				    .slave_rvalid(aws_host_access$slave_rvalid),
				    .to_aws_host_get(aws_host_access$to_aws_host_get),
				    .RDY_to_aws_host_get(aws_host_access$RDY_to_aws_host_get),
				    .RDY_from_aws_host_put(aws_host_access$RDY_from_aws_host_put));

  // submodule aws_host_access_slave_ar_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) aws_host_access_slave_ar_buffer_ff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(aws_host_access_slave_ar_buffer_ff$D_IN),
							      .ENQ(aws_host_access_slave_ar_buffer_ff$ENQ),
							      .DEQ(aws_host_access_slave_ar_buffer_ff$DEQ),
							      .CLR(aws_host_access_slave_ar_buffer_ff$CLR),
							      .D_OUT(aws_host_access_slave_ar_buffer_ff$D_OUT),
							      .FULL_N(aws_host_access_slave_ar_buffer_ff$FULL_N),
							      .EMPTY_N(aws_host_access_slave_ar_buffer_ff$EMPTY_N));

  // submodule aws_host_access_slave_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) aws_host_access_slave_ar_buffer_firstValid(.CLK(CLK),
								      .D_IN(aws_host_access_slave_ar_buffer_firstValid$D_IN),
								      .EN(aws_host_access_slave_ar_buffer_firstValid$EN),
								      .Q_OUT(aws_host_access_slave_ar_buffer_firstValid$Q_OUT));

  // submodule aws_host_access_slave_aw_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) aws_host_access_slave_aw_buffer_ff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(aws_host_access_slave_aw_buffer_ff$D_IN),
							      .ENQ(aws_host_access_slave_aw_buffer_ff$ENQ),
							      .DEQ(aws_host_access_slave_aw_buffer_ff$DEQ),
							      .CLR(aws_host_access_slave_aw_buffer_ff$CLR),
							      .D_OUT(aws_host_access_slave_aw_buffer_ff$D_OUT),
							      .FULL_N(aws_host_access_slave_aw_buffer_ff$FULL_N),
							      .EMPTY_N(aws_host_access_slave_aw_buffer_ff$EMPTY_N));

  // submodule aws_host_access_slave_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) aws_host_access_slave_aw_buffer_firstValid(.CLK(CLK),
								      .D_IN(aws_host_access_slave_aw_buffer_firstValid$D_IN),
								      .EN(aws_host_access_slave_aw_buffer_firstValid$EN),
								      .Q_OUT(aws_host_access_slave_aw_buffer_firstValid$Q_OUT));

  // submodule aws_host_access_slave_w_buffer_ff
  FIFO1 #(.width(32'd74),
	  .guarded(32'd0)) aws_host_access_slave_w_buffer_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(aws_host_access_slave_w_buffer_ff$D_IN),
							     .ENQ(aws_host_access_slave_w_buffer_ff$ENQ),
							     .DEQ(aws_host_access_slave_w_buffer_ff$DEQ),
							     .CLR(aws_host_access_slave_w_buffer_ff$CLR),
							     .D_OUT(aws_host_access_slave_w_buffer_ff$D_OUT),
							     .FULL_N(aws_host_access_slave_w_buffer_ff$FULL_N),
							     .EMPTY_N(aws_host_access_slave_w_buffer_ff$EMPTY_N));

  // submodule aws_host_access_slave_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) aws_host_access_slave_w_buffer_firstValid(.CLK(CLK),
								     .D_IN(aws_host_access_slave_w_buffer_firstValid$D_IN),
								     .EN(aws_host_access_slave_w_buffer_firstValid$EN),
								     .Q_OUT(aws_host_access_slave_w_buffer_firstValid$Q_OUT));

  // submodule boot_rom
  mkBoot_ROM boot_rom(.CLK(CLK),
		      .RST_N(RST_N),
		      .set_addr_map_addr_base(boot_rom$set_addr_map_addr_base),
		      .set_addr_map_addr_lim(boot_rom$set_addr_map_addr_lim),
		      .slave_araddr(boot_rom$slave_araddr),
		      .slave_arburst(boot_rom$slave_arburst),
		      .slave_arcache(boot_rom$slave_arcache),
		      .slave_arid(boot_rom$slave_arid),
		      .slave_arlen(boot_rom$slave_arlen),
		      .slave_arlock(boot_rom$slave_arlock),
		      .slave_arprot(boot_rom$slave_arprot),
		      .slave_arqos(boot_rom$slave_arqos),
		      .slave_arregion(boot_rom$slave_arregion),
		      .slave_arsize(boot_rom$slave_arsize),
		      .slave_awaddr(boot_rom$slave_awaddr),
		      .slave_awburst(boot_rom$slave_awburst),
		      .slave_awcache(boot_rom$slave_awcache),
		      .slave_awid(boot_rom$slave_awid),
		      .slave_awlen(boot_rom$slave_awlen),
		      .slave_awlock(boot_rom$slave_awlock),
		      .slave_awprot(boot_rom$slave_awprot),
		      .slave_awqos(boot_rom$slave_awqos),
		      .slave_awregion(boot_rom$slave_awregion),
		      .slave_awsize(boot_rom$slave_awsize),
		      .slave_bready(boot_rom$slave_bready),
		      .slave_rready(boot_rom$slave_rready),
		      .slave_wdata(boot_rom$slave_wdata),
		      .slave_wlast(boot_rom$slave_wlast),
		      .slave_wstrb(boot_rom$slave_wstrb),
		      .EN_set_addr_map(boot_rom$EN_set_addr_map),
		      .slave_awvalid(boot_rom$slave_awvalid),
		      .slave_wvalid(boot_rom$slave_wvalid),
		      .slave_arvalid(boot_rom$slave_arvalid),
		      .RDY_set_addr_map(boot_rom$RDY_set_addr_map),
		      .slave_awready(boot_rom$slave_awready),
		      .slave_wready(boot_rom$slave_wready),
		      .slave_bid(boot_rom$slave_bid),
		      .slave_bresp(boot_rom$slave_bresp),
		      .slave_bvalid(boot_rom$slave_bvalid),
		      .slave_arready(boot_rom$slave_arready),
		      .slave_rid(boot_rom$slave_rid),
		      .slave_rdata(boot_rom$slave_rdata),
		      .slave_rresp(boot_rom$slave_rresp),
		      .slave_rlast(boot_rom$slave_rlast),
		      .slave_rvalid(boot_rom$slave_rvalid));

  // submodule boot_rom_axi4_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) boot_rom_axi4_deburster_countWriteRspFF(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(boot_rom_axi4_deburster_countWriteRspFF$D_IN),
								       .ENQ(boot_rom_axi4_deburster_countWriteRspFF$ENQ),
								       .DEQ(boot_rom_axi4_deburster_countWriteRspFF$DEQ),
								       .CLR(boot_rom_axi4_deburster_countWriteRspFF$CLR),
								       .D_OUT(boot_rom_axi4_deburster_countWriteRspFF$D_OUT),
								       .FULL_N(boot_rom_axi4_deburster_countWriteRspFF$FULL_N),
								       .EMPTY_N(boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) boot_rom_axi4_deburster_inShim_arff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_inShim_arff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_inShim_arff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_inShim_arff$DEQ),
							       .CLR(boot_rom_axi4_deburster_inShim_arff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_inShim_arff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_inShim_arff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_inShim_arff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) boot_rom_axi4_deburster_inShim_awff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_inShim_awff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_inShim_awff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_inShim_awff$DEQ),
							       .CLR(boot_rom_axi4_deburster_inShim_awff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_inShim_awff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_inShim_awff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_inShim_awff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(32'd1)) boot_rom_axi4_deburster_inShim_bff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_inShim_bff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_inShim_bff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_inShim_bff$DEQ),
							      .CLR(boot_rom_axi4_deburster_inShim_bff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_inShim_bff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_inShim_bff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_inShim_bff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(32'd1)) boot_rom_axi4_deburster_inShim_rff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_inShim_rff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_inShim_rff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_inShim_rff$DEQ),
							      .CLR(boot_rom_axi4_deburster_inShim_rff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_inShim_rff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_inShim_rff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_inShim_rff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_inShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) boot_rom_axi4_deburster_inShim_wff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(boot_rom_axi4_deburster_inShim_wff$D_IN),
							      .ENQ(boot_rom_axi4_deburster_inShim_wff$ENQ),
							      .DEQ(boot_rom_axi4_deburster_inShim_wff$DEQ),
							      .CLR(boot_rom_axi4_deburster_inShim_wff$CLR),
							      .D_OUT(boot_rom_axi4_deburster_inShim_wff$D_OUT),
							      .FULL_N(boot_rom_axi4_deburster_inShim_wff$FULL_N),
							      .EMPTY_N(boot_rom_axi4_deburster_inShim_wff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) boot_rom_axi4_deburster_lastReadRspFF(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(boot_rom_axi4_deburster_lastReadRspFF$D_IN),
								     .ENQ(boot_rom_axi4_deburster_lastReadRspFF$ENQ),
								     .DEQ(boot_rom_axi4_deburster_lastReadRspFF$DEQ),
								     .CLR(boot_rom_axi4_deburster_lastReadRspFF$CLR),
								     .D_OUT(boot_rom_axi4_deburster_lastReadRspFF$D_OUT),
								     .FULL_N(boot_rom_axi4_deburster_lastReadRspFF$FULL_N),
								     .EMPTY_N(boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) boot_rom_axi4_deburster_outShim_arff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(boot_rom_axi4_deburster_outShim_arff$D_IN),
								.ENQ(boot_rom_axi4_deburster_outShim_arff$ENQ),
								.DEQ(boot_rom_axi4_deburster_outShim_arff$DEQ),
								.CLR(boot_rom_axi4_deburster_outShim_arff$CLR),
								.D_OUT(boot_rom_axi4_deburster_outShim_arff$D_OUT),
								.FULL_N(boot_rom_axi4_deburster_outShim_arff$FULL_N),
								.EMPTY_N(boot_rom_axi4_deburster_outShim_arff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) boot_rom_axi4_deburster_outShim_awff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(boot_rom_axi4_deburster_outShim_awff$D_IN),
								.ENQ(boot_rom_axi4_deburster_outShim_awff$ENQ),
								.DEQ(boot_rom_axi4_deburster_outShim_awff$DEQ),
								.CLR(boot_rom_axi4_deburster_outShim_awff$CLR),
								.D_OUT(boot_rom_axi4_deburster_outShim_awff$D_OUT),
								.FULL_N(boot_rom_axi4_deburster_outShim_awff$FULL_N),
								.EMPTY_N(boot_rom_axi4_deburster_outShim_awff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(32'd1)) boot_rom_axi4_deburster_outShim_bff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_outShim_bff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_outShim_bff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_outShim_bff$DEQ),
							       .CLR(boot_rom_axi4_deburster_outShim_bff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_outShim_bff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_outShim_bff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_outShim_bff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(32'd1)) boot_rom_axi4_deburster_outShim_rff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_outShim_rff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_outShim_rff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_outShim_rff$DEQ),
							       .CLR(boot_rom_axi4_deburster_outShim_rff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_outShim_rff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_outShim_rff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_outShim_rff$EMPTY_N));

  // submodule boot_rom_axi4_deburster_outShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) boot_rom_axi4_deburster_outShim_wff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(boot_rom_axi4_deburster_outShim_wff$D_IN),
							       .ENQ(boot_rom_axi4_deburster_outShim_wff$ENQ),
							       .DEQ(boot_rom_axi4_deburster_outShim_wff$DEQ),
							       .CLR(boot_rom_axi4_deburster_outShim_wff$CLR),
							       .D_OUT(boot_rom_axi4_deburster_outShim_wff$D_OUT),
							       .FULL_N(boot_rom_axi4_deburster_outShim_wff$FULL_N),
							       .EMPTY_N(boot_rom_axi4_deburster_outShim_wff$EMPTY_N));

  // submodule br_ar_buffer_ff
  FIFO1 #(.width(32'd100), .guarded(32'd0)) br_ar_buffer_ff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(br_ar_buffer_ff$D_IN),
							    .ENQ(br_ar_buffer_ff$ENQ),
							    .DEQ(br_ar_buffer_ff$DEQ),
							    .CLR(br_ar_buffer_ff$CLR),
							    .D_OUT(br_ar_buffer_ff$D_OUT),
							    .FULL_N(br_ar_buffer_ff$FULL_N),
							    .EMPTY_N(br_ar_buffer_ff$EMPTY_N));

  // submodule br_ar_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) br_ar_buffer_firstValid(.CLK(CLK),
								  .D_IN(br_ar_buffer_firstValid$D_IN),
								  .EN(br_ar_buffer_firstValid$EN),
								  .Q_OUT(br_ar_buffer_firstValid$Q_OUT));

  // submodule br_aw_buffer_ff
  FIFO1 #(.width(32'd100), .guarded(32'd0)) br_aw_buffer_ff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(br_aw_buffer_ff$D_IN),
							    .ENQ(br_aw_buffer_ff$ENQ),
							    .DEQ(br_aw_buffer_ff$DEQ),
							    .CLR(br_aw_buffer_ff$CLR),
							    .D_OUT(br_aw_buffer_ff$D_OUT),
							    .FULL_N(br_aw_buffer_ff$FULL_N),
							    .EMPTY_N(br_aw_buffer_ff$EMPTY_N));

  // submodule br_aw_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) br_aw_buffer_firstValid(.CLK(CLK),
								  .D_IN(br_aw_buffer_firstValid$D_IN),
								  .EN(br_aw_buffer_firstValid$EN),
								  .Q_OUT(br_aw_buffer_firstValid$Q_OUT));

  // submodule br_w_buffer_ff
  FIFO1 #(.width(32'd73), .guarded(32'd0)) br_w_buffer_ff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(br_w_buffer_ff$D_IN),
							  .ENQ(br_w_buffer_ff$ENQ),
							  .DEQ(br_w_buffer_ff$DEQ),
							  .CLR(br_w_buffer_ff$CLR),
							  .D_OUT(br_w_buffer_ff$D_OUT),
							  .FULL_N(br_w_buffer_ff$FULL_N),
							  .EMPTY_N(br_w_buffer_ff$EMPTY_N));

  // submodule br_w_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) br_w_buffer_firstValid(.CLK(CLK),
								 .D_IN(br_w_buffer_firstValid$D_IN),
								 .EN(br_w_buffer_firstValid$EN),
								 .Q_OUT(br_w_buffer_firstValid$Q_OUT));

  // submodule bus_1_ifcs_0_innerReq
  FIFO2 #(.width(32'd100), .guarded(32'd1)) bus_1_ifcs_0_innerReq(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(bus_1_ifcs_0_innerReq$D_IN),
								  .ENQ(bus_1_ifcs_0_innerReq$ENQ),
								  .DEQ(bus_1_ifcs_0_innerReq$DEQ),
								  .CLR(bus_1_ifcs_0_innerReq$CLR),
								  .D_OUT(bus_1_ifcs_0_innerReq$D_OUT),
								  .FULL_N(bus_1_ifcs_0_innerReq$FULL_N),
								  .EMPTY_N(bus_1_ifcs_0_innerReq$EMPTY_N));

  // submodule bus_1_ifcs_0_innerRoute
  FIFO2 #(.width(32'd4), .guarded(32'd1)) bus_1_ifcs_0_innerRoute(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(bus_1_ifcs_0_innerRoute$D_IN),
								  .ENQ(bus_1_ifcs_0_innerRoute$ENQ),
								  .DEQ(bus_1_ifcs_0_innerRoute$DEQ),
								  .CLR(bus_1_ifcs_0_innerRoute$CLR),
								  .D_OUT(bus_1_ifcs_0_innerRoute$D_OUT),
								  .FULL_N(bus_1_ifcs_0_innerRoute$FULL_N),
								  .EMPTY_N(bus_1_ifcs_0_innerRoute$EMPTY_N));

  // submodule bus_1_ifcs_0_noRouteRsp
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) bus_1_ifcs_0_noRouteRsp(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(bus_1_ifcs_0_noRouteRsp$D_IN),
						   .ENQ(bus_1_ifcs_0_noRouteRsp$ENQ),
						   .DEQ(bus_1_ifcs_0_noRouteRsp$DEQ),
						   .CLR(bus_1_ifcs_0_noRouteRsp$CLR),
						   .D_OUT(bus_1_ifcs_0_noRouteRsp$D_OUT),
						   .FULL_N(bus_1_ifcs_0_noRouteRsp$FULL_N),
						   .EMPTY_N(bus_1_ifcs_0_noRouteRsp$EMPTY_N));

  // submodule bus_1_ifcs_0_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_1_ifcs_0_routeBack(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(bus_1_ifcs_0_routeBack$D_IN),
								 .ENQ(bus_1_ifcs_0_routeBack$ENQ),
								 .DEQ(bus_1_ifcs_0_routeBack$DEQ),
								 .CLR(bus_1_ifcs_0_routeBack$CLR),
								 .D_OUT(bus_1_ifcs_0_routeBack$D_OUT),
								 .FULL_N(bus_1_ifcs_0_routeBack$FULL_N),
								 .EMPTY_N(bus_1_ifcs_0_routeBack$EMPTY_N));

  // submodule bus_1_ifcs_0_rspBack
  FIFO2 #(.width(32'd73), .guarded(32'd1)) bus_1_ifcs_0_rspBack(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_1_ifcs_0_rspBack$D_IN),
								.ENQ(bus_1_ifcs_0_rspBack$ENQ),
								.DEQ(bus_1_ifcs_0_rspBack$DEQ),
								.CLR(bus_1_ifcs_0_rspBack$CLR),
								.D_OUT(bus_1_ifcs_0_rspBack$D_OUT),
								.FULL_N(bus_1_ifcs_0_rspBack$FULL_N),
								.EMPTY_N(bus_1_ifcs_0_rspBack$EMPTY_N));

  // submodule bus_1_ifcs_1_innerReq
  FIFO2 #(.width(32'd100), .guarded(32'd1)) bus_1_ifcs_1_innerReq(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(bus_1_ifcs_1_innerReq$D_IN),
								  .ENQ(bus_1_ifcs_1_innerReq$ENQ),
								  .DEQ(bus_1_ifcs_1_innerReq$DEQ),
								  .CLR(bus_1_ifcs_1_innerReq$CLR),
								  .D_OUT(bus_1_ifcs_1_innerReq$D_OUT),
								  .FULL_N(bus_1_ifcs_1_innerReq$FULL_N),
								  .EMPTY_N(bus_1_ifcs_1_innerReq$EMPTY_N));

  // submodule bus_1_ifcs_1_innerRoute
  FIFO2 #(.width(32'd4), .guarded(32'd1)) bus_1_ifcs_1_innerRoute(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(bus_1_ifcs_1_innerRoute$D_IN),
								  .ENQ(bus_1_ifcs_1_innerRoute$ENQ),
								  .DEQ(bus_1_ifcs_1_innerRoute$DEQ),
								  .CLR(bus_1_ifcs_1_innerRoute$CLR),
								  .D_OUT(bus_1_ifcs_1_innerRoute$D_OUT),
								  .FULL_N(bus_1_ifcs_1_innerRoute$FULL_N),
								  .EMPTY_N(bus_1_ifcs_1_innerRoute$EMPTY_N));

  // submodule bus_1_ifcs_1_noRouteRsp
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) bus_1_ifcs_1_noRouteRsp(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(bus_1_ifcs_1_noRouteRsp$D_IN),
						   .ENQ(bus_1_ifcs_1_noRouteRsp$ENQ),
						   .DEQ(bus_1_ifcs_1_noRouteRsp$DEQ),
						   .CLR(bus_1_ifcs_1_noRouteRsp$CLR),
						   .D_OUT(bus_1_ifcs_1_noRouteRsp$D_OUT),
						   .FULL_N(bus_1_ifcs_1_noRouteRsp$FULL_N),
						   .EMPTY_N(bus_1_ifcs_1_noRouteRsp$EMPTY_N));

  // submodule bus_1_ifcs_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_1_ifcs_1_routeBack(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(bus_1_ifcs_1_routeBack$D_IN),
								 .ENQ(bus_1_ifcs_1_routeBack$ENQ),
								 .DEQ(bus_1_ifcs_1_routeBack$DEQ),
								 .CLR(bus_1_ifcs_1_routeBack$CLR),
								 .D_OUT(bus_1_ifcs_1_routeBack$D_OUT),
								 .FULL_N(bus_1_ifcs_1_routeBack$FULL_N),
								 .EMPTY_N(bus_1_ifcs_1_routeBack$EMPTY_N));

  // submodule bus_1_ifcs_1_rspBack
  FIFO2 #(.width(32'd73), .guarded(32'd1)) bus_1_ifcs_1_rspBack(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_1_ifcs_1_rspBack$D_IN),
								.ENQ(bus_1_ifcs_1_rspBack$ENQ),
								.DEQ(bus_1_ifcs_1_rspBack$DEQ),
								.CLR(bus_1_ifcs_1_rspBack$CLR),
								.D_OUT(bus_1_ifcs_1_rspBack$D_OUT),
								.FULL_N(bus_1_ifcs_1_rspBack$FULL_N),
								.EMPTY_N(bus_1_ifcs_1_rspBack$EMPTY_N));

  // submodule bus_1_ifcs_2_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_1_ifcs_2_routeBack(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(bus_1_ifcs_2_routeBack$D_IN),
								 .ENQ(bus_1_ifcs_2_routeBack$ENQ),
								 .DEQ(bus_1_ifcs_2_routeBack$DEQ),
								 .CLR(bus_1_ifcs_2_routeBack$CLR),
								 .D_OUT(bus_1_ifcs_2_routeBack$D_OUT),
								 .FULL_N(bus_1_ifcs_2_routeBack$FULL_N),
								 .EMPTY_N(bus_1_ifcs_2_routeBack$EMPTY_N));

  // submodule bus_1_ifcs_2_rspBack
  FIFO2 #(.width(32'd73), .guarded(32'd1)) bus_1_ifcs_2_rspBack(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_1_ifcs_2_rspBack$D_IN),
								.ENQ(bus_1_ifcs_2_rspBack$ENQ),
								.DEQ(bus_1_ifcs_2_rspBack$DEQ),
								.CLR(bus_1_ifcs_2_rspBack$CLR),
								.D_OUT(bus_1_ifcs_2_rspBack$D_OUT),
								.FULL_N(bus_1_ifcs_2_rspBack$FULL_N),
								.EMPTY_N(bus_1_ifcs_2_rspBack$EMPTY_N));

  // submodule bus_1_ifcs_3_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_1_ifcs_3_routeBack(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(bus_1_ifcs_3_routeBack$D_IN),
								 .ENQ(bus_1_ifcs_3_routeBack$ENQ),
								 .DEQ(bus_1_ifcs_3_routeBack$DEQ),
								 .CLR(bus_1_ifcs_3_routeBack$CLR),
								 .D_OUT(bus_1_ifcs_3_routeBack$D_OUT),
								 .FULL_N(bus_1_ifcs_3_routeBack$FULL_N),
								 .EMPTY_N(bus_1_ifcs_3_routeBack$EMPTY_N));

  // submodule bus_1_ifcs_3_rspBack
  FIFO2 #(.width(32'd73), .guarded(32'd1)) bus_1_ifcs_3_rspBack(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_1_ifcs_3_rspBack$D_IN),
								.ENQ(bus_1_ifcs_3_rspBack$ENQ),
								.DEQ(bus_1_ifcs_3_rspBack$DEQ),
								.CLR(bus_1_ifcs_3_rspBack$CLR),
								.D_OUT(bus_1_ifcs_3_rspBack$D_OUT),
								.FULL_N(bus_1_ifcs_3_rspBack$FULL_N),
								.EMPTY_N(bus_1_ifcs_3_rspBack$EMPTY_N));

  // submodule bus_ifcs_0_innerReq
  FIFO2 #(.width(32'd174), .guarded(32'd1)) bus_ifcs_0_innerReq(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_0_innerReq$D_IN),
								.ENQ(bus_ifcs_0_innerReq$ENQ),
								.DEQ(bus_ifcs_0_innerReq$DEQ),
								.CLR(bus_ifcs_0_innerReq$CLR),
								.D_OUT(bus_ifcs_0_innerReq$D_OUT),
								.FULL_N(bus_ifcs_0_innerReq$FULL_N),
								.EMPTY_N(bus_ifcs_0_innerReq$EMPTY_N));

  // submodule bus_ifcs_0_innerRoute
  FIFO2 #(.width(32'd4), .guarded(32'd1)) bus_ifcs_0_innerRoute(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_0_innerRoute$D_IN),
								.ENQ(bus_ifcs_0_innerRoute$ENQ),
								.DEQ(bus_ifcs_0_innerRoute$DEQ),
								.CLR(bus_ifcs_0_innerRoute$CLR),
								.D_OUT(bus_ifcs_0_innerRoute$D_OUT),
								.FULL_N(bus_ifcs_0_innerRoute$FULL_N),
								.EMPTY_N(bus_ifcs_0_innerRoute$EMPTY_N));

  // submodule bus_ifcs_0_noRouteRsp
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_0_noRouteRsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_0_noRouteRsp$D_IN),
								.ENQ(bus_ifcs_0_noRouteRsp$ENQ),
								.DEQ(bus_ifcs_0_noRouteRsp$DEQ),
								.CLR(bus_ifcs_0_noRouteRsp$CLR),
								.D_OUT(bus_ifcs_0_noRouteRsp$D_OUT),
								.FULL_N(bus_ifcs_0_noRouteRsp$FULL_N),
								.EMPTY_N(bus_ifcs_0_noRouteRsp$EMPTY_N));

  // submodule bus_ifcs_0_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_ifcs_0_routeBack(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(bus_ifcs_0_routeBack$D_IN),
							       .ENQ(bus_ifcs_0_routeBack$ENQ),
							       .DEQ(bus_ifcs_0_routeBack$DEQ),
							       .CLR(bus_ifcs_0_routeBack$CLR),
							       .D_OUT(bus_ifcs_0_routeBack$D_OUT),
							       .FULL_N(bus_ifcs_0_routeBack$FULL_N),
							       .EMPTY_N(bus_ifcs_0_routeBack$EMPTY_N));

  // submodule bus_ifcs_0_rspBack
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_0_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(bus_ifcs_0_rspBack$D_IN),
							     .ENQ(bus_ifcs_0_rspBack$ENQ),
							     .DEQ(bus_ifcs_0_rspBack$DEQ),
							     .CLR(bus_ifcs_0_rspBack$CLR),
							     .D_OUT(bus_ifcs_0_rspBack$D_OUT),
							     .FULL_N(bus_ifcs_0_rspBack$FULL_N),
							     .EMPTY_N(bus_ifcs_0_rspBack$EMPTY_N));

  // submodule bus_ifcs_1_innerReq
  FIFO2 #(.width(32'd174), .guarded(32'd1)) bus_ifcs_1_innerReq(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_1_innerReq$D_IN),
								.ENQ(bus_ifcs_1_innerReq$ENQ),
								.DEQ(bus_ifcs_1_innerReq$DEQ),
								.CLR(bus_ifcs_1_innerReq$CLR),
								.D_OUT(bus_ifcs_1_innerReq$D_OUT),
								.FULL_N(bus_ifcs_1_innerReq$FULL_N),
								.EMPTY_N(bus_ifcs_1_innerReq$EMPTY_N));

  // submodule bus_ifcs_1_innerRoute
  FIFO2 #(.width(32'd4), .guarded(32'd1)) bus_ifcs_1_innerRoute(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_1_innerRoute$D_IN),
								.ENQ(bus_ifcs_1_innerRoute$ENQ),
								.DEQ(bus_ifcs_1_innerRoute$DEQ),
								.CLR(bus_ifcs_1_innerRoute$CLR),
								.D_OUT(bus_ifcs_1_innerRoute$D_OUT),
								.FULL_N(bus_ifcs_1_innerRoute$FULL_N),
								.EMPTY_N(bus_ifcs_1_innerRoute$EMPTY_N));

  // submodule bus_ifcs_1_noRouteRsp
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_1_noRouteRsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(bus_ifcs_1_noRouteRsp$D_IN),
								.ENQ(bus_ifcs_1_noRouteRsp$ENQ),
								.DEQ(bus_ifcs_1_noRouteRsp$DEQ),
								.CLR(bus_ifcs_1_noRouteRsp$CLR),
								.D_OUT(bus_ifcs_1_noRouteRsp$D_OUT),
								.FULL_N(bus_ifcs_1_noRouteRsp$FULL_N),
								.EMPTY_N(bus_ifcs_1_noRouteRsp$EMPTY_N));

  // submodule bus_ifcs_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_ifcs_1_routeBack(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(bus_ifcs_1_routeBack$D_IN),
							       .ENQ(bus_ifcs_1_routeBack$ENQ),
							       .DEQ(bus_ifcs_1_routeBack$DEQ),
							       .CLR(bus_ifcs_1_routeBack$CLR),
							       .D_OUT(bus_ifcs_1_routeBack$D_OUT),
							       .FULL_N(bus_ifcs_1_routeBack$FULL_N),
							       .EMPTY_N(bus_ifcs_1_routeBack$EMPTY_N));

  // submodule bus_ifcs_1_rspBack
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(bus_ifcs_1_rspBack$D_IN),
							     .ENQ(bus_ifcs_1_rspBack$ENQ),
							     .DEQ(bus_ifcs_1_rspBack$DEQ),
							     .CLR(bus_ifcs_1_rspBack$CLR),
							     .D_OUT(bus_ifcs_1_rspBack$D_OUT),
							     .FULL_N(bus_ifcs_1_rspBack$FULL_N),
							     .EMPTY_N(bus_ifcs_1_rspBack$EMPTY_N));

  // submodule bus_ifcs_2_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_ifcs_2_routeBack(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(bus_ifcs_2_routeBack$D_IN),
							       .ENQ(bus_ifcs_2_routeBack$ENQ),
							       .DEQ(bus_ifcs_2_routeBack$DEQ),
							       .CLR(bus_ifcs_2_routeBack$CLR),
							       .D_OUT(bus_ifcs_2_routeBack$D_OUT),
							       .FULL_N(bus_ifcs_2_routeBack$FULL_N),
							       .EMPTY_N(bus_ifcs_2_routeBack$EMPTY_N));

  // submodule bus_ifcs_2_rspBack
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_2_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(bus_ifcs_2_rspBack$D_IN),
							     .ENQ(bus_ifcs_2_rspBack$ENQ),
							     .DEQ(bus_ifcs_2_rspBack$DEQ),
							     .CLR(bus_ifcs_2_rspBack$CLR),
							     .D_OUT(bus_ifcs_2_rspBack$D_OUT),
							     .FULL_N(bus_ifcs_2_rspBack$FULL_N),
							     .EMPTY_N(bus_ifcs_2_rspBack$EMPTY_N));

  // submodule bus_ifcs_3_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) bus_ifcs_3_routeBack(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(bus_ifcs_3_routeBack$D_IN),
							       .ENQ(bus_ifcs_3_routeBack$ENQ),
							       .DEQ(bus_ifcs_3_routeBack$DEQ),
							       .CLR(bus_ifcs_3_routeBack$CLR),
							       .D_OUT(bus_ifcs_3_routeBack$D_OUT),
							       .FULL_N(bus_ifcs_3_routeBack$FULL_N),
							       .EMPTY_N(bus_ifcs_3_routeBack$EMPTY_N));

  // submodule bus_ifcs_3_rspBack
  FIFO2 #(.width(32'd8), .guarded(32'd1)) bus_ifcs_3_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(bus_ifcs_3_rspBack$D_IN),
							     .ENQ(bus_ifcs_3_rspBack$ENQ),
							     .DEQ(bus_ifcs_3_rspBack$DEQ),
							     .CLR(bus_ifcs_3_rspBack$CLR),
							     .D_OUT(bus_ifcs_3_rspBack$D_OUT),
							     .FULL_N(bus_ifcs_3_rspBack$FULL_N),
							     .EMPTY_N(bus_ifcs_3_rspBack$EMPTY_N));

  // submodule bus_msNoSynth_0_b_buffer_ff
  FIFO1 #(.width(32'd8),
	  .guarded(32'd0)) bus_msNoSynth_0_b_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_msNoSynth_0_b_buffer_ff$D_IN),
						       .ENQ(bus_msNoSynth_0_b_buffer_ff$ENQ),
						       .DEQ(bus_msNoSynth_0_b_buffer_ff$DEQ),
						       .CLR(bus_msNoSynth_0_b_buffer_ff$CLR),
						       .D_OUT(bus_msNoSynth_0_b_buffer_ff$D_OUT),
						       .FULL_N(bus_msNoSynth_0_b_buffer_ff$FULL_N),
						       .EMPTY_N(bus_msNoSynth_0_b_buffer_ff$EMPTY_N));

  // submodule bus_msNoSynth_0_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_msNoSynth_0_b_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_msNoSynth_0_b_buffer_firstValid$D_IN),
							       .EN(bus_msNoSynth_0_b_buffer_firstValid$EN),
							       .Q_OUT(bus_msNoSynth_0_b_buffer_firstValid$Q_OUT));

  // submodule bus_msNoSynth_0_r_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_msNoSynth_0_r_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_msNoSynth_0_r_buffer_ff$D_IN),
						       .ENQ(bus_msNoSynth_0_r_buffer_ff$ENQ),
						       .DEQ(bus_msNoSynth_0_r_buffer_ff$DEQ),
						       .CLR(bus_msNoSynth_0_r_buffer_ff$CLR),
						       .D_OUT(bus_msNoSynth_0_r_buffer_ff$D_OUT),
						       .FULL_N(bus_msNoSynth_0_r_buffer_ff$FULL_N),
						       .EMPTY_N(bus_msNoSynth_0_r_buffer_ff$EMPTY_N));

  // submodule bus_msNoSynth_0_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_msNoSynth_0_r_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_msNoSynth_0_r_buffer_firstValid$D_IN),
							       .EN(bus_msNoSynth_0_r_buffer_firstValid$EN),
							       .Q_OUT(bus_msNoSynth_0_r_buffer_firstValid$Q_OUT));

  // submodule bus_msNoSynth_1_b_buffer_ff
  FIFO1 #(.width(32'd8),
	  .guarded(32'd0)) bus_msNoSynth_1_b_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_msNoSynth_1_b_buffer_ff$D_IN),
						       .ENQ(bus_msNoSynth_1_b_buffer_ff$ENQ),
						       .DEQ(bus_msNoSynth_1_b_buffer_ff$DEQ),
						       .CLR(bus_msNoSynth_1_b_buffer_ff$CLR),
						       .D_OUT(bus_msNoSynth_1_b_buffer_ff$D_OUT),
						       .FULL_N(bus_msNoSynth_1_b_buffer_ff$FULL_N),
						       .EMPTY_N(bus_msNoSynth_1_b_buffer_ff$EMPTY_N));

  // submodule bus_msNoSynth_1_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_msNoSynth_1_b_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_msNoSynth_1_b_buffer_firstValid$D_IN),
							       .EN(bus_msNoSynth_1_b_buffer_firstValid$EN),
							       .Q_OUT(bus_msNoSynth_1_b_buffer_firstValid$Q_OUT));

  // submodule bus_msNoSynth_1_r_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_msNoSynth_1_r_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_msNoSynth_1_r_buffer_ff$D_IN),
						       .ENQ(bus_msNoSynth_1_r_buffer_ff$ENQ),
						       .DEQ(bus_msNoSynth_1_r_buffer_ff$DEQ),
						       .CLR(bus_msNoSynth_1_r_buffer_ff$CLR),
						       .D_OUT(bus_msNoSynth_1_r_buffer_ff$D_OUT),
						       .FULL_N(bus_msNoSynth_1_r_buffer_ff$FULL_N),
						       .EMPTY_N(bus_msNoSynth_1_r_buffer_ff$EMPTY_N));

  // submodule bus_msNoSynth_1_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_msNoSynth_1_r_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_msNoSynth_1_r_buffer_firstValid$D_IN),
							       .EN(bus_msNoSynth_1_r_buffer_firstValid$EN),
							       .Q_OUT(bus_msNoSynth_1_r_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_0_ar_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_0_ar_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_0_ar_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_0_ar_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_0_ar_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_0_ar_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_0_ar_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_0_ar_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_0_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_0_ar_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_0_ar_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_0_ar_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_0_ar_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_0_aw_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_0_aw_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_0_aw_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_0_aw_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_0_aw_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_0_aw_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_0_aw_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_0_aw_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_0_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_0_aw_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_0_aw_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_0_aw_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_0_aw_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_0_w_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_ssNoSynth_0_w_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_ssNoSynth_0_w_buffer_ff$D_IN),
						       .ENQ(bus_ssNoSynth_0_w_buffer_ff$ENQ),
						       .DEQ(bus_ssNoSynth_0_w_buffer_ff$DEQ),
						       .CLR(bus_ssNoSynth_0_w_buffer_ff$CLR),
						       .D_OUT(bus_ssNoSynth_0_w_buffer_ff$D_OUT),
						       .FULL_N(bus_ssNoSynth_0_w_buffer_ff$FULL_N),
						       .EMPTY_N(bus_ssNoSynth_0_w_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_0_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_0_w_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_ssNoSynth_0_w_buffer_firstValid$D_IN),
							       .EN(bus_ssNoSynth_0_w_buffer_firstValid$EN),
							       .Q_OUT(bus_ssNoSynth_0_w_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_1_ar_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_1_ar_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_1_ar_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_1_ar_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_1_ar_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_1_ar_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_1_ar_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_1_ar_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_1_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_1_ar_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_1_ar_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_1_ar_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_1_ar_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_1_aw_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_1_aw_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_1_aw_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_1_aw_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_1_aw_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_1_aw_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_1_aw_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_1_aw_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_1_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_1_aw_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_1_aw_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_1_aw_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_1_aw_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_1_w_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_ssNoSynth_1_w_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_ssNoSynth_1_w_buffer_ff$D_IN),
						       .ENQ(bus_ssNoSynth_1_w_buffer_ff$ENQ),
						       .DEQ(bus_ssNoSynth_1_w_buffer_ff$DEQ),
						       .CLR(bus_ssNoSynth_1_w_buffer_ff$CLR),
						       .D_OUT(bus_ssNoSynth_1_w_buffer_ff$D_OUT),
						       .FULL_N(bus_ssNoSynth_1_w_buffer_ff$FULL_N),
						       .EMPTY_N(bus_ssNoSynth_1_w_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_1_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_1_w_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_ssNoSynth_1_w_buffer_firstValid$D_IN),
							       .EN(bus_ssNoSynth_1_w_buffer_firstValid$EN),
							       .Q_OUT(bus_ssNoSynth_1_w_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_2_ar_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_2_ar_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_2_ar_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_2_ar_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_2_ar_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_2_ar_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_2_ar_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_2_ar_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_2_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_2_ar_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_2_ar_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_2_ar_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_2_ar_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_2_aw_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_2_aw_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_2_aw_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_2_aw_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_2_aw_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_2_aw_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_2_aw_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_2_aw_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_2_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_2_aw_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_2_aw_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_2_aw_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_2_aw_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_2_w_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_ssNoSynth_2_w_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_ssNoSynth_2_w_buffer_ff$D_IN),
						       .ENQ(bus_ssNoSynth_2_w_buffer_ff$ENQ),
						       .DEQ(bus_ssNoSynth_2_w_buffer_ff$DEQ),
						       .CLR(bus_ssNoSynth_2_w_buffer_ff$CLR),
						       .D_OUT(bus_ssNoSynth_2_w_buffer_ff$D_OUT),
						       .FULL_N(bus_ssNoSynth_2_w_buffer_ff$FULL_N),
						       .EMPTY_N(bus_ssNoSynth_2_w_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_2_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_2_w_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_ssNoSynth_2_w_buffer_firstValid$D_IN),
							       .EN(bus_ssNoSynth_2_w_buffer_firstValid$EN),
							       .Q_OUT(bus_ssNoSynth_2_w_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_3_ar_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_3_ar_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_3_ar_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_3_ar_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_3_ar_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_3_ar_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_3_ar_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_3_ar_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_3_ar_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_3_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_3_ar_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_3_ar_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_3_ar_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_3_ar_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_3_aw_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) bus_ssNoSynth_3_aw_buffer_ff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(bus_ssNoSynth_3_aw_buffer_ff$D_IN),
							.ENQ(bus_ssNoSynth_3_aw_buffer_ff$ENQ),
							.DEQ(bus_ssNoSynth_3_aw_buffer_ff$DEQ),
							.CLR(bus_ssNoSynth_3_aw_buffer_ff$CLR),
							.D_OUT(bus_ssNoSynth_3_aw_buffer_ff$D_OUT),
							.FULL_N(bus_ssNoSynth_3_aw_buffer_ff$FULL_N),
							.EMPTY_N(bus_ssNoSynth_3_aw_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_3_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_3_aw_buffer_firstValid(.CLK(CLK),
								.D_IN(bus_ssNoSynth_3_aw_buffer_firstValid$D_IN),
								.EN(bus_ssNoSynth_3_aw_buffer_firstValid$EN),
								.Q_OUT(bus_ssNoSynth_3_aw_buffer_firstValid$Q_OUT));

  // submodule bus_ssNoSynth_3_w_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) bus_ssNoSynth_3_w_buffer_ff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(bus_ssNoSynth_3_w_buffer_ff$D_IN),
						       .ENQ(bus_ssNoSynth_3_w_buffer_ff$ENQ),
						       .DEQ(bus_ssNoSynth_3_w_buffer_ff$DEQ),
						       .CLR(bus_ssNoSynth_3_w_buffer_ff$CLR),
						       .D_OUT(bus_ssNoSynth_3_w_buffer_ff$D_OUT),
						       .FULL_N(bus_ssNoSynth_3_w_buffer_ff$FULL_N),
						       .EMPTY_N(bus_ssNoSynth_3_w_buffer_ff$EMPTY_N));

  // submodule bus_ssNoSynth_3_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) bus_ssNoSynth_3_w_buffer_firstValid(.CLK(CLK),
							       .D_IN(bus_ssNoSynth_3_w_buffer_firstValid$D_IN),
							       .EN(bus_ssNoSynth_3_w_buffer_firstValid$EN),
							       .Q_OUT(bus_ssNoSynth_3_w_buffer_firstValid$Q_OUT));

  // submodule core
  mkCore core(.CLK(CLK),
	      .RST_N(RST_N),
	      .core_external_interrupt_sources_0_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_10_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_11_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_12_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_13_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_14_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_15_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_1_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_2_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_3_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_4_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_5_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_6_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_7_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_8_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear),
	      .core_external_interrupt_sources_9_m_interrupt_req_set_not_clear(core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear),
	      .cpu_dmem_master_arready(core$cpu_dmem_master_arready),
	      .cpu_dmem_master_awready(core$cpu_dmem_master_awready),
	      .cpu_dmem_master_bid(core$cpu_dmem_master_bid),
	      .cpu_dmem_master_bresp(core$cpu_dmem_master_bresp),
	      .cpu_dmem_master_rdata(core$cpu_dmem_master_rdata),
	      .cpu_dmem_master_rid(core$cpu_dmem_master_rid),
	      .cpu_dmem_master_rlast(core$cpu_dmem_master_rlast),
	      .cpu_dmem_master_rresp(core$cpu_dmem_master_rresp),
	      .cpu_dmem_master_wready(core$cpu_dmem_master_wready),
	      .cpu_imem_master_arready(core$cpu_imem_master_arready),
	      .cpu_imem_master_awready(core$cpu_imem_master_awready),
	      .cpu_imem_master_bid(core$cpu_imem_master_bid),
	      .cpu_imem_master_bresp(core$cpu_imem_master_bresp),
	      .cpu_imem_master_rdata(core$cpu_imem_master_rdata),
	      .cpu_imem_master_rid(core$cpu_imem_master_rid),
	      .cpu_imem_master_rlast(core$cpu_imem_master_rlast),
	      .cpu_imem_master_rresp(core$cpu_imem_master_rresp),
	      .cpu_imem_master_wready(core$cpu_imem_master_wready),
	      .cpu_reset_server_request_put(core$cpu_reset_server_request_put),
	      .nmi_req_set_not_clear(core$nmi_req_set_not_clear),
	      .set_verbosity_logdelay(core$set_verbosity_logdelay),
	      .set_verbosity_verbosity(core$set_verbosity_verbosity),
	      .EN_set_verbosity(core$EN_set_verbosity),
	      .EN_cpu_reset_server_request_put(core$EN_cpu_reset_server_request_put),
	      .EN_cpu_reset_server_response_get(core$EN_cpu_reset_server_response_get),
	      .cpu_imem_master_bvalid(core$cpu_imem_master_bvalid),
	      .cpu_imem_master_rvalid(core$cpu_imem_master_rvalid),
	      .cpu_dmem_master_bvalid(core$cpu_dmem_master_bvalid),
	      .cpu_dmem_master_rvalid(core$cpu_dmem_master_rvalid),
	      .RDY_set_verbosity(),
	      .RDY_cpu_reset_server_request_put(core$RDY_cpu_reset_server_request_put),
	      .cpu_reset_server_response_get(),
	      .RDY_cpu_reset_server_response_get(core$RDY_cpu_reset_server_response_get),
	      .cpu_imem_master_awid(core$cpu_imem_master_awid),
	      .cpu_imem_master_awaddr(core$cpu_imem_master_awaddr),
	      .cpu_imem_master_awlen(core$cpu_imem_master_awlen),
	      .cpu_imem_master_awsize(core$cpu_imem_master_awsize),
	      .cpu_imem_master_awburst(core$cpu_imem_master_awburst),
	      .cpu_imem_master_awlock(core$cpu_imem_master_awlock),
	      .cpu_imem_master_awcache(core$cpu_imem_master_awcache),
	      .cpu_imem_master_awprot(core$cpu_imem_master_awprot),
	      .cpu_imem_master_awqos(core$cpu_imem_master_awqos),
	      .cpu_imem_master_awregion(core$cpu_imem_master_awregion),
	      .cpu_imem_master_awvalid(core$cpu_imem_master_awvalid),
	      .cpu_imem_master_wdata(core$cpu_imem_master_wdata),
	      .cpu_imem_master_wstrb(core$cpu_imem_master_wstrb),
	      .cpu_imem_master_wlast(core$cpu_imem_master_wlast),
	      .cpu_imem_master_wvalid(core$cpu_imem_master_wvalid),
	      .cpu_imem_master_bready(core$cpu_imem_master_bready),
	      .cpu_imem_master_arid(core$cpu_imem_master_arid),
	      .cpu_imem_master_araddr(core$cpu_imem_master_araddr),
	      .cpu_imem_master_arlen(core$cpu_imem_master_arlen),
	      .cpu_imem_master_arsize(core$cpu_imem_master_arsize),
	      .cpu_imem_master_arburst(core$cpu_imem_master_arburst),
	      .cpu_imem_master_arlock(core$cpu_imem_master_arlock),
	      .cpu_imem_master_arcache(core$cpu_imem_master_arcache),
	      .cpu_imem_master_arprot(core$cpu_imem_master_arprot),
	      .cpu_imem_master_arqos(core$cpu_imem_master_arqos),
	      .cpu_imem_master_arregion(core$cpu_imem_master_arregion),
	      .cpu_imem_master_arvalid(core$cpu_imem_master_arvalid),
	      .cpu_imem_master_rready(core$cpu_imem_master_rready),
	      .cpu_dmem_master_awid(core$cpu_dmem_master_awid),
	      .cpu_dmem_master_awaddr(core$cpu_dmem_master_awaddr),
	      .cpu_dmem_master_awlen(core$cpu_dmem_master_awlen),
	      .cpu_dmem_master_awsize(core$cpu_dmem_master_awsize),
	      .cpu_dmem_master_awburst(core$cpu_dmem_master_awburst),
	      .cpu_dmem_master_awlock(core$cpu_dmem_master_awlock),
	      .cpu_dmem_master_awcache(core$cpu_dmem_master_awcache),
	      .cpu_dmem_master_awprot(core$cpu_dmem_master_awprot),
	      .cpu_dmem_master_awqos(core$cpu_dmem_master_awqos),
	      .cpu_dmem_master_awregion(core$cpu_dmem_master_awregion),
	      .cpu_dmem_master_awvalid(core$cpu_dmem_master_awvalid),
	      .cpu_dmem_master_wdata(core$cpu_dmem_master_wdata),
	      .cpu_dmem_master_wstrb(core$cpu_dmem_master_wstrb),
	      .cpu_dmem_master_wlast(core$cpu_dmem_master_wlast),
	      .cpu_dmem_master_wvalid(core$cpu_dmem_master_wvalid),
	      .cpu_dmem_master_bready(core$cpu_dmem_master_bready),
	      .cpu_dmem_master_arid(core$cpu_dmem_master_arid),
	      .cpu_dmem_master_araddr(core$cpu_dmem_master_araddr),
	      .cpu_dmem_master_arlen(core$cpu_dmem_master_arlen),
	      .cpu_dmem_master_arsize(core$cpu_dmem_master_arsize),
	      .cpu_dmem_master_arburst(core$cpu_dmem_master_arburst),
	      .cpu_dmem_master_arlock(core$cpu_dmem_master_arlock),
	      .cpu_dmem_master_arcache(core$cpu_dmem_master_arcache),
	      .cpu_dmem_master_arprot(core$cpu_dmem_master_arprot),
	      .cpu_dmem_master_arqos(core$cpu_dmem_master_arqos),
	      .cpu_dmem_master_arregion(core$cpu_dmem_master_arregion),
	      .cpu_dmem_master_arvalid(core$cpu_dmem_master_arvalid),
	      .cpu_dmem_master_rready(core$cpu_dmem_master_rready));

  // submodule mem0_controller
  mkAWS_DDR4_Adapter mem0_controller(.CLK(CLK),
				     .RST_N(RST_N),
				     .ma_set_addr_map_addr_base(mem0_controller$ma_set_addr_map_addr_base),
				     .ma_set_addr_map_addr_lim(mem0_controller$ma_set_addr_map_addr_lim),
				     .ma_set_watch_tohost_tohost_addr(mem0_controller$ma_set_watch_tohost_tohost_addr),
				     .ma_set_watch_tohost_watch_tohost(mem0_controller$ma_set_watch_tohost_watch_tohost),
				     .slave_araddr(mem0_controller$slave_araddr),
				     .slave_arburst(mem0_controller$slave_arburst),
				     .slave_arcache(mem0_controller$slave_arcache),
				     .slave_arid(mem0_controller$slave_arid),
				     .slave_arlen(mem0_controller$slave_arlen),
				     .slave_arlock(mem0_controller$slave_arlock),
				     .slave_arprot(mem0_controller$slave_arprot),
				     .slave_arqos(mem0_controller$slave_arqos),
				     .slave_arregion(mem0_controller$slave_arregion),
				     .slave_arsize(mem0_controller$slave_arsize),
				     .slave_awaddr(mem0_controller$slave_awaddr),
				     .slave_awburst(mem0_controller$slave_awburst),
				     .slave_awcache(mem0_controller$slave_awcache),
				     .slave_awid(mem0_controller$slave_awid),
				     .slave_awlen(mem0_controller$slave_awlen),
				     .slave_awlock(mem0_controller$slave_awlock),
				     .slave_awprot(mem0_controller$slave_awprot),
				     .slave_awqos(mem0_controller$slave_awqos),
				     .slave_awregion(mem0_controller$slave_awregion),
				     .slave_awsize(mem0_controller$slave_awsize),
				     .slave_bready(mem0_controller$slave_bready),
				     .slave_rready(mem0_controller$slave_rready),
				     .slave_wdata(mem0_controller$slave_wdata),
				     .slave_wlast(mem0_controller$slave_wlast),
				     .slave_wstrb(mem0_controller$slave_wstrb),
				     .to_ddr4_arready(mem0_controller$to_ddr4_arready),
				     .to_ddr4_awready(mem0_controller$to_ddr4_awready),
				     .to_ddr4_bid(mem0_controller$to_ddr4_bid),
				     .to_ddr4_bresp(mem0_controller$to_ddr4_bresp),
				     .to_ddr4_rdata(mem0_controller$to_ddr4_rdata),
				     .to_ddr4_rid(mem0_controller$to_ddr4_rid),
				     .to_ddr4_rlast(mem0_controller$to_ddr4_rlast),
				     .to_ddr4_rresp(mem0_controller$to_ddr4_rresp),
				     .to_ddr4_wready(mem0_controller$to_ddr4_wready),
				     .slave_awvalid(mem0_controller$slave_awvalid),
				     .slave_wvalid(mem0_controller$slave_wvalid),
				     .slave_arvalid(mem0_controller$slave_arvalid),
				     .to_ddr4_bvalid(mem0_controller$to_ddr4_bvalid),
				     .to_ddr4_rvalid(mem0_controller$to_ddr4_rvalid),
				     .EN_ma_set_addr_map(mem0_controller$EN_ma_set_addr_map),
				     .EN_ma_set_watch_tohost(mem0_controller$EN_ma_set_watch_tohost),
				     .EN_ma_ddr4_ready(mem0_controller$EN_ma_ddr4_ready),
				     .slave_awready(mem0_controller$slave_awready),
				     .slave_wready(mem0_controller$slave_wready),
				     .slave_bid(mem0_controller$slave_bid),
				     .slave_bresp(mem0_controller$slave_bresp),
				     .slave_bvalid(mem0_controller$slave_bvalid),
				     .slave_arready(mem0_controller$slave_arready),
				     .slave_rid(mem0_controller$slave_rid),
				     .slave_rdata(mem0_controller$slave_rdata),
				     .slave_rresp(mem0_controller$slave_rresp),
				     .slave_rlast(mem0_controller$slave_rlast),
				     .slave_rvalid(mem0_controller$slave_rvalid),
				     .to_ddr4_awid(mem0_controller$to_ddr4_awid),
				     .to_ddr4_awaddr(mem0_controller$to_ddr4_awaddr),
				     .to_ddr4_awlen(mem0_controller$to_ddr4_awlen),
				     .to_ddr4_awsize(mem0_controller$to_ddr4_awsize),
				     .to_ddr4_awburst(mem0_controller$to_ddr4_awburst),
				     .to_ddr4_awlock(mem0_controller$to_ddr4_awlock),
				     .to_ddr4_awcache(mem0_controller$to_ddr4_awcache),
				     .to_ddr4_awprot(mem0_controller$to_ddr4_awprot),
				     .to_ddr4_awqos(mem0_controller$to_ddr4_awqos),
				     .to_ddr4_awregion(mem0_controller$to_ddr4_awregion),
				     .to_ddr4_awvalid(mem0_controller$to_ddr4_awvalid),
				     .to_ddr4_wdata(mem0_controller$to_ddr4_wdata),
				     .to_ddr4_wstrb(mem0_controller$to_ddr4_wstrb),
				     .to_ddr4_wlast(mem0_controller$to_ddr4_wlast),
				     .to_ddr4_wvalid(mem0_controller$to_ddr4_wvalid),
				     .to_ddr4_bready(mem0_controller$to_ddr4_bready),
				     .to_ddr4_arid(mem0_controller$to_ddr4_arid),
				     .to_ddr4_araddr(mem0_controller$to_ddr4_araddr),
				     .to_ddr4_arlen(mem0_controller$to_ddr4_arlen),
				     .to_ddr4_arsize(mem0_controller$to_ddr4_arsize),
				     .to_ddr4_arburst(mem0_controller$to_ddr4_arburst),
				     .to_ddr4_arlock(mem0_controller$to_ddr4_arlock),
				     .to_ddr4_arcache(mem0_controller$to_ddr4_arcache),
				     .to_ddr4_arprot(mem0_controller$to_ddr4_arprot),
				     .to_ddr4_arqos(mem0_controller$to_ddr4_arqos),
				     .to_ddr4_arregion(mem0_controller$to_ddr4_arregion),
				     .to_ddr4_arvalid(mem0_controller$to_ddr4_arvalid),
				     .to_ddr4_rready(mem0_controller$to_ddr4_rready),
				     .RDY_ma_set_addr_map(mem0_controller$RDY_ma_set_addr_map),
				     .RDY_ma_set_watch_tohost(mem0_controller$RDY_ma_set_watch_tohost),
				     .RDY_ma_ddr4_ready(mem0_controller$RDY_ma_ddr4_ready),
				     .mv_status(mem0_controller$mv_status));

  // submodule mem0_controller_axi4_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) mem0_controller_axi4_deburster_countWriteRspFF(.RST(RST_N),
									      .CLK(CLK),
									      .D_IN(mem0_controller_axi4_deburster_countWriteRspFF$D_IN),
									      .ENQ(mem0_controller_axi4_deburster_countWriteRspFF$ENQ),
									      .DEQ(mem0_controller_axi4_deburster_countWriteRspFF$DEQ),
									      .CLR(mem0_controller_axi4_deburster_countWriteRspFF$CLR),
									      .D_OUT(mem0_controller_axi4_deburster_countWriteRspFF$D_OUT),
									      .FULL_N(mem0_controller_axi4_deburster_countWriteRspFF$FULL_N),
									      .EMPTY_N(mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_inShim_arff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_inShim_arff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_inShim_arff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_inShim_arff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_inShim_arff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_inShim_arff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_inShim_arff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_inShim_arff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_inShim_awff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_inShim_awff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_inShim_awff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_inShim_awff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_inShim_awff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_inShim_awff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_inShim_awff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_inShim_awff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_inShim_bff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_inShim_bff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_inShim_bff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_inShim_bff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_inShim_bff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_inShim_bff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_inShim_bff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_inShim_bff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_inShim_rff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_inShim_rff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_inShim_rff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_inShim_rff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_inShim_rff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_inShim_rff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_inShim_rff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_inShim_rff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_inShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_inShim_wff(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(mem0_controller_axi4_deburster_inShim_wff$D_IN),
								     .ENQ(mem0_controller_axi4_deburster_inShim_wff$ENQ),
								     .DEQ(mem0_controller_axi4_deburster_inShim_wff$DEQ),
								     .CLR(mem0_controller_axi4_deburster_inShim_wff$CLR),
								     .D_OUT(mem0_controller_axi4_deburster_inShim_wff$D_OUT),
								     .FULL_N(mem0_controller_axi4_deburster_inShim_wff$FULL_N),
								     .EMPTY_N(mem0_controller_axi4_deburster_inShim_wff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) mem0_controller_axi4_deburster_lastReadRspFF(.RST(RST_N),
									    .CLK(CLK),
									    .D_IN(mem0_controller_axi4_deburster_lastReadRspFF$D_IN),
									    .ENQ(mem0_controller_axi4_deburster_lastReadRspFF$ENQ),
									    .DEQ(mem0_controller_axi4_deburster_lastReadRspFF$DEQ),
									    .CLR(mem0_controller_axi4_deburster_lastReadRspFF$CLR),
									    .D_OUT(mem0_controller_axi4_deburster_lastReadRspFF$D_OUT),
									    .FULL_N(mem0_controller_axi4_deburster_lastReadRspFF$FULL_N),
									    .EMPTY_N(mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_arff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_outShim_arff(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(mem0_controller_axi4_deburster_outShim_arff$D_IN),
								       .ENQ(mem0_controller_axi4_deburster_outShim_arff$ENQ),
								       .DEQ(mem0_controller_axi4_deburster_outShim_arff$DEQ),
								       .CLR(mem0_controller_axi4_deburster_outShim_arff$CLR),
								       .D_OUT(mem0_controller_axi4_deburster_outShim_arff$D_OUT),
								       .FULL_N(mem0_controller_axi4_deburster_outShim_arff$FULL_N),
								       .EMPTY_N(mem0_controller_axi4_deburster_outShim_arff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_awff
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_outShim_awff(.RST(RST_N),
								       .CLK(CLK),
								       .D_IN(mem0_controller_axi4_deburster_outShim_awff$D_IN),
								       .ENQ(mem0_controller_axi4_deburster_outShim_awff$ENQ),
								       .DEQ(mem0_controller_axi4_deburster_outShim_awff$DEQ),
								       .CLR(mem0_controller_axi4_deburster_outShim_awff$CLR),
								       .D_OUT(mem0_controller_axi4_deburster_outShim_awff$D_OUT),
								       .FULL_N(mem0_controller_axi4_deburster_outShim_awff$FULL_N),
								       .EMPTY_N(mem0_controller_axi4_deburster_outShim_awff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_bff
  FIFO2 #(.width(32'd9),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_outShim_bff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_outShim_bff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_outShim_bff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_outShim_bff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_outShim_bff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_outShim_bff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_outShim_bff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_outShim_bff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_rff
  FIFO2 #(.width(32'd74),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_outShim_rff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_outShim_rff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_outShim_rff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_outShim_rff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_outShim_rff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_outShim_rff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_outShim_rff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_outShim_rff$EMPTY_N));

  // submodule mem0_controller_axi4_deburster_outShim_wff
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) mem0_controller_axi4_deburster_outShim_wff(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(mem0_controller_axi4_deburster_outShim_wff$D_IN),
								      .ENQ(mem0_controller_axi4_deburster_outShim_wff$ENQ),
								      .DEQ(mem0_controller_axi4_deburster_outShim_wff$DEQ),
								      .CLR(mem0_controller_axi4_deburster_outShim_wff$CLR),
								      .D_OUT(mem0_controller_axi4_deburster_outShim_wff$D_OUT),
								      .FULL_N(mem0_controller_axi4_deburster_outShim_wff$FULL_N),
								      .EMPTY_N(mem0_controller_axi4_deburster_outShim_wff$EMPTY_N));

  // submodule mem_ar_buffer_ff
  FIFO1 #(.width(32'd108), .guarded(32'd0)) mem_ar_buffer_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(mem_ar_buffer_ff$D_IN),
							     .ENQ(mem_ar_buffer_ff$ENQ),
							     .DEQ(mem_ar_buffer_ff$DEQ),
							     .CLR(mem_ar_buffer_ff$CLR),
							     .D_OUT(mem_ar_buffer_ff$D_OUT),
							     .FULL_N(mem_ar_buffer_ff$FULL_N),
							     .EMPTY_N(mem_ar_buffer_ff$EMPTY_N));

  // submodule mem_ar_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) mem_ar_buffer_firstValid(.CLK(CLK),
								   .D_IN(mem_ar_buffer_firstValid$D_IN),
								   .EN(mem_ar_buffer_firstValid$EN),
								   .Q_OUT(mem_ar_buffer_firstValid$Q_OUT));

  // submodule mem_aw_buffer_ff
  FIFO1 #(.width(32'd108), .guarded(32'd0)) mem_aw_buffer_ff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(mem_aw_buffer_ff$D_IN),
							     .ENQ(mem_aw_buffer_ff$ENQ),
							     .DEQ(mem_aw_buffer_ff$DEQ),
							     .CLR(mem_aw_buffer_ff$CLR),
							     .D_OUT(mem_aw_buffer_ff$D_OUT),
							     .FULL_N(mem_aw_buffer_ff$FULL_N),
							     .EMPTY_N(mem_aw_buffer_ff$EMPTY_N));

  // submodule mem_aw_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) mem_aw_buffer_firstValid(.CLK(CLK),
								   .D_IN(mem_aw_buffer_firstValid$D_IN),
								   .EN(mem_aw_buffer_firstValid$EN),
								   .Q_OUT(mem_aw_buffer_firstValid$Q_OUT));

  // submodule mem_w_buffer_ff
  FIFO1 #(.width(32'd73), .guarded(32'd0)) mem_w_buffer_ff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(mem_w_buffer_ff$D_IN),
							   .ENQ(mem_w_buffer_ff$ENQ),
							   .DEQ(mem_w_buffer_ff$DEQ),
							   .CLR(mem_w_buffer_ff$CLR),
							   .D_OUT(mem_w_buffer_ff$D_OUT),
							   .FULL_N(mem_w_buffer_ff$FULL_N),
							   .EMPTY_N(mem_w_buffer_ff$EMPTY_N));

  // submodule mem_w_buffer_firstValid
  RevertReg #(.width(32'd1), .init(1'd1)) mem_w_buffer_firstValid(.CLK(CLK),
								  .D_IN(mem_w_buffer_firstValid$D_IN),
								  .EN(mem_w_buffer_firstValid$EN),
								  .Q_OUT(mem_w_buffer_firstValid$Q_OUT));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_range(),
		    .m_debug_module_addr_range(),
		    .m_near_mem_io_addr_range(),
		    .m_flash_mem_addr_range(),
		    .m_ethernet_0_addr_range(),
		    .m_dma_0_addr_range(),
		    .m_uart16550_0_addr_range(soc_map$m_uart16550_0_addr_range),
		    .m_gpio_0_addr_range(),
		    .m_boot_rom_addr_range(soc_map$m_boot_rom_addr_range),
		    .m_ddr4_0_uncached_addr_range(),
		    .m_ddr4_0_cached_addr_range(),
		    .m_host_access_addr_range(soc_map$m_host_access_addr_range),
		    .m_mem0_controller_addr_range(soc_map$m_mem0_controller_addr_range),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(),
		    .m_mepcc_reset_value());

  // submodule uart0
  mkUART uart0(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_from_console_put(uart0$put_from_console_put),
	       .set_addr_map_addr_base(uart0$set_addr_map_addr_base),
	       .set_addr_map_addr_lim(uart0$set_addr_map_addr_lim),
	       .slave_araddr(uart0$slave_araddr),
	       .slave_arburst(uart0$slave_arburst),
	       .slave_arcache(uart0$slave_arcache),
	       .slave_arid(uart0$slave_arid),
	       .slave_arlen(uart0$slave_arlen),
	       .slave_arlock(uart0$slave_arlock),
	       .slave_arprot(uart0$slave_arprot),
	       .slave_arqos(uart0$slave_arqos),
	       .slave_arregion(uart0$slave_arregion),
	       .slave_arsize(uart0$slave_arsize),
	       .slave_awaddr(uart0$slave_awaddr),
	       .slave_awburst(uart0$slave_awburst),
	       .slave_awcache(uart0$slave_awcache),
	       .slave_awid(uart0$slave_awid),
	       .slave_awlen(uart0$slave_awlen),
	       .slave_awlock(uart0$slave_awlock),
	       .slave_awprot(uart0$slave_awprot),
	       .slave_awqos(uart0$slave_awqos),
	       .slave_awregion(uart0$slave_awregion),
	       .slave_awsize(uart0$slave_awsize),
	       .slave_bready(uart0$slave_bready),
	       .slave_rready(uart0$slave_rready),
	       .slave_wdata(uart0$slave_wdata),
	       .slave_wlast(uart0$slave_wlast),
	       .slave_wstrb(uart0$slave_wstrb),
	       .slave_wuser(uart0$slave_wuser),
	       .EN_server_reset_request_put(uart0$EN_server_reset_request_put),
	       .EN_server_reset_response_get(uart0$EN_server_reset_response_get),
	       .EN_set_addr_map(uart0$EN_set_addr_map),
	       .slave_awvalid(uart0$slave_awvalid),
	       .slave_wvalid(uart0$slave_wvalid),
	       .slave_arvalid(uart0$slave_arvalid),
	       .EN_get_to_console_get(uart0$EN_get_to_console_get),
	       .EN_put_from_console_put(uart0$EN_put_from_console_put),
	       .RDY_server_reset_request_put(uart0$RDY_server_reset_request_put),
	       .RDY_server_reset_response_get(uart0$RDY_server_reset_response_get),
	       .RDY_set_addr_map(),
	       .slave_awready(uart0$slave_awready),
	       .slave_wready(uart0$slave_wready),
	       .slave_bid(uart0$slave_bid),
	       .slave_bresp(uart0$slave_bresp),
	       .slave_bvalid(uart0$slave_bvalid),
	       .slave_arready(uart0$slave_arready),
	       .slave_rid(uart0$slave_rid),
	       .slave_rdata(uart0$slave_rdata),
	       .slave_rresp(uart0$slave_rresp),
	       .slave_rlast(uart0$slave_rlast),
	       .slave_ruser(),
	       .slave_rvalid(uart0$slave_rvalid),
	       .get_to_console_get(uart0$get_to_console_get),
	       .RDY_get_to_console_get(uart0$RDY_get_to_console_get),
	       .RDY_put_from_console_put(uart0$RDY_put_from_console_put),
	       .intr(uart0$intr));

  // submodule uart0_slave_ar_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) uart0_slave_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(uart0_slave_ar_buffer_ff$D_IN),
						    .ENQ(uart0_slave_ar_buffer_ff$ENQ),
						    .DEQ(uart0_slave_ar_buffer_ff$DEQ),
						    .CLR(uart0_slave_ar_buffer_ff$CLR),
						    .D_OUT(uart0_slave_ar_buffer_ff$D_OUT),
						    .FULL_N(uart0_slave_ar_buffer_ff$FULL_N),
						    .EMPTY_N(uart0_slave_ar_buffer_ff$EMPTY_N));

  // submodule uart0_slave_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) uart0_slave_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(uart0_slave_ar_buffer_firstValid$D_IN),
							    .EN(uart0_slave_ar_buffer_firstValid$EN),
							    .Q_OUT(uart0_slave_ar_buffer_firstValid$Q_OUT));

  // submodule uart0_slave_aw_buffer_ff
  FIFO1 #(.width(32'd100),
	  .guarded(32'd0)) uart0_slave_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(uart0_slave_aw_buffer_ff$D_IN),
						    .ENQ(uart0_slave_aw_buffer_ff$ENQ),
						    .DEQ(uart0_slave_aw_buffer_ff$DEQ),
						    .CLR(uart0_slave_aw_buffer_ff$CLR),
						    .D_OUT(uart0_slave_aw_buffer_ff$D_OUT),
						    .FULL_N(uart0_slave_aw_buffer_ff$FULL_N),
						    .EMPTY_N(uart0_slave_aw_buffer_ff$EMPTY_N));

  // submodule uart0_slave_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) uart0_slave_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(uart0_slave_aw_buffer_firstValid$D_IN),
							    .EN(uart0_slave_aw_buffer_firstValid$EN),
							    .Q_OUT(uart0_slave_aw_buffer_firstValid$Q_OUT));

  // submodule uart0_slave_w_buffer_ff
  FIFO1 #(.width(32'd74),
	  .guarded(32'd0)) uart0_slave_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(uart0_slave_w_buffer_ff$D_IN),
						   .ENQ(uart0_slave_w_buffer_ff$ENQ),
						   .DEQ(uart0_slave_w_buffer_ff$DEQ),
						   .CLR(uart0_slave_w_buffer_ff$CLR),
						   .D_OUT(uart0_slave_w_buffer_ff$D_OUT),
						   .FULL_N(uart0_slave_w_buffer_ff$FULL_N),
						   .EMPTY_N(uart0_slave_w_buffer_ff$EMPTY_N));

  // submodule uart0_slave_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) uart0_slave_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(uart0_slave_w_buffer_firstValid$D_IN),
							   .EN(uart0_slave_w_buffer_firstValid$EN),
							   .Q_OUT(uart0_slave_w_buffer_firstValid$Q_OUT));

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     boot_rom_axi4_deburster_outShim_awff$EMPTY_N &&
	     br_aw_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     boot_rom_axi4_deburster_outShim_wff$EMPTY_N &&
	     br_w_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     boot_rom_axi4_deburster_outShim_arff$EMPTY_N &&
	     br_ar_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_mkConnectionGetPut_5
  assign CAN_FIRE_RL_mkConnectionGetPut_5 =
	     mem0_controller_axi4_deburster_outShim_awff$EMPTY_N &&
	     mem_aw_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_5 =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;

  // rule RL_mkConnectionGetPut_6
  assign CAN_FIRE_RL_mkConnectionGetPut_6 =
	     mem0_controller_axi4_deburster_outShim_wff$EMPTY_N &&
	     mem_w_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_6 =
	     CAN_FIRE_RL_mkConnectionGetPut_6 ;

  // rule RL_mkConnectionGetPut_7
  assign CAN_FIRE_RL_mkConnectionGetPut_7 =
	     mem0_controller$slave_bvalid &&
	     mem0_controller_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_7 =
	     CAN_FIRE_RL_mkConnectionGetPut_7 ;

  // rule RL_mkConnectionGetPut_8
  assign CAN_FIRE_RL_mkConnectionGetPut_8 =
	     mem0_controller_axi4_deburster_outShim_arff$EMPTY_N &&
	     mem_ar_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_8 =
	     CAN_FIRE_RL_mkConnectionGetPut_8 ;

  // rule RL_mkConnectionGetPut_9
  assign CAN_FIRE_RL_mkConnectionGetPut_9 =
	     mem0_controller$slave_rvalid &&
	     mem0_controller_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_9 =
	     CAN_FIRE_RL_mkConnectionGetPut_9 ;

  // rule RL_rl_connect_external_interrupt_requests
  assign CAN_FIRE_RL_rl_connect_external_interrupt_requests = 1'd1 ;
  assign WILL_FIRE_RL_rl_connect_external_interrupt_requests = 1'd1 ;

  // rule RL_mem0_controller_axi4_deburster_handle_write_rsp
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp =
	     mem0_controller_axi4_deburster_countWriteRspFF$EMPTY_N &&
	     mem0_controller_axi4_deburster_outShim_bff$EMPTY_N &&
	     (!mem0_controller_axi4_deburster_countWriteRspFF_ETC___d234 ||
	      !mem0_controller_axi4_deburster_inSerial_shim_bff_rv[9]) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp ;

  // rule RL_mem0_controller_axi4_deburster_forward_read_rsp
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp =
	     !mem0_controller_axi4_deburster_inSerial_shim_rff_rv[74] &&
	     mem0_controller_axi4_deburster_lastReadRspFF$EMPTY_N &&
	     mem0_controller_axi4_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;

  // rule RL_br_aw_forwardFlit
  assign CAN_FIRE_RL_br_aw_forwardFlit =
	     br_aw_buffer_firstValid$Q_OUT &&
	     (br_aw_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut) ;
  assign WILL_FIRE_RL_br_aw_forwardFlit = CAN_FIRE_RL_br_aw_forwardFlit ;

  // rule RL_br_aw_dropFlit
  assign CAN_FIRE_RL_br_aw_dropFlit =
	     (br_aw_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut) &&
	     boot_rom$slave_awready ;
  assign WILL_FIRE_RL_br_aw_dropFlit = CAN_FIRE_RL_br_aw_dropFlit ;

  // rule RL_br_aw_buffer_enqueue
  assign CAN_FIRE_RL_br_aw_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut &&
	     (!CAN_FIRE_RL_br_aw_dropFlit || br_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_br_aw_buffer_enqueue =
	     CAN_FIRE_RL_br_aw_buffer_enqueue ;

  // rule RL_br_aw_buffer_dequeue
  assign CAN_FIRE_RL_br_aw_buffer_dequeue =
	     CAN_FIRE_RL_br_aw_dropFlit && br_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_br_aw_buffer_dequeue =
	     CAN_FIRE_RL_br_aw_buffer_dequeue ;

  // rule RL_br_w_forwardFlit
  assign CAN_FIRE_RL_br_w_forwardFlit =
	     br_w_buffer_firstValid$Q_OUT &&
	     (br_w_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_1) ;
  assign WILL_FIRE_RL_br_w_forwardFlit = CAN_FIRE_RL_br_w_forwardFlit ;

  // rule RL_br_w_dropFlit
  assign CAN_FIRE_RL_br_w_dropFlit =
	     (br_w_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_1) &&
	     boot_rom$slave_wready ;
  assign WILL_FIRE_RL_br_w_dropFlit = CAN_FIRE_RL_br_w_dropFlit ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     boot_rom$slave_bvalid &&
	     boot_rom_axi4_deburster_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_boot_rom_axi4_deburster_handle_write_rsp
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp =
	     boot_rom_axi4_deburster_countWriteRspFF$EMPTY_N &&
	     boot_rom_axi4_deburster_outShim_bff$EMPTY_N &&
	     (!boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d96 ||
	      !boot_rom_axi4_deburster_inSerial_shim_bff_rv[9]) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp ;

  // rule RL_br_w_buffer_enqueue
  assign CAN_FIRE_RL_br_w_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut_1 &&
	     (!CAN_FIRE_RL_br_w_dropFlit || br_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_br_w_buffer_enqueue = CAN_FIRE_RL_br_w_buffer_enqueue ;

  // rule RL_br_w_buffer_dequeue
  assign CAN_FIRE_RL_br_w_buffer_dequeue =
	     CAN_FIRE_RL_br_w_dropFlit && br_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_br_w_buffer_dequeue = CAN_FIRE_RL_br_w_buffer_dequeue ;

  // rule RL_br_b_forwardReady
  assign CAN_FIRE_RL_br_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_br_b_forwardReady = 1'd1 ;

  // rule RL_br_ar_forwardFlit
  assign CAN_FIRE_RL_br_ar_forwardFlit =
	     br_ar_buffer_firstValid$Q_OUT &&
	     (br_ar_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_3) ;
  assign WILL_FIRE_RL_br_ar_forwardFlit = CAN_FIRE_RL_br_ar_forwardFlit ;

  // rule RL_br_ar_dropFlit
  assign CAN_FIRE_RL_br_ar_dropFlit =
	     (br_ar_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_3) &&
	     boot_rom$slave_arready ;
  assign WILL_FIRE_RL_br_ar_dropFlit = CAN_FIRE_RL_br_ar_dropFlit ;

  // rule RL_mkConnectionGetPut_4
  assign CAN_FIRE_RL_mkConnectionGetPut_4 =
	     boot_rom$slave_rvalid &&
	     boot_rom_axi4_deburster_outShim_rff$FULL_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_4 =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // rule RL_boot_rom_axi4_deburster_forward_read_rsp
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp =
	     !boot_rom_axi4_deburster_inSerial_shim_rff_rv[74] &&
	     boot_rom_axi4_deburster_lastReadRspFF$EMPTY_N &&
	     boot_rom_axi4_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;

  // rule RL_br_ar_buffer_enqueue
  assign CAN_FIRE_RL_br_ar_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut_3 &&
	     (!CAN_FIRE_RL_br_ar_dropFlit || br_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_br_ar_buffer_enqueue =
	     CAN_FIRE_RL_br_ar_buffer_enqueue ;

  // rule RL_br_ar_buffer_dequeue
  assign CAN_FIRE_RL_br_ar_buffer_dequeue =
	     CAN_FIRE_RL_br_ar_dropFlit && br_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_br_ar_buffer_dequeue =
	     CAN_FIRE_RL_br_ar_buffer_dequeue ;

  // rule RL_br_r_forwardReady
  assign CAN_FIRE_RL_br_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_br_r_forwardReady = 1'd1 ;

  // rule RL_ug_boot_rom_slave_u_b_setPeek
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_b_setPeek =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_b_setPeek =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;

  // rule RL_ug_boot_rom_slave_u_r_setPeek
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_r_setPeek =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_r_setPeek =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;

  // rule RL_mem_aw_forwardFlit
  assign CAN_FIRE_RL_mem_aw_forwardFlit =
	     mem_aw_buffer_firstValid$Q_OUT &&
	     (mem_aw_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_5) ;
  assign WILL_FIRE_RL_mem_aw_forwardFlit = CAN_FIRE_RL_mem_aw_forwardFlit ;

  // rule RL_mem_aw_dropFlit
  assign CAN_FIRE_RL_mem_aw_dropFlit =
	     (mem_aw_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_5) &&
	     mem0_controller$slave_awready ;
  assign WILL_FIRE_RL_mem_aw_dropFlit = CAN_FIRE_RL_mem_aw_dropFlit ;

  // rule RL_mem_aw_buffer_enqueue
  assign CAN_FIRE_RL_mem_aw_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut_5 &&
	     (!CAN_FIRE_RL_mem_aw_dropFlit || mem_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem_aw_buffer_enqueue =
	     CAN_FIRE_RL_mem_aw_buffer_enqueue ;

  // rule RL_mem_aw_buffer_dequeue
  assign CAN_FIRE_RL_mem_aw_buffer_dequeue =
	     CAN_FIRE_RL_mem_aw_dropFlit && mem_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_mem_aw_buffer_dequeue =
	     CAN_FIRE_RL_mem_aw_buffer_dequeue ;

  // rule RL_mem_w_forwardFlit
  assign CAN_FIRE_RL_mem_w_forwardFlit =
	     mem_w_buffer_firstValid$Q_OUT &&
	     (mem_w_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_6) ;
  assign WILL_FIRE_RL_mem_w_forwardFlit = CAN_FIRE_RL_mem_w_forwardFlit ;

  // rule RL_mem_w_dropFlit
  assign CAN_FIRE_RL_mem_w_dropFlit =
	     (mem_w_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_6) &&
	     mem0_controller$slave_wready ;
  assign WILL_FIRE_RL_mem_w_dropFlit = CAN_FIRE_RL_mem_w_dropFlit ;

  // rule RL_mem_w_buffer_enqueue
  assign CAN_FIRE_RL_mem_w_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut_6 &&
	     (!CAN_FIRE_RL_mem_w_dropFlit || mem_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem_w_buffer_enqueue =
	     CAN_FIRE_RL_mem_w_buffer_enqueue ;

  // rule RL_mem_w_buffer_dequeue
  assign CAN_FIRE_RL_mem_w_buffer_dequeue =
	     CAN_FIRE_RL_mem_w_dropFlit && mem_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_mem_w_buffer_dequeue =
	     CAN_FIRE_RL_mem_w_buffer_dequeue ;

  // rule RL_mem_b_forwardReady
  assign CAN_FIRE_RL_mem_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_mem_b_forwardReady = 1'd1 ;

  // rule RL_mem_ar_forwardFlit
  assign CAN_FIRE_RL_mem_ar_forwardFlit =
	     mem_ar_buffer_firstValid$Q_OUT &&
	     (mem_ar_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_8) ;
  assign WILL_FIRE_RL_mem_ar_forwardFlit = CAN_FIRE_RL_mem_ar_forwardFlit ;

  // rule RL_mem_ar_dropFlit
  assign CAN_FIRE_RL_mem_ar_dropFlit =
	     (mem_ar_buffer_ff$EMPTY_N || CAN_FIRE_RL_mkConnectionGetPut_8) &&
	     mem0_controller$slave_arready ;
  assign WILL_FIRE_RL_mem_ar_dropFlit = CAN_FIRE_RL_mem_ar_dropFlit ;

  // rule RL_mem_ar_buffer_enqueue
  assign CAN_FIRE_RL_mem_ar_buffer_enqueue =
	     CAN_FIRE_RL_mkConnectionGetPut_8 &&
	     (!CAN_FIRE_RL_mem_ar_dropFlit || mem_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem_ar_buffer_enqueue =
	     CAN_FIRE_RL_mem_ar_buffer_enqueue ;

  // rule RL_mem_ar_buffer_dequeue
  assign CAN_FIRE_RL_mem_ar_buffer_dequeue =
	     CAN_FIRE_RL_mem_ar_dropFlit && mem_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_mem_ar_buffer_dequeue =
	     CAN_FIRE_RL_mem_ar_buffer_dequeue ;

  // rule RL_mem_r_forwardReady
  assign CAN_FIRE_RL_mem_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_mem_r_forwardReady = 1'd1 ;

  // rule RL_ug_mem0_slave_u_b_setPeek
  assign CAN_FIRE_RL_ug_mem0_slave_u_b_setPeek =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_b_setPeek =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;

  // rule RL_ug_mem0_slave_u_r_setPeek
  assign CAN_FIRE_RL_ug_mem0_slave_u_r_setPeek =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_r_setPeek =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;

  // rule RL_bus_checkSinkReady
  assign CAN_FIRE_RL_bus_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_checkSinkReady = 1'd1 ;

  // rule RL_bus_checkSinkReady_1
  assign CAN_FIRE_RL_bus_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_checkSinkReady_1 = 1'd1 ;

  // rule RL_bus_checkSinkReady_2
  assign CAN_FIRE_RL_bus_checkSinkReady_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_checkSinkReady_2 = 1'd1 ;

  // rule RL_bus_checkSinkReady_3
  assign CAN_FIRE_RL_bus_checkSinkReady_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_checkSinkReady_3 = 1'd1 ;

  // rule RL_bus_craftReq
  assign CAN_FIRE_RL_bus_craftReq =
	     bus_ifcs_0_innerRoute$EMPTY_N && bus_ifcs_0_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_bus_craftReq = CAN_FIRE_RL_bus_craftReq ;

  // rule RL_bus_craftReq_1
  assign CAN_FIRE_RL_bus_craftReq_1 =
	     bus_ifcs_1_innerRoute$EMPTY_N && bus_ifcs_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_bus_craftReq_1 = CAN_FIRE_RL_bus_craftReq_1 ;

  // rule RL_bus_arbitrate
  assign CAN_FIRE_RL_bus_arbitrate =
	     (CAN_FIRE_RL_bus_craftReq && bus_reqWires_0$wget ||
	      CAN_FIRE_RL_bus_craftReq_1 && bus_reqWires_1$wget) &&
	     !bus_state ;
  assign WILL_FIRE_RL_bus_arbitrate = CAN_FIRE_RL_bus_arbitrate ;

  // rule RL_bus_source_selected
  assign CAN_FIRE_RL_bus_source_selected =
	     (!bus_ifcs_0_innerRoute$EMPTY_N ||
	      bus_ifcs_0_innerReq$EMPTY_N) &&
	     !bus_state &&
	     MUX_bus_activeSource_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_source_selected = CAN_FIRE_RL_bus_source_selected ;

  // rule RL_bus_burst
  assign CAN_FIRE_RL_bus_burst =
	     bus_ifcs_0_innerReq$EMPTY_N && bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_state_948_AND_bus_activeSource_0_028_029_A_ETC___d2031 ;
  assign WILL_FIRE_RL_bus_burst = CAN_FIRE_RL_bus_burst ;

  // rule RL_bus_source_selected_1
  assign CAN_FIRE_RL_bus_source_selected_1 =
	     (!bus_ifcs_1_innerRoute$EMPTY_N ||
	      bus_ifcs_1_innerReq$EMPTY_N) &&
	     !bus_state &&
	     MUX_bus_activeSource_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_source_selected_1 =
	     CAN_FIRE_RL_bus_source_selected_1 ;

  // rule RL_bus_burst_1
  assign CAN_FIRE_RL_bus_burst_1 =
	     bus_ifcs_1_innerReq$EMPTY_N && bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_state_948_AND_bus_activeSource_1_079_080_A_ETC___d2082 ;
  assign WILL_FIRE_RL_bus_burst_1 = CAN_FIRE_RL_bus_burst_1 ;

  // rule __me_check_227
  assign CAN_FIRE___me_check_227 = 1'b1 ;
  assign WILL_FIRE___me_check_227 = 1'b1 ;

  // rule __me_check_229
  assign CAN_FIRE___me_check_229 = 1'b1 ;
  assign WILL_FIRE___me_check_229 = 1'b1 ;

  // rule RL_bus_sink_selected
  assign CAN_FIRE_RL_bus_sink_selected =
	     IF_bus_split_0_flitLeft_449_EQ_0_450_THEN_bus__ETC___d1879 &&
	     bus_flitToSink_0$whas ;
  assign WILL_FIRE_RL_bus_sink_selected = CAN_FIRE_RL_bus_sink_selected ;

  // rule RL_bus_sink_selected_1
  assign CAN_FIRE_RL_bus_sink_selected_1 =
	     IF_bus_split_1_flitLeft_478_EQ_0_479_THEN_bus__ETC___d1880 &&
	     bus_flitToSink_1$whas ;
  assign WILL_FIRE_RL_bus_sink_selected_1 = CAN_FIRE_RL_bus_sink_selected_1 ;

  // rule RL_bus_sink_selected_2
  assign CAN_FIRE_RL_bus_sink_selected_2 =
	     IF_bus_split_2_flitLeft_507_EQ_0_508_THEN_bus__ETC___d1881 &&
	     bus_flitToSink_2$whas ;
  assign WILL_FIRE_RL_bus_sink_selected_2 = CAN_FIRE_RL_bus_sink_selected_2 ;

  // rule RL_bus_sink_selected_3
  assign CAN_FIRE_RL_bus_sink_selected_3 =
	     IF_bus_split_3_flitLeft_536_EQ_0_537_THEN_bus__ETC___d1882 &&
	     bus_flitToSink_3$whas ;
  assign WILL_FIRE_RL_bus_sink_selected_3 = CAN_FIRE_RL_bus_sink_selected_3 ;

  // rule __me_check_231
  assign CAN_FIRE___me_check_231 = 1'b1 ;
  assign WILL_FIRE___me_check_231 = 1'b1 ;

  // rule RL_bus_split_0_putFirst
  assign CAN_FIRE_RL_bus_split_0_putFirst =
	     bus_split_0_doPut_whas__441_AND_bus_split_0_do_ETC___d1448 &&
	     bus_split_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_split_0_putFirst =
	     CAN_FIRE_RL_bus_split_0_putFirst ;

  // rule RL_bus_ssNoSynth_0_aw_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit =
	     !boot_rom_axi4_deburster_inShim_awff$FULL_N ||
	     bus_ssNoSynth_0_aw_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_0_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit ;

  // rule RL_ug_boot_rom_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut =
	     ug_boot_rom_slave_u_aw_putWire$whas &&
	     !boot_rom_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut ;

  // rule RL_bus_ssNoSynth_0_aw_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit =
	     (bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_0_flitLeft$write_1__SEL_2) &&
	     boot_rom_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW =
	     boot_rom_axi4_deburster_inShim_awff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_awff_rv[100] &&
	     boot_rom_axi4_deburster_inSerial_state == 2'd0 &&
	     (boot_rom_axi4_deburster_inSerial_lastWasRead ||
	      !boot_rom_axi4_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;

  // rule RL_bus_ssNoSynth_0_aw_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue =
	     MUX_bus_split_0_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit ||
	      bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_0_aw_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit &&
	     bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue ;

  // rule RL_bus_split_0_putOther
  assign CAN_FIRE_RL_bus_split_0_putOther =
	     CAN_FIRE_RL_bus_sink_selected &&
	     (!bus_split_0_doPut$wget[173] ||
	      bus_ssNoSynth_0_w_buffer_ff$FULL_N) &&
	     bus_split_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_split_0_putOther =
	     CAN_FIRE_RL_bus_split_0_putOther ;

  // rule RL_bus_ssNoSynth_0_w_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit =
	     !boot_rom_axi4_deburster_inShim_wff$FULL_N ||
	     bus_ssNoSynth_0_w_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_0_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit ;

  // rule RL_ug_boot_rom_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut =
	     ug_boot_rom_slave_u_w_putWire$whas &&
	     !boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut ;

  // rule RL_bus_ssNoSynth_0_w_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit =
	     (bus_ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_0_w_buffer_enqw$whas) &&
	     boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_w_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit ;

  // rule RL_bus_ssNoSynth_0_w_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue =
	     bus_ssNoSynth_0_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit ||
	      bus_ssNoSynth_0_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_0_w_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit &&
	     bus_ssNoSynth_0_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue ;

  // rule RL_bus_split_1_putFirst
  assign CAN_FIRE_RL_bus_split_1_putFirst =
	     bus_split_1_doPut_whas__470_AND_bus_split_1_do_ETC___d1477 &&
	     bus_split_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_split_1_putFirst =
	     CAN_FIRE_RL_bus_split_1_putFirst ;

  // rule RL_bus_ssNoSynth_1_aw_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit =
	     !mem0_controller_axi4_deburster_inShim_awff$FULL_N ||
	     bus_ssNoSynth_1_aw_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_1_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit ;

  // rule RL_ug_mem0_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut =
	     ug_mem0_slave_u_aw_putWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut ;

  // rule RL_bus_ssNoSynth_1_aw_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit =
	     (bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_1_flitLeft$write_1__SEL_2) &&
	     mem0_controller_axi4_deburster_inShim_awff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW =
	     mem0_controller_axi4_deburster_inShim_awff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_awff_rv[100] &&
	     mem0_controller_axi4_deburster_inSerial_state == 2'd0 &&
	     (mem0_controller_axi4_deburster_inSerial_lastWasRead ||
	      !mem0_controller_axi4_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;

  // rule RL_bus_ssNoSynth_1_aw_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue =
	     MUX_bus_split_1_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit ||
	      bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_1_aw_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit &&
	     bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue ;

  // rule RL_bus_split_1_putOther
  assign CAN_FIRE_RL_bus_split_1_putOther =
	     CAN_FIRE_RL_bus_sink_selected_1 &&
	     (!bus_split_1_doPut$wget[173] ||
	      bus_ssNoSynth_1_w_buffer_ff$FULL_N) &&
	     bus_split_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_split_1_putOther =
	     CAN_FIRE_RL_bus_split_1_putOther ;

  // rule RL_bus_ssNoSynth_1_w_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit =
	     !mem0_controller_axi4_deburster_inShim_wff$FULL_N ||
	     bus_ssNoSynth_1_w_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_1_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit ;

  // rule RL_ug_mem0_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_w_warnDoPut =
	     ug_mem0_slave_u_w_putWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_w_warnDoPut ;

  // rule RL_bus_ssNoSynth_1_w_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit =
	     (bus_ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_1_w_buffer_enqw$whas) &&
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_w_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit ;

  // rule RL_bus_ssNoSynth_1_w_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue =
	     bus_ssNoSynth_1_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit ||
	      bus_ssNoSynth_1_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_1_w_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit &&
	     bus_ssNoSynth_1_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue ;

  // rule RL_bus_split_2_putFirst
  assign CAN_FIRE_RL_bus_split_2_putFirst =
	     bus_split_2_doPut_whas__499_AND_bus_split_2_do_ETC___d1506 &&
	     bus_split_2_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_split_2_putFirst =
	     CAN_FIRE_RL_bus_split_2_putFirst ;

  // rule RL_bus_ssNoSynth_2_aw_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit =
	     !uart0_slave_aw_buffer_ff$FULL_N ||
	     bus_ssNoSynth_2_aw_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_2_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit ;

  // rule RL_uart0_slave_aw_forwardFlit
  assign CAN_FIRE_RL_uart0_slave_aw_forwardFlit =
	     uart0_slave_aw_buffer_firstValid$Q_OUT &&
	     (uart0_slave_aw_buffer_ff$EMPTY_N ||
	      uart0_slave_aw_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_uart0_slave_aw_forwardFlit =
	     CAN_FIRE_RL_uart0_slave_aw_forwardFlit ;

  // rule RL_uart0_slave_aw_dropFlit
  assign CAN_FIRE_RL_uart0_slave_aw_dropFlit =
	     (uart0_slave_aw_buffer_ff$EMPTY_N ||
	      uart0_slave_aw_buffer_enqw$whas) &&
	     uart0$slave_awready ;
  assign WILL_FIRE_RL_uart0_slave_aw_dropFlit =
	     CAN_FIRE_RL_uart0_slave_aw_dropFlit ;

  // rule RL_uart0_slave_aw_buffer_enqueue
  assign CAN_FIRE_RL_uart0_slave_aw_buffer_enqueue =
	     uart0_slave_aw_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_uart0_slave_aw_dropFlit ||
	      uart0_slave_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_uart0_slave_aw_buffer_enqueue =
	     CAN_FIRE_RL_uart0_slave_aw_buffer_enqueue ;

  // rule RL_uart0_slave_aw_buffer_dequeue
  assign CAN_FIRE_RL_uart0_slave_aw_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_aw_dropFlit &&
	     uart0_slave_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_uart0_slave_aw_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_aw_buffer_dequeue ;

  // rule RL_bus_ssNoSynth_2_aw_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit =
	     (bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_2_flitLeft$write_1__SEL_2) &&
	     uart0_slave_aw_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit ;

  // rule RL_bus_ssNoSynth_2_aw_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue =
	     MUX_bus_split_2_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit ||
	      bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_2_aw_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit &&
	     bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue ;

  // rule RL_bus_split_2_putOther
  assign CAN_FIRE_RL_bus_split_2_putOther =
	     CAN_FIRE_RL_bus_sink_selected_2 &&
	     (!bus_split_2_doPut$wget[173] ||
	      bus_ssNoSynth_2_w_buffer_ff$FULL_N) &&
	     bus_split_2_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_split_2_putOther =
	     CAN_FIRE_RL_bus_split_2_putOther ;

  // rule RL_bus_ssNoSynth_2_w_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit =
	     !uart0_slave_w_buffer_ff$FULL_N ||
	     bus_ssNoSynth_2_w_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_2_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit ;

  // rule RL_uart0_slave_w_forwardFlit
  assign CAN_FIRE_RL_uart0_slave_w_forwardFlit =
	     uart0_slave_w_buffer_firstValid$Q_OUT &&
	     (uart0_slave_w_buffer_ff$EMPTY_N ||
	      uart0_slave_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_uart0_slave_w_forwardFlit =
	     CAN_FIRE_RL_uart0_slave_w_forwardFlit ;

  // rule RL_uart0_slave_w_dropFlit
  assign CAN_FIRE_RL_uart0_slave_w_dropFlit =
	     (uart0_slave_w_buffer_ff$EMPTY_N ||
	      uart0_slave_w_buffer_enqw$whas) &&
	     uart0$slave_wready ;
  assign WILL_FIRE_RL_uart0_slave_w_dropFlit =
	     CAN_FIRE_RL_uart0_slave_w_dropFlit ;

  // rule RL_uart0_slave_w_buffer_enqueue
  assign CAN_FIRE_RL_uart0_slave_w_buffer_enqueue =
	     uart0_slave_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_uart0_slave_w_dropFlit ||
	      uart0_slave_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_uart0_slave_w_buffer_enqueue =
	     CAN_FIRE_RL_uart0_slave_w_buffer_enqueue ;

  // rule RL_uart0_slave_w_buffer_dequeue
  assign CAN_FIRE_RL_uart0_slave_w_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_w_dropFlit &&
	     uart0_slave_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_uart0_slave_w_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_w_buffer_dequeue ;

  // rule RL_bus_ssNoSynth_2_w_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit =
	     (bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_2_w_buffer_enqw$whas) &&
	     uart0_slave_w_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_w_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit ;

  // rule RL_bus_ssNoSynth_2_w_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue =
	     bus_ssNoSynth_2_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit ||
	      bus_ssNoSynth_2_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_2_w_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit &&
	     bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue ;

  // rule RL_bus_split_3_putFirst
  assign CAN_FIRE_RL_bus_split_3_putFirst =
	     bus_split_3_doPut_whas__528_AND_bus_split_3_do_ETC___d1535 &&
	     bus_split_3_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_split_3_putFirst =
	     CAN_FIRE_RL_bus_split_3_putFirst ;

  // rule RL_bus_ssNoSynth_3_aw_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_3_aw_forwardFlit =
	     !aws_host_access_slave_aw_buffer_ff$FULL_N ||
	     bus_ssNoSynth_3_aw_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_3_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_3_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_aw_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_3_aw_forwardFlit ;

  // rule RL_aws_host_access_slave_aw_forwardFlit
  assign CAN_FIRE_RL_aws_host_access_slave_aw_forwardFlit =
	     aws_host_access_slave_aw_buffer_firstValid$Q_OUT &&
	     (aws_host_access_slave_aw_buffer_ff$EMPTY_N ||
	      aws_host_access_slave_aw_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_aws_host_access_slave_aw_forwardFlit =
	     CAN_FIRE_RL_aws_host_access_slave_aw_forwardFlit ;

  // rule RL_aws_host_access_slave_aw_dropFlit
  assign CAN_FIRE_RL_aws_host_access_slave_aw_dropFlit =
	     (aws_host_access_slave_aw_buffer_ff$EMPTY_N ||
	      aws_host_access_slave_aw_buffer_enqw$whas) &&
	     aws_host_access$slave_awready ;
  assign WILL_FIRE_RL_aws_host_access_slave_aw_dropFlit =
	     CAN_FIRE_RL_aws_host_access_slave_aw_dropFlit ;

  // rule RL_aws_host_access_slave_aw_buffer_enqueue
  assign CAN_FIRE_RL_aws_host_access_slave_aw_buffer_enqueue =
	     aws_host_access_slave_aw_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_aws_host_access_slave_aw_dropFlit ||
	      aws_host_access_slave_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_aws_host_access_slave_aw_buffer_enqueue =
	     CAN_FIRE_RL_aws_host_access_slave_aw_buffer_enqueue ;

  // rule RL_aws_host_access_slave_aw_buffer_dequeue
  assign CAN_FIRE_RL_aws_host_access_slave_aw_buffer_dequeue =
	     CAN_FIRE_RL_aws_host_access_slave_aw_dropFlit &&
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_aws_host_access_slave_aw_buffer_dequeue =
	     CAN_FIRE_RL_aws_host_access_slave_aw_buffer_dequeue ;

  // rule RL_bus_ssNoSynth_3_aw_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_3_aw_dropFlit =
	     (bus_ssNoSynth_3_aw_buffer_ff$EMPTY_N ||
	      MUX_bus_split_3_flitLeft$write_1__SEL_2) &&
	     aws_host_access_slave_aw_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_aw_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_3_aw_dropFlit ;

  // rule RL_bus_ssNoSynth_3_aw_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_3_aw_buffer_enqueue =
	     MUX_bus_split_3_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_3_aw_dropFlit ||
	      bus_ssNoSynth_3_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_aw_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_3_aw_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_3_aw_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_3_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_3_aw_dropFlit &&
	     bus_ssNoSynth_3_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_aw_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_3_aw_buffer_dequeue ;

  // rule RL_bus_split_3_putOther
  assign CAN_FIRE_RL_bus_split_3_putOther =
	     CAN_FIRE_RL_bus_sink_selected_3 &&
	     (!bus_split_3_doPut$wget[173] ||
	      bus_ssNoSynth_3_w_buffer_ff$FULL_N) &&
	     bus_split_3_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_split_3_putOther =
	     CAN_FIRE_RL_bus_split_3_putOther ;

  // rule RL_bus_ssNoSynth_3_w_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_3_w_forwardFlit =
	     !aws_host_access_slave_w_buffer_ff$FULL_N ||
	     bus_ssNoSynth_3_w_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_3_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_3_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_w_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_3_w_forwardFlit ;

  // rule RL_aws_host_access_slave_w_forwardFlit
  assign CAN_FIRE_RL_aws_host_access_slave_w_forwardFlit =
	     aws_host_access_slave_w_buffer_firstValid$Q_OUT &&
	     (aws_host_access_slave_w_buffer_ff$EMPTY_N ||
	      aws_host_access_slave_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_aws_host_access_slave_w_forwardFlit =
	     CAN_FIRE_RL_aws_host_access_slave_w_forwardFlit ;

  // rule RL_aws_host_access_slave_w_dropFlit
  assign CAN_FIRE_RL_aws_host_access_slave_w_dropFlit =
	     (aws_host_access_slave_w_buffer_ff$EMPTY_N ||
	      aws_host_access_slave_w_buffer_enqw$whas) &&
	     aws_host_access$slave_wready ;
  assign WILL_FIRE_RL_aws_host_access_slave_w_dropFlit =
	     CAN_FIRE_RL_aws_host_access_slave_w_dropFlit ;

  // rule RL_aws_host_access_slave_w_buffer_enqueue
  assign CAN_FIRE_RL_aws_host_access_slave_w_buffer_enqueue =
	     aws_host_access_slave_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_aws_host_access_slave_w_dropFlit ||
	      aws_host_access_slave_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_aws_host_access_slave_w_buffer_enqueue =
	     CAN_FIRE_RL_aws_host_access_slave_w_buffer_enqueue ;

  // rule RL_aws_host_access_slave_w_buffer_dequeue
  assign CAN_FIRE_RL_aws_host_access_slave_w_buffer_dequeue =
	     CAN_FIRE_RL_aws_host_access_slave_w_dropFlit &&
	     aws_host_access_slave_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_aws_host_access_slave_w_buffer_dequeue =
	     CAN_FIRE_RL_aws_host_access_slave_w_buffer_dequeue ;

  // rule RL_bus_ssNoSynth_3_w_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_3_w_dropFlit =
	     (bus_ssNoSynth_3_w_buffer_ff$EMPTY_N ||
	      bus_ssNoSynth_3_w_buffer_enqw$whas) &&
	     aws_host_access_slave_w_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_w_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_3_w_dropFlit ;

  // rule RL_bus_ssNoSynth_3_w_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_3_w_buffer_enqueue =
	     bus_ssNoSynth_3_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_3_w_dropFlit ||
	      bus_ssNoSynth_3_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_w_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_3_w_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_3_w_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_3_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_3_w_dropFlit &&
	     bus_ssNoSynth_3_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_w_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_3_w_buffer_dequeue ;

  // rule RL_bus_ifcs_0_firstFlit
  assign CAN_FIRE_RL_bus_ifcs_0_firstFlit =
	     core$cpu_imem_master_wvalid &&
	     IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1557 &&
	     bus_ifcs_0_innerReq$FULL_N &&
	     bus_ifcs_0_innerRoute$FULL_N &&
	     (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_NOT_ETC___d1564 ||
	      core$cpu_imem_master_awvalid) &&
	     bus_ifcs_0_state == 2'd0 &&
	     IF_NOT_IF_bus_merged_0_flitLeft_405_EQ_0_406_T_ETC___d1623 ==
	     3'd1 ;
  assign WILL_FIRE_RL_bus_ifcs_0_firstFlit =
	     CAN_FIRE_RL_bus_ifcs_0_firstFlit ;

  // rule RL_bus_ifcs_0_followFlits
  assign CAN_FIRE_RL_bus_ifcs_0_followFlits =
	     core$cpu_imem_master_wvalid &&
	     IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1557 &&
	     bus_ifcs_0_innerReq$FULL_N &&
	     (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_NOT_ETC___d1564 ||
	      core$cpu_imem_master_awvalid) &&
	     bus_ifcs_0_state == 2'd1 ;
  assign WILL_FIRE_RL_bus_ifcs_0_followFlits =
	     CAN_FIRE_RL_bus_ifcs_0_followFlits ;

  // rule RL_bus_ifcs_0_nonRoutableFlit
  assign CAN_FIRE_RL_bus_ifcs_0_nonRoutableFlit =
	     IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1557 &&
	     IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_NOT_ETC___d1662 &&
	     bus_ifcs_0_state == 2'd0 &&
	     IF_NOT_IF_bus_merged_0_flitLeft_405_EQ_0_406_T_ETC___d1623 !=
	     3'd1 ;
  assign WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit =
	     CAN_FIRE_RL_bus_ifcs_0_nonRoutableFlit ;

  // rule RL_bus_ifcs_0_drainFlits
  assign CAN_FIRE_RL_bus_ifcs_0_drainFlits =
	     IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1557 &&
	     core$cpu_imem_master_wvalid &&
	     bus_ifcs_0_state == 2'd2 ;
  assign WILL_FIRE_RL_bus_ifcs_0_drainFlits =
	     CAN_FIRE_RL_bus_ifcs_0_drainFlits ;

  // rule __me_check_200
  assign CAN_FIRE___me_check_200 = 1'b1 ;
  assign WILL_FIRE___me_check_200 = 1'b1 ;

  // rule RL_bus_ifcs_0_drainNoRouteResponse
  assign CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse =
	     bus_msNoSynth_0_b_buffer_ff$FULL_N &&
	     bus_ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ifcs_0_drainNoRouteResponse =
	     CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse ;

  // rule RL_bus_ifcs_1_firstFlit
  assign CAN_FIRE_RL_bus_ifcs_1_firstFlit =
	     core$cpu_dmem_master_wvalid &&
	     IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1690 &&
	     bus_ifcs_1_innerReq$FULL_N &&
	     bus_ifcs_1_innerRoute$FULL_N &&
	     (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_NOT_ETC___d1697 ||
	      core$cpu_dmem_master_awvalid) &&
	     bus_ifcs_1_state == 2'd0 &&
	     IF_NOT_IF_bus_merged_1_flitLeft_425_EQ_0_426_T_ETC___d1744 ==
	     3'd1 ;
  assign WILL_FIRE_RL_bus_ifcs_1_firstFlit =
	     CAN_FIRE_RL_bus_ifcs_1_firstFlit ;

  // rule RL_bus_ifcs_1_followFlits
  assign CAN_FIRE_RL_bus_ifcs_1_followFlits =
	     core$cpu_dmem_master_wvalid &&
	     IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1690 &&
	     bus_ifcs_1_innerReq$FULL_N &&
	     (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_NOT_ETC___d1697 ||
	      core$cpu_dmem_master_awvalid) &&
	     bus_ifcs_1_state == 2'd1 ;
  assign WILL_FIRE_RL_bus_ifcs_1_followFlits =
	     CAN_FIRE_RL_bus_ifcs_1_followFlits ;

  // rule RL_bus_ifcs_1_nonRoutableFlit
  assign CAN_FIRE_RL_bus_ifcs_1_nonRoutableFlit =
	     IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1690 &&
	     IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_NOT_ETC___d1783 &&
	     bus_ifcs_1_state == 2'd0 &&
	     IF_NOT_IF_bus_merged_1_flitLeft_425_EQ_0_426_T_ETC___d1744 !=
	     3'd1 ;
  assign WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit =
	     CAN_FIRE_RL_bus_ifcs_1_nonRoutableFlit ;

  // rule RL_bus_ifcs_1_drainFlits
  assign CAN_FIRE_RL_bus_ifcs_1_drainFlits =
	     IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1690 &&
	     core$cpu_dmem_master_wvalid &&
	     bus_ifcs_1_state == 2'd2 ;
  assign WILL_FIRE_RL_bus_ifcs_1_drainFlits =
	     CAN_FIRE_RL_bus_ifcs_1_drainFlits ;

  // rule __me_check_207
  assign CAN_FIRE___me_check_207 = 1'b1 ;
  assign WILL_FIRE___me_check_207 = 1'b1 ;

  // rule RL_bus_ifcs_1_drainNoRouteResponse
  assign CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse =
	     bus_msNoSynth_1_b_buffer_ff$FULL_N &&
	     bus_ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ifcs_1_drainNoRouteResponse =
	     CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse ;

  // rule RL_bus_1_checkSinkReady
  assign CAN_FIRE_RL_bus_1_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady = 1'd1 ;

  // rule RL_bus_1_checkSinkReady_1
  assign CAN_FIRE_RL_bus_1_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady_1 = 1'd1 ;

  // rule RL_bus_1_craftReq
  assign CAN_FIRE_RL_bus_1_craftReq =
	     bus_ifcs_0_routeBack$EMPTY_N && bus_ifcs_0_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq = CAN_FIRE_RL_bus_1_craftReq ;

  // rule RL_bus_1_craftReq_1
  assign CAN_FIRE_RL_bus_1_craftReq_1 =
	     bus_ifcs_1_routeBack$EMPTY_N && bus_ifcs_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq_1 = CAN_FIRE_RL_bus_1_craftReq_1 ;

  // rule RL_bus_1_craftReq_2
  assign CAN_FIRE_RL_bus_1_craftReq_2 =
	     bus_ifcs_2_routeBack$EMPTY_N && bus_ifcs_2_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq_2 = CAN_FIRE_RL_bus_1_craftReq_2 ;

  // rule RL_bus_1_craftReq_3
  assign CAN_FIRE_RL_bus_1_craftReq_3 =
	     bus_ifcs_3_routeBack$EMPTY_N && bus_ifcs_3_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq_3 = CAN_FIRE_RL_bus_1_craftReq_3 ;

  // rule RL_bus_1_arbitrate
  assign CAN_FIRE_RL_bus_1_arbitrate =
	     bus_1_reqWires_0_whas__156_AND_bus_1_reqWires__ETC___d2170 &&
	     !bus_1_state ;
  assign WILL_FIRE_RL_bus_1_arbitrate = CAN_FIRE_RL_bus_1_arbitrate ;

  // rule RL_bus_1_source_selected
  assign CAN_FIRE_RL_bus_1_source_selected =
	     (!bus_ifcs_0_routeBack$EMPTY_N || bus_ifcs_0_rspBack$EMPTY_N) &&
	     !bus_1_state &&
	     bus_1_sourceSelect_0$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected =
	     CAN_FIRE_RL_bus_1_source_selected ;

  // rule RL_bus_1_burst
  assign CAN_FIRE_RL_bus_1_burst =
	     bus_ifcs_0_rspBack$EMPTY_N && bus_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_state_171_AND_bus_1_activeSource_0_295_2_ETC___d2298 ;
  assign WILL_FIRE_RL_bus_1_burst = CAN_FIRE_RL_bus_1_burst ;

  // rule RL_bus_ifcs_0_firstFlit_1
  assign CAN_FIRE_RL_bus_ifcs_0_firstFlit_1 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ifcs_0_rspBack$FULL_N &&
	     bus_ifcs_0_routeBack$FULL_N &&
	     !bus_ifcs_0_state_1 ;
  assign WILL_FIRE_RL_bus_ifcs_0_firstFlit_1 =
	     CAN_FIRE_RL_bus_ifcs_0_firstFlit_1 ;

  // rule RL_bus_ifcs_0_followFlits_1
  assign CAN_FIRE_RL_bus_ifcs_0_followFlits_1 =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ifcs_0_rspBack$FULL_N &&
	     bus_ifcs_0_state_1 ;
  assign WILL_FIRE_RL_bus_ifcs_0_followFlits_1 =
	     CAN_FIRE_RL_bus_ifcs_0_followFlits_1 ;

  // rule __me_check_212
  assign CAN_FIRE___me_check_212 = 1'b1 ;
  assign WILL_FIRE___me_check_212 = 1'b1 ;

  // rule RL_bus_ssNoSynth_0_b_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_0_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_b_forwardReady = 1'd1 ;

  // rule RL_ug_boot_rom_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop =
	     ug_boot_rom_slave_u_b_dropWire$whas &&
	     !boot_rom_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop ;

  // rule RL_ug_boot_rom_slave_u_b_doDrop
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_b_doDrop =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     ug_boot_rom_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_b_doDrop =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_b_doDrop ;

  // rule RL_bus_1_source_selected_1
  assign CAN_FIRE_RL_bus_1_source_selected_1 =
	     (!bus_ifcs_1_routeBack$EMPTY_N || bus_ifcs_1_rspBack$EMPTY_N) &&
	     !bus_1_state &&
	     bus_1_sourceSelect_1$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected_1 =
	     CAN_FIRE_RL_bus_1_source_selected_1 ;

  // rule RL_bus_1_burst_1
  assign CAN_FIRE_RL_bus_1_burst_1 =
	     bus_ifcs_1_rspBack$EMPTY_N && bus_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_state_171_AND_bus_1_activeSource_1_328_3_ETC___d2331 ;
  assign WILL_FIRE_RL_bus_1_burst_1 = CAN_FIRE_RL_bus_1_burst_1 ;

  // rule __me_check_244
  assign CAN_FIRE___me_check_244 = 1'b1 ;
  assign WILL_FIRE___me_check_244 = 1'b1 ;

  // rule RL_bus_ifcs_1_firstFlit_1
  assign CAN_FIRE_RL_bus_ifcs_1_firstFlit_1 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ifcs_1_rspBack$FULL_N &&
	     bus_ifcs_1_routeBack$FULL_N &&
	     !bus_ifcs_1_state_1 ;
  assign WILL_FIRE_RL_bus_ifcs_1_firstFlit_1 =
	     CAN_FIRE_RL_bus_ifcs_1_firstFlit_1 ;

  // rule RL_bus_ifcs_1_followFlits_1
  assign CAN_FIRE_RL_bus_ifcs_1_followFlits_1 =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ifcs_1_rspBack$FULL_N &&
	     bus_ifcs_1_state_1 ;
  assign WILL_FIRE_RL_bus_ifcs_1_followFlits_1 =
	     CAN_FIRE_RL_bus_ifcs_1_followFlits_1 ;

  // rule __me_check_214
  assign CAN_FIRE___me_check_214 = 1'b1 ;
  assign WILL_FIRE___me_check_214 = 1'b1 ;

  // rule RL_bus_ssNoSynth_1_b_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_1_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_b_forwardReady = 1'd1 ;

  // rule RL_ug_mem0_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop =
	     ug_mem0_slave_u_b_dropWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop ;

  // rule RL_ug_mem0_slave_u_b_doDrop
  assign CAN_FIRE_RL_ug_mem0_slave_u_b_doDrop =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     ug_mem0_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_b_doDrop =
	     CAN_FIRE_RL_ug_mem0_slave_u_b_doDrop ;

  // rule RL_bus_1_source_selected_2
  assign CAN_FIRE_RL_bus_1_source_selected_2 =
	     (!bus_ifcs_2_routeBack$EMPTY_N || bus_ifcs_2_rspBack$EMPTY_N) &&
	     !bus_1_state &&
	     bus_1_sourceSelect_2$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected_2 =
	     CAN_FIRE_RL_bus_1_source_selected_2 ;

  // rule RL_bus_1_burst_2
  assign CAN_FIRE_RL_bus_1_burst_2 =
	     bus_ifcs_2_rspBack$EMPTY_N && bus_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_state_171_AND_bus_1_activeSource_2_362_3_ETC___d2365 ;
  assign WILL_FIRE_RL_bus_1_burst_2 = CAN_FIRE_RL_bus_1_burst_2 ;

  // rule __me_check_246
  assign CAN_FIRE___me_check_246 = 1'b1 ;
  assign WILL_FIRE___me_check_246 = 1'b1 ;

  // rule RL_bus_ifcs_2_firstFlit
  assign CAN_FIRE_RL_bus_ifcs_2_firstFlit =
	     uart0$slave_bvalid && bus_ifcs_2_rspBack$FULL_N &&
	     bus_ifcs_2_routeBack$FULL_N &&
	     !bus_ifcs_2_state ;
  assign WILL_FIRE_RL_bus_ifcs_2_firstFlit =
	     CAN_FIRE_RL_bus_ifcs_2_firstFlit ;

  // rule RL_bus_ifcs_2_followFlits
  assign CAN_FIRE_RL_bus_ifcs_2_followFlits =
	     uart0$slave_bvalid && bus_ifcs_2_rspBack$FULL_N &&
	     bus_ifcs_2_state ;
  assign WILL_FIRE_RL_bus_ifcs_2_followFlits =
	     CAN_FIRE_RL_bus_ifcs_2_followFlits ;

  // rule __me_check_216
  assign CAN_FIRE___me_check_216 = 1'b1 ;
  assign WILL_FIRE___me_check_216 = 1'b1 ;

  // rule RL_bus_ssNoSynth_2_b_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_2_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_b_forwardReady = 1'd1 ;

  // rule RL_uart0_slave_b_forwardReady
  assign CAN_FIRE_RL_uart0_slave_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_uart0_slave_b_forwardReady = 1'd1 ;

  // rule RL_bus_1_source_selected_3
  assign CAN_FIRE_RL_bus_1_source_selected_3 =
	     (!bus_ifcs_3_routeBack$EMPTY_N || bus_ifcs_3_rspBack$EMPTY_N) &&
	     !bus_1_state &&
	     bus_1_sourceSelect_3$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected_3 =
	     CAN_FIRE_RL_bus_1_source_selected_3 ;

  // rule RL_bus_1_burst_3
  assign CAN_FIRE_RL_bus_1_burst_3 =
	     bus_ifcs_3_rspBack$EMPTY_N && bus_ifcs_3_routeBack$EMPTY_N &&
	     bus_1_state_171_AND_bus_1_activeSource_3_396_3_ETC___d2399 ;
  assign WILL_FIRE_RL_bus_1_burst_3 = CAN_FIRE_RL_bus_1_burst_3 ;

  // rule __me_check_242
  assign CAN_FIRE___me_check_242 = 1'b1 ;
  assign WILL_FIRE___me_check_242 = 1'b1 ;

  // rule __me_check_248
  assign CAN_FIRE___me_check_248 = 1'b1 ;
  assign WILL_FIRE___me_check_248 = 1'b1 ;

  // rule RL_bus_ifcs_3_firstFlit
  assign CAN_FIRE_RL_bus_ifcs_3_firstFlit =
	     aws_host_access$slave_bvalid && bus_ifcs_3_rspBack$FULL_N &&
	     bus_ifcs_3_routeBack$FULL_N &&
	     !bus_ifcs_3_state ;
  assign WILL_FIRE_RL_bus_ifcs_3_firstFlit =
	     CAN_FIRE_RL_bus_ifcs_3_firstFlit ;

  // rule RL_bus_ifcs_3_followFlits
  assign CAN_FIRE_RL_bus_ifcs_3_followFlits =
	     aws_host_access$slave_bvalid && bus_ifcs_3_rspBack$FULL_N &&
	     bus_ifcs_3_state ;
  assign WILL_FIRE_RL_bus_ifcs_3_followFlits =
	     CAN_FIRE_RL_bus_ifcs_3_followFlits ;

  // rule __me_check_218
  assign CAN_FIRE___me_check_218 = 1'b1 ;
  assign WILL_FIRE___me_check_218 = 1'b1 ;

  // rule RL_bus_ssNoSynth_3_b_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_3_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_b_forwardReady = 1'd1 ;

  // rule RL_aws_host_access_slave_b_forwardReady
  assign CAN_FIRE_RL_aws_host_access_slave_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_aws_host_access_slave_b_forwardReady = 1'd1 ;

  // rule RL_bus_1_sink_selected
  assign CAN_FIRE_RL_bus_1_sink_selected =
	     !CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse &&
	     bus_1_flitToSink_0$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected = CAN_FIRE_RL_bus_1_sink_selected ;

  // rule RL_bus_ifcs_0_forwardRsp
  assign CAN_FIRE_RL_bus_ifcs_0_forwardRsp =
	     bus_msNoSynth_0_b_buffer_ff$FULL_N &&
	     CAN_FIRE_RL_bus_1_sink_selected &&
	     !bus_ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ifcs_0_forwardRsp =
	     CAN_FIRE_RL_bus_ifcs_0_forwardRsp ;

  // rule RL_bus_msNoSynth_0_b_forwardFlit
  assign CAN_FIRE_RL_bus_msNoSynth_0_b_forwardFlit =
	     bus_msNoSynth_0_b_buffer_firstValid$Q_OUT &&
	     (bus_msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_0_b_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_b_forwardFlit =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_forwardFlit ;

  // rule RL_bus_msNoSynth_0_b_dropFlit
  assign CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit =
	     (bus_msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_0_b_buffer_enqw$whas) &&
	     core$cpu_imem_master_bready ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_b_dropFlit =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit ;

  // rule RL_bus_msNoSynth_0_b_buffer_enqueue
  assign CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue =
	     bus_msNoSynth_0_b_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit ||
	      bus_msNoSynth_0_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue ;

  // rule RL_bus_msNoSynth_0_b_buffer_dequeue
  assign CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit &&
	     bus_msNoSynth_0_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue ;

  // rule RL_bus_ifcs_0_nonRoutableGenRsp
  assign CAN_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp =
	     IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1557 &&
	     bus_ifcs_0_noRoute_inner_pendingReq$port1__read &&
	     bus_ifcs_0_noRouteRsp$FULL_N &&
	     core$cpu_imem_master_wvalid ;
  assign WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp =
	     CAN_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp ;

  // rule __me_check_198
  assign CAN_FIRE___me_check_198 = 1'b1 ;
  assign WILL_FIRE___me_check_198 = 1'b1 ;

  // rule __me_check_199
  assign CAN_FIRE___me_check_199 = 1'b1 ;
  assign WILL_FIRE___me_check_199 = 1'b1 ;

  // rule __me_check_202
  assign CAN_FIRE___me_check_202 = 1'b1 ;
  assign WILL_FIRE___me_check_202 = 1'b1 ;

  // rule RL_bus_merged_0_genFirst
  assign CAN_FIRE_RL_bus_merged_0_genFirst =
	     core$cpu_imem_master_awvalid && core$cpu_imem_master_wvalid &&
	     bus_merged_0_doDrop$whas &&
	     bus_merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_0_genFirst =
	     CAN_FIRE_RL_bus_merged_0_genFirst ;

  // rule RL_bus_msNoSynth_0_aw_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_0_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_aw_forwardReady = 1'd1 ;

  // rule RL_bus_merged_0_genOther
  assign CAN_FIRE_RL_bus_merged_0_genOther =
	     core$cpu_imem_master_wvalid && bus_merged_0_doDrop$whas &&
	     bus_merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_0_genOther =
	     CAN_FIRE_RL_bus_merged_0_genOther ;

  // rule RL_bus_msNoSynth_0_w_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_0_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_w_forwardReady = 1'd1 ;

  // rule RL_bus_1_sink_selected_1
  assign CAN_FIRE_RL_bus_1_sink_selected_1 =
	     !CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse &&
	     bus_1_flitToSink_1$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected_1 =
	     CAN_FIRE_RL_bus_1_sink_selected_1 ;

  // rule __me_check_250
  assign CAN_FIRE___me_check_250 = 1'b1 ;
  assign WILL_FIRE___me_check_250 = 1'b1 ;

  // rule RL_bus_ifcs_1_forwardRsp
  assign CAN_FIRE_RL_bus_ifcs_1_forwardRsp =
	     bus_msNoSynth_1_b_buffer_ff$FULL_N &&
	     CAN_FIRE_RL_bus_1_sink_selected_1 &&
	     !bus_ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ifcs_1_forwardRsp =
	     CAN_FIRE_RL_bus_ifcs_1_forwardRsp ;

  // rule RL_bus_msNoSynth_1_b_forwardFlit
  assign CAN_FIRE_RL_bus_msNoSynth_1_b_forwardFlit =
	     bus_msNoSynth_1_b_buffer_firstValid$Q_OUT &&
	     (bus_msNoSynth_1_b_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_1_b_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_b_forwardFlit =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_forwardFlit ;

  // rule RL_bus_msNoSynth_1_b_dropFlit
  assign CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit =
	     (bus_msNoSynth_1_b_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_1_b_buffer_enqw$whas) &&
	     core$cpu_dmem_master_bready ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_b_dropFlit =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit ;

  // rule RL_bus_msNoSynth_1_b_buffer_enqueue
  assign CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue =
	     bus_msNoSynth_1_b_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit ||
	      bus_msNoSynth_1_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue ;

  // rule RL_bus_msNoSynth_1_b_buffer_dequeue
  assign CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit &&
	     bus_msNoSynth_1_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue ;

  // rule RL_bus_ifcs_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp =
	     IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1690 &&
	     bus_ifcs_1_noRoute_inner_pendingReq$port1__read &&
	     bus_ifcs_1_noRouteRsp$FULL_N &&
	     core$cpu_dmem_master_wvalid ;
  assign WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp ;

  // rule __me_check_205
  assign CAN_FIRE___me_check_205 = 1'b1 ;
  assign WILL_FIRE___me_check_205 = 1'b1 ;

  // rule __me_check_206
  assign CAN_FIRE___me_check_206 = 1'b1 ;
  assign WILL_FIRE___me_check_206 = 1'b1 ;

  // rule __me_check_209
  assign CAN_FIRE___me_check_209 = 1'b1 ;
  assign WILL_FIRE___me_check_209 = 1'b1 ;

  // rule RL_bus_merged_1_genFirst
  assign CAN_FIRE_RL_bus_merged_1_genFirst =
	     core$cpu_dmem_master_awvalid && core$cpu_dmem_master_wvalid &&
	     bus_merged_1_doDrop$whas &&
	     bus_merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_1_genFirst =
	     CAN_FIRE_RL_bus_merged_1_genFirst ;

  // rule RL_bus_msNoSynth_1_aw_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_1_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_aw_forwardReady = 1'd1 ;

  // rule RL_bus_merged_1_genOther
  assign CAN_FIRE_RL_bus_merged_1_genOther =
	     core$cpu_dmem_master_wvalid && bus_merged_1_doDrop$whas &&
	     bus_merged_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_bus_merged_1_genOther =
	     CAN_FIRE_RL_bus_merged_1_genOther ;

  // rule RL_bus_msNoSynth_1_w_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_1_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_w_forwardReady = 1'd1 ;

  // rule RL_bus_1_checkSinkReady_2
  assign CAN_FIRE_RL_bus_1_checkSinkReady_2 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady_2 = 1'd1 ;

  // rule RL_bus_1_checkSinkReady_3
  assign CAN_FIRE_RL_bus_1_checkSinkReady_3 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady_3 = 1'd1 ;

  // rule RL_bus_1_checkSinkReady_4
  assign CAN_FIRE_RL_bus_1_checkSinkReady_4 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady_4 = 1'd1 ;

  // rule RL_bus_1_checkSinkReady_5
  assign CAN_FIRE_RL_bus_1_checkSinkReady_5 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_checkSinkReady_5 = 1'd1 ;

  // rule RL_bus_1_craftReq_4
  assign CAN_FIRE_RL_bus_1_craftReq_4 =
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq_4 = CAN_FIRE_RL_bus_1_craftReq_4 ;

  // rule RL_bus_1_craftReq_5
  assign CAN_FIRE_RL_bus_1_craftReq_5 =
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_ifcs_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_craftReq_5 = CAN_FIRE_RL_bus_1_craftReq_5 ;

  // rule RL_bus_1_arbitrate_1
  assign CAN_FIRE_RL_bus_1_arbitrate_1 =
	     (CAN_FIRE_RL_bus_1_craftReq_4 && bus_1_reqWires_0_1$wget ||
	      CAN_FIRE_RL_bus_1_craftReq_5 && bus_1_reqWires_1_1$wget) &&
	     !bus_1_state_1 ;
  assign WILL_FIRE_RL_bus_1_arbitrate_1 = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // rule RL_bus_1_source_selected_4
  assign CAN_FIRE_RL_bus_1_source_selected_4 =
	     (!bus_1_ifcs_0_innerRoute$EMPTY_N ||
	      bus_1_ifcs_0_innerReq$EMPTY_N) &&
	     !bus_1_state_1 &&
	     bus_1_sourceSelect_0_1$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected_4 =
	     CAN_FIRE_RL_bus_1_source_selected_4 ;

  // rule RL_bus_1_burst_4
  assign CAN_FIRE_RL_bus_1_burst_4 =
	     bus_1_ifcs_0_innerReq$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_state_1_780_AND_bus_1_activeSource_0_1_8_ETC___d2857 ;
  assign WILL_FIRE_RL_bus_1_burst_4 = CAN_FIRE_RL_bus_1_burst_4 ;

  // rule RL_bus_1_source_selected_5
  assign CAN_FIRE_RL_bus_1_source_selected_5 =
	     (!bus_1_ifcs_1_innerRoute$EMPTY_N ||
	      bus_1_ifcs_1_innerReq$EMPTY_N) &&
	     !bus_1_state_1 &&
	     bus_1_sourceSelect_1_1$whas ;
  assign WILL_FIRE_RL_bus_1_source_selected_5 =
	     CAN_FIRE_RL_bus_1_source_selected_5 ;

  // rule RL_bus_1_burst_5
  assign CAN_FIRE_RL_bus_1_burst_5 =
	     bus_1_ifcs_1_innerReq$EMPTY_N &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_state_1_780_AND_bus_1_activeSource_1_1_9_ETC___d2904 ;
  assign WILL_FIRE_RL_bus_1_burst_5 = CAN_FIRE_RL_bus_1_burst_5 ;

  // rule __me_check_281
  assign CAN_FIRE___me_check_281 = 1'b1 ;
  assign WILL_FIRE___me_check_281 = 1'b1 ;

  // rule __me_check_283
  assign CAN_FIRE___me_check_283 = 1'b1 ;
  assign WILL_FIRE___me_check_283 = 1'b1 ;

  // rule RL_bus_1_sink_selected_2
  assign CAN_FIRE_RL_bus_1_sink_selected_2 =
	     bus_ssNoSynth_0_ar_buffer_ff$FULL_N &&
	     bus_1_flitToSink_0_1$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected_2 =
	     CAN_FIRE_RL_bus_1_sink_selected_2 ;

  // rule RL_bus_ssNoSynth_0_ar_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit =
	     !boot_rom_axi4_deburster_inShim_arff$FULL_N ||
	     bus_ssNoSynth_0_ar_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_2) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit ;

  // rule RL_ug_boot_rom_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut =
	     ug_boot_rom_slave_u_ar_putWire$whas &&
	     !boot_rom_axi4_deburster_inShim_arff$FULL_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut ;

  // rule RL_bus_ssNoSynth_0_ar_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit =
	     (bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_2) &&
	     boot_rom_axi4_deburster_inShim_arff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR =
	     boot_rom_axi4_deburster_inShim_arff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_arff_rv[100] &&
	     boot_rom_axi4_deburster_inSerial_state == 2'd0 &&
	     (!boot_rom_axi4_deburster_inSerial_lastWasRead ||
	      !boot_rom_axi4_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;

  // rule RL_boot_rom_axi4_deburster_forward_read_req
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[100] &&
	     boot_rom_axi4_deburster_outShim_arff$FULL_N &&
	     boot_rom_axi4_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeW
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW =
	     boot_rom_axi4_deburster_inShim_wff$EMPTY_N &&
	     !boot_rom_axi4_deburster_inSerial_shim_wff_rv[73] &&
	     boot_rom_axi4_deburster_inSerial_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ;

  // rule RL_boot_rom_axi4_deburster_forward_write_req
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[100] &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[73] &&
	     boot_rom_axi4_deburster_outShim_awff$FULL_N &&
	     boot_rom_axi4_deburster_outShim_wff$FULL_N &&
	     (!boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ||
	      boot_rom_axi4_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeB
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read[9] &&
	     boot_rom_axi4_deburster_inShim_bff$FULL_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;

  // rule RL_ug_boot_rom_slave_u_aw_doPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_aw_doPut =
	     boot_rom_axi4_deburster_inShim_awff$FULL_N &&
	     ug_boot_rom_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_aw_doPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_aw_doPut ;

  // rule RL_ug_boot_rom_slave_u_w_doPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_w_doPut =
	     boot_rom_axi4_deburster_inShim_wff$FULL_N &&
	     ug_boot_rom_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_w_doPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_w_doPut ;

  // rule RL_ug_boot_rom_slave_u_ar_doPut
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_ar_doPut =
	     boot_rom_axi4_deburster_inShim_arff$FULL_N &&
	     ug_boot_rom_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_ar_doPut =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_ar_doPut ;

  // rule RL_bus_ssNoSynth_0_ar_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_1_sink_selected_2 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit ||
	      bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_0_ar_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit &&
	     bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue ;

  // rule RL_bus_1_sink_selected_3
  assign CAN_FIRE_RL_bus_1_sink_selected_3 =
	     bus_ssNoSynth_1_ar_buffer_ff$FULL_N &&
	     bus_1_flitToSink_1_1$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected_3 =
	     CAN_FIRE_RL_bus_1_sink_selected_3 ;

  // rule RL_bus_ssNoSynth_1_ar_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit =
	     !mem0_controller_axi4_deburster_inShim_arff$FULL_N ||
	     bus_ssNoSynth_1_ar_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_3) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit ;

  // rule RL_ug_mem0_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut =
	     ug_mem0_slave_u_ar_putWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_arff$FULL_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut ;

  // rule RL_bus_ssNoSynth_1_ar_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit =
	     (bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_3) &&
	     mem0_controller_axi4_deburster_inShim_arff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR =
	     mem0_controller_axi4_deburster_inShim_arff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_arff_rv[100] &&
	     mem0_controller_axi4_deburster_inSerial_state == 2'd0 &&
	     (!mem0_controller_axi4_deburster_inSerial_lastWasRead ||
	      !mem0_controller_axi4_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;

  // rule RL_mem0_controller_axi4_deburster_forward_read_req
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[100] &&
	     mem0_controller_axi4_deburster_outShim_arff$FULL_N &&
	     mem0_controller_axi4_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeW
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW =
	     mem0_controller_axi4_deburster_inShim_wff$EMPTY_N &&
	     !mem0_controller_axi4_deburster_inSerial_shim_wff_rv[73] &&
	     mem0_controller_axi4_deburster_inSerial_state$port1__read ==
	     2'd1 ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ;

  // rule RL_mem0_controller_axi4_deburster_forward_write_req
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[100] &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[73] &&
	     mem0_controller_axi4_deburster_outShim_awff$FULL_N &&
	     mem0_controller_axi4_deburster_outShim_wff$FULL_N &&
	     (!mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ||
	      mem0_controller_axi4_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeB
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read[9] &&
	     mem0_controller_axi4_deburster_inShim_bff$FULL_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;

  // rule RL_ug_mem0_slave_u_aw_doPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_aw_doPut =
	     mem0_controller_axi4_deburster_inShim_awff$FULL_N &&
	     ug_mem0_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_aw_doPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_aw_doPut ;

  // rule RL_ug_mem0_slave_u_w_doPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_w_doPut =
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N &&
	     ug_mem0_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_w_doPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_w_doPut ;

  // rule RL_ug_mem0_slave_u_ar_doPut
  assign CAN_FIRE_RL_ug_mem0_slave_u_ar_doPut =
	     mem0_controller_axi4_deburster_inShim_arff$FULL_N &&
	     ug_mem0_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_ar_doPut =
	     CAN_FIRE_RL_ug_mem0_slave_u_ar_doPut ;

  // rule RL_bus_ssNoSynth_1_ar_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_1_sink_selected_3 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit ||
	      bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_1_ar_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit &&
	     bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue ;

  // rule RL_bus_1_sink_selected_4
  assign CAN_FIRE_RL_bus_1_sink_selected_4 =
	     bus_ssNoSynth_2_ar_buffer_ff$FULL_N && bus_1_flitToSink_2$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected_4 =
	     CAN_FIRE_RL_bus_1_sink_selected_4 ;

  // rule RL_bus_ssNoSynth_2_ar_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit =
	     !uart0_slave_ar_buffer_ff$FULL_N ||
	     bus_ssNoSynth_2_ar_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_4) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit ;

  // rule RL_uart0_slave_ar_forwardFlit
  assign CAN_FIRE_RL_uart0_slave_ar_forwardFlit =
	     uart0_slave_ar_buffer_firstValid$Q_OUT &&
	     (uart0_slave_ar_buffer_ff$EMPTY_N ||
	      uart0_slave_ar_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_uart0_slave_ar_forwardFlit =
	     CAN_FIRE_RL_uart0_slave_ar_forwardFlit ;

  // rule RL_uart0_slave_ar_dropFlit
  assign CAN_FIRE_RL_uart0_slave_ar_dropFlit =
	     (uart0_slave_ar_buffer_ff$EMPTY_N ||
	      uart0_slave_ar_buffer_enqw$whas) &&
	     uart0$slave_arready ;
  assign WILL_FIRE_RL_uart0_slave_ar_dropFlit =
	     CAN_FIRE_RL_uart0_slave_ar_dropFlit ;

  // rule RL_uart0_slave_ar_buffer_enqueue
  assign CAN_FIRE_RL_uart0_slave_ar_buffer_enqueue =
	     uart0_slave_ar_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_uart0_slave_ar_dropFlit ||
	      uart0_slave_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_uart0_slave_ar_buffer_enqueue =
	     CAN_FIRE_RL_uart0_slave_ar_buffer_enqueue ;

  // rule RL_uart0_slave_ar_buffer_dequeue
  assign CAN_FIRE_RL_uart0_slave_ar_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_ar_dropFlit &&
	     uart0_slave_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_uart0_slave_ar_buffer_dequeue =
	     CAN_FIRE_RL_uart0_slave_ar_buffer_dequeue ;

  // rule RL_bus_ssNoSynth_2_ar_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit =
	     (bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_4) &&
	     uart0_slave_ar_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit ;

  // rule RL_bus_ssNoSynth_2_ar_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_1_sink_selected_4 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit ||
	      bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_2_ar_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit &&
	     bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue ;

  // rule RL_bus_1_sink_selected_5
  assign CAN_FIRE_RL_bus_1_sink_selected_5 =
	     bus_ssNoSynth_3_ar_buffer_ff$FULL_N && bus_1_flitToSink_3$whas ;
  assign WILL_FIRE_RL_bus_1_sink_selected_5 =
	     CAN_FIRE_RL_bus_1_sink_selected_5 ;

  // rule __me_check_285
  assign CAN_FIRE___me_check_285 = 1'b1 ;
  assign WILL_FIRE___me_check_285 = 1'b1 ;

  // rule RL_bus_ssNoSynth_3_ar_forwardFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_3_ar_forwardFlit =
	     !aws_host_access_slave_ar_buffer_ff$FULL_N ||
	     bus_ssNoSynth_3_ar_buffer_firstValid$Q_OUT &&
	     (bus_ssNoSynth_3_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_5) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_ar_forwardFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_3_ar_forwardFlit ;

  // rule RL_aws_host_access_slave_ar_forwardFlit
  assign CAN_FIRE_RL_aws_host_access_slave_ar_forwardFlit =
	     aws_host_access_slave_ar_buffer_firstValid$Q_OUT &&
	     (aws_host_access_slave_ar_buffer_ff$EMPTY_N ||
	      aws_host_access_slave_ar_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_aws_host_access_slave_ar_forwardFlit =
	     CAN_FIRE_RL_aws_host_access_slave_ar_forwardFlit ;

  // rule RL_aws_host_access_slave_ar_dropFlit
  assign CAN_FIRE_RL_aws_host_access_slave_ar_dropFlit =
	     (aws_host_access_slave_ar_buffer_ff$EMPTY_N ||
	      aws_host_access_slave_ar_buffer_enqw$whas) &&
	     aws_host_access$slave_arready ;
  assign WILL_FIRE_RL_aws_host_access_slave_ar_dropFlit =
	     CAN_FIRE_RL_aws_host_access_slave_ar_dropFlit ;

  // rule RL_aws_host_access_slave_ar_buffer_enqueue
  assign CAN_FIRE_RL_aws_host_access_slave_ar_buffer_enqueue =
	     aws_host_access_slave_ar_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_aws_host_access_slave_ar_dropFlit ||
	      aws_host_access_slave_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_aws_host_access_slave_ar_buffer_enqueue =
	     CAN_FIRE_RL_aws_host_access_slave_ar_buffer_enqueue ;

  // rule RL_aws_host_access_slave_ar_buffer_dequeue
  assign CAN_FIRE_RL_aws_host_access_slave_ar_buffer_dequeue =
	     CAN_FIRE_RL_aws_host_access_slave_ar_dropFlit &&
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_aws_host_access_slave_ar_buffer_dequeue =
	     CAN_FIRE_RL_aws_host_access_slave_ar_buffer_dequeue ;

  // rule RL_bus_ssNoSynth_3_ar_dropFlit
  assign CAN_FIRE_RL_bus_ssNoSynth_3_ar_dropFlit =
	     (bus_ssNoSynth_3_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_bus_1_sink_selected_5) &&
	     aws_host_access_slave_ar_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_ar_dropFlit =
	     CAN_FIRE_RL_bus_ssNoSynth_3_ar_dropFlit ;

  // rule RL_bus_ssNoSynth_3_ar_buffer_enqueue
  assign CAN_FIRE_RL_bus_ssNoSynth_3_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_1_sink_selected_5 &&
	     (!CAN_FIRE_RL_bus_ssNoSynth_3_ar_dropFlit ||
	      bus_ssNoSynth_3_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_ar_buffer_enqueue =
	     CAN_FIRE_RL_bus_ssNoSynth_3_ar_buffer_enqueue ;

  // rule RL_bus_ssNoSynth_3_ar_buffer_dequeue
  assign CAN_FIRE_RL_bus_ssNoSynth_3_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_3_ar_dropFlit &&
	     bus_ssNoSynth_3_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_ar_buffer_dequeue =
	     CAN_FIRE_RL_bus_ssNoSynth_3_ar_buffer_dequeue ;

  // rule RL_bus_1_ifcs_0_firstFlit
  assign CAN_FIRE_RL_bus_1_ifcs_0_firstFlit =
	     core$cpu_imem_master_arvalid && bus_1_ifcs_0_innerReq$FULL_N &&
	     bus_1_ifcs_0_innerRoute$FULL_N &&
	     bus_1_ifcs_0_state == 2'd0 &&
	     IF_NOT_core_cpu_imem_master_ar_araddr__414_ULT_ETC___d2452 ==
	     3'd1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_firstFlit =
	     CAN_FIRE_RL_bus_1_ifcs_0_firstFlit ;

  // rule RL_bus_1_ifcs_0_followFlits
  assign CAN_FIRE_RL_bus_1_ifcs_0_followFlits =
	     core$cpu_imem_master_arvalid && bus_1_ifcs_0_innerReq$FULL_N &&
	     bus_1_ifcs_0_state == 2'd1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_followFlits =
	     CAN_FIRE_RL_bus_1_ifcs_0_followFlits ;

  // rule RL_bus_1_ifcs_0_nonRoutableFlit
  assign CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit =
	     bus_1_ifcs_0_noRoute_flitCount == 9'd0 &&
	     core$cpu_imem_master_arvalid &&
	     bus_1_ifcs_0_state == 2'd0 &&
	     IF_NOT_core_cpu_imem_master_ar_araddr__414_ULT_ETC___d2452 !=
	     3'd1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit ;

  // rule RL_bus_1_ifcs_0_drainFlits
  assign CAN_FIRE_RL_bus_1_ifcs_0_drainFlits =
	     core$cpu_imem_master_arvalid && bus_1_ifcs_0_state == 2'd2 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_drainFlits =
	     CAN_FIRE_RL_bus_1_ifcs_0_drainFlits ;

  // rule __me_check_254
  assign CAN_FIRE___me_check_254 = 1'b1 ;
  assign WILL_FIRE___me_check_254 = 1'b1 ;

  // rule RL_bus_1_ifcs_0_drainNoRouteResponse
  assign CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse =
	     bus_msNoSynth_0_r_buffer_ff$FULL_N &&
	     bus_1_ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse =
	     CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse ;

  // rule RL_bus_1_ifcs_1_firstFlit
  assign CAN_FIRE_RL_bus_1_ifcs_1_firstFlit =
	     core$cpu_dmem_master_arvalid && bus_1_ifcs_1_innerReq$FULL_N &&
	     bus_1_ifcs_1_innerRoute$FULL_N &&
	     bus_1_ifcs_1_state == 2'd0 &&
	     IF_NOT_core_cpu_dmem_master_ar_araddr__524_ULT_ETC___d2562 ==
	     3'd1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_firstFlit =
	     CAN_FIRE_RL_bus_1_ifcs_1_firstFlit ;

  // rule RL_bus_1_ifcs_1_followFlits
  assign CAN_FIRE_RL_bus_1_ifcs_1_followFlits =
	     core$cpu_dmem_master_arvalid && bus_1_ifcs_1_innerReq$FULL_N &&
	     bus_1_ifcs_1_state == 2'd1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_followFlits =
	     CAN_FIRE_RL_bus_1_ifcs_1_followFlits ;

  // rule RL_bus_1_ifcs_1_nonRoutableFlit
  assign CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit =
	     bus_1_ifcs_1_noRoute_flitCount == 9'd0 &&
	     core$cpu_dmem_master_arvalid &&
	     bus_1_ifcs_1_state == 2'd0 &&
	     IF_NOT_core_cpu_dmem_master_ar_araddr__524_ULT_ETC___d2562 !=
	     3'd1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit ;

  // rule RL_bus_1_ifcs_1_drainFlits
  assign CAN_FIRE_RL_bus_1_ifcs_1_drainFlits =
	     core$cpu_dmem_master_arvalid && bus_1_ifcs_1_state == 2'd2 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_drainFlits =
	     CAN_FIRE_RL_bus_1_ifcs_1_drainFlits ;

  // rule __me_check_261
  assign CAN_FIRE___me_check_261 = 1'b1 ;
  assign WILL_FIRE___me_check_261 = 1'b1 ;

  // rule RL_bus_1_ifcs_1_drainNoRouteResponse
  assign CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse =
	     bus_msNoSynth_1_r_buffer_ff$FULL_N &&
	     bus_1_ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse =
	     CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse ;

  // rule RL_bus_1_1_checkSinkReady
  assign CAN_FIRE_RL_bus_1_1_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_1_checkSinkReady = 1'd1 ;

  // rule RL_bus_1_1_checkSinkReady_1
  assign CAN_FIRE_RL_bus_1_1_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_bus_1_1_checkSinkReady_1 = 1'd1 ;

  // rule RL_bus_1_1_craftReq
  assign CAN_FIRE_RL_bus_1_1_craftReq =
	     bus_1_ifcs_0_routeBack$EMPTY_N && bus_1_ifcs_0_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_1_craftReq = CAN_FIRE_RL_bus_1_1_craftReq ;

  // rule RL_bus_1_1_craftReq_1
  assign CAN_FIRE_RL_bus_1_1_craftReq_1 =
	     bus_1_ifcs_1_routeBack$EMPTY_N && bus_1_ifcs_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_1_craftReq_1 = CAN_FIRE_RL_bus_1_1_craftReq_1 ;

  // rule RL_bus_1_1_craftReq_2
  assign CAN_FIRE_RL_bus_1_1_craftReq_2 =
	     bus_1_ifcs_2_routeBack$EMPTY_N && bus_1_ifcs_2_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_1_craftReq_2 = CAN_FIRE_RL_bus_1_1_craftReq_2 ;

  // rule RL_bus_1_1_craftReq_3
  assign CAN_FIRE_RL_bus_1_1_craftReq_3 =
	     bus_1_ifcs_3_routeBack$EMPTY_N && bus_1_ifcs_3_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_1_craftReq_3 = CAN_FIRE_RL_bus_1_1_craftReq_3 ;

  // rule RL_bus_1_1_arbitrate
  assign CAN_FIRE_RL_bus_1_1_arbitrate =
	     bus_1_1_reqWires_0_whas__978_AND_bus_1_1_reqWi_ETC___d2992 &&
	     !bus_1_1_state ;
  assign WILL_FIRE_RL_bus_1_1_arbitrate = CAN_FIRE_RL_bus_1_1_arbitrate ;

  // rule RL_bus_1_1_source_selected
  assign CAN_FIRE_RL_bus_1_1_source_selected =
	     (!bus_1_ifcs_0_routeBack$EMPTY_N ||
	      bus_1_ifcs_0_rspBack$EMPTY_N) &&
	     !bus_1_1_state &&
	     MUX_bus_1_1_activeSource_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_1_1_source_selected =
	     CAN_FIRE_RL_bus_1_1_source_selected ;

  // rule RL_bus_1_1_burst
  assign CAN_FIRE_RL_bus_1_1_burst =
	     bus_1_ifcs_0_rspBack$EMPTY_N && bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_1_state_993_AND_bus_1_1_activeSource_0_1_ETC___d3127 ;
  assign WILL_FIRE_RL_bus_1_1_burst = CAN_FIRE_RL_bus_1_1_burst ;

  // rule RL_bus_1_ifcs_0_firstFlit_1
  assign CAN_FIRE_RL_bus_1_ifcs_0_firstFlit_1 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_ifcs_0_rspBack$FULL_N &&
	     bus_1_ifcs_0_routeBack$FULL_N &&
	     !bus_1_ifcs_0_state_1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1 =
	     CAN_FIRE_RL_bus_1_ifcs_0_firstFlit_1 ;

  // rule RL_bus_1_ifcs_0_followFlits_1
  assign CAN_FIRE_RL_bus_1_ifcs_0_followFlits_1 =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_ifcs_0_rspBack$FULL_N &&
	     bus_1_ifcs_0_state_1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_followFlits_1 =
	     CAN_FIRE_RL_bus_1_ifcs_0_followFlits_1 ;

  // rule __me_check_266
  assign CAN_FIRE___me_check_266 = 1'b1 ;
  assign WILL_FIRE___me_check_266 = 1'b1 ;

  // rule RL_bus_ssNoSynth_0_r_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_0_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_0_r_forwardReady = 1'd1 ;

  // rule RL_ug_boot_rom_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop =
	     ug_boot_rom_slave_u_r_dropWire$whas &&
	     !boot_rom_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop ;

  // rule RL_ug_boot_rom_slave_u_r_doDrop
  assign CAN_FIRE_RL_ug_boot_rom_slave_u_r_doDrop =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     ug_boot_rom_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_ug_boot_rom_slave_u_r_doDrop =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_r_doDrop ;

  // rule RL_boot_rom_axi4_deburster_inSerial_takeR
  assign CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[74] &&
	     boot_rom_axi4_deburster_inShim_rff$FULL_N ;
  assign WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule RL_bus_1_1_source_selected_1
  assign CAN_FIRE_RL_bus_1_1_source_selected_1 =
	     (!bus_1_ifcs_1_routeBack$EMPTY_N ||
	      bus_1_ifcs_1_rspBack$EMPTY_N) &&
	     !bus_1_1_state &&
	     MUX_bus_1_1_activeSource_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_1_1_source_selected_1 =
	     CAN_FIRE_RL_bus_1_1_source_selected_1 ;

  // rule RL_bus_1_1_burst_1
  assign CAN_FIRE_RL_bus_1_1_burst_1 =
	     bus_1_ifcs_1_rspBack$EMPTY_N && bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_1_state_993_AND_bus_1_1_activeSource_1_1_ETC___d3163 ;
  assign WILL_FIRE_RL_bus_1_1_burst_1 = CAN_FIRE_RL_bus_1_1_burst_1 ;

  // rule __me_check_298
  assign CAN_FIRE___me_check_298 = 1'b1 ;
  assign WILL_FIRE___me_check_298 = 1'b1 ;

  // rule RL_bus_1_ifcs_1_firstFlit_1
  assign CAN_FIRE_RL_bus_1_ifcs_1_firstFlit_1 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_ifcs_1_rspBack$FULL_N &&
	     bus_1_ifcs_1_routeBack$FULL_N &&
	     !bus_1_ifcs_1_state_1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1 =
	     CAN_FIRE_RL_bus_1_ifcs_1_firstFlit_1 ;

  // rule RL_bus_1_ifcs_1_followFlits_1
  assign CAN_FIRE_RL_bus_1_ifcs_1_followFlits_1 =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_1_ifcs_1_rspBack$FULL_N &&
	     bus_1_ifcs_1_state_1 ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_followFlits_1 =
	     CAN_FIRE_RL_bus_1_ifcs_1_followFlits_1 ;

  // rule __me_check_268
  assign CAN_FIRE___me_check_268 = 1'b1 ;
  assign WILL_FIRE___me_check_268 = 1'b1 ;

  // rule RL_bus_ssNoSynth_1_r_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_1_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_1_r_forwardReady = 1'd1 ;

  // rule RL_ug_mem0_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop =
	     ug_mem0_slave_u_r_dropWire$whas &&
	     !mem0_controller_axi4_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop ;

  // rule RL_ug_mem0_slave_u_r_doDrop
  assign CAN_FIRE_RL_ug_mem0_slave_u_r_doDrop =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     ug_mem0_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_ug_mem0_slave_u_r_doDrop =
	     CAN_FIRE_RL_ug_mem0_slave_u_r_doDrop ;

  // rule RL_mem0_controller_axi4_deburster_inSerial_takeR
  assign CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[74] &&
	     mem0_controller_axi4_deburster_inShim_rff$FULL_N ;
  assign WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ;

  // rule __me_check_13
  assign CAN_FIRE___me_check_13 = 1'b1 ;
  assign WILL_FIRE___me_check_13 = 1'b1 ;

  // rule RL_rl_reset_start_initial
  assign CAN_FIRE_RL_rl_reset_start_initial = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_reset_start_initial = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_bus_1_1_source_selected_2
  assign CAN_FIRE_RL_bus_1_1_source_selected_2 =
	     (!bus_1_ifcs_2_routeBack$EMPTY_N ||
	      bus_1_ifcs_2_rspBack$EMPTY_N) &&
	     !bus_1_1_state &&
	     MUX_bus_1_1_activeSource_2$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_1_1_source_selected_2 =
	     CAN_FIRE_RL_bus_1_1_source_selected_2 ;

  // rule RL_bus_1_1_burst_2
  assign CAN_FIRE_RL_bus_1_1_burst_2 =
	     bus_1_ifcs_2_rspBack$EMPTY_N && bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_1_state_993_AND_bus_1_1_activeSource_2_1_ETC___d3199 ;
  assign WILL_FIRE_RL_bus_1_1_burst_2 = CAN_FIRE_RL_bus_1_1_burst_2 ;

  // rule __me_check_300
  assign CAN_FIRE___me_check_300 = 1'b1 ;
  assign WILL_FIRE___me_check_300 = 1'b1 ;

  // rule RL_bus_1_ifcs_2_firstFlit
  assign CAN_FIRE_RL_bus_1_ifcs_2_firstFlit =
	     uart0$slave_rvalid && bus_1_ifcs_2_rspBack$FULL_N &&
	     bus_1_ifcs_2_routeBack$FULL_N &&
	     !bus_1_ifcs_2_state ;
  assign WILL_FIRE_RL_bus_1_ifcs_2_firstFlit =
	     CAN_FIRE_RL_bus_1_ifcs_2_firstFlit ;

  // rule RL_bus_1_ifcs_2_followFlits
  assign CAN_FIRE_RL_bus_1_ifcs_2_followFlits =
	     uart0$slave_rvalid && bus_1_ifcs_2_rspBack$FULL_N &&
	     bus_1_ifcs_2_state ;
  assign WILL_FIRE_RL_bus_1_ifcs_2_followFlits =
	     CAN_FIRE_RL_bus_1_ifcs_2_followFlits ;

  // rule __me_check_270
  assign CAN_FIRE___me_check_270 = 1'b1 ;
  assign WILL_FIRE___me_check_270 = 1'b1 ;

  // rule RL_bus_ssNoSynth_2_r_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_2_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_2_r_forwardReady = 1'd1 ;

  // rule RL_uart0_slave_r_forwardReady
  assign CAN_FIRE_RL_uart0_slave_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_uart0_slave_r_forwardReady = 1'd1 ;

  // rule RL_rl_reset_complete_initial
  assign CAN_FIRE_RL_rl_reset_complete_initial = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_reset_complete_initial =
	     MUX_rg_state$write_1__SEL_2 ;

  // rule RL_bus_1_1_source_selected_3
  assign CAN_FIRE_RL_bus_1_1_source_selected_3 =
	     (!bus_1_ifcs_3_routeBack$EMPTY_N ||
	      bus_1_ifcs_3_rspBack$EMPTY_N) &&
	     !bus_1_1_state &&
	     MUX_bus_1_1_activeSource_3$write_1__VAL_1 ;
  assign WILL_FIRE_RL_bus_1_1_source_selected_3 =
	     CAN_FIRE_RL_bus_1_1_source_selected_3 ;

  // rule RL_bus_1_1_burst_3
  assign CAN_FIRE_RL_bus_1_1_burst_3 =
	     bus_1_ifcs_3_rspBack$EMPTY_N && bus_1_ifcs_3_routeBack$EMPTY_N &&
	     bus_1_1_state_993_AND_bus_1_1_activeSource_3_2_ETC___d3235 ;
  assign WILL_FIRE_RL_bus_1_1_burst_3 = CAN_FIRE_RL_bus_1_1_burst_3 ;

  // rule __me_check_296
  assign CAN_FIRE___me_check_296 = 1'b1 ;
  assign WILL_FIRE___me_check_296 = 1'b1 ;

  // rule __me_check_302
  assign CAN_FIRE___me_check_302 = 1'b1 ;
  assign WILL_FIRE___me_check_302 = 1'b1 ;

  // rule RL_bus_1_ifcs_3_firstFlit
  assign CAN_FIRE_RL_bus_1_ifcs_3_firstFlit =
	     aws_host_access$slave_rvalid && bus_1_ifcs_3_rspBack$FULL_N &&
	     bus_1_ifcs_3_routeBack$FULL_N &&
	     !bus_1_ifcs_3_state ;
  assign WILL_FIRE_RL_bus_1_ifcs_3_firstFlit =
	     CAN_FIRE_RL_bus_1_ifcs_3_firstFlit ;

  // rule RL_bus_1_ifcs_3_followFlits
  assign CAN_FIRE_RL_bus_1_ifcs_3_followFlits =
	     aws_host_access$slave_rvalid && bus_1_ifcs_3_rspBack$FULL_N &&
	     bus_1_ifcs_3_state ;
  assign WILL_FIRE_RL_bus_1_ifcs_3_followFlits =
	     CAN_FIRE_RL_bus_1_ifcs_3_followFlits ;

  // rule __me_check_272
  assign CAN_FIRE___me_check_272 = 1'b1 ;
  assign WILL_FIRE___me_check_272 = 1'b1 ;

  // rule RL_bus_ssNoSynth_3_r_forwardReady
  assign CAN_FIRE_RL_bus_ssNoSynth_3_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_ssNoSynth_3_r_forwardReady = 1'd1 ;

  // rule RL_aws_host_access_slave_r_forwardReady
  assign CAN_FIRE_RL_aws_host_access_slave_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_aws_host_access_slave_r_forwardReady = 1'd1 ;

  // rule RL_bus_1_1_sink_selected
  assign CAN_FIRE_RL_bus_1_1_sink_selected =
	     !CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse &&
	     bus_1_1_flitToSink_0$whas ;
  assign WILL_FIRE_RL_bus_1_1_sink_selected =
	     CAN_FIRE_RL_bus_1_1_sink_selected ;

  // rule RL_bus_1_ifcs_0_forwardRsp
  assign CAN_FIRE_RL_bus_1_ifcs_0_forwardRsp =
	     bus_msNoSynth_0_r_buffer_ff$FULL_N &&
	     CAN_FIRE_RL_bus_1_1_sink_selected &&
	     !bus_1_ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_forwardRsp =
	     CAN_FIRE_RL_bus_1_ifcs_0_forwardRsp ;

  // rule RL_bus_msNoSynth_0_r_forwardFlit
  assign CAN_FIRE_RL_bus_msNoSynth_0_r_forwardFlit =
	     bus_msNoSynth_0_r_buffer_firstValid$Q_OUT &&
	     (bus_msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_0_r_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_r_forwardFlit =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_forwardFlit ;

  // rule RL_bus_msNoSynth_0_r_dropFlit
  assign CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit =
	     (bus_msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_0_r_buffer_enqw$whas) &&
	     core$cpu_imem_master_rready ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_r_dropFlit =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit ;

  // rule RL_bus_msNoSynth_0_r_buffer_enqueue
  assign CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue =
	     bus_msNoSynth_0_r_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit ||
	      bus_msNoSynth_0_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue ;

  // rule RL_bus_msNoSynth_0_r_buffer_dequeue
  assign CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit &&
	     bus_msNoSynth_0_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue ;

  // rule RL_bus_1_ifcs_0_nonRoutableGenRsp
  assign CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp =
	     x_port1__read__h90572 != 9'd0 &&
	     bus_1_ifcs_0_noRouteRsp$FULL_N &&
	     (x_port1__read__h90572 != 9'd1 || core$cpu_imem_master_arvalid) ;
  assign WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp ;

  // rule __me_check_252
  assign CAN_FIRE___me_check_252 = 1'b1 ;
  assign WILL_FIRE___me_check_252 = 1'b1 ;

  // rule __me_check_253
  assign CAN_FIRE___me_check_253 = 1'b1 ;
  assign WILL_FIRE___me_check_253 = 1'b1 ;

  // rule __me_check_256
  assign CAN_FIRE___me_check_256 = 1'b1 ;
  assign WILL_FIRE___me_check_256 = 1'b1 ;

  // rule RL_bus_msNoSynth_0_ar_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_0_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_0_ar_forwardReady = 1'd1 ;

  // rule RL_bus_1_1_sink_selected_1
  assign CAN_FIRE_RL_bus_1_1_sink_selected_1 =
	     !CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse &&
	     bus_1_1_flitToSink_1$whas ;
  assign WILL_FIRE_RL_bus_1_1_sink_selected_1 =
	     CAN_FIRE_RL_bus_1_1_sink_selected_1 ;

  // rule __me_check_304
  assign CAN_FIRE___me_check_304 = 1'b1 ;
  assign WILL_FIRE___me_check_304 = 1'b1 ;

  // rule RL_bus_1_ifcs_1_forwardRsp
  assign CAN_FIRE_RL_bus_1_ifcs_1_forwardRsp =
	     bus_msNoSynth_1_r_buffer_ff$FULL_N &&
	     CAN_FIRE_RL_bus_1_1_sink_selected_1 &&
	     !bus_1_ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_forwardRsp =
	     CAN_FIRE_RL_bus_1_ifcs_1_forwardRsp ;

  // rule RL_bus_msNoSynth_1_r_forwardFlit
  assign CAN_FIRE_RL_bus_msNoSynth_1_r_forwardFlit =
	     bus_msNoSynth_1_r_buffer_firstValid$Q_OUT &&
	     (bus_msNoSynth_1_r_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_1_r_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_r_forwardFlit =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_forwardFlit ;

  // rule RL_bus_msNoSynth_1_r_dropFlit
  assign CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit =
	     (bus_msNoSynth_1_r_buffer_ff$EMPTY_N ||
	      bus_msNoSynth_1_r_buffer_enqw$whas) &&
	     core$cpu_dmem_master_rready ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_r_dropFlit =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit ;

  // rule RL_bus_msNoSynth_1_r_buffer_enqueue
  assign CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue =
	     bus_msNoSynth_1_r_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit ||
	      bus_msNoSynth_1_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue ;

  // rule RL_bus_msNoSynth_1_r_buffer_dequeue
  assign CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit &&
	     bus_msNoSynth_1_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue ;

  // rule RL_bus_1_ifcs_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp =
	     x_port1__read__h93895 != 9'd0 &&
	     bus_1_ifcs_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h93895 != 9'd1 || core$cpu_dmem_master_arvalid) ;
  assign WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp ;

  // rule __me_check_259
  assign CAN_FIRE___me_check_259 = 1'b1 ;
  assign WILL_FIRE___me_check_259 = 1'b1 ;

  // rule __me_check_260
  assign CAN_FIRE___me_check_260 = 1'b1 ;
  assign WILL_FIRE___me_check_260 = 1'b1 ;

  // rule __me_check_263
  assign CAN_FIRE___me_check_263 = 1'b1 ;
  assign WILL_FIRE___me_check_263 = 1'b1 ;

  // rule RL_bus_msNoSynth_1_ar_forwardReady
  assign CAN_FIRE_RL_bus_msNoSynth_1_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_bus_msNoSynth_1_ar_forwardReady = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ;
  assign MUX_bus_1_1_activeSource_0$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_activeSource_0$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_activeSource_0$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_activeSource_0$write_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     !bus_1_ifcs_3_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_1_burst_1 && bus_1_ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_1_burst_2 && bus_1_ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_1_burst_3 && bus_1_ifcs_3_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_0$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     bus_1_ifcs_3_routeBack$D_OUT[0] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_1_burst_1 && bus_1_ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_1_burst_2 && bus_1_ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_1_burst_3 && bus_1_ifcs_3_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_flitToSink_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     bus_1_ifcs_3_routeBack$D_OUT[1] ;
  assign MUX_bus_1_1_state$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_state$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_1_burst_1 && bus_1_ifcs_1_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_state$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_1_burst_2 && bus_1_ifcs_2_rspBack$D_OUT[0] ;
  assign MUX_bus_1_1_state$write_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_1_burst_3 && bus_1_ifcs_3_rspBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst && bus_ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_burst_1 && bus_ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_burst_2 && bus_ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_burst_3 && bus_ifcs_3_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N &&
	     bus_ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N &&
	     bus_ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N &&
	     bus_ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_ifcs_3_routeBack$EMPTY_N &&
	     bus_ifcs_3_routeBack$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst && bus_ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_bus_1_burst_1 && bus_ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_burst_2 && bus_ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_bus_1_burst_3 && bus_ifcs_3_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N &&
	     bus_ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N &&
	     bus_ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N &&
	     bus_ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_ifcs_3_routeBack$EMPTY_N &&
	     bus_ifcs_3_routeBack$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_bus_1_flitToSink_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_bus_1_flitToSink_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_bus_1_flitToSink_3$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_0_innerRoute$D_OUT[3] ;
  assign MUX_bus_1_flitToSink_3$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[3] ;
  assign MUX_bus_1_ifcs_0_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1 &&
	     !boot_rom_axi4_deburster_inShim_rff$D_OUT[0] ;
  assign MUX_bus_1_ifcs_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1 &&
	     !mem0_controller_axi4_deburster_inShim_rff$D_OUT[0] ;
  assign MUX_bus_1_ifcs_2_state$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_ifcs_2_followFlits && uart0$slave_rlast ;
  assign MUX_bus_1_ifcs_3_state$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_1_ifcs_3_followFlits &&
	     aws_host_access$slave_rlast ;
  assign MUX_bus_activeSource_0$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     !bus_ifcs_0_innerReq$D_OUT[0] ;
  assign MUX_bus_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_bus_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_bus_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_bus_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_bus_flitToSink_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_bus_flitToSink_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_bus_flitToSink_3$wset_1__SEL_1 =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[3] ;
  assign MUX_bus_flitToSink_3$wset_1__SEL_3 =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[3] ;
  assign MUX_bus_ifcs_0_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_bus_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_bus_ifcs_0_followFlits ;
  assign MUX_bus_ifcs_0_state$write_1__SEL_1 =
	     MUX_bus_ifcs_0_state$write_1__PSEL_1 &&
	     core$cpu_imem_master_wlast ;
  assign MUX_bus_ifcs_0_state$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	     !core$cpu_imem_master_wlast ;
  assign MUX_bus_ifcs_0_state$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp &&
	     !core$cpu_imem_master_wlast ;
  assign MUX_bus_ifcs_1_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_bus_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_bus_ifcs_1_followFlits ;
  assign MUX_bus_ifcs_1_state$write_1__SEL_1 =
	     MUX_bus_ifcs_1_state$write_1__PSEL_1 &&
	     core$cpu_dmem_master_wlast ;
  assign MUX_bus_ifcs_1_state$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	     !core$cpu_dmem_master_wlast ;
  assign MUX_bus_ifcs_1_state$write_1__SEL_3 =
	     WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp &&
	     !core$cpu_dmem_master_wlast ;
  assign MUX_bus_split_0_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_0_putOther &&
	     bus_split_0_doPut$wget[173] ;
  assign MUX_bus_split_0_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_0_putFirst &&
	     !bus_split_0_doPut$wget[173] ;
  assign MUX_bus_split_1_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_1_putOther &&
	     bus_split_1_doPut$wget[173] ;
  assign MUX_bus_split_1_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_1_putFirst &&
	     !bus_split_1_doPut$wget[173] ;
  assign MUX_bus_split_2_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_2_putOther &&
	     bus_split_2_doPut$wget[173] ;
  assign MUX_bus_split_2_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_2_putFirst &&
	     !bus_split_2_doPut$wget[173] ;
  assign MUX_bus_split_3_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_split_3_putOther &&
	     bus_split_3_doPut$wget[173] ;
  assign MUX_bus_split_3_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_split_3_putFirst &&
	     !bus_split_3_doPut$wget[173] ;
  assign MUX_bus_state$write_1__SEL_1 =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerReq$D_OUT[0] ;
  assign MUX_bus_state$write_1__SEL_2 =
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerReq$D_OUT[0] ;
  assign MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ;
  assign MUX_rg_state$write_1__SEL_1 =
	     uart0$RDY_server_reset_request_put &&
	     core$RDY_cpu_reset_server_request_put &&
	     rg_state == 2'd0 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     mem0_controller$RDY_ma_set_addr_map &&
	     boot_rom$RDY_set_addr_map &&
	     uart0$RDY_server_reset_response_get &&
	     core$RDY_cpu_reset_server_response_get &&
	     rg_state == 2'd1 ;
  assign MUX_bus_1_1_activeSource_0$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_1_1_arbitrate &&
	     IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3064 ;
  assign MUX_bus_1_1_activeSource_1$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_1_1_arbitrate &&
	     IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3072 ;
  assign MUX_bus_1_1_activeSource_2$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_1_1_arbitrate &&
	     IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3080 ;
  assign MUX_bus_1_1_activeSource_3$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_1_1_arbitrate &&
	     IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3088 ;
  assign MUX_bus_activeSource_0$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_arbitrate &&
	     IF_SEXT_bus_arbiter_lastSelect_951_952_BIT_0_9_ETC___d1975 ;
  assign MUX_bus_activeSource_1$write_1__VAL_1 =
	     WILL_FIRE_RL_bus_arbitrate &&
	     IF_SEXT_bus_arbiter_lastSelect_951_952_BIT_0_9_ETC___d1979 ;
  assign MUX_bus_merged_0_flitLeft$write_1__VAL_1 =
	     bus_merged_0_flitLeft - 8'd1 ;
  assign MUX_bus_merged_1_flitLeft$write_1__VAL_1 =
	     bus_merged_1_flitLeft - 8'd1 ;
  always@(MUX_bus_1_flitToSink_0$wset_1__SEL_1 or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_5 or
	  bus_ifcs_0_rspBack$D_OUT or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_2 or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_6 or
	  bus_ifcs_1_rspBack$D_OUT or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_3 or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_7 or
	  bus_ifcs_2_rspBack$D_OUT or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_4 or
	  MUX_bus_1_flitToSink_0$wset_1__SEL_8 or bus_ifcs_3_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_flitToSink_0$wset_1__SEL_1 ||
      MUX_bus_1_flitToSink_0$wset_1__SEL_5:
	  MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_0_rspBack$D_OUT;
      MUX_bus_1_flitToSink_0$wset_1__SEL_2 ||
      MUX_bus_1_flitToSink_0$wset_1__SEL_6:
	  MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_1_rspBack$D_OUT;
      MUX_bus_1_flitToSink_0$wset_1__SEL_3 ||
      MUX_bus_1_flitToSink_0$wset_1__SEL_7:
	  MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_2_rspBack$D_OUT;
      MUX_bus_1_flitToSink_0$wset_1__SEL_4 ||
      MUX_bus_1_flitToSink_0$wset_1__SEL_8:
	  MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_3_rspBack$D_OUT;
      default: MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_bus_1_1_flitToSink_0$wset_1__SEL_1 or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_5 or
	  bus_1_ifcs_0_rspBack$D_OUT or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_2 or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_6 or
	  bus_1_ifcs_1_rspBack$D_OUT or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_3 or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_7 or
	  bus_1_ifcs_2_rspBack$D_OUT or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_4 or
	  MUX_bus_1_1_flitToSink_0$wset_1__SEL_8 or
	  bus_1_ifcs_3_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_1 ||
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_5:
	  MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_0_rspBack$D_OUT;
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_2 ||
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_6:
	  MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_1_rspBack$D_OUT;
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_3 ||
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_7:
	  MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_2_rspBack$D_OUT;
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_4 ||
      MUX_bus_1_1_flitToSink_0$wset_1__SEL_8:
	  MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_3_rspBack$D_OUT;
      default: MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
		   73'h0AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_bus_1_flitToSink_1$wset_1__SEL_1 or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_5 or
	  bus_ifcs_0_rspBack$D_OUT or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_2 or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_6 or
	  bus_ifcs_1_rspBack$D_OUT or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_3 or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_7 or
	  bus_ifcs_2_rspBack$D_OUT or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_4 or
	  MUX_bus_1_flitToSink_1$wset_1__SEL_8 or bus_ifcs_3_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_flitToSink_1$wset_1__SEL_1 ||
      MUX_bus_1_flitToSink_1$wset_1__SEL_5:
	  MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_0_rspBack$D_OUT;
      MUX_bus_1_flitToSink_1$wset_1__SEL_2 ||
      MUX_bus_1_flitToSink_1$wset_1__SEL_6:
	  MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_1_rspBack$D_OUT;
      MUX_bus_1_flitToSink_1$wset_1__SEL_3 ||
      MUX_bus_1_flitToSink_1$wset_1__SEL_7:
	  MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_2_rspBack$D_OUT;
      MUX_bus_1_flitToSink_1$wset_1__SEL_4 ||
      MUX_bus_1_flitToSink_1$wset_1__SEL_8:
	  MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
	      bus_ifcs_3_rspBack$D_OUT;
      default: MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_bus_1_1_flitToSink_1$wset_1__SEL_1 or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_5 or
	  bus_1_ifcs_0_rspBack$D_OUT or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_2 or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_6 or
	  bus_1_ifcs_1_rspBack$D_OUT or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_3 or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_7 or
	  bus_1_ifcs_2_rspBack$D_OUT or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_4 or
	  MUX_bus_1_1_flitToSink_1$wset_1__SEL_8 or
	  bus_1_ifcs_3_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_1 ||
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_5:
	  MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_0_rspBack$D_OUT;
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_2 ||
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_6:
	  MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_1_rspBack$D_OUT;
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_3 ||
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_7:
	  MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_2_rspBack$D_OUT;
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_4 ||
      MUX_bus_1_1_flitToSink_1$wset_1__SEL_8:
	  MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      bus_1_ifcs_3_rspBack$D_OUT;
      default: MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
		   73'h0AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_bus_split_0_flitLeft$write_1__VAL_1 =
	     bus_split_0_flitLeft - 8'd1 ;
  assign MUX_bus_split_1_flitLeft$write_1__VAL_1 =
	     bus_split_1_flitLeft - 8'd1 ;
  assign MUX_bus_split_2_flitLeft$write_1__VAL_1 =
	     bus_split_2_flitLeft - 8'd1 ;
  assign MUX_bus_split_3_flitLeft$write_1__VAL_1 =
	     bus_split_3_flitLeft - 8'd1 ;
  assign MUX_bus_ssNoSynth_2_w_buffer_enqw$wset_1__VAL_2 =
	     bus_split_2_doPut$wget[72:0] ;
  assign MUX_bus_ssNoSynth_3_w_buffer_enqw$wset_1__VAL_2 =
	     bus_split_3_doPut$wget[72:0] ;

  // inlined wires
  assign ug_boot_rom_slave_u_aw_putWire$wget =
	     bus_ssNoSynth_0_aw_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_0_aw_buffer_ff$D_OUT :
	       bus_split_0_doPut$wget[172:73] ;
  assign ug_boot_rom_slave_u_aw_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_0_aw_forwardFlit &&
	     boot_rom_axi4_deburster_inShim_awff$FULL_N ;
  assign ug_boot_rom_slave_u_w_putWire$wget =
	     bus_ssNoSynth_0_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_0_w_buffer_ff$D_OUT :
	       bus_split_0_doPut$wget[72:0] ;
  assign ug_boot_rom_slave_u_w_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_0_w_forwardFlit &&
	     boot_rom_axi4_deburster_inShim_wff$FULL_N ;
  assign ug_boot_rom_slave_u_ar_putWire$wget =
	     bus_ssNoSynth_0_ar_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_0_ar_buffer_ff$D_OUT :
	       bus_ssNoSynth_0_ar_buffer_enqw$wget ;
  assign ug_boot_rom_slave_u_ar_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_0_ar_forwardFlit &&
	     boot_rom_axi4_deburster_inShim_arff$FULL_N ;
  assign mem_aw_buffer_enqw$wget =
	     { 8'd0, mem0_controller_axi4_deburster_outShim_awff$D_OUT } ;
  assign mem_ar_buffer_enqw$wget =
	     { 8'd0, mem0_controller_axi4_deburster_outShim_arff$D_OUT } ;
  assign ug_mem0_slave_u_aw_putWire$wget =
	     bus_ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_1_aw_buffer_ff$D_OUT :
	       bus_split_1_doPut$wget[172:73] ;
  assign ug_mem0_slave_u_aw_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_1_aw_forwardFlit &&
	     mem0_controller_axi4_deburster_inShim_awff$FULL_N ;
  assign ug_mem0_slave_u_w_putWire$wget =
	     bus_ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_1_w_buffer_ff$D_OUT :
	       bus_split_1_doPut$wget[72:0] ;
  assign ug_mem0_slave_u_w_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_1_w_forwardFlit &&
	     mem0_controller_axi4_deburster_inShim_wff$FULL_N ;
  assign ug_mem0_slave_u_ar_putWire$wget =
	     bus_ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_1_ar_buffer_ff$D_OUT :
	       bus_ssNoSynth_1_ar_buffer_enqw$wget ;
  assign ug_mem0_slave_u_ar_putWire$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_1_ar_forwardFlit &&
	     mem0_controller_axi4_deburster_inShim_arff$FULL_N ;
  assign uart0_slave_aw_buffer_enqw$wget =
	     bus_ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_2_aw_buffer_ff$D_OUT :
	       bus_split_2_doPut$wget[172:73] ;
  assign uart0_slave_aw_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_2_aw_forwardFlit &&
	     uart0_slave_aw_buffer_ff$FULL_N ;
  assign uart0_slave_w_buffer_enqw$wget =
	     { x_wdata__h36727,
	       x_wstrb__h36728,
	       bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ?
		 bus_ssNoSynth_2_w_buffer_ff$D_OUT[0] :
		 MUX_bus_ssNoSynth_2_w_buffer_enqw$wset_1__VAL_2[0],
	       1'd0 } ;
  assign uart0_slave_w_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_2_w_forwardFlit &&
	     uart0_slave_w_buffer_ff$FULL_N ;
  assign uart0_slave_b_dwReady$whas =
	     uart0$slave_bvalid && bus_ssNoSynth_2_b_dwReady$whas ;
  assign uart0_slave_ar_buffer_enqw$wget =
	     bus_ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_2_ar_buffer_ff$D_OUT :
	       bus_ssNoSynth_2_ar_buffer_enqw$wget ;
  assign uart0_slave_ar_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_2_ar_forwardFlit &&
	     uart0_slave_ar_buffer_ff$FULL_N ;
  assign uart0_slave_r_dwReady$whas =
	     uart0$slave_rvalid && bus_ssNoSynth_2_r_dwReady$whas ;
  assign aws_host_access_slave_aw_buffer_enqw$wget =
	     bus_ssNoSynth_3_aw_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_3_aw_buffer_ff$D_OUT :
	       bus_split_3_doPut$wget[172:73] ;
  assign aws_host_access_slave_aw_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_3_aw_forwardFlit &&
	     aws_host_access_slave_aw_buffer_ff$FULL_N ;
  assign aws_host_access_slave_w_buffer_enqw$wget =
	     { x_wdata__h38959,
	       x_wstrb__h38960,
	       bus_ssNoSynth_3_w_buffer_ff$EMPTY_N ?
		 bus_ssNoSynth_3_w_buffer_ff$D_OUT[0] :
		 MUX_bus_ssNoSynth_3_w_buffer_enqw$wset_1__VAL_2[0],
	       1'd0 } ;
  assign aws_host_access_slave_w_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_3_w_forwardFlit &&
	     aws_host_access_slave_w_buffer_ff$FULL_N ;
  assign aws_host_access_slave_b_dwReady$whas =
	     aws_host_access$slave_bvalid && bus_ssNoSynth_3_b_dwReady$whas ;
  assign aws_host_access_slave_ar_buffer_enqw$wget =
	     bus_ssNoSynth_3_ar_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_3_ar_buffer_ff$D_OUT :
	       bus_ssNoSynth_3_ar_buffer_enqw$wget ;
  assign aws_host_access_slave_ar_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ssNoSynth_3_ar_forwardFlit &&
	     aws_host_access_slave_ar_buffer_ff$FULL_N ;
  assign aws_host_access_slave_r_dwReady$whas =
	     aws_host_access$slave_rvalid && bus_ssNoSynth_3_r_dwReady$whas ;
  assign bus_msNoSynth_0_w_dwReady$whas =
	     WILL_FIRE_RL_bus_merged_0_genOther ||
	     WILL_FIRE_RL_bus_merged_0_genFirst ;
  assign bus_msNoSynth_0_b_buffer_enqw$wget =
	     WILL_FIRE_RL_bus_ifcs_0_drainNoRouteResponse ?
	       bus_ifcs_0_noRouteRsp$D_OUT :
	       MUX_bus_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 ;
  assign bus_msNoSynth_0_b_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ifcs_0_drainNoRouteResponse ||
	     WILL_FIRE_RL_bus_ifcs_0_forwardRsp ;
  assign bus_msNoSynth_0_ar_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp &&
	     x_port1__read__h90572 == 9'd1 ||
	     WILL_FIRE_RL_bus_1_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_0_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_0_firstFlit ;
  assign bus_msNoSynth_0_r_buffer_enqw$wget =
	     WILL_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse ?
	       bus_1_ifcs_0_noRouteRsp$D_OUT :
	       MUX_bus_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 ;
  assign bus_msNoSynth_0_r_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse ||
	     WILL_FIRE_RL_bus_1_ifcs_0_forwardRsp ;
  assign bus_msNoSynth_1_w_dwReady$whas =
	     WILL_FIRE_RL_bus_merged_1_genOther ||
	     WILL_FIRE_RL_bus_merged_1_genFirst ;
  assign bus_msNoSynth_1_b_buffer_enqw$wget =
	     WILL_FIRE_RL_bus_ifcs_1_drainNoRouteResponse ?
	       bus_ifcs_1_noRouteRsp$D_OUT :
	       MUX_bus_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 ;
  assign bus_msNoSynth_1_b_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_ifcs_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_bus_ifcs_1_forwardRsp ;
  assign bus_msNoSynth_1_ar_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp &&
	     x_port1__read__h93895 == 9'd1 ||
	     WILL_FIRE_RL_bus_1_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_1_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_1_firstFlit ;
  assign bus_msNoSynth_1_r_buffer_enqw$wget =
	     WILL_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse ?
	       bus_1_ifcs_1_noRouteRsp$D_OUT :
	       MUX_bus_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 ;
  assign bus_msNoSynth_1_r_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_bus_1_ifcs_1_forwardRsp ;
  assign bus_ssNoSynth_0_w_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_split_0_putOther &&
	     bus_split_0_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_0_putFirst &&
	     !bus_split_0_doPut$wget[173] ;
  assign bus_ssNoSynth_0_b_dwReady$whas =
	     WILL_FIRE_RL_bus_ifcs_0_followFlits_1 ||
	     WILL_FIRE_RL_bus_ifcs_0_firstFlit_1 ;
  assign bus_ssNoSynth_0_ar_buffer_enqw$wget =
	     (MUX_bus_1_flitToSink_0_1$wset_1__SEL_1 ||
	      MUX_bus_1_flitToSink_0_1$wset_1__SEL_3) ?
	       bus_1_ifcs_0_innerReq$D_OUT :
	       bus_1_ifcs_1_innerReq$D_OUT ;
  assign bus_ssNoSynth_0_r_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_0_followFlits_1 ||
	     WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1 ;
  assign bus_ssNoSynth_1_w_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_split_1_putOther &&
	     bus_split_1_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_1_putFirst &&
	     !bus_split_1_doPut$wget[173] ;
  assign bus_ssNoSynth_1_b_dwReady$whas =
	     WILL_FIRE_RL_bus_ifcs_1_followFlits_1 ||
	     WILL_FIRE_RL_bus_ifcs_1_firstFlit_1 ;
  assign bus_ssNoSynth_1_ar_buffer_enqw$wget =
	     (MUX_bus_1_flitToSink_1_1$wset_1__SEL_1 ||
	      MUX_bus_1_flitToSink_1_1$wset_1__SEL_3) ?
	       bus_1_ifcs_0_innerReq$D_OUT :
	       bus_1_ifcs_1_innerReq$D_OUT ;
  assign bus_ssNoSynth_1_r_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_1_followFlits_1 ||
	     WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1 ;
  assign bus_ssNoSynth_2_w_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_split_2_putOther &&
	     bus_split_2_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_2_putFirst &&
	     !bus_split_2_doPut$wget[173] ;
  assign bus_ssNoSynth_2_b_dwReady$whas =
	     WILL_FIRE_RL_bus_ifcs_2_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_2_firstFlit ;
  assign bus_ssNoSynth_2_ar_buffer_enqw$wget =
	     (MUX_bus_1_flitToSink_2$wset_1__SEL_1 ||
	      MUX_bus_1_flitToSink_2$wset_1__SEL_3) ?
	       bus_1_ifcs_0_innerReq$D_OUT :
	       bus_1_ifcs_1_innerReq$D_OUT ;
  assign bus_ssNoSynth_2_r_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_2_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_2_firstFlit ;
  assign bus_ssNoSynth_3_w_buffer_enqw$whas =
	     WILL_FIRE_RL_bus_split_3_putOther &&
	     bus_split_3_doPut$wget[173] ||
	     WILL_FIRE_RL_bus_split_3_putFirst &&
	     !bus_split_3_doPut$wget[173] ;
  assign bus_ssNoSynth_3_b_dwReady$whas =
	     WILL_FIRE_RL_bus_ifcs_3_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_3_firstFlit ;
  assign bus_ssNoSynth_3_ar_buffer_enqw$wget =
	     (MUX_bus_1_flitToSink_3$wset_1__SEL_1 ||
	      MUX_bus_1_flitToSink_3$wset_1__SEL_3) ?
	       bus_1_ifcs_0_innerReq$D_OUT :
	       bus_1_ifcs_1_innerReq$D_OUT ;
  assign bus_ssNoSynth_3_r_dwReady$whas =
	     WILL_FIRE_RL_bus_1_ifcs_3_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_3_firstFlit ;
  assign bus_split_0_doPut$wget =
	     (MUX_bus_flitToSink_0$wset_1__SEL_1 ||
	      MUX_bus_flitToSink_0$wset_1__SEL_3) ?
	       bus_ifcs_0_innerReq$D_OUT :
	       bus_ifcs_1_innerReq$D_OUT ;
  assign bus_split_1_doPut$wget =
	     (MUX_bus_flitToSink_1$wset_1__SEL_1 ||
	      MUX_bus_flitToSink_1$wset_1__SEL_3) ?
	       bus_ifcs_0_innerReq$D_OUT :
	       bus_ifcs_1_innerReq$D_OUT ;
  assign bus_split_2_doPut$wget =
	     (MUX_bus_flitToSink_2$wset_1__SEL_1 ||
	      MUX_bus_flitToSink_2$wset_1__SEL_3) ?
	       bus_ifcs_0_innerReq$D_OUT :
	       bus_ifcs_1_innerReq$D_OUT ;
  assign bus_split_3_doPut$wget =
	     (MUX_bus_flitToSink_3$wset_1__SEL_1 ||
	      MUX_bus_flitToSink_3$wset_1__SEL_3) ?
	       bus_ifcs_0_innerReq$D_OUT :
	       bus_ifcs_1_innerReq$D_OUT ;
  assign bus_reqWires_0$wget =
	     (!bus_ifcs_0_innerRoute$D_OUT[0] ||
	      !IF_bus_split_0_flitLeft_449_EQ_0_450_THEN_bus__ETC___d1879) ?
	       IF_NOT_bus_ifcs_0_innerRoute_first__888_BIT_1__ETC___d1919 :
	       bus_ifcs_0_innerRoute$D_OUT[0] ;
  assign bus_reqWires_1$wget =
	     (!bus_ifcs_1_innerRoute$D_OUT[0] ||
	      !IF_bus_split_0_flitLeft_449_EQ_0_450_THEN_bus__ETC___d1879) ?
	       IF_NOT_bus_ifcs_1_innerRoute_first__926_BIT_1__ETC___d1939 :
	       bus_ifcs_1_innerRoute$D_OUT[0] ;
  assign bus_flitToSink_0$whas =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_ifcs_1_innerRoute$D_OUT[0] ;
  assign bus_flitToSink_1$whas =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_ifcs_1_innerRoute$D_OUT[1] ;
  assign bus_flitToSink_2$whas =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_ifcs_1_innerRoute$D_OUT[2] ;
  assign bus_flitToSink_3$whas =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_ifcs_1_innerRoute$D_OUT[3] ;
  assign bus_1_reqWires_0$wget =
	     (!bus_ifcs_0_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
	       bus_ifcs_0_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
	       bus_ifcs_0_routeBack$D_OUT[0] ;
  assign bus_1_reqWires_1$wget =
	     (!bus_ifcs_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
	       bus_ifcs_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
	       bus_ifcs_1_routeBack$D_OUT[0] ;
  assign bus_1_reqWires_2$wget =
	     (!bus_ifcs_2_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
	       bus_ifcs_2_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
	       bus_ifcs_2_routeBack$D_OUT[0] ;
  assign bus_1_reqWires_3$wget =
	     (!bus_ifcs_3_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
	       bus_ifcs_3_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
	       bus_ifcs_3_routeBack$D_OUT[0] ;
  assign bus_1_flitToSink_0$whas =
	     WILL_FIRE_RL_bus_1_burst && bus_ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_burst_1 && bus_ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_burst_2 && bus_ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_burst_3 && bus_ifcs_3_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N &&
	     bus_ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N &&
	     bus_ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N &&
	     bus_ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_ifcs_3_routeBack$EMPTY_N &&
	     bus_ifcs_3_routeBack$D_OUT[0] ;
  assign bus_1_flitToSink_1$whas =
	     WILL_FIRE_RL_bus_1_burst && bus_ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_burst_1 && bus_ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_burst_2 && bus_ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_burst_3 && bus_ifcs_3_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N &&
	     bus_ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N &&
	     bus_ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N &&
	     bus_ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_ifcs_3_routeBack$EMPTY_N &&
	     bus_ifcs_3_routeBack$D_OUT[1] ;
  assign bus_1_reqWires_0_1$wget =
	     (!bus_1_ifcs_0_innerRoute$D_OUT[0] ||
	      !bus_ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_bus_1_ifcs_0_innerRoute_first__720_BIT__ETC___d2751 :
	       bus_1_ifcs_0_innerRoute$D_OUT[0] ;
  assign bus_1_reqWires_1_1$wget =
	     (!bus_1_ifcs_1_innerRoute$D_OUT[0] ||
	      !bus_ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_bus_1_ifcs_1_innerRoute_first__758_BIT__ETC___d2771 :
	       bus_1_ifcs_1_innerRoute$D_OUT[0] ;
  assign bus_1_flitToSink_0_1$whas =
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_burst_5 && bus_1_ifcs_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_source_selected_5 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_ifcs_1_innerRoute$D_OUT[0] ;
  assign bus_1_flitToSink_1_1$whas =
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_burst_5 && bus_1_ifcs_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_source_selected_5 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_ifcs_1_innerRoute$D_OUT[1] ;
  assign bus_1_flitToSink_2$whas =
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_1_burst_5 && bus_1_ifcs_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_bus_1_source_selected_5 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_ifcs_1_innerRoute$D_OUT[2] ;
  assign bus_1_flitToSink_3$whas =
	     WILL_FIRE_RL_bus_1_burst_4 && bus_1_ifcs_0_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_bus_1_burst_5 && bus_1_ifcs_1_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     bus_1_ifcs_0_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_bus_1_source_selected_5 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     bus_1_ifcs_1_innerRoute$D_OUT[3] ;
  assign bus_1_1_reqWires_0$wget =
	     (!bus_1_ifcs_0_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
	       bus_1_ifcs_0_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
	       bus_1_ifcs_0_routeBack$D_OUT[0] ;
  assign bus_1_1_reqWires_1$wget =
	     (!bus_1_ifcs_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
	       bus_1_ifcs_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
	       bus_1_ifcs_1_routeBack$D_OUT[0] ;
  assign bus_1_1_reqWires_2$wget =
	     (!bus_1_ifcs_2_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
	       bus_1_ifcs_2_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
	       bus_1_ifcs_2_routeBack$D_OUT[0] ;
  assign bus_1_1_reqWires_3$wget =
	     (!bus_1_ifcs_3_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
	       bus_1_ifcs_3_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
	       bus_1_ifcs_3_routeBack$D_OUT[0] ;
  assign bus_1_1_flitToSink_0$whas =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_burst_1 &&
	     bus_1_ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_burst_2 &&
	     bus_1_ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_burst_3 &&
	     bus_1_ifcs_3_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     bus_1_ifcs_3_routeBack$D_OUT[0] ;
  assign bus_1_1_flitToSink_1$whas =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_burst_1 &&
	     bus_1_ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_burst_2 &&
	     bus_1_ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_burst_3 &&
	     bus_1_ifcs_3_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     bus_1_ifcs_3_routeBack$D_OUT[1] ;
  assign ug_boot_rom_slave_u_b_dropWire$whas =
	     boot_rom_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ssNoSynth_0_b_dwReady$whas ;
  assign ug_boot_rom_slave_u_r_dropWire$whas =
	     boot_rom_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_ssNoSynth_0_r_dwReady$whas ;
  assign ug_mem0_slave_u_b_dropWire$whas =
	     mem0_controller_axi4_deburster_inShim_bff$EMPTY_N &&
	     bus_ssNoSynth_1_b_dwReady$whas ;
  assign ug_mem0_slave_u_r_dropWire$whas =
	     mem0_controller_axi4_deburster_inShim_rff$EMPTY_N &&
	     bus_ssNoSynth_1_r_dwReady$whas ;
  assign bus_merged_0_doDrop$whas =
	     WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp ||
	     WILL_FIRE_RL_bus_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_bus_ifcs_0_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_0_firstFlit ;
  assign bus_merged_1_doDrop$whas =
	     WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp ||
	     WILL_FIRE_RL_bus_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_bus_ifcs_1_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_1_firstFlit ;
  assign bus_1_sourceSelect_0$whas =
	     WILL_FIRE_RL_bus_1_arbitrate &&
	     IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2242 ;
  assign bus_1_sourceSelect_1$whas =
	     WILL_FIRE_RL_bus_1_arbitrate &&
	     IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2250 ;
  assign bus_1_sourceSelect_2$whas =
	     WILL_FIRE_RL_bus_1_arbitrate &&
	     IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2258 ;
  assign bus_1_sourceSelect_3$whas =
	     WILL_FIRE_RL_bus_1_arbitrate &&
	     IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2266 ;
  assign bus_1_sourceSelect_0_1$whas =
	     WILL_FIRE_RL_bus_1_arbitrate_1 &&
	     IF_SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_ETC___d2807 ;
  assign bus_1_sourceSelect_1_1$whas =
	     WILL_FIRE_RL_bus_1_arbitrate_1 &&
	     IF_SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_ETC___d2811 ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_awff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ?
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_wff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ?
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp &&
	     boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d96 ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_outShim_bff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write ?
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ?
	       10'd170 :
	       boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, boot_rom_axi4_deburster_inShim_arff$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ?
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_read_req &&
	     boot_rom_axi4_deburster_readsSent_port0__read__ETC___d129 ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       boot_rom_axi4_deburster_outShim_rff$D_OUT[73:1],
	       boot_rom_axi4_deburster_lastReadRspFF$D_OUT } ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ?
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read ;
  assign boot_rom_axi4_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;
  assign boot_rom_axi4_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ?
	       2'd1 :
	       2'd2 ;
  assign boot_rom_axi4_deburster_inSerial_state$port1__read =
	     boot_rom_axi4_deburster_inSerial_state$EN_port0__write ?
	       boot_rom_axi4_deburster_inSerial_state$port0__write_1 :
	       boot_rom_axi4_deburster_inSerial_state ;
  assign boot_rom_axi4_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW &&
	     boot_rom_axi4_deburster_inShim_wff$D_OUT[0] ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;
  assign boot_rom_axi4_deburster_inSerial_state$port1__write_1 =
	     (MUX_boot_rom_axi4_deburster_inSerial_state$port1__write_1__SEL_1 ||
	      WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign boot_rom_axi4_deburster_inSerial_state$port2__read =
	     boot_rom_axi4_deburster_inSerial_state$EN_port1__write ?
	       boot_rom_axi4_deburster_inSerial_state$port1__write_1 :
	       boot_rom_axi4_deburster_inSerial_state$port1__read ;
  assign boot_rom_axi4_deburster_writesSent$port0__write_1 =
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ?
	       8'd0 :
	       x1__h7001 ;
  assign boot_rom_axi4_deburster_writesSent$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ?
	       boot_rom_axi4_deburster_writesSent$port0__write_1 :
	       boot_rom_axi4_deburster_writesSent ;
  assign boot_rom_axi4_deburster_writesSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       boot_rom_axi4_deburster_writesSent$port1__read ;
  assign boot_rom_axi4_deburster_readsSent$port0__write_1 =
	     boot_rom_axi4_deburster_readsSent_port0__read__ETC___d129 ?
	       8'd0 :
	       x1__h7727 ;
  assign boot_rom_axi4_deburster_readsSent$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ?
	       boot_rom_axi4_deburster_readsSent$port0__write_1 :
	       boot_rom_axi4_deburster_readsSent ;
  assign boot_rom_axi4_deburster_readsSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       boot_rom_axi4_deburster_readsSent$port1__read ;
  assign boot_rom_axi4_deburster_flitReceived$port0__write_1 =
	     boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d96 ?
	       8'd0 :
	       x1__h7142 ;
  assign boot_rom_axi4_deburster_flitReceived$port1__read =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp ?
	       boot_rom_axi4_deburster_flitReceived$port0__write_1 :
	       boot_rom_axi4_deburster_flitReceived ;
  assign boot_rom_axi4_deburster_flitReceived$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       boot_rom_axi4_deburster_flitReceived$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_awff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ?
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_wff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ?
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp &&
	     mem0_controller_axi4_deburster_countWriteRspFF_ETC___d234 ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_outShim_bff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN_port0__write ?
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ?
	       10'd170 :
	       mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, mem0_controller_axi4_deburster_inShim_arff$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ?
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req &&
	     mem0_controller_axi4_deburster_readsSent_port0_ETC___d267 ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       mem0_controller_axi4_deburster_outShim_rff$D_OUT[73:1],
	       mem0_controller_axi4_deburster_lastReadRspFF$D_OUT } ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ?
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;
  assign mem0_controller_axi4_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ?
	       2'd1 :
	       2'd2 ;
  assign mem0_controller_axi4_deburster_inSerial_state$port1__read =
	     mem0_controller_axi4_deburster_inSerial_state$EN_port0__write ?
	       mem0_controller_axi4_deburster_inSerial_state$port0__write_1 :
	       mem0_controller_axi4_deburster_inSerial_state ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW &&
	     mem0_controller_axi4_deburster_inShim_wff$D_OUT[0] ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[0] ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;
  assign mem0_controller_axi4_deburster_inSerial_state$port1__write_1 =
	     (MUX_mem0_controller_axi4_deburster_inSerial_state$port1__write_1__SEL_1 ||
	      WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign mem0_controller_axi4_deburster_inSerial_state$port2__read =
	     mem0_controller_axi4_deburster_inSerial_state$EN_port1__write ?
	       mem0_controller_axi4_deburster_inSerial_state$port1__write_1 :
	       mem0_controller_axi4_deburster_inSerial_state$port1__read ;
  assign mem0_controller_axi4_deburster_writesSent$port0__write_1 =
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ?
	       8'd0 :
	       x1__h14109 ;
  assign mem0_controller_axi4_deburster_writesSent$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ?
	       mem0_controller_axi4_deburster_writesSent$port0__write_1 :
	       mem0_controller_axi4_deburster_writesSent ;
  assign mem0_controller_axi4_deburster_writesSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       mem0_controller_axi4_deburster_writesSent$port1__read ;
  assign mem0_controller_axi4_deburster_readsSent$port0__write_1 =
	     mem0_controller_axi4_deburster_readsSent_port0_ETC___d267 ?
	       8'd0 :
	       x1__h14835 ;
  assign mem0_controller_axi4_deburster_readsSent$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ?
	       mem0_controller_axi4_deburster_readsSent$port0__write_1 :
	       mem0_controller_axi4_deburster_readsSent ;
  assign mem0_controller_axi4_deburster_readsSent$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       mem0_controller_axi4_deburster_readsSent$port1__read ;
  assign mem0_controller_axi4_deburster_flitReceived$port0__write_1 =
	     mem0_controller_axi4_deburster_countWriteRspFF_ETC___d234 ?
	       8'd0 :
	       x1__h14250 ;
  assign mem0_controller_axi4_deburster_flitReceived$port1__read =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp ?
	       mem0_controller_axi4_deburster_flitReceived$port0__write_1 :
	       mem0_controller_axi4_deburster_flitReceived ;
  assign mem0_controller_axi4_deburster_flitReceived$port2__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       8'd0 :
	       mem0_controller_axi4_deburster_flitReceived$port1__read ;
  assign bus_ifcs_0_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit &&
	     bus_merged_0_flitLeft == 8'd0 ;
  assign bus_ifcs_0_noRoute_inner_currentReq$port0__write_1 =
	     { core$cpu_imem_master_awid,
	       core$cpu_imem_master_awaddr,
	       core$cpu_imem_master_awlen,
	       core$cpu_imem_master_awsize,
	       core$cpu_imem_master_awburst,
	       core$cpu_imem_master_awlock,
	       core$cpu_imem_master_awcache,
	       core$cpu_imem_master_awprot,
	       core$cpu_imem_master_awqos,
	       core$cpu_imem_master_awregion } ;
  assign bus_ifcs_0_noRoute_inner_currentReq$port1__read =
	     bus_ifcs_0_noRoute_inner_currentReq$EN_port0__write ?
	       bus_ifcs_0_noRoute_inner_currentReq$port0__write_1 :
	       bus_ifcs_0_noRoute_inner_currentReq ;
  assign bus_ifcs_0_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit &&
	     bus_merged_0_flitLeft == 8'd0 ;
  assign bus_ifcs_0_noRoute_inner_pendingReq$port1__read =
	     bus_ifcs_0_noRoute_inner_pendingReq$EN_port0__write ||
	     bus_ifcs_0_noRoute_inner_pendingReq ;
  assign bus_ifcs_0_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp &&
	     bus_ifcs_0_noRoute_inner_pendingReq$port1__read ;
  assign bus_ifcs_1_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit &&
	     bus_merged_1_flitLeft == 8'd0 ;
  assign bus_ifcs_1_noRoute_inner_currentReq$port0__write_1 =
	     { core$cpu_dmem_master_awid,
	       core$cpu_dmem_master_awaddr,
	       core$cpu_dmem_master_awlen,
	       core$cpu_dmem_master_awsize,
	       core$cpu_dmem_master_awburst,
	       core$cpu_dmem_master_awlock,
	       core$cpu_dmem_master_awcache,
	       core$cpu_dmem_master_awprot,
	       core$cpu_dmem_master_awqos,
	       core$cpu_dmem_master_awregion } ;
  assign bus_ifcs_1_noRoute_inner_currentReq$port1__read =
	     bus_ifcs_1_noRoute_inner_currentReq$EN_port0__write ?
	       bus_ifcs_1_noRoute_inner_currentReq$port0__write_1 :
	       bus_ifcs_1_noRoute_inner_currentReq ;
  assign bus_ifcs_1_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit &&
	     bus_merged_1_flitLeft == 8'd0 ;
  assign bus_ifcs_1_noRoute_inner_pendingReq$port1__read =
	     bus_ifcs_1_noRoute_inner_pendingReq$EN_port0__write ||
	     bus_ifcs_1_noRoute_inner_pendingReq ;
  assign bus_ifcs_1_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp &&
	     bus_ifcs_1_noRoute_inner_pendingReq$port1__read ;
  assign bus_1_ifcs_0_noRoute_currentReq$port0__write_1 =
	     { core$cpu_imem_master_arid,
	       core$cpu_imem_master_araddr,
	       core$cpu_imem_master_arlen,
	       core$cpu_imem_master_arsize,
	       core$cpu_imem_master_arburst,
	       core$cpu_imem_master_arlock,
	       core$cpu_imem_master_arcache,
	       core$cpu_imem_master_arprot,
	       core$cpu_imem_master_arqos,
	       core$cpu_imem_master_arregion } ;
  assign bus_1_ifcs_0_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit ?
	       bus_1_ifcs_0_noRoute_currentReq$port0__write_1 :
	       bus_1_ifcs_0_noRoute_currentReq ;
  assign bus_1_ifcs_0_noRoute_flitCount$port0__write_1 =
	     { 1'd0, core$cpu_imem_master_arlen } + 9'd1 ;
  assign bus_1_ifcs_0_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h90572 - 9'd1 ;
  assign bus_1_ifcs_0_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp ?
	       bus_1_ifcs_0_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h90572 ;
  assign bus_1_ifcs_1_noRoute_currentReq$port0__write_1 =
	     { core$cpu_dmem_master_arid,
	       core$cpu_dmem_master_araddr,
	       core$cpu_dmem_master_arlen,
	       core$cpu_dmem_master_arsize,
	       core$cpu_dmem_master_arburst,
	       core$cpu_dmem_master_arlock,
	       core$cpu_dmem_master_arcache,
	       core$cpu_dmem_master_arprot,
	       core$cpu_dmem_master_arqos,
	       core$cpu_dmem_master_arregion } ;
  assign bus_1_ifcs_1_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit ?
	       bus_1_ifcs_1_noRoute_currentReq$port0__write_1 :
	       bus_1_ifcs_1_noRoute_currentReq ;
  assign bus_1_ifcs_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, core$cpu_dmem_master_arlen } + 9'd1 ;
  assign bus_1_ifcs_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h93895 - 9'd1 ;
  assign bus_1_ifcs_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp ?
	       bus_1_ifcs_1_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h93895 ;

  // register boot_rom_axi4_deburster_flitReceived
  assign boot_rom_axi4_deburster_flitReceived$D_IN =
	     boot_rom_axi4_deburster_flitReceived$port2__read ;
  assign boot_rom_axi4_deburster_flitReceived$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_lastWasRead
  assign boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;
  assign boot_rom_axi4_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;

  // register boot_rom_axi4_deburster_inSerial_shim_arff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_awff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_bff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_rff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_shim_wff_rv
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_inSerial_state
  assign boot_rom_axi4_deburster_inSerial_state$D_IN =
	     boot_rom_axi4_deburster_inSerial_state$port2__read ;
  assign boot_rom_axi4_deburster_inSerial_state$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_readsSent
  assign boot_rom_axi4_deburster_readsSent$D_IN =
	     boot_rom_axi4_deburster_readsSent$port2__read ;
  assign boot_rom_axi4_deburster_readsSent$EN = 1'b1 ;

  // register boot_rom_axi4_deburster_writesSent
  assign boot_rom_axi4_deburster_writesSent$D_IN =
	     boot_rom_axi4_deburster_writesSent$port2__read ;
  assign boot_rom_axi4_deburster_writesSent$EN = 1'b1 ;

  // register bus_1_1_activeSource_0
  always@(MUX_bus_1_1_activeSource_0$write_1__SEL_1 or
	  MUX_bus_1_1_activeSource_0$write_1__VAL_1 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_2 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_3 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_activeSource_0$write_1__SEL_1:
	  bus_1_1_activeSource_0$D_IN =
	      MUX_bus_1_1_activeSource_0$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_2:
	  bus_1_1_activeSource_0$D_IN =
	      MUX_bus_1_1_activeSource_0$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_3:
	  bus_1_1_activeSource_0$D_IN =
	      MUX_bus_1_1_activeSource_0$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_4:
	  bus_1_1_activeSource_0$D_IN =
	      MUX_bus_1_1_activeSource_0$write_1__VAL_1;
      default: bus_1_1_activeSource_0$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign bus_1_1_activeSource_0$EN =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     !bus_1_ifcs_3_rspBack$D_OUT[0] ;

  // register bus_1_1_activeSource_1
  always@(MUX_bus_1_1_activeSource_0$write_1__SEL_1 or
	  MUX_bus_1_1_activeSource_1$write_1__VAL_1 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_2 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_3 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_activeSource_0$write_1__SEL_1:
	  bus_1_1_activeSource_1$D_IN =
	      MUX_bus_1_1_activeSource_1$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_2:
	  bus_1_1_activeSource_1$D_IN =
	      MUX_bus_1_1_activeSource_1$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_3:
	  bus_1_1_activeSource_1$D_IN =
	      MUX_bus_1_1_activeSource_1$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_4:
	  bus_1_1_activeSource_1$D_IN =
	      MUX_bus_1_1_activeSource_1$write_1__VAL_1;
      default: bus_1_1_activeSource_1$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign bus_1_1_activeSource_1$EN =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     !bus_1_ifcs_3_rspBack$D_OUT[0] ;

  // register bus_1_1_activeSource_2
  always@(MUX_bus_1_1_activeSource_0$write_1__SEL_1 or
	  MUX_bus_1_1_activeSource_2$write_1__VAL_1 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_2 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_3 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_activeSource_0$write_1__SEL_1:
	  bus_1_1_activeSource_2$D_IN =
	      MUX_bus_1_1_activeSource_2$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_2:
	  bus_1_1_activeSource_2$D_IN =
	      MUX_bus_1_1_activeSource_2$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_3:
	  bus_1_1_activeSource_2$D_IN =
	      MUX_bus_1_1_activeSource_2$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_4:
	  bus_1_1_activeSource_2$D_IN =
	      MUX_bus_1_1_activeSource_2$write_1__VAL_1;
      default: bus_1_1_activeSource_2$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign bus_1_1_activeSource_2$EN =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     !bus_1_ifcs_3_rspBack$D_OUT[0] ;

  // register bus_1_1_activeSource_3
  always@(MUX_bus_1_1_activeSource_0$write_1__SEL_1 or
	  MUX_bus_1_1_activeSource_3$write_1__VAL_1 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_2 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_3 or
	  MUX_bus_1_1_activeSource_0$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_1_1_activeSource_0$write_1__SEL_1:
	  bus_1_1_activeSource_3$D_IN =
	      MUX_bus_1_1_activeSource_3$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_2:
	  bus_1_1_activeSource_3$D_IN =
	      MUX_bus_1_1_activeSource_3$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_3:
	  bus_1_1_activeSource_3$D_IN =
	      MUX_bus_1_1_activeSource_3$write_1__VAL_1;
      MUX_bus_1_1_activeSource_0$write_1__SEL_4:
	  bus_1_1_activeSource_3$D_IN =
	      MUX_bus_1_1_activeSource_3$write_1__VAL_1;
      default: bus_1_1_activeSource_3$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign bus_1_1_activeSource_3$EN =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     !bus_1_ifcs_3_rspBack$D_OUT[0] ;

  // register bus_1_1_arbiter_firstHot
  assign bus_1_1_arbiter_firstHot$D_IN =
	     IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3088 ;
  assign bus_1_1_arbiter_firstHot$EN = CAN_FIRE_RL_bus_1_1_arbitrate ;

  // register bus_1_1_arbiter_lastSelect
  assign bus_1_1_arbiter_lastSelect$D_IN =
	     IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3064 ;
  assign bus_1_1_arbiter_lastSelect$EN = CAN_FIRE_RL_bus_1_1_arbitrate ;

  // register bus_1_1_arbiter_lastSelect_1
  assign bus_1_1_arbiter_lastSelect_1$D_IN =
	     IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3072 ;
  assign bus_1_1_arbiter_lastSelect_1$EN = CAN_FIRE_RL_bus_1_1_arbitrate ;

  // register bus_1_1_arbiter_lastSelect_2
  assign bus_1_1_arbiter_lastSelect_2$D_IN =
	     IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3080 ;
  assign bus_1_1_arbiter_lastSelect_2$EN = CAN_FIRE_RL_bus_1_1_arbitrate ;

  // register bus_1_1_state
  assign bus_1_1_state$D_IN =
	     !MUX_bus_1_1_state$write_1__SEL_1 &&
	     !MUX_bus_1_1_state$write_1__SEL_2 &&
	     !MUX_bus_1_1_state$write_1__SEL_3 &&
	     !MUX_bus_1_1_state$write_1__SEL_4 ;
  assign bus_1_1_state$EN =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_burst_1 && bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_burst_2 && bus_1_ifcs_2_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_burst_3 && bus_1_ifcs_3_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     !bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     !bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     !bus_1_ifcs_2_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     !bus_1_ifcs_3_rspBack$D_OUT[0] ;

  // register bus_1_activeSource_0
  assign bus_1_activeSource_0$D_IN = 1'b0 ;
  assign bus_1_activeSource_0$EN = 1'b0 ;

  // register bus_1_activeSource_0_1
  assign bus_1_activeSource_0_1$D_IN = 1'b0 ;
  assign bus_1_activeSource_0_1$EN = 1'b0 ;

  // register bus_1_activeSource_1
  assign bus_1_activeSource_1$D_IN = 1'b0 ;
  assign bus_1_activeSource_1$EN = 1'b0 ;

  // register bus_1_activeSource_1_1
  assign bus_1_activeSource_1_1$D_IN = 1'b0 ;
  assign bus_1_activeSource_1_1$EN = 1'b0 ;

  // register bus_1_activeSource_2
  assign bus_1_activeSource_2$D_IN = 1'b0 ;
  assign bus_1_activeSource_2$EN = 1'b0 ;

  // register bus_1_activeSource_3
  assign bus_1_activeSource_3$D_IN = 1'b0 ;
  assign bus_1_activeSource_3$EN = 1'b0 ;

  // register bus_1_arbiter_firstHot
  assign bus_1_arbiter_firstHot$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2266 ;
  assign bus_1_arbiter_firstHot$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_firstHot_1
  assign bus_1_arbiter_firstHot_1$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_ETC___d2811 ;
  assign bus_1_arbiter_firstHot_1$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_arbiter_lastSelect
  assign bus_1_arbiter_lastSelect$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2242 ;
  assign bus_1_arbiter_lastSelect$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_lastSelect_1
  assign bus_1_arbiter_lastSelect_1$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2250 ;
  assign bus_1_arbiter_lastSelect_1$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_lastSelect_2
  assign bus_1_arbiter_lastSelect_2$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2258 ;
  assign bus_1_arbiter_lastSelect_2$EN = CAN_FIRE_RL_bus_1_arbitrate ;

  // register bus_1_arbiter_lastSelect_3
  assign bus_1_arbiter_lastSelect_3$D_IN =
	     IF_SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_ETC___d2807 ;
  assign bus_1_arbiter_lastSelect_3$EN = CAN_FIRE_RL_bus_1_arbitrate_1 ;

  // register bus_1_ifcs_0_noRoute_currentReq
  assign bus_1_ifcs_0_noRoute_currentReq$D_IN =
	     bus_1_ifcs_0_noRoute_currentReq$port1__read ;
  assign bus_1_ifcs_0_noRoute_currentReq$EN = 1'b1 ;

  // register bus_1_ifcs_0_noRoute_flitCount
  assign bus_1_ifcs_0_noRoute_flitCount$D_IN =
	     bus_1_ifcs_0_noRoute_flitCount$port2__read ;
  assign bus_1_ifcs_0_noRoute_flitCount$EN = 1'b1 ;

  // register bus_1_ifcs_0_state
  assign bus_1_ifcs_0_state$D_IN = 2'd0 ;
  assign bus_1_ifcs_0_state$EN =
	     WILL_FIRE_RL_bus_1_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_0_followFlits ;

  // register bus_1_ifcs_0_state_1
  assign bus_1_ifcs_0_state_1$D_IN = MUX_bus_1_ifcs_0_state_1$write_1__SEL_1 ;
  assign bus_1_ifcs_0_state_1$EN =
	     WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1 &&
	     !boot_rom_axi4_deburster_inShim_rff$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_ifcs_0_followFlits_1 &&
	     boot_rom_axi4_deburster_inShim_rff$D_OUT[0] ;

  // register bus_1_ifcs_1_noRoute_currentReq
  assign bus_1_ifcs_1_noRoute_currentReq$D_IN =
	     bus_1_ifcs_1_noRoute_currentReq$port1__read ;
  assign bus_1_ifcs_1_noRoute_currentReq$EN = 1'b1 ;

  // register bus_1_ifcs_1_noRoute_flitCount
  assign bus_1_ifcs_1_noRoute_flitCount$D_IN =
	     bus_1_ifcs_1_noRoute_flitCount$port2__read ;
  assign bus_1_ifcs_1_noRoute_flitCount$EN = 1'b1 ;

  // register bus_1_ifcs_1_state
  assign bus_1_ifcs_1_state$D_IN = 2'd0 ;
  assign bus_1_ifcs_1_state$EN =
	     WILL_FIRE_RL_bus_1_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_1_followFlits ;

  // register bus_1_ifcs_1_state_1
  assign bus_1_ifcs_1_state_1$D_IN = MUX_bus_1_ifcs_1_state_1$write_1__SEL_1 ;
  assign bus_1_ifcs_1_state_1$EN =
	     WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1 &&
	     !mem0_controller_axi4_deburster_inShim_rff$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_ifcs_1_followFlits_1 &&
	     mem0_controller_axi4_deburster_inShim_rff$D_OUT[0] ;

  // register bus_1_ifcs_2_state
  assign bus_1_ifcs_2_state$D_IN = !MUX_bus_1_ifcs_2_state$write_1__SEL_1 ;
  assign bus_1_ifcs_2_state$EN =
	     WILL_FIRE_RL_bus_1_ifcs_2_followFlits && uart0$slave_rlast ||
	     WILL_FIRE_RL_bus_1_ifcs_2_firstFlit && !uart0$slave_rlast ;

  // register bus_1_ifcs_3_state
  assign bus_1_ifcs_3_state$D_IN = !MUX_bus_1_ifcs_3_state$write_1__SEL_1 ;
  assign bus_1_ifcs_3_state$EN =
	     WILL_FIRE_RL_bus_1_ifcs_3_followFlits &&
	     aws_host_access$slave_rlast ||
	     WILL_FIRE_RL_bus_1_ifcs_3_firstFlit &&
	     !aws_host_access$slave_rlast ;

  // register bus_1_state
  assign bus_1_state$D_IN = 1'd0 ;
  assign bus_1_state$EN =
	     WILL_FIRE_RL_bus_1_burst_3 || WILL_FIRE_RL_bus_1_burst_2 ||
	     WILL_FIRE_RL_bus_1_burst_1 ||
	     WILL_FIRE_RL_bus_1_burst ;

  // register bus_1_state_1
  assign bus_1_state_1$D_IN = 1'd0 ;
  assign bus_1_state_1$EN =
	     WILL_FIRE_RL_bus_1_burst_5 || WILL_FIRE_RL_bus_1_burst_4 ;

  // register bus_activeSource_0
  assign bus_activeSource_0$D_IN =
	     MUX_bus_activeSource_0$write_1__SEL_1 ?
	       MUX_bus_activeSource_0$write_1__VAL_1 :
	       MUX_bus_activeSource_0$write_1__VAL_1 ;
  assign bus_activeSource_0$EN =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     !bus_ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     !bus_ifcs_1_innerReq$D_OUT[0] ;

  // register bus_activeSource_1
  assign bus_activeSource_1$D_IN =
	     MUX_bus_activeSource_0$write_1__SEL_1 ?
	       MUX_bus_activeSource_1$write_1__VAL_1 :
	       MUX_bus_activeSource_1$write_1__VAL_1 ;
  assign bus_activeSource_1$EN =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     !bus_ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     !bus_ifcs_1_innerReq$D_OUT[0] ;

  // register bus_arbiter_firstHot
  assign bus_arbiter_firstHot$D_IN =
	     IF_SEXT_bus_arbiter_lastSelect_951_952_BIT_0_9_ETC___d1979 ;
  assign bus_arbiter_firstHot$EN = CAN_FIRE_RL_bus_arbitrate ;

  // register bus_arbiter_lastSelect
  assign bus_arbiter_lastSelect$D_IN =
	     IF_SEXT_bus_arbiter_lastSelect_951_952_BIT_0_9_ETC___d1975 ;
  assign bus_arbiter_lastSelect$EN = CAN_FIRE_RL_bus_arbitrate ;

  // register bus_ifcs_0_noRoute_inner_currentReq
  assign bus_ifcs_0_noRoute_inner_currentReq$D_IN =
	     bus_ifcs_0_noRoute_inner_currentReq$port1__read ;
  assign bus_ifcs_0_noRoute_inner_currentReq$EN = 1'b1 ;

  // register bus_ifcs_0_noRoute_inner_pendingReq
  assign bus_ifcs_0_noRoute_inner_pendingReq$D_IN =
	     bus_ifcs_0_noRoute_inner_pendingReq$port2__read ;
  assign bus_ifcs_0_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register bus_ifcs_0_state
  always@(MUX_bus_ifcs_0_state$write_1__SEL_1 or
	  MUX_bus_ifcs_0_state$write_1__SEL_2 or
	  MUX_bus_ifcs_0_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_ifcs_0_state$write_1__SEL_1: bus_ifcs_0_state$D_IN = 2'd0;
      MUX_bus_ifcs_0_state$write_1__SEL_2: bus_ifcs_0_state$D_IN = 2'd1;
      MUX_bus_ifcs_0_state$write_1__SEL_3: bus_ifcs_0_state$D_IN = 2'd2;
      default: bus_ifcs_0_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign bus_ifcs_0_state$EN =
	     (WILL_FIRE_RL_bus_ifcs_0_drainFlits ||
	      WILL_FIRE_RL_bus_ifcs_0_followFlits) &&
	     core$cpu_imem_master_wlast ||
	     WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	     !core$cpu_imem_master_wlast ||
	     WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp &&
	     !core$cpu_imem_master_wlast ;

  // register bus_ifcs_0_state_1
  assign bus_ifcs_0_state_1$D_IN = 1'd0 ;
  assign bus_ifcs_0_state_1$EN = CAN_FIRE_RL_bus_ifcs_0_followFlits_1 ;

  // register bus_ifcs_1_noRoute_inner_currentReq
  assign bus_ifcs_1_noRoute_inner_currentReq$D_IN =
	     bus_ifcs_1_noRoute_inner_currentReq$port1__read ;
  assign bus_ifcs_1_noRoute_inner_currentReq$EN = 1'b1 ;

  // register bus_ifcs_1_noRoute_inner_pendingReq
  assign bus_ifcs_1_noRoute_inner_pendingReq$D_IN =
	     bus_ifcs_1_noRoute_inner_pendingReq$port2__read ;
  assign bus_ifcs_1_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register bus_ifcs_1_state
  always@(MUX_bus_ifcs_1_state$write_1__SEL_1 or
	  MUX_bus_ifcs_1_state$write_1__SEL_2 or
	  MUX_bus_ifcs_1_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_bus_ifcs_1_state$write_1__SEL_1: bus_ifcs_1_state$D_IN = 2'd0;
      MUX_bus_ifcs_1_state$write_1__SEL_2: bus_ifcs_1_state$D_IN = 2'd1;
      MUX_bus_ifcs_1_state$write_1__SEL_3: bus_ifcs_1_state$D_IN = 2'd2;
      default: bus_ifcs_1_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign bus_ifcs_1_state$EN =
	     (WILL_FIRE_RL_bus_ifcs_1_drainFlits ||
	      WILL_FIRE_RL_bus_ifcs_1_followFlits) &&
	     core$cpu_dmem_master_wlast ||
	     WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	     !core$cpu_dmem_master_wlast ||
	     WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp &&
	     !core$cpu_dmem_master_wlast ;

  // register bus_ifcs_1_state_1
  assign bus_ifcs_1_state_1$D_IN = 1'd0 ;
  assign bus_ifcs_1_state_1$EN = CAN_FIRE_RL_bus_ifcs_1_followFlits_1 ;

  // register bus_ifcs_2_state
  assign bus_ifcs_2_state$D_IN = 1'd0 ;
  assign bus_ifcs_2_state$EN = CAN_FIRE_RL_bus_ifcs_2_followFlits ;

  // register bus_ifcs_3_state
  assign bus_ifcs_3_state$D_IN = 1'd0 ;
  assign bus_ifcs_3_state$EN = CAN_FIRE_RL_bus_ifcs_3_followFlits ;

  // register bus_merged_0_flitLeft
  assign bus_merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_bus_merged_0_genOther ?
	       MUX_bus_merged_0_flitLeft$write_1__VAL_1 :
	       core$cpu_imem_master_awlen ;
  assign bus_merged_0_flitLeft$EN = bus_msNoSynth_0_w_dwReady$whas ;

  // register bus_merged_1_flitLeft
  assign bus_merged_1_flitLeft$D_IN =
	     WILL_FIRE_RL_bus_merged_1_genOther ?
	       MUX_bus_merged_1_flitLeft$write_1__VAL_1 :
	       core$cpu_dmem_master_awlen ;
  assign bus_merged_1_flitLeft$EN = bus_msNoSynth_1_w_dwReady$whas ;

  // register bus_split_0_flitLeft
  assign bus_split_0_flitLeft$D_IN =
	     MUX_bus_split_0_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_0_flitLeft$write_1__VAL_1 :
	       bus_split_0_doPut$wget[101:94] ;
  assign bus_split_0_flitLeft$EN = bus_ssNoSynth_0_w_buffer_enqw$whas ;

  // register bus_split_1_flitLeft
  assign bus_split_1_flitLeft$D_IN =
	     MUX_bus_split_1_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_1_flitLeft$write_1__VAL_1 :
	       bus_split_1_doPut$wget[101:94] ;
  assign bus_split_1_flitLeft$EN = bus_ssNoSynth_1_w_buffer_enqw$whas ;

  // register bus_split_2_flitLeft
  assign bus_split_2_flitLeft$D_IN =
	     MUX_bus_split_2_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_2_flitLeft$write_1__VAL_1 :
	       bus_split_2_doPut$wget[101:94] ;
  assign bus_split_2_flitLeft$EN = bus_ssNoSynth_2_w_buffer_enqw$whas ;

  // register bus_split_3_flitLeft
  assign bus_split_3_flitLeft$D_IN =
	     MUX_bus_split_3_flitLeft$write_1__SEL_1 ?
	       MUX_bus_split_3_flitLeft$write_1__VAL_1 :
	       bus_split_3_doPut$wget[101:94] ;
  assign bus_split_3_flitLeft$EN = bus_ssNoSynth_3_w_buffer_enqw$whas ;

  // register bus_state
  assign bus_state$D_IN =
	     !MUX_bus_state$write_1__SEL_1 && !MUX_bus_state$write_1__SEL_2 ;
  assign bus_state$EN =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     !bus_ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     !bus_ifcs_1_innerReq$D_OUT[0] ;

  // register mem0_controller_axi4_deburster_flitReceived
  assign mem0_controller_axi4_deburster_flitReceived$D_IN =
	     mem0_controller_axi4_deburster_flitReceived$port2__read ;
  assign mem0_controller_axi4_deburster_flitReceived$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_lastWasRead
  assign mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;
  assign mem0_controller_axi4_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;

  // register mem0_controller_axi4_deburster_inSerial_shim_arff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_awff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_bff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_rff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_shim_wff_rv
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_inSerial_state
  assign mem0_controller_axi4_deburster_inSerial_state$D_IN =
	     mem0_controller_axi4_deburster_inSerial_state$port2__read ;
  assign mem0_controller_axi4_deburster_inSerial_state$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_readsSent
  assign mem0_controller_axi4_deburster_readsSent$D_IN =
	     mem0_controller_axi4_deburster_readsSent$port2__read ;
  assign mem0_controller_axi4_deburster_readsSent$EN = 1'b1 ;

  // register mem0_controller_axi4_deburster_writesSent
  assign mem0_controller_axi4_deburster_writesSent$D_IN =
	     mem0_controller_axi4_deburster_writesSent$port2__read ;
  assign mem0_controller_axi4_deburster_writesSent$EN = 1'b1 ;

  // register rg_aws_host_to_hw_interrupt
  assign rg_aws_host_to_hw_interrupt$D_IN = ma_aws_host_to_hw_interrupt_x ;
  assign rg_aws_host_to_hw_interrupt$EN = EN_ma_aws_host_to_hw_interrupt ;

  // register rg_state
  assign rg_state$D_IN = WILL_FIRE_RL_rl_reset_start_initial ? 2'd1 : 2'd2 ;
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_start_initial ||
	     WILL_FIRE_RL_rl_reset_complete_initial ;

  // submodule aws_host_access
  assign aws_host_access$from_aws_host_put = from_aws_host_put ;
  assign aws_host_access$slave_araddr =
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_ar_buffer_ff$D_OUT[92:29] :
	       aws_host_access_slave_ar_buffer_enqw$wget[92:29] ;
  assign aws_host_access$slave_arburst =
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_ar_buffer_ff$D_OUT[17:16] :
	       aws_host_access_slave_ar_buffer_enqw$wget[17:16] ;
  assign aws_host_access$slave_arcache =
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_ar_buffer_ff$D_OUT[14:11] :
	       aws_host_access_slave_ar_buffer_enqw$wget[14:11] ;
  assign aws_host_access$slave_arid =
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_ar_buffer_ff$D_OUT[99:93] :
	       aws_host_access_slave_ar_buffer_enqw$wget[99:93] ;
  assign aws_host_access$slave_arlen =
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_ar_buffer_ff$D_OUT[28:21] :
	       aws_host_access_slave_ar_buffer_enqw$wget[28:21] ;
  assign aws_host_access$slave_arlock =
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_ar_buffer_ff$D_OUT[15] :
	       aws_host_access_slave_ar_buffer_enqw$wget[15] ;
  assign aws_host_access$slave_arprot =
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_ar_buffer_ff$D_OUT[10:8] :
	       aws_host_access_slave_ar_buffer_enqw$wget[10:8] ;
  assign aws_host_access$slave_arqos =
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_ar_buffer_ff$D_OUT[7:4] :
	       aws_host_access_slave_ar_buffer_enqw$wget[7:4] ;
  assign aws_host_access$slave_arregion =
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_ar_buffer_ff$D_OUT[3:0] :
	       aws_host_access_slave_ar_buffer_enqw$wget[3:0] ;
  assign aws_host_access$slave_arsize =
	     aws_host_access_slave_ar_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_ar_buffer_ff$D_OUT[20:18] :
	       aws_host_access_slave_ar_buffer_enqw$wget[20:18] ;
  assign aws_host_access$slave_awaddr =
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_aw_buffer_ff$D_OUT[92:29] :
	       aws_host_access_slave_aw_buffer_enqw$wget[92:29] ;
  assign aws_host_access$slave_awburst =
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_aw_buffer_ff$D_OUT[17:16] :
	       aws_host_access_slave_aw_buffer_enqw$wget[17:16] ;
  assign aws_host_access$slave_awcache =
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_aw_buffer_ff$D_OUT[14:11] :
	       aws_host_access_slave_aw_buffer_enqw$wget[14:11] ;
  assign aws_host_access$slave_awid =
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_aw_buffer_ff$D_OUT[99:93] :
	       aws_host_access_slave_aw_buffer_enqw$wget[99:93] ;
  assign aws_host_access$slave_awlen =
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_aw_buffer_ff$D_OUT[28:21] :
	       aws_host_access_slave_aw_buffer_enqw$wget[28:21] ;
  assign aws_host_access$slave_awlock =
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_aw_buffer_ff$D_OUT[15] :
	       aws_host_access_slave_aw_buffer_enqw$wget[15] ;
  assign aws_host_access$slave_awprot =
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_aw_buffer_ff$D_OUT[10:8] :
	       aws_host_access_slave_aw_buffer_enqw$wget[10:8] ;
  assign aws_host_access$slave_awqos =
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_aw_buffer_ff$D_OUT[7:4] :
	       aws_host_access_slave_aw_buffer_enqw$wget[7:4] ;
  assign aws_host_access$slave_awregion =
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_aw_buffer_ff$D_OUT[3:0] :
	       aws_host_access_slave_aw_buffer_enqw$wget[3:0] ;
  assign aws_host_access$slave_awsize =
	     aws_host_access_slave_aw_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_aw_buffer_ff$D_OUT[20:18] :
	       aws_host_access_slave_aw_buffer_enqw$wget[20:18] ;
  assign aws_host_access$slave_bready = aws_host_access_slave_b_dwReady$whas ;
  assign aws_host_access$slave_rready = aws_host_access_slave_r_dwReady$whas ;
  assign aws_host_access$slave_wdata =
	     aws_host_access_slave_w_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_w_buffer_ff$D_OUT[73:10] :
	       aws_host_access_slave_w_buffer_enqw$wget[73:10] ;
  assign aws_host_access$slave_wlast =
	     aws_host_access_slave_w_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_w_buffer_ff$D_OUT[1] :
	       aws_host_access_slave_w_buffer_enqw$wget[1] ;
  assign aws_host_access$slave_wstrb =
	     aws_host_access_slave_w_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_w_buffer_ff$D_OUT[9:2] :
	       aws_host_access_slave_w_buffer_enqw$wget[9:2] ;
  assign aws_host_access$slave_wuser =
	     aws_host_access_slave_w_buffer_ff$EMPTY_N ?
	       aws_host_access_slave_w_buffer_ff$D_OUT[0] :
	       aws_host_access_slave_w_buffer_enqw$wget[0] ;
  assign aws_host_access$slave_awvalid =
	     CAN_FIRE_RL_aws_host_access_slave_aw_forwardFlit ;
  assign aws_host_access$slave_wvalid =
	     CAN_FIRE_RL_aws_host_access_slave_w_forwardFlit ;
  assign aws_host_access$slave_arvalid =
	     CAN_FIRE_RL_aws_host_access_slave_ar_forwardFlit ;
  assign aws_host_access$EN_to_aws_host_get = EN_to_aws_host_get ;
  assign aws_host_access$EN_from_aws_host_put = EN_from_aws_host_put ;

  // submodule aws_host_access_slave_ar_buffer_ff
  assign aws_host_access_slave_ar_buffer_ff$D_IN =
	     aws_host_access_slave_ar_buffer_enqw$wget ;
  assign aws_host_access_slave_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_aws_host_access_slave_ar_buffer_enqueue ;
  assign aws_host_access_slave_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_aws_host_access_slave_ar_buffer_dequeue ;
  assign aws_host_access_slave_ar_buffer_ff$CLR = 1'b0 ;

  // submodule aws_host_access_slave_ar_buffer_firstValid
  assign aws_host_access_slave_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign aws_host_access_slave_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_aws_host_access_slave_ar_dropFlit ;

  // submodule aws_host_access_slave_aw_buffer_ff
  assign aws_host_access_slave_aw_buffer_ff$D_IN =
	     aws_host_access_slave_aw_buffer_enqw$wget ;
  assign aws_host_access_slave_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_aws_host_access_slave_aw_buffer_enqueue ;
  assign aws_host_access_slave_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_aws_host_access_slave_aw_buffer_dequeue ;
  assign aws_host_access_slave_aw_buffer_ff$CLR = 1'b0 ;

  // submodule aws_host_access_slave_aw_buffer_firstValid
  assign aws_host_access_slave_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign aws_host_access_slave_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_aws_host_access_slave_aw_dropFlit ;

  // submodule aws_host_access_slave_w_buffer_ff
  assign aws_host_access_slave_w_buffer_ff$D_IN =
	     aws_host_access_slave_w_buffer_enqw$wget ;
  assign aws_host_access_slave_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_aws_host_access_slave_w_buffer_enqueue ;
  assign aws_host_access_slave_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_aws_host_access_slave_w_buffer_dequeue ;
  assign aws_host_access_slave_w_buffer_ff$CLR = 1'b0 ;

  // submodule aws_host_access_slave_w_buffer_firstValid
  assign aws_host_access_slave_w_buffer_firstValid$D_IN = 1'd1 ;
  assign aws_host_access_slave_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_aws_host_access_slave_w_dropFlit ;

  // submodule boot_rom
  assign boot_rom$set_addr_map_addr_base =
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign boot_rom$set_addr_map_addr_lim =
	     soc_map$m_boot_rom_addr_range[127:64] +
	     soc_map$m_boot_rom_addr_range[63:0] ;
  assign boot_rom$slave_araddr =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[92:29] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[92:29] ;
  assign boot_rom$slave_arburst =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[17:16] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[17:16] ;
  assign boot_rom$slave_arcache =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[14:11] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[14:11] ;
  assign boot_rom$slave_arid =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[99:93] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[99:93] ;
  assign boot_rom$slave_arlen =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[28:21] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[28:21] ;
  assign boot_rom$slave_arlock =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[15] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[15] ;
  assign boot_rom$slave_arprot =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[10:8] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[10:8] ;
  assign boot_rom$slave_arqos =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[7:4] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[7:4] ;
  assign boot_rom$slave_arregion =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[3:0] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[3:0] ;
  assign boot_rom$slave_arsize =
	     br_ar_buffer_ff$EMPTY_N ?
	       br_ar_buffer_ff$D_OUT[20:18] :
	       boot_rom_axi4_deburster_outShim_arff$D_OUT[20:18] ;
  assign boot_rom$slave_awaddr =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[92:29] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[92:29] ;
  assign boot_rom$slave_awburst =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[17:16] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[17:16] ;
  assign boot_rom$slave_awcache =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[14:11] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[14:11] ;
  assign boot_rom$slave_awid =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[99:93] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[99:93] ;
  assign boot_rom$slave_awlen =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[28:21] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[28:21] ;
  assign boot_rom$slave_awlock =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[15] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[15] ;
  assign boot_rom$slave_awprot =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[10:8] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[10:8] ;
  assign boot_rom$slave_awqos =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[7:4] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[7:4] ;
  assign boot_rom$slave_awregion =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[3:0] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[3:0] ;
  assign boot_rom$slave_awsize =
	     br_aw_buffer_ff$EMPTY_N ?
	       br_aw_buffer_ff$D_OUT[20:18] :
	       boot_rom_axi4_deburster_outShim_awff$D_OUT[20:18] ;
  assign boot_rom$slave_bready = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign boot_rom$slave_rready = CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign boot_rom$slave_wdata =
	     br_w_buffer_ff$EMPTY_N ?
	       br_w_buffer_ff$D_OUT[72:9] :
	       boot_rom_axi4_deburster_outShim_wff$D_OUT[72:9] ;
  assign boot_rom$slave_wlast =
	     br_w_buffer_ff$EMPTY_N ?
	       br_w_buffer_ff$D_OUT[0] :
	       boot_rom_axi4_deburster_outShim_wff$D_OUT[0] ;
  assign boot_rom$slave_wstrb =
	     br_w_buffer_ff$EMPTY_N ?
	       br_w_buffer_ff$D_OUT[8:1] :
	       boot_rom_axi4_deburster_outShim_wff$D_OUT[8:1] ;
  assign boot_rom$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign boot_rom$slave_awvalid = CAN_FIRE_RL_br_aw_forwardFlit ;
  assign boot_rom$slave_wvalid = CAN_FIRE_RL_br_w_forwardFlit ;
  assign boot_rom$slave_arvalid = CAN_FIRE_RL_br_ar_forwardFlit ;

  // submodule boot_rom_axi4_deburster_countWriteRspFF
  assign boot_rom_axi4_deburster_countWriteRspFF$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign boot_rom_axi4_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_forward_write_req &&
	     boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign boot_rom_axi4_deburster_countWriteRspFF$DEQ =
	     WILL_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp &&
	     boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d96 ;
  assign boot_rom_axi4_deburster_countWriteRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_arff
  assign boot_rom_axi4_deburster_inShim_arff$D_IN =
	     ug_boot_rom_slave_u_ar_putWire$wget ;
  assign boot_rom_axi4_deburster_inShim_arff$ENQ =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_ar_doPut ;
  assign boot_rom_axi4_deburster_inShim_arff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAR ;
  assign boot_rom_axi4_deburster_inShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_awff
  assign boot_rom_axi4_deburster_inShim_awff$D_IN =
	     ug_boot_rom_slave_u_aw_putWire$wget ;
  assign boot_rom_axi4_deburster_inShim_awff$ENQ =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_aw_doPut ;
  assign boot_rom_axi4_deburster_inShim_awff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeAW ;
  assign boot_rom_axi4_deburster_inShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_bff
  assign boot_rom_axi4_deburster_inShim_bff$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_bff_rv$port1__read[8:0] ;
  assign boot_rom_axi4_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB ;
  assign boot_rom_axi4_deburster_inShim_bff$DEQ =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_b_doDrop ;
  assign boot_rom_axi4_deburster_inShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_rff
  assign boot_rom_axi4_deburster_inShim_rff$D_IN =
	     boot_rom_axi4_deburster_inSerial_shim_rff_rv$port1__read[73:0] ;
  assign boot_rom_axi4_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR ;
  assign boot_rom_axi4_deburster_inShim_rff$DEQ =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_r_doDrop ;
  assign boot_rom_axi4_deburster_inShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_inShim_wff
  assign boot_rom_axi4_deburster_inShim_wff$D_IN =
	     ug_boot_rom_slave_u_w_putWire$wget ;
  assign boot_rom_axi4_deburster_inShim_wff$ENQ =
	     CAN_FIRE_RL_ug_boot_rom_slave_u_w_doPut ;
  assign boot_rom_axi4_deburster_inShim_wff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeW ;
  assign boot_rom_axi4_deburster_inShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_lastReadRspFF
  assign boot_rom_axi4_deburster_lastReadRspFF$D_IN =
	     boot_rom_axi4_deburster_readsSent_port0__read__ETC___d129 ;
  assign boot_rom_axi4_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;
  assign boot_rom_axi4_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;
  assign boot_rom_axi4_deburster_lastReadRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_arff
  assign boot_rom_axi4_deburster_outShim_arff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[99:93],
	       x_araddr__h7376,
	       8'd0,
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign boot_rom_axi4_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_req ;
  assign boot_rom_axi4_deburster_outShim_arff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign boot_rom_axi4_deburster_outShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_awff
  assign boot_rom_axi4_deburster_outShim_awff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[99:93],
	       x_awaddr__h6601,
	       8'd0,
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign boot_rom_axi4_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;
  assign boot_rom_axi4_deburster_outShim_awff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut ;
  assign boot_rom_axi4_deburster_outShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_bff
  assign boot_rom_axi4_deburster_outShim_bff$D_IN =
	     { boot_rom$slave_bid, boot_rom$slave_bresp } ;
  assign boot_rom_axi4_deburster_outShim_bff$ENQ =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign boot_rom_axi4_deburster_outShim_bff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_handle_write_rsp ;
  assign boot_rom_axi4_deburster_outShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_rff
  assign boot_rom_axi4_deburster_outShim_rff$D_IN =
	     { boot_rom$slave_rid,
	       boot_rom$slave_rdata,
	       boot_rom$slave_rresp,
	       boot_rom$slave_rlast } ;
  assign boot_rom_axi4_deburster_outShim_rff$ENQ =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;
  assign boot_rom_axi4_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_read_rsp ;
  assign boot_rom_axi4_deburster_outShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule boot_rom_axi4_deburster_outShim_wff
  assign boot_rom_axi4_deburster_outShim_wff$D_IN =
	     { boot_rom_axi4_deburster_inSerial_shim_wff_rv$port1__read[72:1],
	       1'd1 } ;
  assign boot_rom_axi4_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_boot_rom_axi4_deburster_forward_write_req ;
  assign boot_rom_axi4_deburster_outShim_wff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign boot_rom_axi4_deburster_outShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule br_ar_buffer_ff
  assign br_ar_buffer_ff$D_IN = boot_rom_axi4_deburster_outShim_arff$D_OUT ;
  assign br_ar_buffer_ff$ENQ = CAN_FIRE_RL_br_ar_buffer_enqueue ;
  assign br_ar_buffer_ff$DEQ = CAN_FIRE_RL_br_ar_buffer_dequeue ;
  assign br_ar_buffer_ff$CLR = 1'b0 ;

  // submodule br_ar_buffer_firstValid
  assign br_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign br_ar_buffer_firstValid$EN = CAN_FIRE_RL_br_ar_dropFlit ;

  // submodule br_aw_buffer_ff
  assign br_aw_buffer_ff$D_IN = boot_rom_axi4_deburster_outShim_awff$D_OUT ;
  assign br_aw_buffer_ff$ENQ = CAN_FIRE_RL_br_aw_buffer_enqueue ;
  assign br_aw_buffer_ff$DEQ = CAN_FIRE_RL_br_aw_buffer_dequeue ;
  assign br_aw_buffer_ff$CLR = 1'b0 ;

  // submodule br_aw_buffer_firstValid
  assign br_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign br_aw_buffer_firstValid$EN = CAN_FIRE_RL_br_aw_dropFlit ;

  // submodule br_w_buffer_ff
  assign br_w_buffer_ff$D_IN = boot_rom_axi4_deburster_outShim_wff$D_OUT ;
  assign br_w_buffer_ff$ENQ = CAN_FIRE_RL_br_w_buffer_enqueue ;
  assign br_w_buffer_ff$DEQ = CAN_FIRE_RL_br_w_buffer_dequeue ;
  assign br_w_buffer_ff$CLR = 1'b0 ;

  // submodule br_w_buffer_firstValid
  assign br_w_buffer_firstValid$D_IN = 1'd1 ;
  assign br_w_buffer_firstValid$EN = CAN_FIRE_RL_br_w_dropFlit ;

  // submodule bus_1_ifcs_0_innerReq
  assign bus_1_ifcs_0_innerReq$D_IN =
	     { fatReq_arid__h89921,
	       core$cpu_imem_master_araddr,
	       core$cpu_imem_master_arlen,
	       core$cpu_imem_master_arsize,
	       core$cpu_imem_master_arburst,
	       core$cpu_imem_master_arlock,
	       core$cpu_imem_master_arcache,
	       core$cpu_imem_master_arprot,
	       core$cpu_imem_master_arqos,
	       core$cpu_imem_master_arregion } ;
  assign bus_1_ifcs_0_innerReq$ENQ =
	     WILL_FIRE_RL_bus_1_ifcs_0_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_0_firstFlit ;
  assign bus_1_ifcs_0_innerReq$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_4 ;
  assign bus_1_ifcs_0_innerReq$CLR = 1'b0 ;

  // submodule bus_1_ifcs_0_innerRoute
  assign bus_1_ifcs_0_innerRoute$D_IN =
	     { core$cpu_imem_master_araddr >=
	       soc_map$m_host_access_addr_range[127:64] &&
	       x__h89123 < soc_map$m_host_access_addr_range[63:0] &&
	       core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2448,
	       core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2439,
	       !core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2421 &&
	       core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2424 &&
	       (core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2415 ||
		!core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2418),
	       !core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2415 &&
	       core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2418 } ;
  assign bus_1_ifcs_0_innerRoute$ENQ = CAN_FIRE_RL_bus_1_ifcs_0_firstFlit ;
  assign bus_1_ifcs_0_innerRoute$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_4 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_4 ;
  assign bus_1_ifcs_0_innerRoute$CLR = 1'b0 ;

  // submodule bus_1_ifcs_0_noRouteRsp
  assign bus_1_ifcs_0_noRouteRsp$D_IN =
	     { bus_1_ifcs_0_noRoute_currentReq$port1__read[98:93],
	       66'h2AAAAAAAAAAAAAAAB,
	       x_port1__read__h90572 == 9'd1 } ;
  assign bus_1_ifcs_0_noRouteRsp$ENQ =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp ;
  assign bus_1_ifcs_0_noRouteRsp$DEQ =
	     CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse ;
  assign bus_1_ifcs_0_noRouteRsp$CLR = 1'b0 ;

  // submodule bus_1_ifcs_0_routeBack
  assign bus_1_ifcs_0_routeBack$D_IN =
	     2'd1 <<
	     boot_rom_axi4_deburster_inShim_rffD_OUT_BITS__ETC__q27[6] ;
  assign bus_1_ifcs_0_routeBack$ENQ = CAN_FIRE_RL_bus_1_ifcs_0_firstFlit_1 ;
  assign bus_1_ifcs_0_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_burst && bus_1_ifcs_0_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     bus_1_ifcs_0_rspBack$D_OUT[0] ;
  assign bus_1_ifcs_0_routeBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_0_rspBack
  assign bus_1_ifcs_0_rspBack$D_IN =
	     { boot_rom_axi4_deburster_inShim_rffD_OUT_BITS__ETC__q27[5:0],
	       boot_rom_axi4_deburster_inShim_rff$D_OUT[66:0] } ;
  assign bus_1_ifcs_0_rspBack$ENQ = bus_ssNoSynth_0_r_dwReady$whas ;
  assign bus_1_ifcs_0_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_source_selected &&
	     bus_1_ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_1_burst ;
  assign bus_1_ifcs_0_rspBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_1_innerReq
  assign bus_1_ifcs_1_innerReq$D_IN =
	     { fatReq_arid__h93247,
	       core$cpu_dmem_master_araddr,
	       core$cpu_dmem_master_arlen,
	       core$cpu_dmem_master_arsize,
	       core$cpu_dmem_master_arburst,
	       core$cpu_dmem_master_arlock,
	       core$cpu_dmem_master_arcache,
	       core$cpu_dmem_master_arprot,
	       core$cpu_dmem_master_arqos,
	       core$cpu_dmem_master_arregion } ;
  assign bus_1_ifcs_1_innerReq$ENQ =
	     WILL_FIRE_RL_bus_1_ifcs_1_followFlits ||
	     WILL_FIRE_RL_bus_1_ifcs_1_firstFlit ;
  assign bus_1_ifcs_1_innerReq$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_5 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_5 ;
  assign bus_1_ifcs_1_innerReq$CLR = 1'b0 ;

  // submodule bus_1_ifcs_1_innerRoute
  assign bus_1_ifcs_1_innerRoute$D_IN =
	     { core$cpu_dmem_master_araddr >=
	       soc_map$m_host_access_addr_range[127:64] &&
	       x__h92464 < soc_map$m_host_access_addr_range[63:0] &&
	       core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2558,
	       core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2549,
	       !core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2531 &&
	       core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2534 &&
	       (core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2525 ||
		!core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2528),
	       !core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2525 &&
	       core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2528 } ;
  assign bus_1_ifcs_1_innerRoute$ENQ = CAN_FIRE_RL_bus_1_ifcs_1_firstFlit ;
  assign bus_1_ifcs_1_innerRoute$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_5 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_5 ;
  assign bus_1_ifcs_1_innerRoute$CLR = 1'b0 ;

  // submodule bus_1_ifcs_1_noRouteRsp
  assign bus_1_ifcs_1_noRouteRsp$D_IN =
	     { bus_1_ifcs_1_noRoute_currentReq$port1__read[98:93],
	       66'h2AAAAAAAAAAAAAAAB,
	       x_port1__read__h93895 == 9'd1 } ;
  assign bus_1_ifcs_1_noRouteRsp$ENQ =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp ;
  assign bus_1_ifcs_1_noRouteRsp$DEQ =
	     CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse ;
  assign bus_1_ifcs_1_noRouteRsp$CLR = 1'b0 ;

  // submodule bus_1_ifcs_1_routeBack
  assign bus_1_ifcs_1_routeBack$D_IN =
	     2'd1 <<
	     mem0_controller_axi4_deburster_inShim_rffD_OU_ETC__q28[6] ;
  assign bus_1_ifcs_1_routeBack$ENQ = CAN_FIRE_RL_bus_1_ifcs_1_firstFlit_1 ;
  assign bus_1_ifcs_1_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_burst_1 && bus_1_ifcs_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     bus_1_ifcs_1_rspBack$D_OUT[0] ;
  assign bus_1_ifcs_1_routeBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_1_rspBack
  assign bus_1_ifcs_1_rspBack$D_IN =
	     { mem0_controller_axi4_deburster_inShim_rffD_OU_ETC__q28[5:0],
	       mem0_controller_axi4_deburster_inShim_rff$D_OUT[66:0] } ;
  assign bus_1_ifcs_1_rspBack$ENQ = bus_ssNoSynth_1_r_dwReady$whas ;
  assign bus_1_ifcs_1_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_1_burst_1 ;
  assign bus_1_ifcs_1_rspBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_2_routeBack
  assign bus_1_ifcs_2_routeBack$D_IN = 2'd1 << uart0$slave_rid[6] ;
  assign bus_1_ifcs_2_routeBack$ENQ = CAN_FIRE_RL_bus_1_ifcs_2_firstFlit ;
  assign bus_1_ifcs_2_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_burst_2 && bus_1_ifcs_2_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     bus_1_ifcs_2_rspBack$D_OUT[0] ;
  assign bus_1_ifcs_2_routeBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_2_rspBack
  assign bus_1_ifcs_2_rspBack$D_IN =
	     { uart0$slave_rid[5:0],
	       uart0$slave_rdata,
	       uart0$slave_rresp,
	       uart0$slave_rlast } ;
  assign bus_1_ifcs_2_rspBack$ENQ = bus_ssNoSynth_2_r_dwReady$whas ;
  assign bus_1_ifcs_2_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_1_burst_2 ;
  assign bus_1_ifcs_2_rspBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_3_routeBack
  assign bus_1_ifcs_3_routeBack$D_IN = 2'd1 << aws_host_access$slave_rid[6] ;
  assign bus_1_ifcs_3_routeBack$ENQ = CAN_FIRE_RL_bus_1_ifcs_3_firstFlit ;
  assign bus_1_ifcs_3_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_burst_3 && bus_1_ifcs_3_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     bus_1_ifcs_3_rspBack$D_OUT[0] ;
  assign bus_1_ifcs_3_routeBack$CLR = 1'b0 ;

  // submodule bus_1_ifcs_3_rspBack
  assign bus_1_ifcs_3_rspBack$D_IN =
	     { aws_host_access$slave_rid[5:0],
	       aws_host_access$slave_rdata,
	       aws_host_access$slave_rresp,
	       aws_host_access$slave_rlast } ;
  assign bus_1_ifcs_3_rspBack$ENQ = bus_ssNoSynth_3_r_dwReady$whas ;
  assign bus_1_ifcs_3_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_1_burst_3 ;
  assign bus_1_ifcs_3_rspBack$CLR = 1'b0 ;

  // submodule bus_ifcs_0_innerReq
  assign bus_ifcs_0_innerReq$D_IN =
	     { bus_merged_0_flitLeft != 8'd0,
	       a_awid__h47114,
	       core$cpu_imem_master_awaddr,
	       core$cpu_imem_master_awlen,
	       core$cpu_imem_master_awsize,
	       core$cpu_imem_master_awburst,
	       core$cpu_imem_master_awlock,
	       core$cpu_imem_master_awcache,
	       core$cpu_imem_master_awprot,
	       core$cpu_imem_master_awqos,
	       core$cpu_imem_master_awregion,
	       core$cpu_imem_master_wdata,
	       core$cpu_imem_master_wstrb,
	       core$cpu_imem_master_wlast } ;
  assign bus_ifcs_0_innerReq$ENQ =
	     WILL_FIRE_RL_bus_ifcs_0_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_0_firstFlit ;
  assign bus_ifcs_0_innerReq$DEQ =
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_burst ;
  assign bus_ifcs_0_innerReq$CLR = 1'b0 ;

  // submodule bus_ifcs_0_innerRoute
  assign bus_ifcs_0_innerRoute$D_IN =
	     { core$cpu_imem_master_awaddr >=
	       soc_map$m_host_access_addr_range[127:64] &&
	       x__h45623 < soc_map$m_host_access_addr_range[63:0] &&
	       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1619,
	       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1607,
	       !IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1585 &&
	       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1589 &&
	       (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1576 ||
		!IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1580),
	       !IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1576 &&
	       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1580 } ;
  assign bus_ifcs_0_innerRoute$ENQ = CAN_FIRE_RL_bus_ifcs_0_firstFlit ;
  assign bus_ifcs_0_innerRoute$DEQ =
	     WILL_FIRE_RL_bus_burst && bus_ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     bus_ifcs_0_innerReq$D_OUT[0] ;
  assign bus_ifcs_0_innerRoute$CLR = 1'b0 ;

  // submodule bus_ifcs_0_noRouteRsp
  assign bus_ifcs_0_noRouteRsp$D_IN =
	     { bus_ifcs_0_noRoute_inner_currentReq$port1__read[98:93],
	       2'd3 } ;
  assign bus_ifcs_0_noRouteRsp$ENQ =
	     CAN_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp ;
  assign bus_ifcs_0_noRouteRsp$DEQ =
	     CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse ;
  assign bus_ifcs_0_noRouteRsp$CLR = 1'b0 ;

  // submodule bus_ifcs_0_routeBack
  assign bus_ifcs_0_routeBack$D_IN =
	     2'd1 <<
	     boot_rom_axi4_deburster_inShim_bffD_OUT_BITS__ETC__q29[6] ;
  assign bus_ifcs_0_routeBack$ENQ = CAN_FIRE_RL_bus_ifcs_0_firstFlit_1 ;
  assign bus_ifcs_0_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst ;
  assign bus_ifcs_0_routeBack$CLR = 1'b0 ;

  // submodule bus_ifcs_0_rspBack
  assign bus_ifcs_0_rspBack$D_IN =
	     { boot_rom_axi4_deburster_inShim_bffD_OUT_BITS__ETC__q29[5:0],
	       boot_rom_axi4_deburster_inShim_bff$D_OUT[1:0] } ;
  assign bus_ifcs_0_rspBack$ENQ = bus_ssNoSynth_0_b_dwReady$whas ;
  assign bus_ifcs_0_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected &&
	     bus_ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst ;
  assign bus_ifcs_0_rspBack$CLR = 1'b0 ;

  // submodule bus_ifcs_1_innerReq
  assign bus_ifcs_1_innerReq$D_IN =
	     { bus_merged_1_flitLeft != 8'd0,
	       a_awid__h50758,
	       core$cpu_dmem_master_awaddr,
	       core$cpu_dmem_master_awlen,
	       core$cpu_dmem_master_awsize,
	       core$cpu_dmem_master_awburst,
	       core$cpu_dmem_master_awlock,
	       core$cpu_dmem_master_awcache,
	       core$cpu_dmem_master_awprot,
	       core$cpu_dmem_master_awqos,
	       core$cpu_dmem_master_awregion,
	       core$cpu_dmem_master_wdata,
	       core$cpu_dmem_master_wstrb,
	       core$cpu_dmem_master_wlast } ;
  assign bus_ifcs_1_innerReq$ENQ =
	     WILL_FIRE_RL_bus_ifcs_1_followFlits ||
	     WILL_FIRE_RL_bus_ifcs_1_firstFlit ;
  assign bus_ifcs_1_innerReq$DEQ =
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_bus_burst_1 ;
  assign bus_ifcs_1_innerReq$CLR = 1'b0 ;

  // submodule bus_ifcs_1_innerRoute
  assign bus_ifcs_1_innerRoute$D_IN =
	     { core$cpu_dmem_master_awaddr >=
	       soc_map$m_host_access_addr_range[127:64] &&
	       x__h49311 < soc_map$m_host_access_addr_range[63:0] &&
	       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1740,
	       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1731,
	       !IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1713 &&
	       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1716 &&
	       (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1707 ||
		!IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1710),
	       !IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1707 &&
	       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1710 } ;
  assign bus_ifcs_1_innerRoute$ENQ = CAN_FIRE_RL_bus_ifcs_1_firstFlit ;
  assign bus_ifcs_1_innerRoute$DEQ =
	     WILL_FIRE_RL_bus_burst_1 && bus_ifcs_1_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_bus_source_selected_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     bus_ifcs_1_innerReq$D_OUT[0] ;
  assign bus_ifcs_1_innerRoute$CLR = 1'b0 ;

  // submodule bus_ifcs_1_noRouteRsp
  assign bus_ifcs_1_noRouteRsp$D_IN =
	     { bus_ifcs_1_noRoute_inner_currentReq$port1__read[98:93],
	       2'd3 } ;
  assign bus_ifcs_1_noRouteRsp$ENQ =
	     CAN_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp ;
  assign bus_ifcs_1_noRouteRsp$DEQ =
	     CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse ;
  assign bus_ifcs_1_noRouteRsp$CLR = 1'b0 ;

  // submodule bus_ifcs_1_routeBack
  assign bus_ifcs_1_routeBack$D_IN =
	     2'd1 <<
	     mem0_controller_axi4_deburster_inShim_bffD_OU_ETC__q30[6] ;
  assign bus_ifcs_1_routeBack$ENQ = CAN_FIRE_RL_bus_ifcs_1_firstFlit_1 ;
  assign bus_ifcs_1_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_1 ;
  assign bus_ifcs_1_routeBack$CLR = 1'b0 ;

  // submodule bus_ifcs_1_rspBack
  assign bus_ifcs_1_rspBack$D_IN =
	     { mem0_controller_axi4_deburster_inShim_bffD_OU_ETC__q30[5:0],
	       mem0_controller_axi4_deburster_inShim_bff$D_OUT[1:0] } ;
  assign bus_ifcs_1_rspBack$ENQ = bus_ssNoSynth_1_b_dwReady$whas ;
  assign bus_ifcs_1_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_1 ;
  assign bus_ifcs_1_rspBack$CLR = 1'b0 ;

  // submodule bus_ifcs_2_routeBack
  assign bus_ifcs_2_routeBack$D_IN = 2'd1 << uart0$slave_bid[6] ;
  assign bus_ifcs_2_routeBack$ENQ = CAN_FIRE_RL_bus_ifcs_2_firstFlit ;
  assign bus_ifcs_2_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_2 ;
  assign bus_ifcs_2_routeBack$CLR = 1'b0 ;

  // submodule bus_ifcs_2_rspBack
  assign bus_ifcs_2_rspBack$D_IN =
	     { uart0$slave_bid[5:0], uart0$slave_bresp } ;
  assign bus_ifcs_2_rspBack$ENQ = bus_ssNoSynth_2_b_dwReady$whas ;
  assign bus_ifcs_2_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_2 ;
  assign bus_ifcs_2_rspBack$CLR = 1'b0 ;

  // submodule bus_ifcs_3_routeBack
  assign bus_ifcs_3_routeBack$D_IN = 2'd1 << aws_host_access$slave_bid[6] ;
  assign bus_ifcs_3_routeBack$ENQ = CAN_FIRE_RL_bus_ifcs_3_firstFlit ;
  assign bus_ifcs_3_routeBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_ifcs_3_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_3 ;
  assign bus_ifcs_3_routeBack$CLR = 1'b0 ;

  // submodule bus_ifcs_3_rspBack
  assign bus_ifcs_3_rspBack$D_IN =
	     { aws_host_access$slave_bid[5:0], aws_host_access$slave_bresp } ;
  assign bus_ifcs_3_rspBack$ENQ = bus_ssNoSynth_3_b_dwReady$whas ;
  assign bus_ifcs_3_rspBack$DEQ =
	     WILL_FIRE_RL_bus_1_source_selected_3 &&
	     bus_ifcs_3_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_bus_1_burst_3 ;
  assign bus_ifcs_3_rspBack$CLR = 1'b0 ;

  // submodule bus_msNoSynth_0_b_buffer_ff
  assign bus_msNoSynth_0_b_buffer_ff$D_IN =
	     bus_msNoSynth_0_b_buffer_enqw$wget ;
  assign bus_msNoSynth_0_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_enqueue ;
  assign bus_msNoSynth_0_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_buffer_dequeue ;
  assign bus_msNoSynth_0_b_buffer_ff$CLR = 1'b0 ;

  // submodule bus_msNoSynth_0_b_buffer_firstValid
  assign bus_msNoSynth_0_b_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_msNoSynth_0_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_dropFlit ;

  // submodule bus_msNoSynth_0_r_buffer_ff
  assign bus_msNoSynth_0_r_buffer_ff$D_IN =
	     bus_msNoSynth_0_r_buffer_enqw$wget ;
  assign bus_msNoSynth_0_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_enqueue ;
  assign bus_msNoSynth_0_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_buffer_dequeue ;
  assign bus_msNoSynth_0_r_buffer_ff$CLR = 1'b0 ;

  // submodule bus_msNoSynth_0_r_buffer_firstValid
  assign bus_msNoSynth_0_r_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_msNoSynth_0_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_dropFlit ;

  // submodule bus_msNoSynth_1_b_buffer_ff
  assign bus_msNoSynth_1_b_buffer_ff$D_IN =
	     bus_msNoSynth_1_b_buffer_enqw$wget ;
  assign bus_msNoSynth_1_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_enqueue ;
  assign bus_msNoSynth_1_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_buffer_dequeue ;
  assign bus_msNoSynth_1_b_buffer_ff$CLR = 1'b0 ;

  // submodule bus_msNoSynth_1_b_buffer_firstValid
  assign bus_msNoSynth_1_b_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_msNoSynth_1_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_dropFlit ;

  // submodule bus_msNoSynth_1_r_buffer_ff
  assign bus_msNoSynth_1_r_buffer_ff$D_IN =
	     bus_msNoSynth_1_r_buffer_enqw$wget ;
  assign bus_msNoSynth_1_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_enqueue ;
  assign bus_msNoSynth_1_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_buffer_dequeue ;
  assign bus_msNoSynth_1_r_buffer_ff$CLR = 1'b0 ;

  // submodule bus_msNoSynth_1_r_buffer_firstValid
  assign bus_msNoSynth_1_r_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_msNoSynth_1_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_dropFlit ;

  // submodule bus_ssNoSynth_0_ar_buffer_ff
  assign bus_ssNoSynth_0_ar_buffer_ff$D_IN =
	     bus_ssNoSynth_0_ar_buffer_enqw$wget ;
  assign bus_ssNoSynth_0_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_enqueue ;
  assign bus_ssNoSynth_0_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_buffer_dequeue ;
  assign bus_ssNoSynth_0_ar_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_0_ar_buffer_firstValid
  assign bus_ssNoSynth_0_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_0_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_0_ar_dropFlit ;

  // submodule bus_ssNoSynth_0_aw_buffer_ff
  assign bus_ssNoSynth_0_aw_buffer_ff$D_IN = bus_split_0_doPut$wget[172:73] ;
  assign bus_ssNoSynth_0_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_enqueue ;
  assign bus_ssNoSynth_0_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_buffer_dequeue ;
  assign bus_ssNoSynth_0_aw_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_0_aw_buffer_firstValid
  assign bus_ssNoSynth_0_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_0_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_0_aw_dropFlit ;

  // submodule bus_ssNoSynth_0_w_buffer_ff
  assign bus_ssNoSynth_0_w_buffer_ff$D_IN = bus_split_0_doPut$wget[72:0] ;
  assign bus_ssNoSynth_0_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_enqueue ;
  assign bus_ssNoSynth_0_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_buffer_dequeue ;
  assign bus_ssNoSynth_0_w_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_0_w_buffer_firstValid
  assign bus_ssNoSynth_0_w_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_0_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_0_w_dropFlit ;

  // submodule bus_ssNoSynth_1_ar_buffer_ff
  assign bus_ssNoSynth_1_ar_buffer_ff$D_IN =
	     bus_ssNoSynth_1_ar_buffer_enqw$wget ;
  assign bus_ssNoSynth_1_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_enqueue ;
  assign bus_ssNoSynth_1_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_buffer_dequeue ;
  assign bus_ssNoSynth_1_ar_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_1_ar_buffer_firstValid
  assign bus_ssNoSynth_1_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_1_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_1_ar_dropFlit ;

  // submodule bus_ssNoSynth_1_aw_buffer_ff
  assign bus_ssNoSynth_1_aw_buffer_ff$D_IN = bus_split_1_doPut$wget[172:73] ;
  assign bus_ssNoSynth_1_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_enqueue ;
  assign bus_ssNoSynth_1_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_buffer_dequeue ;
  assign bus_ssNoSynth_1_aw_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_1_aw_buffer_firstValid
  assign bus_ssNoSynth_1_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_1_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_1_aw_dropFlit ;

  // submodule bus_ssNoSynth_1_w_buffer_ff
  assign bus_ssNoSynth_1_w_buffer_ff$D_IN = bus_split_1_doPut$wget[72:0] ;
  assign bus_ssNoSynth_1_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_enqueue ;
  assign bus_ssNoSynth_1_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_buffer_dequeue ;
  assign bus_ssNoSynth_1_w_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_1_w_buffer_firstValid
  assign bus_ssNoSynth_1_w_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_1_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_1_w_dropFlit ;

  // submodule bus_ssNoSynth_2_ar_buffer_ff
  assign bus_ssNoSynth_2_ar_buffer_ff$D_IN =
	     bus_ssNoSynth_2_ar_buffer_enqw$wget ;
  assign bus_ssNoSynth_2_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_enqueue ;
  assign bus_ssNoSynth_2_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_buffer_dequeue ;
  assign bus_ssNoSynth_2_ar_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_2_ar_buffer_firstValid
  assign bus_ssNoSynth_2_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_2_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_2_ar_dropFlit ;

  // submodule bus_ssNoSynth_2_aw_buffer_ff
  assign bus_ssNoSynth_2_aw_buffer_ff$D_IN = bus_split_2_doPut$wget[172:73] ;
  assign bus_ssNoSynth_2_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_enqueue ;
  assign bus_ssNoSynth_2_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_buffer_dequeue ;
  assign bus_ssNoSynth_2_aw_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_2_aw_buffer_firstValid
  assign bus_ssNoSynth_2_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_2_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_2_aw_dropFlit ;

  // submodule bus_ssNoSynth_2_w_buffer_ff
  assign bus_ssNoSynth_2_w_buffer_ff$D_IN = bus_split_2_doPut$wget[72:0] ;
  assign bus_ssNoSynth_2_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_enqueue ;
  assign bus_ssNoSynth_2_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_buffer_dequeue ;
  assign bus_ssNoSynth_2_w_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_2_w_buffer_firstValid
  assign bus_ssNoSynth_2_w_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_2_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_2_w_dropFlit ;

  // submodule bus_ssNoSynth_3_ar_buffer_ff
  assign bus_ssNoSynth_3_ar_buffer_ff$D_IN =
	     bus_ssNoSynth_3_ar_buffer_enqw$wget ;
  assign bus_ssNoSynth_3_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_3_ar_buffer_enqueue ;
  assign bus_ssNoSynth_3_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_3_ar_buffer_dequeue ;
  assign bus_ssNoSynth_3_ar_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_3_ar_buffer_firstValid
  assign bus_ssNoSynth_3_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_3_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_3_ar_dropFlit ;

  // submodule bus_ssNoSynth_3_aw_buffer_ff
  assign bus_ssNoSynth_3_aw_buffer_ff$D_IN = bus_split_3_doPut$wget[172:73] ;
  assign bus_ssNoSynth_3_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_3_aw_buffer_enqueue ;
  assign bus_ssNoSynth_3_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_3_aw_buffer_dequeue ;
  assign bus_ssNoSynth_3_aw_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_3_aw_buffer_firstValid
  assign bus_ssNoSynth_3_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_3_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_3_aw_dropFlit ;

  // submodule bus_ssNoSynth_3_w_buffer_ff
  assign bus_ssNoSynth_3_w_buffer_ff$D_IN = bus_split_3_doPut$wget[72:0] ;
  assign bus_ssNoSynth_3_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_bus_ssNoSynth_3_w_buffer_enqueue ;
  assign bus_ssNoSynth_3_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_bus_ssNoSynth_3_w_buffer_dequeue ;
  assign bus_ssNoSynth_3_w_buffer_ff$CLR = 1'b0 ;

  // submodule bus_ssNoSynth_3_w_buffer_firstValid
  assign bus_ssNoSynth_3_w_buffer_firstValid$D_IN = 1'd1 ;
  assign bus_ssNoSynth_3_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_bus_ssNoSynth_3_w_dropFlit ;

  // submodule core
  assign core$core_external_interrupt_sources_0_m_interrupt_req_set_not_clear =
	     uart0$intr ;
  assign core$core_external_interrupt_sources_10_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_11_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_12_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_13_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_14_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_15_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_1_m_interrupt_req_set_not_clear =
	     rg_aws_host_to_hw_interrupt ;
  assign core$core_external_interrupt_sources_2_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_3_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_4_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_5_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_6_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_7_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_8_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$core_external_interrupt_sources_9_m_interrupt_req_set_not_clear =
	     1'd0 ;
  assign core$cpu_dmem_master_arready = bus_msNoSynth_1_ar_dwReady$whas ;
  assign core$cpu_dmem_master_awready = CAN_FIRE_RL_bus_merged_1_genFirst ;
  assign core$cpu_dmem_master_bid =
	     bus_msNoSynth_1_b_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_b_buffer_ff$D_OUT[7:2] :
	       bus_msNoSynth_1_b_buffer_enqw$wget[7:2] ;
  assign core$cpu_dmem_master_bresp =
	     bus_msNoSynth_1_b_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_b_buffer_ff$D_OUT[1:0] :
	       bus_msNoSynth_1_b_buffer_enqw$wget[1:0] ;
  assign core$cpu_dmem_master_rdata =
	     bus_msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_r_buffer_ff$D_OUT[66:3] :
	       bus_msNoSynth_1_r_buffer_enqw$wget[66:3] ;
  assign core$cpu_dmem_master_rid =
	     bus_msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_r_buffer_ff$D_OUT[72:67] :
	       bus_msNoSynth_1_r_buffer_enqw$wget[72:67] ;
  assign core$cpu_dmem_master_rlast =
	     bus_msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_r_buffer_ff$D_OUT[0] :
	       bus_msNoSynth_1_r_buffer_enqw$wget[0] ;
  assign core$cpu_dmem_master_rresp =
	     bus_msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_1_r_buffer_ff$D_OUT[2:1] :
	       bus_msNoSynth_1_r_buffer_enqw$wget[2:1] ;
  assign core$cpu_dmem_master_wready = bus_msNoSynth_1_w_dwReady$whas ;
  assign core$cpu_imem_master_arready = bus_msNoSynth_0_ar_dwReady$whas ;
  assign core$cpu_imem_master_awready = CAN_FIRE_RL_bus_merged_0_genFirst ;
  assign core$cpu_imem_master_bid =
	     bus_msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_b_buffer_ff$D_OUT[7:2] :
	       bus_msNoSynth_0_b_buffer_enqw$wget[7:2] ;
  assign core$cpu_imem_master_bresp =
	     bus_msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_b_buffer_ff$D_OUT[1:0] :
	       bus_msNoSynth_0_b_buffer_enqw$wget[1:0] ;
  assign core$cpu_imem_master_rdata =
	     bus_msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_r_buffer_ff$D_OUT[66:3] :
	       bus_msNoSynth_0_r_buffer_enqw$wget[66:3] ;
  assign core$cpu_imem_master_rid =
	     bus_msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_r_buffer_ff$D_OUT[72:67] :
	       bus_msNoSynth_0_r_buffer_enqw$wget[72:67] ;
  assign core$cpu_imem_master_rlast =
	     bus_msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_r_buffer_ff$D_OUT[0] :
	       bus_msNoSynth_0_r_buffer_enqw$wget[0] ;
  assign core$cpu_imem_master_rresp =
	     bus_msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       bus_msNoSynth_0_r_buffer_ff$D_OUT[2:1] :
	       bus_msNoSynth_0_r_buffer_enqw$wget[2:1] ;
  assign core$cpu_imem_master_wready = bus_msNoSynth_0_w_dwReady$whas ;
  assign core$cpu_reset_server_request_put = 1'd1 ;
  assign core$nmi_req_set_not_clear = 1'd0 ;
  assign core$set_verbosity_logdelay = ma_set_verbosity_logdelay1 ;
  assign core$set_verbosity_verbosity = ma_set_verbosity_verbosity1 ;
  assign core$EN_set_verbosity = EN_ma_set_verbosity ;
  assign core$EN_cpu_reset_server_request_put = MUX_rg_state$write_1__SEL_1 ;
  assign core$EN_cpu_reset_server_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign core$cpu_imem_master_bvalid =
	     CAN_FIRE_RL_bus_msNoSynth_0_b_forwardFlit ;
  assign core$cpu_imem_master_rvalid =
	     CAN_FIRE_RL_bus_msNoSynth_0_r_forwardFlit ;
  assign core$cpu_dmem_master_bvalid =
	     CAN_FIRE_RL_bus_msNoSynth_1_b_forwardFlit ;
  assign core$cpu_dmem_master_rvalid =
	     CAN_FIRE_RL_bus_msNoSynth_1_r_forwardFlit ;

  // submodule mem0_controller
  assign mem0_controller$ma_set_addr_map_addr_base =
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign mem0_controller$ma_set_addr_map_addr_lim =
	     soc_map$m_mem0_controller_addr_range[127:64] +
	     soc_map$m_mem0_controller_addr_range[63:0] ;
  assign mem0_controller$ma_set_watch_tohost_tohost_addr =
	     ma_set_watch_tohost_tohost_addr ;
  assign mem0_controller$ma_set_watch_tohost_watch_tohost =
	     ma_set_watch_tohost_watch_tohost ;
  assign mem0_controller$slave_araddr =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[92:29] :
	       mem_ar_buffer_enqw$wget[92:29] ;
  assign mem0_controller$slave_arburst =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[17:16] :
	       mem_ar_buffer_enqw$wget[17:16] ;
  assign mem0_controller$slave_arcache =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[14:11] :
	       mem_ar_buffer_enqw$wget[14:11] ;
  assign mem0_controller$slave_arid =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[107:93] :
	       mem_ar_buffer_enqw$wget[107:93] ;
  assign mem0_controller$slave_arlen =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[28:21] :
	       mem_ar_buffer_enqw$wget[28:21] ;
  assign mem0_controller$slave_arlock =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[15] :
	       mem_ar_buffer_enqw$wget[15] ;
  assign mem0_controller$slave_arprot =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[10:8] :
	       mem_ar_buffer_enqw$wget[10:8] ;
  assign mem0_controller$slave_arqos =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[7:4] :
	       mem_ar_buffer_enqw$wget[7:4] ;
  assign mem0_controller$slave_arregion =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[3:0] :
	       mem_ar_buffer_enqw$wget[3:0] ;
  assign mem0_controller$slave_arsize =
	     mem_ar_buffer_ff$EMPTY_N ?
	       mem_ar_buffer_ff$D_OUT[20:18] :
	       mem_ar_buffer_enqw$wget[20:18] ;
  assign mem0_controller$slave_awaddr =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[92:29] :
	       mem_aw_buffer_enqw$wget[92:29] ;
  assign mem0_controller$slave_awburst =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[17:16] :
	       mem_aw_buffer_enqw$wget[17:16] ;
  assign mem0_controller$slave_awcache =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[14:11] :
	       mem_aw_buffer_enqw$wget[14:11] ;
  assign mem0_controller$slave_awid =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[107:93] :
	       mem_aw_buffer_enqw$wget[107:93] ;
  assign mem0_controller$slave_awlen =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[28:21] :
	       mem_aw_buffer_enqw$wget[28:21] ;
  assign mem0_controller$slave_awlock =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[15] :
	       mem_aw_buffer_enqw$wget[15] ;
  assign mem0_controller$slave_awprot =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[10:8] :
	       mem_aw_buffer_enqw$wget[10:8] ;
  assign mem0_controller$slave_awqos =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[7:4] :
	       mem_aw_buffer_enqw$wget[7:4] ;
  assign mem0_controller$slave_awregion =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[3:0] :
	       mem_aw_buffer_enqw$wget[3:0] ;
  assign mem0_controller$slave_awsize =
	     mem_aw_buffer_ff$EMPTY_N ?
	       mem_aw_buffer_ff$D_OUT[20:18] :
	       mem_aw_buffer_enqw$wget[20:18] ;
  assign mem0_controller$slave_bready = CAN_FIRE_RL_mkConnectionGetPut_7 ;
  assign mem0_controller$slave_rready = CAN_FIRE_RL_mkConnectionGetPut_9 ;
  assign mem0_controller$slave_wdata =
	     mem_w_buffer_ff$EMPTY_N ?
	       mem_w_buffer_ff$D_OUT[72:9] :
	       mem0_controller_axi4_deburster_outShim_wff$D_OUT[72:9] ;
  assign mem0_controller$slave_wlast =
	     mem_w_buffer_ff$EMPTY_N ?
	       mem_w_buffer_ff$D_OUT[0] :
	       mem0_controller_axi4_deburster_outShim_wff$D_OUT[0] ;
  assign mem0_controller$slave_wstrb =
	     mem_w_buffer_ff$EMPTY_N ?
	       mem_w_buffer_ff$D_OUT[8:1] :
	       mem0_controller_axi4_deburster_outShim_wff$D_OUT[8:1] ;
  assign mem0_controller$to_ddr4_arready = to_ddr4_arready ;
  assign mem0_controller$to_ddr4_awready = to_ddr4_awready ;
  assign mem0_controller$to_ddr4_bid = to_ddr4_bid ;
  assign mem0_controller$to_ddr4_bresp = to_ddr4_bresp ;
  assign mem0_controller$to_ddr4_rdata = to_ddr4_rdata ;
  assign mem0_controller$to_ddr4_rid = to_ddr4_rid ;
  assign mem0_controller$to_ddr4_rlast = to_ddr4_rlast ;
  assign mem0_controller$to_ddr4_rresp = to_ddr4_rresp ;
  assign mem0_controller$to_ddr4_wready = to_ddr4_wready ;
  assign mem0_controller$slave_awvalid = CAN_FIRE_RL_mem_aw_forwardFlit ;
  assign mem0_controller$slave_wvalid = CAN_FIRE_RL_mem_w_forwardFlit ;
  assign mem0_controller$slave_arvalid = CAN_FIRE_RL_mem_ar_forwardFlit ;
  assign mem0_controller$to_ddr4_bvalid = to_ddr4_bvalid ;
  assign mem0_controller$to_ddr4_rvalid = to_ddr4_rvalid ;
  assign mem0_controller$EN_ma_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign mem0_controller$EN_ma_set_watch_tohost = EN_ma_set_watch_tohost ;
  assign mem0_controller$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule mem0_controller_axi4_deburster_countWriteRspFF
  assign mem0_controller_axi4_deburster_countWriteRspFF$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req &&
	     mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$DEQ =
	     WILL_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp &&
	     mem0_controller_axi4_deburster_countWriteRspFF_ETC___d234 ;
  assign mem0_controller_axi4_deburster_countWriteRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_arff
  assign mem0_controller_axi4_deburster_inShim_arff$D_IN =
	     ug_mem0_slave_u_ar_putWire$wget ;
  assign mem0_controller_axi4_deburster_inShim_arff$ENQ =
	     CAN_FIRE_RL_ug_mem0_slave_u_ar_doPut ;
  assign mem0_controller_axi4_deburster_inShim_arff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAR ;
  assign mem0_controller_axi4_deburster_inShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_awff
  assign mem0_controller_axi4_deburster_inShim_awff$D_IN =
	     ug_mem0_slave_u_aw_putWire$wget ;
  assign mem0_controller_axi4_deburster_inShim_awff$ENQ =
	     CAN_FIRE_RL_ug_mem0_slave_u_aw_doPut ;
  assign mem0_controller_axi4_deburster_inShim_awff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeAW ;
  assign mem0_controller_axi4_deburster_inShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_bff
  assign mem0_controller_axi4_deburster_inShim_bff$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_bff_rv$port1__read[8:0] ;
  assign mem0_controller_axi4_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB ;
  assign mem0_controller_axi4_deburster_inShim_bff$DEQ =
	     CAN_FIRE_RL_ug_mem0_slave_u_b_doDrop ;
  assign mem0_controller_axi4_deburster_inShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_rff
  assign mem0_controller_axi4_deburster_inShim_rff$D_IN =
	     mem0_controller_axi4_deburster_inSerial_shim_rff_rv$port1__read[73:0] ;
  assign mem0_controller_axi4_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR ;
  assign mem0_controller_axi4_deburster_inShim_rff$DEQ =
	     CAN_FIRE_RL_ug_mem0_slave_u_r_doDrop ;
  assign mem0_controller_axi4_deburster_inShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_inShim_wff
  assign mem0_controller_axi4_deburster_inShim_wff$D_IN =
	     ug_mem0_slave_u_w_putWire$wget ;
  assign mem0_controller_axi4_deburster_inShim_wff$ENQ =
	     CAN_FIRE_RL_ug_mem0_slave_u_w_doPut ;
  assign mem0_controller_axi4_deburster_inShim_wff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeW ;
  assign mem0_controller_axi4_deburster_inShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_lastReadRspFF
  assign mem0_controller_axi4_deburster_lastReadRspFF$D_IN =
	     mem0_controller_axi4_deburster_readsSent_port0_ETC___d267 ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;
  assign mem0_controller_axi4_deburster_lastReadRspFF$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_arff
  assign mem0_controller_axi4_deburster_outShim_arff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[99:93],
	       x_araddr__h14484,
	       8'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign mem0_controller_axi4_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_req ;
  assign mem0_controller_axi4_deburster_outShim_arff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_8 ;
  assign mem0_controller_axi4_deburster_outShim_arff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_awff
  assign mem0_controller_axi4_deburster_outShim_awff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[99:93],
	       x_awaddr__h13715,
	       8'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign mem0_controller_axi4_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;
  assign mem0_controller_axi4_deburster_outShim_awff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;
  assign mem0_controller_axi4_deburster_outShim_awff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_bff
  assign mem0_controller_axi4_deburster_outShim_bff$D_IN =
	     { mem0_controller$slave_bid[6:0], mem0_controller$slave_bresp } ;
  assign mem0_controller_axi4_deburster_outShim_bff$ENQ =
	     CAN_FIRE_RL_mkConnectionGetPut_7 ;
  assign mem0_controller_axi4_deburster_outShim_bff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_handle_write_rsp ;
  assign mem0_controller_axi4_deburster_outShim_bff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_rff
  assign mem0_controller_axi4_deburster_outShim_rff$D_IN =
	     { mem0_controller$slave_rid[6:0],
	       mem0_controller$slave_rdata,
	       mem0_controller$slave_rresp,
	       mem0_controller$slave_rlast } ;
  assign mem0_controller_axi4_deburster_outShim_rff$ENQ =
	     CAN_FIRE_RL_mkConnectionGetPut_9 ;
  assign mem0_controller_axi4_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_read_rsp ;
  assign mem0_controller_axi4_deburster_outShim_rff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem0_controller_axi4_deburster_outShim_wff
  assign mem0_controller_axi4_deburster_outShim_wff$D_IN =
	     { mem0_controller_axi4_deburster_inSerial_shim_wff_rv$port1__read[72:1],
	       1'd1 } ;
  assign mem0_controller_axi4_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_mem0_controller_axi4_deburster_forward_write_req ;
  assign mem0_controller_axi4_deburster_outShim_wff$DEQ =
	     CAN_FIRE_RL_mkConnectionGetPut_6 ;
  assign mem0_controller_axi4_deburster_outShim_wff$CLR =
	     MUX_rg_state$write_1__SEL_1 ;

  // submodule mem_ar_buffer_ff
  assign mem_ar_buffer_ff$D_IN = mem_ar_buffer_enqw$wget ;
  assign mem_ar_buffer_ff$ENQ = CAN_FIRE_RL_mem_ar_buffer_enqueue ;
  assign mem_ar_buffer_ff$DEQ = CAN_FIRE_RL_mem_ar_buffer_dequeue ;
  assign mem_ar_buffer_ff$CLR = 1'b0 ;

  // submodule mem_ar_buffer_firstValid
  assign mem_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign mem_ar_buffer_firstValid$EN = CAN_FIRE_RL_mem_ar_dropFlit ;

  // submodule mem_aw_buffer_ff
  assign mem_aw_buffer_ff$D_IN = mem_aw_buffer_enqw$wget ;
  assign mem_aw_buffer_ff$ENQ = CAN_FIRE_RL_mem_aw_buffer_enqueue ;
  assign mem_aw_buffer_ff$DEQ = CAN_FIRE_RL_mem_aw_buffer_dequeue ;
  assign mem_aw_buffer_ff$CLR = 1'b0 ;

  // submodule mem_aw_buffer_firstValid
  assign mem_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign mem_aw_buffer_firstValid$EN = CAN_FIRE_RL_mem_aw_dropFlit ;

  // submodule mem_w_buffer_ff
  assign mem_w_buffer_ff$D_IN =
	     mem0_controller_axi4_deburster_outShim_wff$D_OUT ;
  assign mem_w_buffer_ff$ENQ = CAN_FIRE_RL_mem_w_buffer_enqueue ;
  assign mem_w_buffer_ff$DEQ = CAN_FIRE_RL_mem_w_buffer_dequeue ;
  assign mem_w_buffer_ff$CLR = 1'b0 ;

  // submodule mem_w_buffer_firstValid
  assign mem_w_buffer_firstValid$D_IN = 1'd1 ;
  assign mem_w_buffer_firstValid$EN = CAN_FIRE_RL_mem_w_dropFlit ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule uart0
  assign uart0$put_from_console_put = put_from_console_put ;
  assign uart0$set_addr_map_addr_base =
	     soc_map$m_uart16550_0_addr_range[127:64] ;
  assign uart0$set_addr_map_addr_lim =
	     soc_map$m_uart16550_0_addr_range[127:64] +
	     soc_map$m_uart16550_0_addr_range[63:0] ;
  assign uart0$slave_araddr =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[92:29] :
	       uart0_slave_ar_buffer_enqw$wget[92:29] ;
  assign uart0$slave_arburst =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[17:16] :
	       uart0_slave_ar_buffer_enqw$wget[17:16] ;
  assign uart0$slave_arcache =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[14:11] :
	       uart0_slave_ar_buffer_enqw$wget[14:11] ;
  assign uart0$slave_arid =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[99:93] :
	       uart0_slave_ar_buffer_enqw$wget[99:93] ;
  assign uart0$slave_arlen =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[28:21] :
	       uart0_slave_ar_buffer_enqw$wget[28:21] ;
  assign uart0$slave_arlock =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[15] :
	       uart0_slave_ar_buffer_enqw$wget[15] ;
  assign uart0$slave_arprot =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[10:8] :
	       uart0_slave_ar_buffer_enqw$wget[10:8] ;
  assign uart0$slave_arqos =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[7:4] :
	       uart0_slave_ar_buffer_enqw$wget[7:4] ;
  assign uart0$slave_arregion =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[3:0] :
	       uart0_slave_ar_buffer_enqw$wget[3:0] ;
  assign uart0$slave_arsize =
	     uart0_slave_ar_buffer_ff$EMPTY_N ?
	       uart0_slave_ar_buffer_ff$D_OUT[20:18] :
	       uart0_slave_ar_buffer_enqw$wget[20:18] ;
  assign uart0$slave_awaddr =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[92:29] :
	       uart0_slave_aw_buffer_enqw$wget[92:29] ;
  assign uart0$slave_awburst =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[17:16] :
	       uart0_slave_aw_buffer_enqw$wget[17:16] ;
  assign uart0$slave_awcache =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[14:11] :
	       uart0_slave_aw_buffer_enqw$wget[14:11] ;
  assign uart0$slave_awid =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[99:93] :
	       uart0_slave_aw_buffer_enqw$wget[99:93] ;
  assign uart0$slave_awlen =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[28:21] :
	       uart0_slave_aw_buffer_enqw$wget[28:21] ;
  assign uart0$slave_awlock =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[15] :
	       uart0_slave_aw_buffer_enqw$wget[15] ;
  assign uart0$slave_awprot =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[10:8] :
	       uart0_slave_aw_buffer_enqw$wget[10:8] ;
  assign uart0$slave_awqos =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[7:4] :
	       uart0_slave_aw_buffer_enqw$wget[7:4] ;
  assign uart0$slave_awregion =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[3:0] :
	       uart0_slave_aw_buffer_enqw$wget[3:0] ;
  assign uart0$slave_awsize =
	     uart0_slave_aw_buffer_ff$EMPTY_N ?
	       uart0_slave_aw_buffer_ff$D_OUT[20:18] :
	       uart0_slave_aw_buffer_enqw$wget[20:18] ;
  assign uart0$slave_bready = uart0_slave_b_dwReady$whas ;
  assign uart0$slave_rready = uart0_slave_r_dwReady$whas ;
  assign uart0$slave_wdata =
	     uart0_slave_w_buffer_ff$EMPTY_N ?
	       uart0_slave_w_buffer_ff$D_OUT[73:10] :
	       uart0_slave_w_buffer_enqw$wget[73:10] ;
  assign uart0$slave_wlast =
	     uart0_slave_w_buffer_ff$EMPTY_N ?
	       uart0_slave_w_buffer_ff$D_OUT[1] :
	       uart0_slave_w_buffer_enqw$wget[1] ;
  assign uart0$slave_wstrb =
	     uart0_slave_w_buffer_ff$EMPTY_N ?
	       uart0_slave_w_buffer_ff$D_OUT[9:2] :
	       uart0_slave_w_buffer_enqw$wget[9:2] ;
  assign uart0$slave_wuser =
	     uart0_slave_w_buffer_ff$EMPTY_N ?
	       uart0_slave_w_buffer_ff$D_OUT[0] :
	       uart0_slave_w_buffer_enqw$wget[0] ;
  assign uart0$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_1 ;
  assign uart0$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign uart0$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign uart0$slave_awvalid = CAN_FIRE_RL_uart0_slave_aw_forwardFlit ;
  assign uart0$slave_wvalid = CAN_FIRE_RL_uart0_slave_w_forwardFlit ;
  assign uart0$slave_arvalid = CAN_FIRE_RL_uart0_slave_ar_forwardFlit ;
  assign uart0$EN_get_to_console_get = EN_get_to_console_get ;
  assign uart0$EN_put_from_console_put = EN_put_from_console_put ;

  // submodule uart0_slave_ar_buffer_ff
  assign uart0_slave_ar_buffer_ff$D_IN = uart0_slave_ar_buffer_enqw$wget ;
  assign uart0_slave_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_uart0_slave_ar_buffer_enqueue ;
  assign uart0_slave_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_uart0_slave_ar_buffer_dequeue ;
  assign uart0_slave_ar_buffer_ff$CLR = 1'b0 ;

  // submodule uart0_slave_ar_buffer_firstValid
  assign uart0_slave_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign uart0_slave_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_uart0_slave_ar_dropFlit ;

  // submodule uart0_slave_aw_buffer_ff
  assign uart0_slave_aw_buffer_ff$D_IN = uart0_slave_aw_buffer_enqw$wget ;
  assign uart0_slave_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_uart0_slave_aw_buffer_enqueue ;
  assign uart0_slave_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_uart0_slave_aw_buffer_dequeue ;
  assign uart0_slave_aw_buffer_ff$CLR = 1'b0 ;

  // submodule uart0_slave_aw_buffer_firstValid
  assign uart0_slave_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign uart0_slave_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_uart0_slave_aw_dropFlit ;

  // submodule uart0_slave_w_buffer_ff
  assign uart0_slave_w_buffer_ff$D_IN = uart0_slave_w_buffer_enqw$wget ;
  assign uart0_slave_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_uart0_slave_w_buffer_enqueue ;
  assign uart0_slave_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_uart0_slave_w_buffer_dequeue ;
  assign uart0_slave_w_buffer_ff$CLR = 1'b0 ;

  // submodule uart0_slave_w_buffer_firstValid
  assign uart0_slave_w_buffer_firstValid$D_IN = 1'd1 ;
  assign uart0_slave_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_uart0_slave_w_dropFlit ;

  // remaining internal signals
  assign IF_NOT_IF_bus_merged_0_flitLeft_405_EQ_0_406_T_ETC___d1594 =
	     (!IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1585 &&
	      IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1589 &&
	      (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1576 ||
	       !IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1580)) ?
	       3'd1 :
	       3'd0 ;
  assign IF_NOT_IF_bus_merged_0_flitLeft_405_EQ_0_406_T_ETC___d1595 =
	     ((!IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1576 &&
	       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1580) ?
		3'd1 :
		3'd0) +
	     IF_NOT_IF_bus_merged_0_flitLeft_405_EQ_0_406_T_ETC___d1594 ;
  assign IF_NOT_IF_bus_merged_0_flitLeft_405_EQ_0_406_T_ETC___d1623 =
	     IF_NOT_IF_bus_merged_0_flitLeft_405_EQ_0_406_T_ETC___d1595 +
	     (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1607 ?
		3'd1 :
		3'd0) +
	     ((core$cpu_imem_master_awaddr >=
	       soc_map$m_host_access_addr_range[127:64] &&
	       x__h45623 < soc_map$m_host_access_addr_range[63:0] &&
	       IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1619) ?
		3'd1 :
		3'd0) ;
  assign IF_NOT_IF_bus_merged_1_flitLeft_425_EQ_0_426_T_ETC___d1721 =
	     (!IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1713 &&
	      IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1716 &&
	      (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1707 ||
	       !IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1710)) ?
	       3'd1 :
	       3'd0 ;
  assign IF_NOT_IF_bus_merged_1_flitLeft_425_EQ_0_426_T_ETC___d1722 =
	     ((!IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1707 &&
	       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1710) ?
		3'd1 :
		3'd0) +
	     IF_NOT_IF_bus_merged_1_flitLeft_425_EQ_0_426_T_ETC___d1721 ;
  assign IF_NOT_IF_bus_merged_1_flitLeft_425_EQ_0_426_T_ETC___d1744 =
	     IF_NOT_IF_bus_merged_1_flitLeft_425_EQ_0_426_T_ETC___d1722 +
	     (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1731 ?
		3'd1 :
		3'd0) +
	     ((core$cpu_dmem_master_awaddr >=
	       soc_map$m_host_access_addr_range[127:64] &&
	       x__h49311 < soc_map$m_host_access_addr_range[63:0] &&
	       IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1740) ?
		3'd1 :
		3'd0) ;
  assign IF_NOT_bus_1_ifcs_0_innerRoute_first__720_BIT__ETC___d2751 =
	     (!bus_1_ifcs_0_innerRoute$D_OUT[1] ||
	      !bus_ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       ((!bus_1_ifcs_0_innerRoute$D_OUT[2] ||
		 !bus_ssNoSynth_2_ar_buffer_ff$FULL_N) ?
		  bus_1_ifcs_0_innerRoute$D_OUT[3] &&
		  bus_ssNoSynth_3_ar_buffer_ff$FULL_N :
		  bus_1_ifcs_0_innerRoute$D_OUT[2]) :
	       bus_1_ifcs_0_innerRoute$D_OUT[1] ;
  assign IF_NOT_bus_1_ifcs_1_innerRoute_first__758_BIT__ETC___d2771 =
	     (!bus_1_ifcs_1_innerRoute$D_OUT[1] ||
	      !bus_ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       ((!bus_1_ifcs_1_innerRoute$D_OUT[2] ||
		 !bus_ssNoSynth_2_ar_buffer_ff$FULL_N) ?
		  bus_1_ifcs_1_innerRoute$D_OUT[3] &&
		  bus_ssNoSynth_3_ar_buffer_ff$FULL_N :
		  bus_1_ifcs_1_innerRoute$D_OUT[2]) :
	       bus_1_ifcs_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_bus_ifcs_0_innerRoute_first__888_BIT_1__ETC___d1919 =
	     (!bus_ifcs_0_innerRoute$D_OUT[1] ||
	      !IF_bus_split_1_flitLeft_478_EQ_0_479_THEN_bus__ETC___d1880) ?
	       ((!bus_ifcs_0_innerRoute$D_OUT[2] ||
		 !IF_bus_split_2_flitLeft_507_EQ_0_508_THEN_bus__ETC___d1881) ?
		  bus_ifcs_0_innerRoute$D_OUT[3] &&
		  IF_bus_split_3_flitLeft_536_EQ_0_537_THEN_bus__ETC___d1882 :
		  bus_ifcs_0_innerRoute$D_OUT[2]) :
	       bus_ifcs_0_innerRoute$D_OUT[1] ;
  assign IF_NOT_bus_ifcs_1_innerRoute_first__926_BIT_1__ETC___d1939 =
	     (!bus_ifcs_1_innerRoute$D_OUT[1] ||
	      !IF_bus_split_1_flitLeft_478_EQ_0_479_THEN_bus__ETC___d1880) ?
	       ((!bus_ifcs_1_innerRoute$D_OUT[2] ||
		 !IF_bus_split_2_flitLeft_507_EQ_0_508_THEN_bus__ETC___d1881) ?
		  bus_ifcs_1_innerRoute$D_OUT[3] &&
		  IF_bus_split_3_flitLeft_536_EQ_0_537_THEN_bus__ETC___d1882 :
		  bus_ifcs_1_innerRoute$D_OUT[2]) :
	       bus_ifcs_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_core_cpu_dmem_master_ar_araddr__524_ULT_ETC___d2539 =
	     (!core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2531 &&
	      core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2534 &&
	      (core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2525 ||
	       !core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2528)) ?
	       3'd1 :
	       3'd0 ;
  assign IF_NOT_core_cpu_dmem_master_ar_araddr__524_ULT_ETC___d2540 =
	     ((!core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2525 &&
	       core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2528) ?
		3'd1 :
		3'd0) +
	     IF_NOT_core_cpu_dmem_master_ar_araddr__524_ULT_ETC___d2539 ;
  assign IF_NOT_core_cpu_dmem_master_ar_araddr__524_ULT_ETC___d2562 =
	     IF_NOT_core_cpu_dmem_master_ar_araddr__524_ULT_ETC___d2540 +
	     (core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2549 ?
		3'd1 :
		3'd0) +
	     ((core$cpu_dmem_master_araddr >=
	       soc_map$m_host_access_addr_range[127:64] &&
	       x__h92464 < soc_map$m_host_access_addr_range[63:0] &&
	       core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2558) ?
		3'd1 :
		3'd0) ;
  assign IF_NOT_core_cpu_imem_master_ar_araddr__414_ULT_ETC___d2429 =
	     (!core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2421 &&
	      core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2424 &&
	      (core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2415 ||
	       !core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2418)) ?
	       3'd1 :
	       3'd0 ;
  assign IF_NOT_core_cpu_imem_master_ar_araddr__414_ULT_ETC___d2430 =
	     ((!core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2415 &&
	       core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2418) ?
		3'd1 :
		3'd0) +
	     IF_NOT_core_cpu_imem_master_ar_araddr__414_ULT_ETC___d2429 ;
  assign IF_NOT_core_cpu_imem_master_ar_araddr__414_ULT_ETC___d2452 =
	     IF_NOT_core_cpu_imem_master_ar_araddr__414_ULT_ETC___d2430 +
	     (core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2439 ?
		3'd1 :
		3'd0) +
	     ((core$cpu_imem_master_araddr >=
	       soc_map$m_host_access_addr_range[127:64] &&
	       x__h89123 < soc_map$m_host_access_addr_range[63:0] &&
	       core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2448) ?
		3'd1 :
		3'd0) ;
  assign IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3064 =
	     SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3045 ?
	       x__h117667 | y__h117668 :
	       bus_1_1_arbiter_lastSelect ;
  assign IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3072 =
	     SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3045 ?
	       x__h117906 | y__h117907 :
	       bus_1_1_arbiter_lastSelect_1 ;
  assign IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3080 =
	     SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3045 ?
	       x__h118126 | y__h118127 :
	       bus_1_1_arbiter_lastSelect_2 ;
  assign IF_SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_ETC___d3088 =
	     SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3045 ?
	       x__h118352 | y__h118353 :
	       bus_1_1_arbiter_firstHot ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2242 =
	     SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2223 ?
	       x__h77791 | y__h77792 :
	       bus_1_arbiter_lastSelect ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2250 =
	     SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2223 ?
	       x__h78030 | y__h78031 :
	       bus_1_arbiter_lastSelect_1 ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2258 =
	     SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2223 ?
	       x__h78250 | y__h78251 :
	       bus_1_arbiter_lastSelect_2 ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_ETC___d2266 =
	     SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2223 ?
	       x__h78476 | y__h78477 :
	       bus_1_arbiter_firstHot ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_ETC___d2807 =
	     (SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_0__ETC___d2791 ||
	      SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_0_78_ETC___d2795) ?
	       x__h103022 | y__h103023 :
	       bus_1_arbiter_lastSelect_3 ;
  assign IF_SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_ETC___d2811 =
	     (SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_0__ETC___d2791 ||
	      SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_0_78_ETC___d2795) ?
	       x__h103163 | y__h103164 :
	       bus_1_arbiter_firstHot_1 ;
  assign IF_SEXT_bus_arbiter_lastSelect_951_952_BIT_0_9_ETC___d1975 =
	     (SEXT_bus_arbiter_lastSelect_951_952_BIT_0_953__ETC___d1959 ||
	      SEXT_bus_arbiter_firstHot_955_956_BIT_0_957_AN_ETC___d1963) ?
	       x__h60002 | y__h60003 :
	       bus_arbiter_lastSelect ;
  assign IF_SEXT_bus_arbiter_lastSelect_951_952_BIT_0_9_ETC___d1979 =
	     (SEXT_bus_arbiter_lastSelect_951_952_BIT_0_953__ETC___d1959 ||
	      SEXT_bus_arbiter_firstHot_955_956_BIT_0_957_AN_ETC___d1963) ?
	       x__h60143 | y__h60144 :
	       bus_arbiter_firstHot ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_NOT_ETC___d1564 =
	     ((bus_merged_0_flitLeft == 8'd0) ?
		!core$cpu_imem_master_awvalid ||
		!core$cpu_imem_master_wvalid :
		!core$cpu_imem_master_wvalid) ||
	     bus_merged_0_flitLeft != 8'd0 ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_NOT_ETC___d1662 =
	     (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_NOT_ETC___d1564 ||
	      core$cpu_imem_master_awvalid) &&
	     (bus_merged_0_flitLeft != 8'd0 ||
	      !bus_ifcs_0_noRoute_inner_pendingReq &&
	      core$cpu_imem_master_awvalid) ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1557 =
	     (bus_merged_0_flitLeft == 8'd0) ?
	       core$cpu_imem_master_awvalid && core$cpu_imem_master_wvalid :
	       core$cpu_imem_master_wvalid ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1576 =
	     core$cpu_imem_master_awaddr <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1580 =
	     x__h45393 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1585 =
	     core$cpu_imem_master_awaddr <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1589 =
	     x__h45466 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1601 =
	     core$cpu_imem_master_awaddr <
	     soc_map$m_uart16550_0_addr_range[127:64] ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1605 =
	     x__h45550 < soc_map$m_uart16550_0_addr_range[63:0] ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1607 =
	     (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1576 ||
	      !IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1580) &&
	     (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1585 ||
	      !IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1589) &&
	     !IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1601 &&
	     IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1605 ;
  assign IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1619 =
	     (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1576 ||
	      !IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1580) &&
	     (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1585 ||
	      !IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1589) &&
	     (IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1601 ||
	      !IF_bus_merged_0_flitLeft_405_EQ_0_406_THEN_cor_ETC___d1605) ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_NOT_ETC___d1697 =
	     ((bus_merged_1_flitLeft == 8'd0) ?
		!core$cpu_dmem_master_awvalid ||
		!core$cpu_dmem_master_wvalid :
		!core$cpu_dmem_master_wvalid) ||
	     bus_merged_1_flitLeft != 8'd0 ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_NOT_ETC___d1783 =
	     (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_NOT_ETC___d1697 ||
	      core$cpu_dmem_master_awvalid) &&
	     (bus_merged_1_flitLeft != 8'd0 ||
	      !bus_ifcs_1_noRoute_inner_pendingReq &&
	      core$cpu_dmem_master_awvalid) ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1690 =
	     (bus_merged_1_flitLeft == 8'd0) ?
	       core$cpu_dmem_master_awvalid && core$cpu_dmem_master_wvalid :
	       core$cpu_dmem_master_wvalid ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1707 =
	     core$cpu_dmem_master_awaddr <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1710 =
	     x__h49111 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1713 =
	     core$cpu_dmem_master_awaddr <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1716 =
	     x__h49174 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1726 =
	     core$cpu_dmem_master_awaddr <
	     soc_map$m_uart16550_0_addr_range[127:64] ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1729 =
	     x__h49248 < soc_map$m_uart16550_0_addr_range[63:0] ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1731 =
	     (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1707 ||
	      !IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1710) &&
	     (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1713 ||
	      !IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1716) &&
	     !IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1726 &&
	     IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1729 ;
  assign IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1740 =
	     (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1707 ||
	      !IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1710) &&
	     (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1713 ||
	      !IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1716) &&
	     (IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1726 ||
	      !IF_bus_merged_1_flitLeft_425_EQ_0_426_THEN_cor_ETC___d1729) ;
  assign IF_bus_split_0_flitLeft_449_EQ_0_450_THEN_bus__ETC___d1879 =
	     (bus_split_0_flitLeft == 8'd0) ?
	       bus_ssNoSynth_0_aw_buffer_ff$FULL_N &&
	       bus_ssNoSynth_0_w_buffer_ff$FULL_N :
	       bus_ssNoSynth_0_w_buffer_ff$FULL_N ;
  assign IF_bus_split_1_flitLeft_478_EQ_0_479_THEN_bus__ETC___d1880 =
	     (bus_split_1_flitLeft == 8'd0) ?
	       bus_ssNoSynth_1_aw_buffer_ff$FULL_N &&
	       bus_ssNoSynth_1_w_buffer_ff$FULL_N :
	       bus_ssNoSynth_1_w_buffer_ff$FULL_N ;
  assign IF_bus_split_2_flitLeft_507_EQ_0_508_THEN_bus__ETC___d1881 =
	     (bus_split_2_flitLeft == 8'd0) ?
	       bus_ssNoSynth_2_aw_buffer_ff$FULL_N &&
	       bus_ssNoSynth_2_w_buffer_ff$FULL_N :
	       bus_ssNoSynth_2_w_buffer_ff$FULL_N ;
  assign IF_bus_split_3_flitLeft_536_EQ_0_537_THEN_bus__ETC___d1882 =
	     (bus_split_3_flitLeft == 8'd0) ?
	       bus_ssNoSynth_3_aw_buffer_ff$FULL_N &&
	       bus_ssNoSynth_3_w_buffer_ff$FULL_N :
	       bus_ssNoSynth_3_w_buffer_ff$FULL_N ;
  assign NOT_SEXT_bus_1_1_arbiter_lastSelect_996_997_BI_ETC___d3042 =
	     !SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3014 &&
	     !SEXT_bus_1_1_arbiter_lastSelect_1_000_001_BIT__ETC___d3022 &&
	     !SEXT_bus_1_1_arbiter_lastSelect_2_005_006_BIT__ETC___d3030 &&
	     !SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_0_01_ETC___d3038 ;
  assign NOT_SEXT_bus_1_arbiter_lastSelect_174_175_BIT__ETC___d2220 =
	     !SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2192 &&
	     !SEXT_bus_1_arbiter_lastSelect_1_178_179_BIT_0__ETC___d2200 &&
	     !SEXT_bus_1_arbiter_lastSelect_2_183_184_BIT_0__ETC___d2208 &&
	     !SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_189__ETC___d2216 ;
  assign SEXT_SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_ETC__q23 =
	     {2{SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_0_01_ETC___d3038}} ;
  assign SEXT_SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_ETC__q11 =
	     {2{SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_189__ETC___d2216}} ;
  assign SEXT_SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_ETC__q17 =
	     {2{SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_0_78_ETC___d2795}} ;
  assign SEXT_SEXT_bus_arbiter_firstHot_955_956_BIT_0_9_ETC__q3 =
	     {2{SEXT_bus_arbiter_firstHot_955_956_BIT_0_957_AN_ETC___d1963}} ;
  assign SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_0_01_ETC___d3038 =
	     x__h117081 | y__h117082 ;
  assign SEXT_bus_1_1_arbiter_firstHot__q19 = {2{bus_1_1_arbiter_firstHot}} ;
  assign SEXT_bus_1_1_arbiter_lastSelect_1_000_001_BIT__ETC___d3022 =
	     x__h116729 | y__h116730 ;
  assign SEXT_bus_1_1_arbiter_lastSelect_1__q21 =
	     {2{bus_1_1_arbiter_lastSelect_1}} ;
  assign SEXT_bus_1_1_arbiter_lastSelect_2_005_006_BIT__ETC___d3030 =
	     x__h116905 | y__h116906 ;
  assign SEXT_bus_1_1_arbiter_lastSelect_2__q22 =
	     {2{bus_1_1_arbiter_lastSelect_2}} ;
  assign SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3014 =
	     x__h116529 | y__h116530 ;
  assign SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3045 =
	     SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3014 ||
	     SEXT_bus_1_1_arbiter_lastSelect_1_000_001_BIT__ETC___d3022 ||
	     SEXT_bus_1_1_arbiter_lastSelect_2_005_006_BIT__ETC___d3030 ||
	     SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_0_01_ETC___d3038 ;
  assign SEXT_bus_1_1_arbiter_lastSelect__q20 =
	     {2{bus_1_1_arbiter_lastSelect}} ;
  assign SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_189__ETC___d2216 =
	     x__h77205 | y__h77206 ;
  assign SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_0_78_ETC___d2795 =
	     x__h102657 | y__h102658 ;
  assign SEXT_bus_1_arbiter_firstHot_1__q15 = {2{bus_1_arbiter_firstHot_1}} ;
  assign SEXT_bus_1_arbiter_firstHot__q7 = {2{bus_1_arbiter_firstHot}} ;
  assign SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2192 =
	     x__h76653 | y__h76654 ;
  assign SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2223 =
	     SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2192 ||
	     SEXT_bus_1_arbiter_lastSelect_1_178_179_BIT_0__ETC___d2200 ||
	     SEXT_bus_1_arbiter_lastSelect_2_183_184_BIT_0__ETC___d2208 ||
	     SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_189__ETC___d2216 ;
  assign SEXT_bus_1_arbiter_lastSelect_1_178_179_BIT_0__ETC___d2200 =
	     x__h76853 | y__h76854 ;
  assign SEXT_bus_1_arbiter_lastSelect_1__q9 =
	     {2{bus_1_arbiter_lastSelect_1}} ;
  assign SEXT_bus_1_arbiter_lastSelect_2_183_184_BIT_0__ETC___d2208 =
	     x__h77029 | y__h77030 ;
  assign SEXT_bus_1_arbiter_lastSelect_2__q10 =
	     {2{bus_1_arbiter_lastSelect_2}} ;
  assign SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_0__ETC___d2791 =
	     x__h102554 | y__h102555 ;
  assign SEXT_bus_1_arbiter_lastSelect_3__q16 =
	     {2{bus_1_arbiter_lastSelect_3}} ;
  assign SEXT_bus_1_arbiter_lastSelect__q8 = {2{bus_1_arbiter_lastSelect}} ;
  assign SEXT_bus_arbiter_firstHot_955_956_BIT_0_957_AN_ETC___d1963 =
	     x__h59637 | y__h59638 ;
  assign SEXT_bus_arbiter_firstHot__q1 = {2{bus_arbiter_firstHot}} ;
  assign SEXT_bus_arbiter_lastSelect_951_952_BIT_0_953__ETC___d1959 =
	     x__h59534 | y__h59535 ;
  assign SEXT_bus_arbiter_lastSelect__q2 = {2{bus_arbiter_lastSelect}} ;
  assign SEXT_x0061__q4 = {2{x__h60061}} ;
  assign SEXT_x03081__q18 = {2{x__h103081}} ;
  assign SEXT_x17730__q24 = {2{x__h117730}} ;
  assign SEXT_x17767__q25 = {2{x__h117767}} ;
  assign SEXT_x17802__q26 = {2{x__h117802}} ;
  assign SEXT_x7854__q12 = {2{x__h77854}} ;
  assign SEXT_x7891__q13 = {2{x__h77891}} ;
  assign SEXT_x7926__q14 = {2{x__h77926}} ;
  assign a_awid__h47114 = { 1'd0, core$cpu_imem_master_awid } ;
  assign a_awid__h50758 = { 1'd1, core$cpu_dmem_master_awid } ;
  assign boot_rom_axi4_deburster_countWriteRspFF_first__ETC___d96 =
	     boot_rom_axi4_deburster_countWriteRspFF$D_OUT <=
	     boot_rom_axi4_deburster_flitReceived ;
  assign boot_rom_axi4_deburster_inShim_bffD_OUT_BITS__ETC__q29 =
	     boot_rom_axi4_deburster_inShim_bff$D_OUT[8:2] ;
  assign boot_rom_axi4_deburster_inShim_rffD_OUT_BITS__ETC__q27 =
	     boot_rom_axi4_deburster_inShim_rff$D_OUT[73:67] ;
  assign boot_rom_axi4_deburster_readsSent_port0__read__ETC___d129 =
	     boot_rom_axi4_deburster_readsSent ==
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign bus_1_1_reqWires_0_whas__978_AND_bus_1_1_reqWi_ETC___d2992 =
	     CAN_FIRE_RL_bus_1_1_craftReq && bus_1_1_reqWires_0$wget ||
	     CAN_FIRE_RL_bus_1_1_craftReq_1 && bus_1_1_reqWires_1$wget ||
	     CAN_FIRE_RL_bus_1_1_craftReq_2 && bus_1_1_reqWires_2$wget ||
	     CAN_FIRE_RL_bus_1_1_craftReq_3 && bus_1_1_reqWires_3$wget ;
  assign bus_1_1_state_993_AND_bus_1_1_activeSource_0_1_ETC___d3127 =
	     bus_1_1_state && bus_1_1_activeSource_0 &&
	     bus_1_ifcs_0_routeBack$EMPTY_N &&
	     ((!bus_1_ifcs_0_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
		bus_1_ifcs_0_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
		bus_1_ifcs_0_routeBack$D_OUT[0]) ;
  assign bus_1_1_state_993_AND_bus_1_1_activeSource_1_1_ETC___d3163 =
	     bus_1_1_state && bus_1_1_activeSource_1 &&
	     bus_1_ifcs_1_routeBack$EMPTY_N &&
	     ((!bus_1_ifcs_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
		bus_1_ifcs_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
		bus_1_ifcs_1_routeBack$D_OUT[0]) ;
  assign bus_1_1_state_993_AND_bus_1_1_activeSource_2_1_ETC___d3199 =
	     bus_1_1_state && bus_1_1_activeSource_2 &&
	     bus_1_ifcs_2_routeBack$EMPTY_N &&
	     ((!bus_1_ifcs_2_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
		bus_1_ifcs_2_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
		bus_1_ifcs_2_routeBack$D_OUT[0]) ;
  assign bus_1_1_state_993_AND_bus_1_1_activeSource_3_2_ETC___d3235 =
	     bus_1_1_state && bus_1_1_activeSource_3 &&
	     bus_1_ifcs_3_routeBack$EMPTY_N &&
	     ((!bus_1_ifcs_3_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_1_ifcs_0_drainNoRouteResponse)) ?
		bus_1_ifcs_3_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_1_ifcs_1_drainNoRouteResponse :
		bus_1_ifcs_3_routeBack$D_OUT[0]) ;
  assign bus_1_reqWires_0_whas__156_AND_bus_1_reqWires__ETC___d2170 =
	     CAN_FIRE_RL_bus_1_craftReq && bus_1_reqWires_0$wget ||
	     CAN_FIRE_RL_bus_1_craftReq_1 && bus_1_reqWires_1$wget ||
	     CAN_FIRE_RL_bus_1_craftReq_2 && bus_1_reqWires_2$wget ||
	     CAN_FIRE_RL_bus_1_craftReq_3 && bus_1_reqWires_3$wget ;
  assign bus_1_state_171_AND_bus_1_activeSource_0_295_2_ETC___d2298 =
	     bus_1_state && bus_1_activeSource_0 &&
	     bus_ifcs_0_routeBack$EMPTY_N &&
	     ((!bus_ifcs_0_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
		bus_ifcs_0_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
		bus_ifcs_0_routeBack$D_OUT[0]) ;
  assign bus_1_state_171_AND_bus_1_activeSource_1_328_3_ETC___d2331 =
	     bus_1_state && bus_1_activeSource_1 &&
	     bus_ifcs_1_routeBack$EMPTY_N &&
	     ((!bus_ifcs_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
		bus_ifcs_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
		bus_ifcs_1_routeBack$D_OUT[0]) ;
  assign bus_1_state_171_AND_bus_1_activeSource_2_362_3_ETC___d2365 =
	     bus_1_state && bus_1_activeSource_2 &&
	     bus_ifcs_2_routeBack$EMPTY_N &&
	     ((!bus_ifcs_2_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
		bus_ifcs_2_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
		bus_ifcs_2_routeBack$D_OUT[0]) ;
  assign bus_1_state_171_AND_bus_1_activeSource_3_396_3_ETC___d2399 =
	     bus_1_state && bus_1_activeSource_3 &&
	     bus_ifcs_3_routeBack$EMPTY_N &&
	     ((!bus_ifcs_3_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_bus_ifcs_0_drainNoRouteResponse)) ?
		bus_ifcs_3_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_bus_ifcs_1_drainNoRouteResponse :
		bus_ifcs_3_routeBack$D_OUT[0]) ;
  assign bus_1_state_1_780_AND_bus_1_activeSource_0_1_8_ETC___d2857 =
	     bus_1_state_1 && bus_1_activeSource_0_1 &&
	     bus_1_ifcs_0_innerRoute$EMPTY_N &&
	     ((!bus_1_ifcs_0_innerRoute$D_OUT[0] ||
	       !bus_ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_bus_1_ifcs_0_innerRoute_first__720_BIT__ETC___d2751 :
		bus_1_ifcs_0_innerRoute$D_OUT[0]) ;
  assign bus_1_state_1_780_AND_bus_1_activeSource_1_1_9_ETC___d2904 =
	     bus_1_state_1 && bus_1_activeSource_1_1 &&
	     bus_1_ifcs_1_innerRoute$EMPTY_N &&
	     ((!bus_1_ifcs_1_innerRoute$D_OUT[0] ||
	       !bus_ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_bus_1_ifcs_1_innerRoute_first__758_BIT__ETC___d2771 :
		bus_1_ifcs_1_innerRoute$D_OUT[0]) ;
  assign bus_split_0_doPut_whas__441_AND_bus_split_0_do_ETC___d1448 =
	     CAN_FIRE_RL_bus_sink_selected &&
	     (bus_split_0_doPut$wget[173] ||
	      bus_ssNoSynth_0_aw_buffer_ff$FULL_N &&
	      bus_ssNoSynth_0_w_buffer_ff$FULL_N) ;
  assign bus_split_1_doPut_whas__470_AND_bus_split_1_do_ETC___d1477 =
	     CAN_FIRE_RL_bus_sink_selected_1 &&
	     (bus_split_1_doPut$wget[173] ||
	      bus_ssNoSynth_1_aw_buffer_ff$FULL_N &&
	      bus_ssNoSynth_1_w_buffer_ff$FULL_N) ;
  assign bus_split_2_doPut_whas__499_AND_bus_split_2_do_ETC___d1506 =
	     CAN_FIRE_RL_bus_sink_selected_2 &&
	     (bus_split_2_doPut$wget[173] ||
	      bus_ssNoSynth_2_aw_buffer_ff$FULL_N &&
	      bus_ssNoSynth_2_w_buffer_ff$FULL_N) ;
  assign bus_split_2_doPutwget_BITS_72_TO_0__q5 =
	     bus_split_2_doPut$wget[72:0] ;
  assign bus_split_3_doPut_whas__528_AND_bus_split_3_do_ETC___d1535 =
	     CAN_FIRE_RL_bus_sink_selected_3 &&
	     (bus_split_3_doPut$wget[173] ||
	      bus_ssNoSynth_3_aw_buffer_ff$FULL_N &&
	      bus_ssNoSynth_3_w_buffer_ff$FULL_N) ;
  assign bus_split_3_doPutwget_BITS_72_TO_0__q6 =
	     bus_split_3_doPut$wget[72:0] ;
  assign bus_state_948_AND_bus_activeSource_0_028_029_A_ETC___d2031 =
	     bus_state && bus_activeSource_0 &&
	     bus_ifcs_0_innerRoute$EMPTY_N &&
	     ((!bus_ifcs_0_innerRoute$D_OUT[0] ||
	       !IF_bus_split_0_flitLeft_449_EQ_0_450_THEN_bus__ETC___d1879) ?
		IF_NOT_bus_ifcs_0_innerRoute_first__888_BIT_1__ETC___d1919 :
		bus_ifcs_0_innerRoute$D_OUT[0]) ;
  assign bus_state_948_AND_bus_activeSource_1_079_080_A_ETC___d2082 =
	     bus_state && bus_activeSource_1 &&
	     bus_ifcs_1_innerRoute$EMPTY_N &&
	     ((!bus_ifcs_1_innerRoute$D_OUT[0] ||
	       !IF_bus_split_0_flitLeft_449_EQ_0_450_THEN_bus__ETC___d1879) ?
		IF_NOT_bus_ifcs_1_innerRoute_first__926_BIT_1__ETC___d1939 :
		bus_ifcs_1_innerRoute$D_OUT[0]) ;
  assign core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2528 =
	     x__h92264 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2534 =
	     x__h92327 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2547 =
	     x__h92401 < soc_map$m_uart16550_0_addr_range[63:0] ;
  assign core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2525 =
	     core$cpu_dmem_master_araddr <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2531 =
	     core$cpu_dmem_master_araddr <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2544 =
	     core$cpu_dmem_master_araddr <
	     soc_map$m_uart16550_0_addr_range[127:64] ;
  assign core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2549 =
	     (core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2525 ||
	      !core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2528) &&
	     (core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2531 ||
	      !core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2534) &&
	     !core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2544 &&
	     core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2547 ;
  assign core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2558 =
	     (core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2525 ||
	      !core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2528) &&
	     (core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2531 ||
	      !core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2534) &&
	     (core_cpu_dmem_master_ar_araddr__524_ULT_soc_ma_ETC___d2544 ||
	      !core_cpu_dmem_master_ar_araddr__524_MINUS_soc__ETC___d2547) ;
  assign core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2418 =
	     x__h88923 < soc_map$m_boot_rom_addr_range[63:0] ;
  assign core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2424 =
	     x__h88986 < soc_map$m_mem0_controller_addr_range[63:0] ;
  assign core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2437 =
	     x__h89060 < soc_map$m_uart16550_0_addr_range[63:0] ;
  assign core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2415 =
	     core$cpu_imem_master_araddr <
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2421 =
	     core$cpu_imem_master_araddr <
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2434 =
	     core$cpu_imem_master_araddr <
	     soc_map$m_uart16550_0_addr_range[127:64] ;
  assign core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2439 =
	     (core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2415 ||
	      !core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2418) &&
	     (core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2421 ||
	      !core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2424) &&
	     !core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2434 &&
	     core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2437 ;
  assign core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2448 =
	     (core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2415 ||
	      !core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2418) &&
	     (core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2421 ||
	      !core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2424) &&
	     (core_cpu_imem_master_ar_araddr__414_ULT_soc_ma_ETC___d2434 ||
	      !core_cpu_imem_master_ar_araddr__414_MINUS_soc__ETC___d2437) ;
  assign fatReq_arid__h89921 = { 1'd0, core$cpu_imem_master_arid } ;
  assign fatReq_arid__h93247 = { 1'd1, core$cpu_dmem_master_arid } ;
  assign mem0_controller_axi4_deburster_countWriteRspFF_ETC___d234 =
	     mem0_controller_axi4_deburster_countWriteRspFF$D_OUT <=
	     mem0_controller_axi4_deburster_flitReceived ;
  assign mem0_controller_axi4_deburster_inShim_bffD_OU_ETC__q30 =
	     mem0_controller_axi4_deburster_inShim_bff$D_OUT[8:2] ;
  assign mem0_controller_axi4_deburster_inShim_rffD_OU_ETC__q28 =
	     mem0_controller_axi4_deburster_inShim_rff$D_OUT[73:67] ;
  assign mem0_controller_axi4_deburster_readsSent_port0_ETC___d267 =
	     mem0_controller_axi4_deburster_readsSent ==
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign x1__h14109 = mem0_controller_axi4_deburster_writesSent + 8'd1 ;
  assign x1__h14250 = mem0_controller_axi4_deburster_flitReceived + 8'd1 ;
  assign x1__h14835 = mem0_controller_axi4_deburster_readsSent + 8'd1 ;
  assign x1__h7001 = boot_rom_axi4_deburster_writesSent + 8'd1 ;
  assign x1__h7142 = boot_rom_axi4_deburster_flitReceived + 8'd1 ;
  assign x1__h7727 = boot_rom_axi4_deburster_readsSent + 8'd1 ;
  assign x__h102554 =
	     SEXT_bus_1_arbiter_lastSelect_3__q16[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_4 && bus_1_reqWires_0_1$wget) ;
  assign x__h102657 =
	     SEXT_bus_1_arbiter_firstHot_1__q15[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_4 && bus_1_reqWires_0_1$wget) ;
  assign x__h103022 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_ETC__q17[0] &
	     bus_1_arbiter_firstHot_1 ;
  assign x__h103081 =
	     !SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_0_78_ETC___d2795 &&
	     SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_0__ETC___d2791 ;
  assign x__h103163 = SEXT_x03081__q18[0] & bus_1_arbiter_firstHot_1 ;
  assign x__h116529 = x__h116531 | y__h116532 ;
  assign x__h116531 =
	     SEXT_bus_1_1_arbiter_lastSelect__q20[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq && bus_1_1_reqWires_0$wget) ;
  assign x__h116603 =
	     SEXT_bus_1_1_arbiter_lastSelect_2__q22[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_2 && bus_1_1_reqWires_2$wget) ;
  assign x__h116729 = x__h116731 | y__h116732 ;
  assign x__h116731 =
	     SEXT_bus_1_1_arbiter_lastSelect_1__q21[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq && bus_1_1_reqWires_0$wget) ;
  assign x__h116791 =
	     SEXT_bus_1_1_arbiter_firstHot__q19[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_2 && bus_1_1_reqWires_2$wget) ;
  assign x__h116905 = x__h116907 | y__h116908 ;
  assign x__h116907 =
	     SEXT_bus_1_1_arbiter_lastSelect_2__q22[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq && bus_1_1_reqWires_0$wget) ;
  assign x__h116967 =
	     SEXT_bus_1_1_arbiter_lastSelect__q20[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_2 && bus_1_1_reqWires_2$wget) ;
  assign x__h117081 = x__h117083 | y__h117084 ;
  assign x__h117083 =
	     SEXT_bus_1_1_arbiter_firstHot__q19[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq && bus_1_1_reqWires_0$wget) ;
  assign x__h117143 =
	     SEXT_bus_1_1_arbiter_lastSelect_1__q21[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_2 && bus_1_1_reqWires_2$wget) ;
  assign x__h117667 = x__h117669 | y__h117670 ;
  assign x__h117669 =
	     SEXT_SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_ETC__q23[0] &
	     bus_1_1_arbiter_firstHot ;
  assign x__h117730 =
	     !SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_0_01_ETC___d3038 &&
	     SEXT_bus_1_1_arbiter_lastSelect_2_005_006_BIT__ETC___d3030 ;
  assign x__h117738 = SEXT_x17767__q25[0] & bus_1_1_arbiter_lastSelect_1 ;
  assign x__h117767 =
	     !SEXT_bus_1_1_arbiter_lastSelect_2_005_006_BIT__ETC___d3030 &&
	     !SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_0_01_ETC___d3038 &&
	     SEXT_bus_1_1_arbiter_lastSelect_1_000_001_BIT__ETC___d3022 ;
  assign x__h117802 =
	     !SEXT_bus_1_1_arbiter_lastSelect_1_000_001_BIT__ETC___d3022 &&
	     !SEXT_bus_1_1_arbiter_lastSelect_2_005_006_BIT__ETC___d3030 &&
	     !SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_0_01_ETC___d3038 &&
	     SEXT_bus_1_1_arbiter_lastSelect_996_997_BIT_0__ETC___d3014 ;
  assign x__h117906 = x__h117908 | y__h117909 ;
  assign x__h117908 = SEXT_x17730__q24[0] & bus_1_1_arbiter_firstHot ;
  assign x__h117968 = SEXT_x17802__q26[0] & bus_1_1_arbiter_lastSelect_1 ;
  assign x__h118126 = x__h118128 | y__h118129 ;
  assign x__h118128 = SEXT_x17767__q25[0] & bus_1_1_arbiter_firstHot ;
  assign x__h118188 =
	     SEXT_SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_ETC__q23[0] &
	     bus_1_1_arbiter_lastSelect_1 ;
  assign x__h118352 = x__h118354 | y__h118355 ;
  assign x__h118354 = SEXT_x17802__q26[0] & bus_1_1_arbiter_firstHot ;
  assign x__h118414 = SEXT_x17730__q24[0] & bus_1_1_arbiter_lastSelect_1 ;
  assign x__h13835 = { 56'd0, mem0_controller_axi4_deburster_writesSent } ;
  assign x__h14604 = { 56'd0, mem0_controller_axi4_deburster_readsSent } ;
  assign x__h45393 =
	     core$cpu_imem_master_awaddr -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h45466 =
	     core$cpu_imem_master_awaddr -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h45550 =
	     core$cpu_imem_master_awaddr -
	     soc_map$m_uart16550_0_addr_range[127:64] ;
  assign x__h45623 =
	     core$cpu_imem_master_awaddr -
	     soc_map$m_host_access_addr_range[127:64] ;
  assign x__h49111 =
	     core$cpu_dmem_master_awaddr -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h49174 =
	     core$cpu_dmem_master_awaddr -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h49248 =
	     core$cpu_dmem_master_awaddr -
	     soc_map$m_uart16550_0_addr_range[127:64] ;
  assign x__h49311 =
	     core$cpu_dmem_master_awaddr -
	     soc_map$m_host_access_addr_range[127:64] ;
  assign x__h59534 =
	     SEXT_bus_arbiter_lastSelect__q2[0] &
	     (CAN_FIRE_RL_bus_craftReq && bus_reqWires_0$wget) ;
  assign x__h59637 =
	     SEXT_bus_arbiter_firstHot__q1[0] &
	     (CAN_FIRE_RL_bus_craftReq && bus_reqWires_0$wget) ;
  assign x__h60002 =
	     SEXT_SEXT_bus_arbiter_firstHot_955_956_BIT_0_9_ETC__q3[0] &
	     bus_arbiter_firstHot ;
  assign x__h60061 =
	     !SEXT_bus_arbiter_firstHot_955_956_BIT_0_957_AN_ETC___d1963 &&
	     SEXT_bus_arbiter_lastSelect_951_952_BIT_0_953__ETC___d1959 ;
  assign x__h60143 = SEXT_x0061__q4[0] & bus_arbiter_firstHot ;
  assign x__h6725 = { 56'd0, boot_rom_axi4_deburster_writesSent } ;
  assign x__h7496 = { 56'd0, boot_rom_axi4_deburster_readsSent } ;
  assign x__h76653 = x__h76655 | y__h76656 ;
  assign x__h76655 =
	     SEXT_bus_1_arbiter_lastSelect__q8[0] &
	     (CAN_FIRE_RL_bus_1_craftReq && bus_1_reqWires_0$wget) ;
  assign x__h76727 =
	     SEXT_bus_1_arbiter_lastSelect_2__q10[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_2 && bus_1_reqWires_2$wget) ;
  assign x__h76853 = x__h76855 | y__h76856 ;
  assign x__h76855 =
	     SEXT_bus_1_arbiter_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_bus_1_craftReq && bus_1_reqWires_0$wget) ;
  assign x__h76915 =
	     SEXT_bus_1_arbiter_firstHot__q7[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_2 && bus_1_reqWires_2$wget) ;
  assign x__h77029 = x__h77031 | y__h77032 ;
  assign x__h77031 =
	     SEXT_bus_1_arbiter_lastSelect_2__q10[0] &
	     (CAN_FIRE_RL_bus_1_craftReq && bus_1_reqWires_0$wget) ;
  assign x__h77091 =
	     SEXT_bus_1_arbiter_lastSelect__q8[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_2 && bus_1_reqWires_2$wget) ;
  assign x__h77205 = x__h77207 | y__h77208 ;
  assign x__h77207 =
	     SEXT_bus_1_arbiter_firstHot__q7[0] &
	     (CAN_FIRE_RL_bus_1_craftReq && bus_1_reqWires_0$wget) ;
  assign x__h77267 =
	     SEXT_bus_1_arbiter_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_2 && bus_1_reqWires_2$wget) ;
  assign x__h77791 = x__h77793 | y__h77794 ;
  assign x__h77793 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_ETC__q11[0] &
	     bus_1_arbiter_firstHot ;
  assign x__h77854 =
	     !SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_189__ETC___d2216 &&
	     SEXT_bus_1_arbiter_lastSelect_2_183_184_BIT_0__ETC___d2208 ;
  assign x__h77862 = SEXT_x7891__q13[0] & bus_1_arbiter_lastSelect_1 ;
  assign x__h77891 =
	     !SEXT_bus_1_arbiter_lastSelect_2_183_184_BIT_0__ETC___d2208 &&
	     !SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_189__ETC___d2216 &&
	     SEXT_bus_1_arbiter_lastSelect_1_178_179_BIT_0__ETC___d2200 ;
  assign x__h77926 =
	     !SEXT_bus_1_arbiter_lastSelect_1_178_179_BIT_0__ETC___d2200 &&
	     !SEXT_bus_1_arbiter_lastSelect_2_183_184_BIT_0__ETC___d2208 &&
	     !SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_189__ETC___d2216 &&
	     SEXT_bus_1_arbiter_lastSelect_174_175_BIT_0_17_ETC___d2192 ;
  assign x__h78030 = x__h78032 | y__h78033 ;
  assign x__h78032 = SEXT_x7854__q12[0] & bus_1_arbiter_firstHot ;
  assign x__h78092 = SEXT_x7926__q14[0] & bus_1_arbiter_lastSelect_1 ;
  assign x__h78250 = x__h78252 | y__h78253 ;
  assign x__h78252 = SEXT_x7891__q13[0] & bus_1_arbiter_firstHot ;
  assign x__h78312 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_ETC__q11[0] &
	     bus_1_arbiter_lastSelect_1 ;
  assign x__h78476 = x__h78478 | y__h78479 ;
  assign x__h78478 = SEXT_x7926__q14[0] & bus_1_arbiter_firstHot ;
  assign x__h78538 = SEXT_x7854__q12[0] & bus_1_arbiter_lastSelect_1 ;
  assign x__h88923 =
	     core$cpu_imem_master_araddr -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h88986 =
	     core$cpu_imem_master_araddr -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h89060 =
	     core$cpu_imem_master_araddr -
	     soc_map$m_uart16550_0_addr_range[127:64] ;
  assign x__h89123 =
	     core$cpu_imem_master_araddr -
	     soc_map$m_host_access_addr_range[127:64] ;
  assign x__h92264 =
	     core$cpu_dmem_master_araddr -
	     soc_map$m_boot_rom_addr_range[127:64] ;
  assign x__h92327 =
	     core$cpu_dmem_master_araddr -
	     soc_map$m_mem0_controller_addr_range[127:64] ;
  assign x__h92401 =
	     core$cpu_dmem_master_araddr -
	     soc_map$m_uart16550_0_addr_range[127:64] ;
  assign x__h92464 =
	     core$cpu_dmem_master_araddr -
	     soc_map$m_host_access_addr_range[127:64] ;
  assign x_araddr__h14484 =
	     (mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h14592 :
	       mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_araddr__h7376 =
	     (boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h7484 :
	       boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_awaddr__h13715 =
	     (mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h13823 :
	       mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_awaddr__h6601 =
	     (boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h6713 :
	       boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_port1__read__h90572 =
	     CAN_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit ?
	       bus_1_ifcs_0_noRoute_flitCount$port0__write_1 :
	       bus_1_ifcs_0_noRoute_flitCount ;
  assign x_port1__read__h93895 =
	     CAN_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit ?
	       bus_1_ifcs_1_noRoute_flitCount$port0__write_1 :
	       bus_1_ifcs_1_noRoute_flitCount ;
  assign x_wdata__h36727 =
	     bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_2_w_buffer_ff$D_OUT[72:9] :
	       bus_split_2_doPutwget_BITS_72_TO_0__q5[72:9] ;
  assign x_wdata__h38959 =
	     bus_ssNoSynth_3_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_3_w_buffer_ff$D_OUT[72:9] :
	       bus_split_3_doPutwget_BITS_72_TO_0__q6[72:9] ;
  assign x_wstrb__h36728 =
	     bus_ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_2_w_buffer_ff$D_OUT[8:1] :
	       bus_split_2_doPutwget_BITS_72_TO_0__q5[8:1] ;
  assign x_wstrb__h38960 =
	     bus_ssNoSynth_3_w_buffer_ff$EMPTY_N ?
	       bus_ssNoSynth_3_w_buffer_ff$D_OUT[8:1] :
	       bus_split_3_doPutwget_BITS_72_TO_0__q6[8:1] ;
  assign y__h102555 =
	     SEXT_bus_1_arbiter_firstHot_1__q15[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_5 && bus_1_reqWires_1_1$wget) ;
  assign y__h102658 =
	     SEXT_bus_1_arbiter_lastSelect_3__q16[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_5 && bus_1_reqWires_1_1$wget) ;
  assign y__h103023 = SEXT_x03081__q18[0] & bus_1_arbiter_lastSelect_3 ;
  assign y__h103164 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_ETC__q17[0] &
	     bus_1_arbiter_lastSelect_3 ;
  assign y__h116530 = x__h116603 | y__h116604 ;
  assign y__h116532 =
	     SEXT_bus_1_1_arbiter_lastSelect_1__q21[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_1 && bus_1_1_reqWires_1$wget) ;
  assign y__h116604 =
	     SEXT_bus_1_1_arbiter_firstHot__q19[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_3 && bus_1_1_reqWires_3$wget) ;
  assign y__h116730 = x__h116791 | y__h116792 ;
  assign y__h116732 =
	     SEXT_bus_1_1_arbiter_lastSelect_2__q22[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_1 && bus_1_1_reqWires_1$wget) ;
  assign y__h116792 =
	     SEXT_bus_1_1_arbiter_lastSelect__q20[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_3 && bus_1_1_reqWires_3$wget) ;
  assign y__h116906 = x__h116967 | y__h116968 ;
  assign y__h116908 =
	     SEXT_bus_1_1_arbiter_firstHot__q19[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_1 && bus_1_1_reqWires_1$wget) ;
  assign y__h116968 =
	     SEXT_bus_1_1_arbiter_lastSelect_1__q21[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_3 && bus_1_1_reqWires_3$wget) ;
  assign y__h117082 = x__h117143 | y__h117144 ;
  assign y__h117084 =
	     SEXT_bus_1_1_arbiter_lastSelect__q20[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_1 && bus_1_1_reqWires_1$wget) ;
  assign y__h117144 =
	     SEXT_bus_1_1_arbiter_lastSelect_2__q22[0] &
	     (CAN_FIRE_RL_bus_1_1_craftReq_3 && bus_1_1_reqWires_3$wget) ;
  assign y__h117668 = x__h117738 | y__h117739 ;
  assign y__h117670 = SEXT_x17730__q24[0] & bus_1_1_arbiter_lastSelect_2 ;
  assign y__h117739 = SEXT_x17802__q26[0] & bus_1_1_arbiter_lastSelect ;
  assign y__h117907 = x__h117968 | y__h117969 ;
  assign y__h117909 = SEXT_x17767__q25[0] & bus_1_1_arbiter_lastSelect_2 ;
  assign y__h117969 =
	     SEXT_SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_ETC__q23[0] &
	     bus_1_1_arbiter_lastSelect ;
  assign y__h118127 = x__h118188 | y__h118189 ;
  assign y__h118129 = SEXT_x17802__q26[0] & bus_1_1_arbiter_lastSelect_2 ;
  assign y__h118189 = SEXT_x17730__q24[0] & bus_1_1_arbiter_lastSelect ;
  assign y__h118353 = x__h118414 | y__h118415 ;
  assign y__h118355 =
	     SEXT_SEXT_bus_1_1_arbiter_firstHot_009_010_BIT_ETC__q23[0] &
	     bus_1_1_arbiter_lastSelect_2 ;
  assign y__h118415 = SEXT_x17767__q25[0] & bus_1_1_arbiter_lastSelect ;
  assign y__h13823 =
	     x__h13835 <<
	     mem0_controller_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h14592 =
	     x__h14604 <<
	     mem0_controller_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h59535 =
	     SEXT_bus_arbiter_firstHot__q1[0] &
	     (CAN_FIRE_RL_bus_craftReq_1 && bus_reqWires_1$wget) ;
  assign y__h59638 =
	     SEXT_bus_arbiter_lastSelect__q2[0] &
	     (CAN_FIRE_RL_bus_craftReq_1 && bus_reqWires_1$wget) ;
  assign y__h60003 = SEXT_x0061__q4[0] & bus_arbiter_lastSelect ;
  assign y__h60144 =
	     SEXT_SEXT_bus_arbiter_firstHot_955_956_BIT_0_9_ETC__q3[0] &
	     bus_arbiter_lastSelect ;
  assign y__h6713 =
	     x__h6725 <<
	     boot_rom_axi4_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h7484 =
	     x__h7496 <<
	     boot_rom_axi4_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h76654 = x__h76727 | y__h76728 ;
  assign y__h76656 =
	     SEXT_bus_1_arbiter_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_1 && bus_1_reqWires_1$wget) ;
  assign y__h76728 =
	     SEXT_bus_1_arbiter_firstHot__q7[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_3 && bus_1_reqWires_3$wget) ;
  assign y__h76854 = x__h76915 | y__h76916 ;
  assign y__h76856 =
	     SEXT_bus_1_arbiter_lastSelect_2__q10[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_1 && bus_1_reqWires_1$wget) ;
  assign y__h76916 =
	     SEXT_bus_1_arbiter_lastSelect__q8[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_3 && bus_1_reqWires_3$wget) ;
  assign y__h77030 = x__h77091 | y__h77092 ;
  assign y__h77032 =
	     SEXT_bus_1_arbiter_firstHot__q7[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_1 && bus_1_reqWires_1$wget) ;
  assign y__h77092 =
	     SEXT_bus_1_arbiter_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_3 && bus_1_reqWires_3$wget) ;
  assign y__h77206 = x__h77267 | y__h77268 ;
  assign y__h77208 =
	     SEXT_bus_1_arbiter_lastSelect__q8[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_1 && bus_1_reqWires_1$wget) ;
  assign y__h77268 =
	     SEXT_bus_1_arbiter_lastSelect_2__q10[0] &
	     (CAN_FIRE_RL_bus_1_craftReq_3 && bus_1_reqWires_3$wget) ;
  assign y__h77792 = x__h77862 | y__h77863 ;
  assign y__h77794 = SEXT_x7854__q12[0] & bus_1_arbiter_lastSelect_2 ;
  assign y__h77863 = SEXT_x7926__q14[0] & bus_1_arbiter_lastSelect ;
  assign y__h78031 = x__h78092 | y__h78093 ;
  assign y__h78033 = SEXT_x7891__q13[0] & bus_1_arbiter_lastSelect_2 ;
  assign y__h78093 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_ETC__q11[0] &
	     bus_1_arbiter_lastSelect ;
  assign y__h78251 = x__h78312 | y__h78313 ;
  assign y__h78253 = SEXT_x7926__q14[0] & bus_1_arbiter_lastSelect_2 ;
  assign y__h78313 = SEXT_x7854__q12[0] & bus_1_arbiter_lastSelect ;
  assign y__h78477 = x__h78538 | y__h78539 ;
  assign y__h78479 =
	     SEXT_SEXT_bus_1_arbiter_firstHot_187_188_BIT_0_ETC__q11[0] &
	     bus_1_arbiter_lastSelect_2 ;
  assign y__h78539 = SEXT_x7891__q13[0] & bus_1_arbiter_lastSelect ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        boot_rom_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY 8'd0;
	boot_rom_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	boot_rom_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	boot_rom_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	boot_rom_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	boot_rom_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	boot_rom_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_1_1_activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_activeSource_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_activeSource_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_1_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_1_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_activeSource_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_1_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_arbiter_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_ifcs_0_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	bus_1_ifcs_0_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	bus_1_ifcs_0_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bus_1_ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_ifcs_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	bus_1_ifcs_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	bus_1_ifcs_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bus_1_ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_ifcs_2_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_ifcs_3_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	bus_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	bus_ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_0_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bus_ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	bus_ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	bus_ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_2_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_ifcs_3_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bus_merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_split_3_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	bus_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mem0_controller_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	mem0_controller_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	mem0_controller_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    10'd170;
	mem0_controller_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	mem0_controller_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	mem0_controller_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	mem0_controller_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	rg_aws_host_to_hw_interrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (boot_rom_axi4_deburster_flitReceived$EN)
	  boot_rom_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_flitReceived$D_IN;
	if (boot_rom_axi4_deburster_inSerial_lastWasRead$EN)
	  boot_rom_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_lastWasRead$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_arff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_arff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_awff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_awff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_bff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_bff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_rff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_rff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_shim_wff_rv$EN)
	  boot_rom_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_shim_wff_rv$D_IN;
	if (boot_rom_axi4_deburster_inSerial_state$EN)
	  boot_rom_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_inSerial_state$D_IN;
	if (boot_rom_axi4_deburster_readsSent$EN)
	  boot_rom_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_readsSent$D_IN;
	if (boot_rom_axi4_deburster_writesSent$EN)
	  boot_rom_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      boot_rom_axi4_deburster_writesSent$D_IN;
	if (bus_1_1_activeSource_0$EN)
	  bus_1_1_activeSource_0 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_activeSource_0$D_IN;
	if (bus_1_1_activeSource_1$EN)
	  bus_1_1_activeSource_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_activeSource_1$D_IN;
	if (bus_1_1_activeSource_2$EN)
	  bus_1_1_activeSource_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_activeSource_2$D_IN;
	if (bus_1_1_activeSource_3$EN)
	  bus_1_1_activeSource_3 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_activeSource_3$D_IN;
	if (bus_1_1_arbiter_firstHot$EN)
	  bus_1_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_arbiter_firstHot$D_IN;
	if (bus_1_1_arbiter_lastSelect$EN)
	  bus_1_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_arbiter_lastSelect$D_IN;
	if (bus_1_1_arbiter_lastSelect_1$EN)
	  bus_1_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_arbiter_lastSelect_1$D_IN;
	if (bus_1_1_arbiter_lastSelect_2$EN)
	  bus_1_1_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_1_arbiter_lastSelect_2$D_IN;
	if (bus_1_1_state$EN)
	  bus_1_1_state <= `BSV_ASSIGNMENT_DELAY bus_1_1_state$D_IN;
	if (bus_1_activeSource_0$EN)
	  bus_1_activeSource_0 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_0$D_IN;
	if (bus_1_activeSource_0_1$EN)
	  bus_1_activeSource_0_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_0_1$D_IN;
	if (bus_1_activeSource_1$EN)
	  bus_1_activeSource_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_1$D_IN;
	if (bus_1_activeSource_1_1$EN)
	  bus_1_activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_1_1$D_IN;
	if (bus_1_activeSource_2$EN)
	  bus_1_activeSource_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_2$D_IN;
	if (bus_1_activeSource_3$EN)
	  bus_1_activeSource_3 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_activeSource_3$D_IN;
	if (bus_1_arbiter_firstHot$EN)
	  bus_1_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_firstHot$D_IN;
	if (bus_1_arbiter_firstHot_1$EN)
	  bus_1_arbiter_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_firstHot_1$D_IN;
	if (bus_1_arbiter_lastSelect$EN)
	  bus_1_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect$D_IN;
	if (bus_1_arbiter_lastSelect_1$EN)
	  bus_1_arbiter_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_1$D_IN;
	if (bus_1_arbiter_lastSelect_2$EN)
	  bus_1_arbiter_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_2$D_IN;
	if (bus_1_arbiter_lastSelect_3$EN)
	  bus_1_arbiter_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_arbiter_lastSelect_3$D_IN;
	if (bus_1_ifcs_0_noRoute_currentReq$EN)
	  bus_1_ifcs_0_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_0_noRoute_currentReq$D_IN;
	if (bus_1_ifcs_0_noRoute_flitCount$EN)
	  bus_1_ifcs_0_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_0_noRoute_flitCount$D_IN;
	if (bus_1_ifcs_0_state$EN)
	  bus_1_ifcs_0_state <= `BSV_ASSIGNMENT_DELAY bus_1_ifcs_0_state$D_IN;
	if (bus_1_ifcs_0_state_1$EN)
	  bus_1_ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_0_state_1$D_IN;
	if (bus_1_ifcs_1_noRoute_currentReq$EN)
	  bus_1_ifcs_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_1_noRoute_currentReq$D_IN;
	if (bus_1_ifcs_1_noRoute_flitCount$EN)
	  bus_1_ifcs_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_1_noRoute_flitCount$D_IN;
	if (bus_1_ifcs_1_state$EN)
	  bus_1_ifcs_1_state <= `BSV_ASSIGNMENT_DELAY bus_1_ifcs_1_state$D_IN;
	if (bus_1_ifcs_1_state_1$EN)
	  bus_1_ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY
	      bus_1_ifcs_1_state_1$D_IN;
	if (bus_1_ifcs_2_state$EN)
	  bus_1_ifcs_2_state <= `BSV_ASSIGNMENT_DELAY bus_1_ifcs_2_state$D_IN;
	if (bus_1_ifcs_3_state$EN)
	  bus_1_ifcs_3_state <= `BSV_ASSIGNMENT_DELAY bus_1_ifcs_3_state$D_IN;
	if (bus_1_state$EN)
	  bus_1_state <= `BSV_ASSIGNMENT_DELAY bus_1_state$D_IN;
	if (bus_1_state_1$EN)
	  bus_1_state_1 <= `BSV_ASSIGNMENT_DELAY bus_1_state_1$D_IN;
	if (bus_activeSource_0$EN)
	  bus_activeSource_0 <= `BSV_ASSIGNMENT_DELAY bus_activeSource_0$D_IN;
	if (bus_activeSource_1$EN)
	  bus_activeSource_1 <= `BSV_ASSIGNMENT_DELAY bus_activeSource_1$D_IN;
	if (bus_arbiter_firstHot$EN)
	  bus_arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_firstHot$D_IN;
	if (bus_arbiter_lastSelect$EN)
	  bus_arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      bus_arbiter_lastSelect$D_IN;
	if (bus_ifcs_0_noRoute_inner_currentReq$EN)
	  bus_ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      bus_ifcs_0_noRoute_inner_currentReq$D_IN;
	if (bus_ifcs_0_noRoute_inner_pendingReq$EN)
	  bus_ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      bus_ifcs_0_noRoute_inner_pendingReq$D_IN;
	if (bus_ifcs_0_state$EN)
	  bus_ifcs_0_state <= `BSV_ASSIGNMENT_DELAY bus_ifcs_0_state$D_IN;
	if (bus_ifcs_0_state_1$EN)
	  bus_ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY bus_ifcs_0_state_1$D_IN;
	if (bus_ifcs_1_noRoute_inner_currentReq$EN)
	  bus_ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      bus_ifcs_1_noRoute_inner_currentReq$D_IN;
	if (bus_ifcs_1_noRoute_inner_pendingReq$EN)
	  bus_ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      bus_ifcs_1_noRoute_inner_pendingReq$D_IN;
	if (bus_ifcs_1_state$EN)
	  bus_ifcs_1_state <= `BSV_ASSIGNMENT_DELAY bus_ifcs_1_state$D_IN;
	if (bus_ifcs_1_state_1$EN)
	  bus_ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY bus_ifcs_1_state_1$D_IN;
	if (bus_ifcs_2_state$EN)
	  bus_ifcs_2_state <= `BSV_ASSIGNMENT_DELAY bus_ifcs_2_state$D_IN;
	if (bus_ifcs_3_state$EN)
	  bus_ifcs_3_state <= `BSV_ASSIGNMENT_DELAY bus_ifcs_3_state$D_IN;
	if (bus_merged_0_flitLeft$EN)
	  bus_merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_merged_0_flitLeft$D_IN;
	if (bus_merged_1_flitLeft$EN)
	  bus_merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_merged_1_flitLeft$D_IN;
	if (bus_split_0_flitLeft$EN)
	  bus_split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_0_flitLeft$D_IN;
	if (bus_split_1_flitLeft$EN)
	  bus_split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_1_flitLeft$D_IN;
	if (bus_split_2_flitLeft$EN)
	  bus_split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_2_flitLeft$D_IN;
	if (bus_split_3_flitLeft$EN)
	  bus_split_3_flitLeft <= `BSV_ASSIGNMENT_DELAY
	      bus_split_3_flitLeft$D_IN;
	if (bus_state$EN) bus_state <= `BSV_ASSIGNMENT_DELAY bus_state$D_IN;
	if (mem0_controller_axi4_deburster_flitReceived$EN)
	  mem0_controller_axi4_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_flitReceived$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_lastWasRead$EN)
	  mem0_controller_axi4_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_lastWasRead$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_arff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_arff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_awff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_awff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_bff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_bff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_rff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_rff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_shim_wff_rv$EN)
	  mem0_controller_axi4_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_shim_wff_rv$D_IN;
	if (mem0_controller_axi4_deburster_inSerial_state$EN)
	  mem0_controller_axi4_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_inSerial_state$D_IN;
	if (mem0_controller_axi4_deburster_readsSent$EN)
	  mem0_controller_axi4_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_readsSent$D_IN;
	if (mem0_controller_axi4_deburster_writesSent$EN)
	  mem0_controller_axi4_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      mem0_controller_axi4_deburster_writesSent$D_IN;
	if (rg_aws_host_to_hw_interrupt$EN)
	  rg_aws_host_to_hw_interrupt <= `BSV_ASSIGNMENT_DELAY
	      rg_aws_host_to_hw_interrupt$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    boot_rom_axi4_deburster_flitReceived = 8'hAA;
    boot_rom_axi4_deburster_inSerial_lastWasRead = 1'h0;
    boot_rom_axi4_deburster_inSerial_shim_arff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_awff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_bff_rv = 10'h2AA;
    boot_rom_axi4_deburster_inSerial_shim_rff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_shim_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    boot_rom_axi4_deburster_inSerial_state = 2'h2;
    boot_rom_axi4_deburster_readsSent = 8'hAA;
    boot_rom_axi4_deburster_writesSent = 8'hAA;
    bus_1_1_activeSource_0 = 1'h0;
    bus_1_1_activeSource_1 = 1'h0;
    bus_1_1_activeSource_2 = 1'h0;
    bus_1_1_activeSource_3 = 1'h0;
    bus_1_1_arbiter_firstHot = 1'h0;
    bus_1_1_arbiter_lastSelect = 1'h0;
    bus_1_1_arbiter_lastSelect_1 = 1'h0;
    bus_1_1_arbiter_lastSelect_2 = 1'h0;
    bus_1_1_state = 1'h0;
    bus_1_activeSource_0 = 1'h0;
    bus_1_activeSource_0_1 = 1'h0;
    bus_1_activeSource_1 = 1'h0;
    bus_1_activeSource_1_1 = 1'h0;
    bus_1_activeSource_2 = 1'h0;
    bus_1_activeSource_3 = 1'h0;
    bus_1_arbiter_firstHot = 1'h0;
    bus_1_arbiter_firstHot_1 = 1'h0;
    bus_1_arbiter_lastSelect = 1'h0;
    bus_1_arbiter_lastSelect_1 = 1'h0;
    bus_1_arbiter_lastSelect_2 = 1'h0;
    bus_1_arbiter_lastSelect_3 = 1'h0;
    bus_1_ifcs_0_noRoute_currentReq = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    bus_1_ifcs_0_noRoute_flitCount = 9'h0AA;
    bus_1_ifcs_0_state = 2'h2;
    bus_1_ifcs_0_state_1 = 1'h0;
    bus_1_ifcs_1_noRoute_currentReq = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    bus_1_ifcs_1_noRoute_flitCount = 9'h0AA;
    bus_1_ifcs_1_state = 2'h2;
    bus_1_ifcs_1_state_1 = 1'h0;
    bus_1_ifcs_2_state = 1'h0;
    bus_1_ifcs_3_state = 1'h0;
    bus_1_state = 1'h0;
    bus_1_state_1 = 1'h0;
    bus_activeSource_0 = 1'h0;
    bus_activeSource_1 = 1'h0;
    bus_arbiter_firstHot = 1'h0;
    bus_arbiter_lastSelect = 1'h0;
    bus_ifcs_0_noRoute_inner_currentReq = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    bus_ifcs_0_noRoute_inner_pendingReq = 1'h0;
    bus_ifcs_0_state = 2'h2;
    bus_ifcs_0_state_1 = 1'h0;
    bus_ifcs_1_noRoute_inner_currentReq = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    bus_ifcs_1_noRoute_inner_pendingReq = 1'h0;
    bus_ifcs_1_state = 2'h2;
    bus_ifcs_1_state_1 = 1'h0;
    bus_ifcs_2_state = 1'h0;
    bus_ifcs_3_state = 1'h0;
    bus_merged_0_flitLeft = 8'hAA;
    bus_merged_1_flitLeft = 8'hAA;
    bus_split_0_flitLeft = 8'hAA;
    bus_split_1_flitLeft = 8'hAA;
    bus_split_2_flitLeft = 8'hAA;
    bus_split_3_flitLeft = 8'hAA;
    bus_state = 1'h0;
    mem0_controller_axi4_deburster_flitReceived = 8'hAA;
    mem0_controller_axi4_deburster_inSerial_lastWasRead = 1'h0;
    mem0_controller_axi4_deburster_inSerial_shim_arff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_awff_rv =
	101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_bff_rv = 10'h2AA;
    mem0_controller_axi4_deburster_inSerial_shim_rff_rv =
	75'h2AAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_shim_wff_rv =
	74'h2AAAAAAAAAAAAAAAAAA;
    mem0_controller_axi4_deburster_inSerial_state = 2'h2;
    mem0_controller_axi4_deburster_readsSent = 8'hAA;
    mem0_controller_axi4_deburster_writesSent = 8'hAA;
    rg_aws_host_to_hw_interrupt = 1'h0;
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate &&
	  !SEXT_bus_arbiter_lastSelect_951_952_BIT_0_953__ETC___d1959 &&
	  !SEXT_bus_arbiter_firstHot_955_956_BIT_0_957_AN_ETC___d1963)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_arbitrate &&
	  !SEXT_bus_arbiter_lastSelect_951_952_BIT_0_953__ETC___d1959 &&
	  !SEXT_bus_arbiter_firstHot_955_956_BIT_0_957_AN_ETC___d1963)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	begin
	  v__h61631 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h61631,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_ifcs_0_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_ifcs_0_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_ifcs_0_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_ifcs_0_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_ifcs_0_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_ifcs_0_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_ifcs_0_innerRoute$D_OUT[3])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_ifcs_0_innerRoute$D_OUT[3])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && bus_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && !bus_ifcs_0_innerRoute$EMPTY_N)
	begin
	  v__h60931 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && !bus_ifcs_0_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h60931,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && !bus_ifcs_0_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	begin
	  v__h66493 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h66493,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_ifcs_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_ifcs_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_ifcs_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_ifcs_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_ifcs_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_ifcs_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_ifcs_1_innerRoute$D_OUT[3])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_ifcs_1_innerRoute$D_OUT[3])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  bus_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  !bus_ifcs_1_innerRoute$EMPTY_N)
	begin
	  v__h65793 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  !bus_ifcs_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h65793,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 &&
	  !bus_ifcs_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected && WILL_FIRE_RL_bus_burst)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_source_selected] and\n  [RL_bus_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_source_selected || WILL_FIRE_RL_bus_burst) &&
	  (WILL_FIRE_RL_bus_source_selected_1 || WILL_FIRE_RL_bus_burst_1))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_source_selected,\n  RL_bus_burst] and [RL_bus_source_selected_1, RL_bus_burst_1] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_source_selected_1 && WILL_FIRE_RL_bus_burst_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_source_selected_1] and\n  [RL_bus_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_sink_selected && WILL_FIRE_RL_bus_sink_selected_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_sink_selected] and\n  [RL_bus_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_sink_selected ||
	   WILL_FIRE_RL_bus_sink_selected_1) &&
	  WILL_FIRE_RL_bus_sink_selected_2)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_sink_selected,\n  RL_bus_sink_selected_1] and [RL_bus_sink_selected_2] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_sink_selected ||
	   WILL_FIRE_RL_bus_sink_selected_1 ||
	   WILL_FIRE_RL_bus_sink_selected_2) &&
	  WILL_FIRE_RL_bus_sink_selected_3)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_sink_selected,\n  RL_bus_sink_selected_1, RL_bus_sink_selected_2] and [RL_bus_sink_selected_3]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putFirst && bus_split_0_doPut$wget[173])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putFirst && bus_split_0_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_boot_rom_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  !bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && bus_split_0_doPut$wget[173] &&
	  !bus_split_0_doPut$wget[0] &&
	  bus_split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && !bus_split_0_doPut$wget[173])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_0_putOther && !bus_split_0_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_boot_rom_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putFirst && bus_split_1_doPut$wget[173])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putFirst && bus_split_1_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_mem0_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  !bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && bus_split_1_doPut$wget[173] &&
	  !bus_split_1_doPut$wget[0] &&
	  bus_split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && !bus_split_1_doPut$wget[173])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_1_putOther && !bus_split_1_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_mem0_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putFirst && bus_split_2_doPut$wget[173])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putFirst && bus_split_2_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  !bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && bus_split_2_doPut$wget[173] &&
	  !bus_split_2_doPut$wget[0] &&
	  bus_split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && !bus_split_2_doPut$wget[173])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_2_putOther && !bus_split_2_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putFirst && bus_split_3_doPut$wget[173])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putFirst && bus_split_3_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  !bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && bus_split_3_doPut$wget[173] &&
	  !bus_split_3_doPut$wget[0] &&
	  bus_split_3_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && !bus_split_3_doPut$wget[173])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_split_3_putOther && !bus_split_3_doPut$wget[173])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit &&
	  WILL_FIRE_RL_bus_ifcs_0_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_nonRoutableFlit]\n  and [RL_bus_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit &&
	  WILL_FIRE_RL_bus_ifcs_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_nonRoutableFlit]\n  and [RL_bus_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate &&
	  NOT_SEXT_bus_1_arbiter_lastSelect_174_175_BIT__ETC___d2220)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate &&
	  NOT_SEXT_bus_1_arbiter_lastSelect_174_175_BIT__ETC___d2220)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h80113 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h80113,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_0_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_0_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_0_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_0_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected &&
	  bus_ifcs_0_routeBack$EMPTY_N &&
	  (bus_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected && !bus_ifcs_0_routeBack$EMPTY_N)
	begin
	  v__h79732 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected && !bus_ifcs_0_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h79732,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected && !bus_ifcs_0_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_firstFlit_1 &&
	  WILL_FIRE_RL_bus_ifcs_0_followFlits_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_firstFlit_1] and\n  [RL_bus_ifcs_0_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_boot_rom_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h82210 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h82210,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  bus_ifcs_1_routeBack$EMPTY_N &&
	  (bus_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  !bus_ifcs_1_routeBack$EMPTY_N)
	begin
	  v__h81829 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  !bus_ifcs_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h81829,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 &&
	  !bus_ifcs_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_1 && WILL_FIRE_RL_bus_1_burst_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_1] and\n  [RL_bus_1_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_firstFlit_1 &&
	  WILL_FIRE_RL_bus_ifcs_1_followFlits_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_firstFlit_1] and\n  [RL_bus_ifcs_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_mem0_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h84109 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h84109,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_2_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_2_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_2_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_2_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  bus_ifcs_2_routeBack$EMPTY_N &&
	  (bus_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  !bus_ifcs_2_routeBack$EMPTY_N)
	begin
	  v__h83728 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  !bus_ifcs_2_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h83728,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 &&
	  !bus_ifcs_2_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_2 && WILL_FIRE_RL_bus_1_burst_2)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_2] and\n  [RL_bus_1_burst_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_2_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_2_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_2_firstFlit] and\n  [RL_bus_ifcs_2_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h86008 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h86008,
	       $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_3_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_3_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_ifcs_3_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_ifcs_3_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  bus_ifcs_3_routeBack$EMPTY_N &&
	  (bus_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  !bus_ifcs_3_routeBack$EMPTY_N)
	begin
	  v__h85627 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  !bus_ifcs_3_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h85627,
		 $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 &&
	  !bus_ifcs_3_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected && WILL_FIRE_RL_bus_1_burst)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected] and\n  [RL_bus_1_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_source_selected || WILL_FIRE_RL_bus_1_burst) &&
	  (WILL_FIRE_RL_bus_1_source_selected_1 ||
	   WILL_FIRE_RL_bus_1_burst_1))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected,\n  RL_bus_1_burst] and [RL_bus_1_source_selected_1, RL_bus_1_burst_1] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_source_selected || WILL_FIRE_RL_bus_1_burst ||
	   WILL_FIRE_RL_bus_1_source_selected_1 ||
	   WILL_FIRE_RL_bus_1_burst_1) &&
	  (WILL_FIRE_RL_bus_1_source_selected_2 ||
	   WILL_FIRE_RL_bus_1_burst_2))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected,\n  RL_bus_1_burst, RL_bus_1_source_selected_1, RL_bus_1_burst_1] and\n  [RL_bus_1_source_selected_2, RL_bus_1_burst_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_source_selected || WILL_FIRE_RL_bus_1_burst ||
	   WILL_FIRE_RL_bus_1_source_selected_1 ||
	   WILL_FIRE_RL_bus_1_burst_1 ||
	   WILL_FIRE_RL_bus_1_source_selected_2 ||
	   WILL_FIRE_RL_bus_1_burst_2) &&
	  (WILL_FIRE_RL_bus_1_source_selected_3 ||
	   WILL_FIRE_RL_bus_1_burst_3))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected,\n  RL_bus_1_burst, RL_bus_1_source_selected_1, RL_bus_1_burst_1,\n  RL_bus_1_source_selected_2, RL_bus_1_burst_2] and\n  [RL_bus_1_source_selected_3, RL_bus_1_burst_3] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_3 && WILL_FIRE_RL_bus_1_burst_3)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_3] and\n  [RL_bus_1_burst_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_3_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_3_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_3_firstFlit] and\n  [RL_bus_ifcs_3_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_firstFlit] and\n  [RL_bus_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_0_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_firstFlit] and\n  [RL_bus_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_firstFlit] and\n  [RL_bus_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_0_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_firstFlit] and\n  [RL_bus_ifcs_0_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_followFlits] and\n  [RL_bus_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_0_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_followFlits] and\n  [RL_bus_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_0_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_followFlits] and\n  [RL_bus_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_0_drainFlits &&
	  WILL_FIRE_RL_bus_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_0_drainFlits] and\n  [RL_bus_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && core$cpu_imem_master_wlast &&
	  bus_merged_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && core$cpu_imem_master_wlast &&
	  bus_merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && !core$cpu_imem_master_wlast &&
	  bus_merged_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_0_genOther && !core$cpu_imem_master_wlast &&
	  bus_merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_sink_selected &&
	  WILL_FIRE_RL_bus_1_sink_selected_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_sink_selected] and\n  [RL_bus_1_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_firstFlit] and\n  [RL_bus_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_firstFlit] and\n  [RL_bus_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_firstFlit] and\n  [RL_bus_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_ifcs_1_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_firstFlit] and\n  [RL_bus_ifcs_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_followFlits] and\n  [RL_bus_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_followFlits] and\n  [RL_bus_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_ifcs_1_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_followFlits] and\n  [RL_bus_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_ifcs_1_drainFlits &&
	  WILL_FIRE_RL_bus_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_ifcs_1_drainFlits] and\n  [RL_bus_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && core$cpu_dmem_master_wlast &&
	  bus_merged_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && core$cpu_dmem_master_wlast &&
	  bus_merged_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && !core$cpu_dmem_master_wlast &&
	  bus_merged_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_merged_1_genOther && !core$cpu_dmem_master_wlast &&
	  bus_merged_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate_1 &&
	  !SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_0__ETC___d2791 &&
	  !SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_0_78_ETC___d2795)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_arbitrate_1 &&
	  !SEXT_bus_1_arbiter_lastSelect_3_783_784_BIT_0__ETC___d2791 &&
	  !SEXT_bus_1_arbiter_firstHot_1_787_788_BIT_0_78_ETC___d2795)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	begin
	  v__h104645 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h104645,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_1_ifcs_0_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_1_ifcs_0_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_1_ifcs_0_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_1_ifcs_0_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_1_ifcs_0_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_1_ifcs_0_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_1_ifcs_0_innerRoute$D_OUT[3])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_1_ifcs_0_innerRoute$D_OUT[3])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  bus_1_ifcs_0_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  !bus_1_ifcs_0_innerRoute$EMPTY_N)
	begin
	  v__h103945 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  !bus_1_ifcs_0_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h103945,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 &&
	  !bus_1_ifcs_0_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	begin
	  v__h108141 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h108141,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_1_ifcs_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_1_ifcs_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_1_ifcs_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_1_ifcs_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_1_ifcs_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_1_ifcs_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  bus_1_ifcs_1_innerRoute$D_OUT[3])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !bus_1_ifcs_1_innerRoute$D_OUT[3])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  bus_1_ifcs_1_innerRoute$EMPTY_N &&
	  (bus_1_ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (bus_1_ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  !bus_1_ifcs_1_innerRoute$EMPTY_N)
	begin
	  v__h107441 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  !bus_1_ifcs_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h107441,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 &&
	  !bus_1_ifcs_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_4 && WILL_FIRE_RL_bus_1_burst_4)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_4] and\n  [RL_bus_1_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_source_selected_4 ||
	   WILL_FIRE_RL_bus_1_burst_4) &&
	  (WILL_FIRE_RL_bus_1_source_selected_5 ||
	   WILL_FIRE_RL_bus_1_burst_5))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_4,\n  RL_bus_1_burst_4] and [RL_bus_1_source_selected_5, RL_bus_1_burst_5] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_source_selected_5 && WILL_FIRE_RL_bus_1_burst_5)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_source_selected_5] and\n  [RL_bus_1_burst_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_boot_rom_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_mem0_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_sink_selected_2 &&
	  WILL_FIRE_RL_bus_1_sink_selected_3)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_sink_selected_2] and\n  [RL_bus_1_sink_selected_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_sink_selected_2 ||
	   WILL_FIRE_RL_bus_1_sink_selected_3) &&
	  WILL_FIRE_RL_bus_1_sink_selected_4)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_sink_selected_2,\n  RL_bus_1_sink_selected_3] and [RL_bus_1_sink_selected_4] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_sink_selected_2 ||
	   WILL_FIRE_RL_bus_1_sink_selected_3 ||
	   WILL_FIRE_RL_bus_1_sink_selected_4) &&
	  WILL_FIRE_RL_bus_1_sink_selected_5)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_sink_selected_2,\n  RL_bus_1_sink_selected_3, RL_bus_1_sink_selected_4] and\n  [RL_bus_1_sink_selected_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_0_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_nonRoutableFlit]\n  and [RL_bus_1_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_nonRoutableFlit]\n  and [RL_bus_1_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_arbitrate &&
	  NOT_SEXT_bus_1_1_arbiter_lastSelect_996_997_BI_ETC___d3042)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_arbitrate &&
	  NOT_SEXT_bus_1_1_arbiter_lastSelect_996_997_BI_ETC___d3042)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h119993 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h119993,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_0_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_0_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_0_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_0_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  bus_1_ifcs_0_routeBack$EMPTY_N &&
	  (bus_1_ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  !bus_1_ifcs_0_routeBack$EMPTY_N)
	begin
	  v__h119612 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  !bus_1_ifcs_0_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h119612,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected &&
	  !bus_1_ifcs_0_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_firstFlit_1 &&
	  WILL_FIRE_RL_bus_1_ifcs_0_followFlits_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_firstFlit_1] and\n  [RL_bus_1_ifcs_0_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_boot_rom_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_boot_rom_axi4_deburster_inSerial_takeB)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 305, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_boot_rom_axi4_deburster_inSerial_takeR] and\n  [RL_boot_rom_axi4_deburster_inSerial_takeB] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h122622 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h122622,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  bus_1_ifcs_1_routeBack$EMPTY_N &&
	  (bus_1_ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  !bus_1_ifcs_1_routeBack$EMPTY_N)
	begin
	  v__h122241 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  !bus_1_ifcs_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h122241,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  !bus_1_ifcs_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_1 &&
	  WILL_FIRE_RL_bus_1_1_burst_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected_1]\n  and [RL_bus_1_1_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_firstFlit_1 &&
	  WILL_FIRE_RL_bus_1_ifcs_1_followFlits_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_firstFlit_1] and\n  [RL_bus_1_ifcs_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ug_mem0_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_mem0_controller_axi4_deburster_inSerial_takeB)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 305, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mem0_controller_axi4_deburster_inSerial_takeR] and\n  [RL_mem0_controller_axi4_deburster_inSerial_takeB] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start_initial)
	begin
	  v__h131805 = $stime;
	  #0;
	end
    v__h131799 = v__h131805 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start_initial)
	$display("%0d: AWS_SoC_Top.rl_reset_start_initial ...", v__h131799);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h125039 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h125039,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_2_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_2_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_2_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_2_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  bus_1_ifcs_2_routeBack$EMPTY_N &&
	  (bus_1_ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  !bus_1_ifcs_2_routeBack$EMPTY_N)
	begin
	  v__h124658 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  !bus_1_ifcs_2_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h124658,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  !bus_1_ifcs_2_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_2 &&
	  WILL_FIRE_RL_bus_1_1_burst_2)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected_2]\n  and [RL_bus_1_1_burst_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_2_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_2_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_2_firstFlit] and\n  [RL_bus_1_ifcs_2_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	begin
	  v__h132034 = $stime;
	  #0;
	end
    v__h132028 = v__h132034 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete_initial)
	$display("%0d: AWS_SoC_Top.rl_reset_complete_initial", v__h132028);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h127456 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h127456,
	       $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_3_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_3_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  bus_1_ifcs_3_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !bus_1_ifcs_3_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  bus_1_ifcs_3_routeBack$EMPTY_N &&
	  (bus_1_ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (bus_1_ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  !bus_1_ifcs_3_routeBack$EMPTY_N)
	begin
	  v__h127075 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  !bus_1_ifcs_3_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h127075,
		 $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  !bus_1_ifcs_3_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected && WILL_FIRE_RL_bus_1_1_burst)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected] and\n  [RL_bus_1_1_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_1_source_selected ||
	   WILL_FIRE_RL_bus_1_1_burst) &&
	  (WILL_FIRE_RL_bus_1_1_source_selected_1 ||
	   WILL_FIRE_RL_bus_1_1_burst_1))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected,\n  RL_bus_1_1_burst] and [RL_bus_1_1_source_selected_1, RL_bus_1_1_burst_1] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_1_source_selected ||
	   WILL_FIRE_RL_bus_1_1_burst ||
	   WILL_FIRE_RL_bus_1_1_source_selected_1 ||
	   WILL_FIRE_RL_bus_1_1_burst_1) &&
	  (WILL_FIRE_RL_bus_1_1_source_selected_2 ||
	   WILL_FIRE_RL_bus_1_1_burst_2))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected,\n  RL_bus_1_1_burst, RL_bus_1_1_source_selected_1, RL_bus_1_1_burst_1] and\n  [RL_bus_1_1_source_selected_2, RL_bus_1_1_burst_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_bus_1_1_source_selected ||
	   WILL_FIRE_RL_bus_1_1_burst ||
	   WILL_FIRE_RL_bus_1_1_source_selected_1 ||
	   WILL_FIRE_RL_bus_1_1_burst_1 ||
	   WILL_FIRE_RL_bus_1_1_source_selected_2 ||
	   WILL_FIRE_RL_bus_1_1_burst_2) &&
	  (WILL_FIRE_RL_bus_1_1_source_selected_3 ||
	   WILL_FIRE_RL_bus_1_1_burst_3))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected,\n  RL_bus_1_1_burst, RL_bus_1_1_source_selected_1, RL_bus_1_1_burst_1,\n  RL_bus_1_1_source_selected_2, RL_bus_1_1_burst_2] and\n  [RL_bus_1_1_source_selected_3, RL_bus_1_1_burst_3] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_source_selected_3 &&
	  WILL_FIRE_RL_bus_1_1_burst_3)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_source_selected_3]\n  and [RL_bus_1_1_burst_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_3_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_3_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_3_firstFlit] and\n  [RL_bus_1_ifcs_3_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_firstFlit] and\n  [RL_bus_1_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_0_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_firstFlit] and\n  [RL_bus_1_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_firstFlit] and\n  [RL_bus_1_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_0_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_firstFlit] and\n  [RL_bus_1_ifcs_0_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_followFlits] and\n  [RL_bus_1_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_0_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_followFlits] and\n  [RL_bus_1_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_followFlits] and\n  [RL_bus_1_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_0_drainFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_0_drainFlits] and\n  [RL_bus_1_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_1_sink_selected &&
	  WILL_FIRE_RL_bus_1_1_sink_selected_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_1_sink_selected] and\n  [RL_bus_1_1_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_firstFlit] and\n  [RL_bus_1_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_firstFlit] and\n  [RL_bus_1_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_firstFlit] and\n  [RL_bus_1_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_bus_1_ifcs_1_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_firstFlit] and\n  [RL_bus_1_ifcs_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_followFlits] and\n  [RL_bus_1_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_followFlits] and\n  [RL_bus_1_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_followFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_followFlits] and\n  [RL_bus_1_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_bus_1_ifcs_1_drainFlits &&
	  WILL_FIRE_RL_bus_1_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_bus_1_ifcs_1_drainFlits] and\n  [RL_bus_1_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkAWS_SoC_Top

