//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// slave_awready                  O     1 reg
// slave_wready                   O     1 reg
// slave_bvalid                   O     1 reg
// slave_bid                      O     4 reg
// slave_bresp                    O     2 reg
// slave_arready                  O     1 reg
// slave_rvalid                   O     1 reg
// slave_rid                      O     4 reg
// slave_rdata                    O    64 reg
// slave_rresp                    O     2 reg
// slave_rlast                    O     1 reg
// to_ddr4_awvalid                O     1 reg
// to_ddr4_awid                   O    16 reg
// to_ddr4_awaddr                 O    64 reg
// to_ddr4_awlen                  O     8 reg
// to_ddr4_awsize                 O     3 reg
// to_ddr4_awburst                O     2 reg
// to_ddr4_awlock                 O     1 reg
// to_ddr4_awcache                O     4 reg
// to_ddr4_awprot                 O     3 reg
// to_ddr4_awqos                  O     4 reg
// to_ddr4_awregion               O     4 reg
// to_ddr4_wvalid                 O     1 reg
// to_ddr4_wdata                  O   512 reg
// to_ddr4_wstrb                  O    64 reg
// to_ddr4_wlast                  O     1 reg
// to_ddr4_bready                 O     1 reg
// to_ddr4_arvalid                O     1 reg
// to_ddr4_arid                   O    16 reg
// to_ddr4_araddr                 O    64 reg
// to_ddr4_arlen                  O     8 reg
// to_ddr4_arsize                 O     3 reg
// to_ddr4_arburst                O     2 reg
// to_ddr4_arlock                 O     1 reg
// to_ddr4_arcache                O     4 reg
// to_ddr4_arprot                 O     3 reg
// to_ddr4_arqos                  O     4 reg
// to_ddr4_arregion               O     4 reg
// to_ddr4_rready                 O     1 reg
// RDY_ma_set_addr_map            O     1
// RDY_ma_set_watch_tohost        O     1
// RDY_ma_ddr4_ready              O     1
// mv_status                      O     8 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_awvalid                  I     1
// slave_awid                     I     4 reg
// slave_awaddr                   I    64 reg
// slave_awlen                    I     8 reg
// slave_awsize                   I     3 reg
// slave_awburst                  I     2 reg
// slave_awlock                   I     1 reg
// slave_awcache                  I     4 reg
// slave_awprot                   I     3 reg
// slave_awqos                    I     4 reg
// slave_awregion                 I     4 reg
// slave_wvalid                   I     1
// slave_wdata                    I    64 reg
// slave_wstrb                    I     8 reg
// slave_wlast                    I     1 reg
// slave_bready                   I     1
// slave_arvalid                  I     1
// slave_arid                     I     4 reg
// slave_araddr                   I    64 reg
// slave_arlen                    I     8 reg
// slave_arsize                   I     3 reg
// slave_arburst                  I     2 reg
// slave_arlock                   I     1 reg
// slave_arcache                  I     4 reg
// slave_arprot                   I     3 reg
// slave_arqos                    I     4 reg
// slave_arregion                 I     4 reg
// slave_rready                   I     1
// to_ddr4_awready                I     1
// to_ddr4_wready                 I     1
// to_ddr4_bvalid                 I     1
// to_ddr4_bid                    I    16 reg
// to_ddr4_bresp                  I     2 reg
// to_ddr4_arready                I     1
// to_ddr4_rvalid                 I     1
// to_ddr4_rid                    I    16 reg
// to_ddr4_rdata                  I   512 reg
// to_ddr4_rresp                  I     2 reg
// to_ddr4_rlast                  I     1 reg
// ma_set_addr_map_addr_base      I    64 reg
// ma_set_addr_map_addr_lim       I    64 reg
// ma_set_watch_tohost_watch_tohost  I     1 reg
// ma_set_watch_tohost_tohost_addr  I    64 reg
// EN_ma_set_addr_map             I     1
// EN_ma_set_watch_tohost         I     1
// EN_ma_ddr4_ready               I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAWS_DDR4_Adapter(CLK,
			  RST_N,

			  slave_awvalid,
			  slave_awid,
			  slave_awaddr,
			  slave_awlen,
			  slave_awsize,
			  slave_awburst,
			  slave_awlock,
			  slave_awcache,
			  slave_awprot,
			  slave_awqos,
			  slave_awregion,

			  slave_awready,

			  slave_wvalid,
			  slave_wdata,
			  slave_wstrb,
			  slave_wlast,

			  slave_wready,

			  slave_bvalid,

			  slave_bid,

			  slave_bresp,

			  slave_bready,

			  slave_arvalid,
			  slave_arid,
			  slave_araddr,
			  slave_arlen,
			  slave_arsize,
			  slave_arburst,
			  slave_arlock,
			  slave_arcache,
			  slave_arprot,
			  slave_arqos,
			  slave_arregion,

			  slave_arready,

			  slave_rvalid,

			  slave_rid,

			  slave_rdata,

			  slave_rresp,

			  slave_rlast,

			  slave_rready,

			  to_ddr4_awvalid,

			  to_ddr4_awid,

			  to_ddr4_awaddr,

			  to_ddr4_awlen,

			  to_ddr4_awsize,

			  to_ddr4_awburst,

			  to_ddr4_awlock,

			  to_ddr4_awcache,

			  to_ddr4_awprot,

			  to_ddr4_awqos,

			  to_ddr4_awregion,

			  to_ddr4_awready,

			  to_ddr4_wvalid,

			  to_ddr4_wdata,

			  to_ddr4_wstrb,

			  to_ddr4_wlast,

			  to_ddr4_wready,

			  to_ddr4_bvalid,
			  to_ddr4_bid,
			  to_ddr4_bresp,

			  to_ddr4_bready,

			  to_ddr4_arvalid,

			  to_ddr4_arid,

			  to_ddr4_araddr,

			  to_ddr4_arlen,

			  to_ddr4_arsize,

			  to_ddr4_arburst,

			  to_ddr4_arlock,

			  to_ddr4_arcache,

			  to_ddr4_arprot,

			  to_ddr4_arqos,

			  to_ddr4_arregion,

			  to_ddr4_arready,

			  to_ddr4_rvalid,
			  to_ddr4_rid,
			  to_ddr4_rdata,
			  to_ddr4_rresp,
			  to_ddr4_rlast,

			  to_ddr4_rready,

			  ma_set_addr_map_addr_base,
			  ma_set_addr_map_addr_lim,
			  EN_ma_set_addr_map,
			  RDY_ma_set_addr_map,

			  ma_set_watch_tohost_watch_tohost,
			  ma_set_watch_tohost_tohost_addr,
			  EN_ma_set_watch_tohost,
			  RDY_ma_set_watch_tohost,

			  EN_ma_ddr4_ready,
			  RDY_ma_ddr4_ready,

			  mv_status);
  input  CLK;
  input  RST_N;

  // action method slave_m_awvalid
  input  slave_awvalid;
  input  [3 : 0] slave_awid;
  input  [63 : 0] slave_awaddr;
  input  [7 : 0] slave_awlen;
  input  [2 : 0] slave_awsize;
  input  [1 : 0] slave_awburst;
  input  slave_awlock;
  input  [3 : 0] slave_awcache;
  input  [2 : 0] slave_awprot;
  input  [3 : 0] slave_awqos;
  input  [3 : 0] slave_awregion;

  // value method slave_m_awready
  output slave_awready;

  // action method slave_m_wvalid
  input  slave_wvalid;
  input  [63 : 0] slave_wdata;
  input  [7 : 0] slave_wstrb;
  input  slave_wlast;

  // value method slave_m_wready
  output slave_wready;

  // value method slave_m_bvalid
  output slave_bvalid;

  // value method slave_m_bid
  output [3 : 0] slave_bid;

  // value method slave_m_bresp
  output [1 : 0] slave_bresp;

  // value method slave_m_buser

  // action method slave_m_bready
  input  slave_bready;

  // action method slave_m_arvalid
  input  slave_arvalid;
  input  [3 : 0] slave_arid;
  input  [63 : 0] slave_araddr;
  input  [7 : 0] slave_arlen;
  input  [2 : 0] slave_arsize;
  input  [1 : 0] slave_arburst;
  input  slave_arlock;
  input  [3 : 0] slave_arcache;
  input  [2 : 0] slave_arprot;
  input  [3 : 0] slave_arqos;
  input  [3 : 0] slave_arregion;

  // value method slave_m_arready
  output slave_arready;

  // value method slave_m_rvalid
  output slave_rvalid;

  // value method slave_m_rid
  output [3 : 0] slave_rid;

  // value method slave_m_rdata
  output [63 : 0] slave_rdata;

  // value method slave_m_rresp
  output [1 : 0] slave_rresp;

  // value method slave_m_rlast
  output slave_rlast;

  // value method slave_m_ruser

  // action method slave_m_rready
  input  slave_rready;

  // value method to_ddr4_m_awvalid
  output to_ddr4_awvalid;

  // value method to_ddr4_m_awid
  output [15 : 0] to_ddr4_awid;

  // value method to_ddr4_m_awaddr
  output [63 : 0] to_ddr4_awaddr;

  // value method to_ddr4_m_awlen
  output [7 : 0] to_ddr4_awlen;

  // value method to_ddr4_m_awsize
  output [2 : 0] to_ddr4_awsize;

  // value method to_ddr4_m_awburst
  output [1 : 0] to_ddr4_awburst;

  // value method to_ddr4_m_awlock
  output to_ddr4_awlock;

  // value method to_ddr4_m_awcache
  output [3 : 0] to_ddr4_awcache;

  // value method to_ddr4_m_awprot
  output [2 : 0] to_ddr4_awprot;

  // value method to_ddr4_m_awqos
  output [3 : 0] to_ddr4_awqos;

  // value method to_ddr4_m_awregion
  output [3 : 0] to_ddr4_awregion;

  // value method to_ddr4_m_awuser

  // action method to_ddr4_m_awready
  input  to_ddr4_awready;

  // value method to_ddr4_m_wvalid
  output to_ddr4_wvalid;

  // value method to_ddr4_m_wdata
  output [511 : 0] to_ddr4_wdata;

  // value method to_ddr4_m_wstrb
  output [63 : 0] to_ddr4_wstrb;

  // value method to_ddr4_m_wlast
  output to_ddr4_wlast;

  // value method to_ddr4_m_wuser

  // action method to_ddr4_m_wready
  input  to_ddr4_wready;

  // action method to_ddr4_m_bvalid
  input  to_ddr4_bvalid;
  input  [15 : 0] to_ddr4_bid;
  input  [1 : 0] to_ddr4_bresp;

  // value method to_ddr4_m_bready
  output to_ddr4_bready;

  // value method to_ddr4_m_arvalid
  output to_ddr4_arvalid;

  // value method to_ddr4_m_arid
  output [15 : 0] to_ddr4_arid;

  // value method to_ddr4_m_araddr
  output [63 : 0] to_ddr4_araddr;

  // value method to_ddr4_m_arlen
  output [7 : 0] to_ddr4_arlen;

  // value method to_ddr4_m_arsize
  output [2 : 0] to_ddr4_arsize;

  // value method to_ddr4_m_arburst
  output [1 : 0] to_ddr4_arburst;

  // value method to_ddr4_m_arlock
  output to_ddr4_arlock;

  // value method to_ddr4_m_arcache
  output [3 : 0] to_ddr4_arcache;

  // value method to_ddr4_m_arprot
  output [2 : 0] to_ddr4_arprot;

  // value method to_ddr4_m_arqos
  output [3 : 0] to_ddr4_arqos;

  // value method to_ddr4_m_arregion
  output [3 : 0] to_ddr4_arregion;

  // value method to_ddr4_m_aruser

  // action method to_ddr4_m_arready
  input  to_ddr4_arready;

  // action method to_ddr4_m_rvalid
  input  to_ddr4_rvalid;
  input  [15 : 0] to_ddr4_rid;
  input  [511 : 0] to_ddr4_rdata;
  input  [1 : 0] to_ddr4_rresp;
  input  to_ddr4_rlast;

  // value method to_ddr4_m_rready
  output to_ddr4_rready;

  // action method ma_set_addr_map
  input  [63 : 0] ma_set_addr_map_addr_base;
  input  [63 : 0] ma_set_addr_map_addr_lim;
  input  EN_ma_set_addr_map;
  output RDY_ma_set_addr_map;

  // action method ma_set_watch_tohost
  input  ma_set_watch_tohost_watch_tohost;
  input  [63 : 0] ma_set_watch_tohost_tohost_addr;
  input  EN_ma_set_watch_tohost;
  output RDY_ma_set_watch_tohost;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [511 : 0] to_ddr4_wdata;
  wire [63 : 0] slave_rdata, to_ddr4_araddr, to_ddr4_awaddr, to_ddr4_wstrb;
  wire [15 : 0] to_ddr4_arid, to_ddr4_awid;
  wire [7 : 0] mv_status, to_ddr4_arlen, to_ddr4_awlen;
  wire [3 : 0] slave_bid,
	       slave_rid,
	       to_ddr4_arcache,
	       to_ddr4_arqos,
	       to_ddr4_arregion,
	       to_ddr4_awcache,
	       to_ddr4_awqos,
	       to_ddr4_awregion;
  wire [2 : 0] to_ddr4_arprot, to_ddr4_arsize, to_ddr4_awprot, to_ddr4_awsize;
  wire [1 : 0] slave_bresp, slave_rresp, to_ddr4_arburst, to_ddr4_awburst;
  wire RDY_ma_ddr4_ready,
       RDY_ma_set_addr_map,
       RDY_ma_set_watch_tohost,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rlast,
       slave_rvalid,
       slave_wready,
       to_ddr4_arlock,
       to_ddr4_arvalid,
       to_ddr4_awlock,
       to_ddr4_awvalid,
       to_ddr4_bready,
       to_ddr4_rready,
       to_ddr4_wlast,
       to_ddr4_wvalid;

  // inlined wires
  wire [170 : 0] f_reqs_rv$port1__read,
		 f_reqs_rv$port1__write_1,
		 f_reqs_rv$port2__read;
  wire f_reqs_rv$EN_port0__write, f_reqs_rv$EN_port1__write;

  // register f_reqs_rv
  reg [170 : 0] f_reqs_rv;
  wire [170 : 0] f_reqs_rv$D_IN;
  wire f_reqs_rv$EN;

  // register rg_addr_base
  reg [63 : 0] rg_addr_base;
  wire [63 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [63 : 0] rg_addr_lim;
  wire [63 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_cached_addr
  reg [63 : 0] rg_cached_addr;
  wire [63 : 0] rg_cached_addr$D_IN;
  wire rg_cached_addr$EN;

  // register rg_cached_clean
  reg rg_cached_clean;
  wire rg_cached_clean$D_IN, rg_cached_clean$EN;

  // register rg_cached_data_512
  reg [511 : 0] rg_cached_data_512;
  wire [511 : 0] rg_cached_data_512$D_IN;
  wire rg_cached_data_512$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_status
  reg [7 : 0] rg_status;
  reg [7 : 0] rg_status$D_IN;
  wire rg_status$EN;

  // register rg_tohost_addr
  reg [63 : 0] rg_tohost_addr;
  wire [63 : 0] rg_tohost_addr$D_IN;
  wire rg_tohost_addr$EN;

  // register rg_watch_tohost
  reg rg_watch_tohost;
  wire rg_watch_tohost$D_IN, rg_watch_tohost$EN;

  // ports of submodule master_xactor_f_rd_addr
  wire [108 : 0] master_xactor_f_rd_addr$D_IN, master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ,
       master_xactor_f_rd_addr$FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [530 : 0] master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$EMPTY_N,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [108 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ,
       master_xactor_f_wr_addr$FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [576 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ,
       master_xactor_f_wr_data$FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [17 : 0] master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$EMPTY_N,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // ports of submodule slave_xactor_f_rd_addr
  wire [96 : 0] slave_xactor_f_rd_addr$D_IN, slave_xactor_f_rd_addr$D_OUT;
  wire slave_xactor_f_rd_addr$CLR,
       slave_xactor_f_rd_addr$DEQ,
       slave_xactor_f_rd_addr$EMPTY_N,
       slave_xactor_f_rd_addr$ENQ,
       slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_f_rd_data
  wire [70 : 0] slave_xactor_f_rd_data$D_IN, slave_xactor_f_rd_data$D_OUT;
  wire slave_xactor_f_rd_data$CLR,
       slave_xactor_f_rd_data$DEQ,
       slave_xactor_f_rd_data$EMPTY_N,
       slave_xactor_f_rd_data$ENQ,
       slave_xactor_f_rd_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_addr
  wire [96 : 0] slave_xactor_f_wr_addr$D_IN, slave_xactor_f_wr_addr$D_OUT;
  wire slave_xactor_f_wr_addr$CLR,
       slave_xactor_f_wr_addr$DEQ,
       slave_xactor_f_wr_addr$EMPTY_N,
       slave_xactor_f_wr_addr$ENQ,
       slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_f_wr_data
  wire [72 : 0] slave_xactor_f_wr_data$D_IN, slave_xactor_f_wr_data$D_OUT;
  wire slave_xactor_f_wr_data$CLR,
       slave_xactor_f_wr_data$DEQ,
       slave_xactor_f_wr_data$EMPTY_N,
       slave_xactor_f_wr_data$ENQ,
       slave_xactor_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_resp
  wire [5 : 0] slave_xactor_f_wr_resp$D_IN, slave_xactor_f_wr_resp$D_OUT;
  wire slave_xactor_f_wr_resp$CLR,
       slave_xactor_f_wr_resp$DEQ,
       slave_xactor_f_wr_resp$EMPTY_N,
       slave_xactor_f_wr_resp$ENQ,
       slave_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_drain_mem_wr_resps,
       CAN_FIRE_RL_rl_invalid_rd_address,
       CAN_FIRE_RL_rl_invalid_wr_address,
       CAN_FIRE_RL_rl_merge_rd_req,
       CAN_FIRE_RL_rl_merge_wr_req,
       CAN_FIRE_RL_rl_miss_clean_req,
       CAN_FIRE_RL_rl_process_rd_req,
       CAN_FIRE_RL_rl_process_wr_req,
       CAN_FIRE_RL_rl_refill,
       CAN_FIRE_RL_rl_start,
       CAN_FIRE_RL_rl_writeback_dirty_idle,
       CAN_FIRE_RL_rl_writeback_dirty_miss,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_ma_set_addr_map,
       CAN_FIRE_ma_set_watch_tohost,
       CAN_FIRE_slave_m_arvalid,
       CAN_FIRE_slave_m_awvalid,
       CAN_FIRE_slave_m_bready,
       CAN_FIRE_slave_m_rready,
       CAN_FIRE_slave_m_wvalid,
       CAN_FIRE_to_ddr4_m_arready,
       CAN_FIRE_to_ddr4_m_awready,
       CAN_FIRE_to_ddr4_m_bvalid,
       CAN_FIRE_to_ddr4_m_rvalid,
       CAN_FIRE_to_ddr4_m_wready,
       WILL_FIRE_RL_rl_drain_mem_wr_resps,
       WILL_FIRE_RL_rl_invalid_rd_address,
       WILL_FIRE_RL_rl_invalid_wr_address,
       WILL_FIRE_RL_rl_merge_rd_req,
       WILL_FIRE_RL_rl_merge_wr_req,
       WILL_FIRE_RL_rl_miss_clean_req,
       WILL_FIRE_RL_rl_process_rd_req,
       WILL_FIRE_RL_rl_process_wr_req,
       WILL_FIRE_RL_rl_refill,
       WILL_FIRE_RL_rl_start,
       WILL_FIRE_RL_rl_writeback_dirty_idle,
       WILL_FIRE_RL_rl_writeback_dirty_miss,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_ma_set_addr_map,
       WILL_FIRE_ma_set_watch_tohost,
       WILL_FIRE_slave_m_arvalid,
       WILL_FIRE_slave_m_awvalid,
       WILL_FIRE_slave_m_bready,
       WILL_FIRE_slave_m_rready,
       WILL_FIRE_slave_m_wvalid,
       WILL_FIRE_to_ddr4_m_arready,
       WILL_FIRE_to_ddr4_m_awready,
       WILL_FIRE_to_ddr4_m_bvalid,
       WILL_FIRE_to_ddr4_m_rvalid,
       WILL_FIRE_to_ddr4_m_wready;

  // inputs to muxes for submodule ports
  wire [511 : 0] MUX_rg_cached_data_512$write_1__VAL_2;
  wire [170 : 0] MUX_f_reqs_rv$port1__write_1__VAL_1,
		 MUX_f_reqs_rv$port1__write_1__VAL_2;
  wire [108 : 0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1;
  wire [70 : 0] MUX_slave_xactor_f_rd_data$enq_1__VAL_1,
		MUX_slave_xactor_f_rd_data$enq_1__VAL_2;
  wire [5 : 0] MUX_slave_xactor_f_wr_resp$enq_1__VAL_1,
	       MUX_slave_xactor_f_wr_resp$enq_1__VAL_2;
  wire MUX_rg_cached_clean$write_1__SEL_1,
       MUX_rg_cached_clean$write_1__SEL_2,
       MUX_rg_cached_clean$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_status$write_1__SEL_2,
       MUX_rg_status$write_1__SEL_3,
       MUX_rg_status$write_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h9750;
  reg [31 : 0] v__h7232;
  reg [31 : 0] v__h7854;
  reg [31 : 0] v__h8646;
  reg [31 : 0] v__h7226;
  reg [31 : 0] v__h7848;
  reg [31 : 0] v__h8640;
  reg [31 : 0] v__h9744;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] data_64_old__h4889, rdata__h4066;
  wire [383 : 0] IF_f_reqs_rv_port0__read__6_BITS_106_TO_104_24_ETC___d188;
  wire [255 : 0] IF_f_reqs_rv_port0__read__6_BITS_106_TO_104_24_ETC___d183;
  wire [63 : 0] exit_value__h7270,
		mask__h4893,
		updated_data_64__h4894,
		x__h5530,
		y__h5531,
		y__h5532;
  wire [7 : 0] SEXT_f_reqs_rv_port0__read__6_BIT_64_63___d164,
	       SEXT_f_reqs_rv_port0__read__6_BIT_65_60___d161,
	       SEXT_f_reqs_rv_port0__read__6_BIT_66_56___d157,
	       SEXT_f_reqs_rv_port0__read__6_BIT_67_53___d154,
	       SEXT_f_reqs_rv_port0__read__6_BIT_68_49___d150,
	       SEXT_f_reqs_rv_port0__read__6_BIT_69_46___d147,
	       SEXT_f_reqs_rv_port0__read__6_BIT_70_42___d143,
	       SEXT_f_reqs_rv_port0__read__6_BIT_71_39___d140;
  wire [5 : 0] n__h4065;
  wire [1 : 0] rdr_rresp__h4100;
  wire NOT_f_reqs_rv_port0__read__6_BITS_92_TO_90_0_E_ETC___d246,
       f_reqs_rv_port0__read__6_BITS_164_TO_101_0_ULT_ETC___d83,
       f_reqs_rv_port0__read__6_BITS_164_TO_107_7_EQ__ETC___d89,
       f_reqs_rv_port0__read__6_BITS_92_TO_90_0_EQ_0b_ETC___d77,
       f_reqs_rv_port0__read__6_BITS_92_TO_90_0_ULE_0b11___d41,
       rg_addr_base_9_ULE_f_reqs_rv_port0__read__6_BI_ETC___d81,
       rg_state_EQ_3_AND_NOT_f_reqs_rv_port0__read__6_ETC___d252,
       rg_state_EQ_3_AND_f_reqs_rv_port0__read__6_BIT_ETC___d86,
       rg_watch_tohost_95_AND_f_reqs_rv_port0__read___ETC___d201;

  // action method slave_m_awvalid
  assign CAN_FIRE_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_awvalid = 1'd1 ;

  // value method slave_m_awready
  assign slave_awready = slave_xactor_f_wr_addr$FULL_N ;

  // action method slave_m_wvalid
  assign CAN_FIRE_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_wvalid = 1'd1 ;

  // value method slave_m_wready
  assign slave_wready = slave_xactor_f_wr_data$FULL_N ;

  // value method slave_m_bvalid
  assign slave_bvalid = slave_xactor_f_wr_resp$EMPTY_N ;

  // value method slave_m_bid
  assign slave_bid = slave_xactor_f_wr_resp$D_OUT[5:2] ;

  // value method slave_m_bresp
  assign slave_bresp = slave_xactor_f_wr_resp$D_OUT[1:0] ;

  // action method slave_m_bready
  assign CAN_FIRE_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_slave_m_bready = 1'd1 ;

  // action method slave_m_arvalid
  assign CAN_FIRE_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_arvalid = 1'd1 ;

  // value method slave_m_arready
  assign slave_arready = slave_xactor_f_rd_addr$FULL_N ;

  // value method slave_m_rvalid
  assign slave_rvalid = slave_xactor_f_rd_data$EMPTY_N ;

  // value method slave_m_rid
  assign slave_rid = slave_xactor_f_rd_data$D_OUT[70:67] ;

  // value method slave_m_rdata
  assign slave_rdata = slave_xactor_f_rd_data$D_OUT[66:3] ;

  // value method slave_m_rresp
  assign slave_rresp = slave_xactor_f_rd_data$D_OUT[2:1] ;

  // value method slave_m_rlast
  assign slave_rlast = slave_xactor_f_rd_data$D_OUT[0] ;

  // action method slave_m_rready
  assign CAN_FIRE_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_slave_m_rready = 1'd1 ;

  // value method to_ddr4_m_awvalid
  assign to_ddr4_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method to_ddr4_m_awid
  assign to_ddr4_awid = master_xactor_f_wr_addr$D_OUT[108:93] ;

  // value method to_ddr4_m_awaddr
  assign to_ddr4_awaddr = master_xactor_f_wr_addr$D_OUT[92:29] ;

  // value method to_ddr4_m_awlen
  assign to_ddr4_awlen = master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method to_ddr4_m_awsize
  assign to_ddr4_awsize = master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method to_ddr4_m_awburst
  assign to_ddr4_awburst = master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method to_ddr4_m_awlock
  assign to_ddr4_awlock = master_xactor_f_wr_addr$D_OUT[15] ;

  // value method to_ddr4_m_awcache
  assign to_ddr4_awcache = master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method to_ddr4_m_awprot
  assign to_ddr4_awprot = master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method to_ddr4_m_awqos
  assign to_ddr4_awqos = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method to_ddr4_m_awregion
  assign to_ddr4_awregion = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method to_ddr4_m_awready
  assign CAN_FIRE_to_ddr4_m_awready = 1'd1 ;
  assign WILL_FIRE_to_ddr4_m_awready = 1'd1 ;

  // value method to_ddr4_m_wvalid
  assign to_ddr4_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method to_ddr4_m_wdata
  assign to_ddr4_wdata = master_xactor_f_wr_data$D_OUT[576:65] ;

  // value method to_ddr4_m_wstrb
  assign to_ddr4_wstrb = master_xactor_f_wr_data$D_OUT[64:1] ;

  // value method to_ddr4_m_wlast
  assign to_ddr4_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // action method to_ddr4_m_wready
  assign CAN_FIRE_to_ddr4_m_wready = 1'd1 ;
  assign WILL_FIRE_to_ddr4_m_wready = 1'd1 ;

  // action method to_ddr4_m_bvalid
  assign CAN_FIRE_to_ddr4_m_bvalid = 1'd1 ;
  assign WILL_FIRE_to_ddr4_m_bvalid = 1'd1 ;

  // value method to_ddr4_m_bready
  assign to_ddr4_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method to_ddr4_m_arvalid
  assign to_ddr4_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method to_ddr4_m_arid
  assign to_ddr4_arid = master_xactor_f_rd_addr$D_OUT[108:93] ;

  // value method to_ddr4_m_araddr
  assign to_ddr4_araddr = master_xactor_f_rd_addr$D_OUT[92:29] ;

  // value method to_ddr4_m_arlen
  assign to_ddr4_arlen = master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method to_ddr4_m_arsize
  assign to_ddr4_arsize = master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method to_ddr4_m_arburst
  assign to_ddr4_arburst = master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method to_ddr4_m_arlock
  assign to_ddr4_arlock = master_xactor_f_rd_addr$D_OUT[15] ;

  // value method to_ddr4_m_arcache
  assign to_ddr4_arcache = master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method to_ddr4_m_arprot
  assign to_ddr4_arprot = master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method to_ddr4_m_arqos
  assign to_ddr4_arqos = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method to_ddr4_m_arregion
  assign to_ddr4_arregion = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method to_ddr4_m_arready
  assign CAN_FIRE_to_ddr4_m_arready = 1'd1 ;
  assign WILL_FIRE_to_ddr4_m_arready = 1'd1 ;

  // action method to_ddr4_m_rvalid
  assign CAN_FIRE_to_ddr4_m_rvalid = 1'd1 ;
  assign WILL_FIRE_to_ddr4_m_rvalid = 1'd1 ;

  // value method to_ddr4_m_rready
  assign to_ddr4_rready = master_xactor_f_rd_data$FULL_N ;

  // action method ma_set_addr_map
  assign RDY_ma_set_addr_map = rg_state == 2'd1 ;
  assign CAN_FIRE_ma_set_addr_map = rg_state == 2'd1 ;
  assign WILL_FIRE_ma_set_addr_map = EN_ma_set_addr_map ;

  // action method ma_set_watch_tohost
  assign RDY_ma_set_watch_tohost = rg_state == 2'd1 ;
  assign CAN_FIRE_ma_set_watch_tohost = rg_state == 2'd1 ;
  assign WILL_FIRE_ma_set_watch_tohost = EN_ma_set_watch_tohost ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready =
	     rg_state == 2'd1 && master_xactor_f_rd_addr$FULL_N ;
  assign CAN_FIRE_ma_ddr4_ready =
	     rg_state == 2'd1 && master_xactor_f_rd_addr$FULL_N ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = rg_status ;

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(master_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(master_xactor_f_rd_data$D_OUT),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_data$EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(master_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(master_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) master_xactor_f_wr_resp(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_resp$D_IN),
						   .ENQ(master_xactor_f_wr_resp$ENQ),
						   .DEQ(master_xactor_f_wr_resp$DEQ),
						   .CLR(master_xactor_f_wr_resp$CLR),
						   .D_OUT(master_xactor_f_wr_resp$D_OUT),
						   .FULL_N(master_xactor_f_wr_resp$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_resp$EMPTY_N));

  // submodule slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd97), .guarded(32'd1)) slave_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_addr$D_IN),
								  .ENQ(slave_xactor_f_rd_addr$ENQ),
								  .DEQ(slave_xactor_f_rd_addr$DEQ),
								  .CLR(slave_xactor_f_rd_addr$CLR),
								  .D_OUT(slave_xactor_f_rd_addr$D_OUT),
								  .FULL_N(slave_xactor_f_rd_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_addr$EMPTY_N));

  // submodule slave_xactor_f_rd_data
  FIFO2 #(.width(32'd71), .guarded(32'd1)) slave_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_data$D_IN),
								  .ENQ(slave_xactor_f_rd_data$ENQ),
								  .DEQ(slave_xactor_f_rd_data$DEQ),
								  .CLR(slave_xactor_f_rd_data$CLR),
								  .D_OUT(slave_xactor_f_rd_data$D_OUT),
								  .FULL_N(slave_xactor_f_rd_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_data$EMPTY_N));

  // submodule slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd97), .guarded(32'd1)) slave_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_addr$D_IN),
								  .ENQ(slave_xactor_f_wr_addr$ENQ),
								  .DEQ(slave_xactor_f_wr_addr$DEQ),
								  .CLR(slave_xactor_f_wr_addr$CLR),
								  .D_OUT(slave_xactor_f_wr_addr$D_OUT),
								  .FULL_N(slave_xactor_f_wr_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_addr$EMPTY_N));

  // submodule slave_xactor_f_wr_data
  FIFO2 #(.width(32'd73), .guarded(32'd1)) slave_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_data$D_IN),
								  .ENQ(slave_xactor_f_wr_data$ENQ),
								  .DEQ(slave_xactor_f_wr_data$DEQ),
								  .CLR(slave_xactor_f_wr_data$CLR),
								  .D_OUT(slave_xactor_f_wr_data$D_OUT),
								  .FULL_N(slave_xactor_f_wr_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_data$EMPTY_N));

  // submodule slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) slave_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_resp$D_IN),
								 .ENQ(slave_xactor_f_wr_resp$ENQ),
								 .DEQ(slave_xactor_f_wr_resp$DEQ),
								 .CLR(slave_xactor_f_wr_resp$CLR),
								 .D_OUT(slave_xactor_f_wr_resp$D_OUT),
								 .FULL_N(slave_xactor_f_wr_resp$FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_writeback_dirty_idle
  assign CAN_FIRE_RL_rl_writeback_dirty_idle =
	     master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N &&
	     rg_state == 2'd3 &&
	     !f_reqs_rv[170] &&
	     !rg_cached_clean ;
  assign WILL_FIRE_RL_rl_writeback_dirty_idle =
	     CAN_FIRE_RL_rl_writeback_dirty_idle ;

  // rule RL_rl_writeback_dirty_miss
  assign CAN_FIRE_RL_rl_writeback_dirty_miss =
	     master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N &&
	     f_reqs_rv[170] &&
	     rg_state_EQ_3_AND_f_reqs_rv_port0__read__6_BIT_ETC___d86 &&
	     !f_reqs_rv_port0__read__6_BITS_164_TO_107_7_EQ__ETC___d89 &&
	     !rg_cached_clean ;
  assign WILL_FIRE_RL_rl_writeback_dirty_miss =
	     CAN_FIRE_RL_rl_writeback_dirty_miss ;

  // rule RL_rl_miss_clean_req
  assign CAN_FIRE_RL_rl_miss_clean_req =
	     f_reqs_rv[170] && master_xactor_f_rd_addr$FULL_N &&
	     rg_state_EQ_3_AND_f_reqs_rv_port0__read__6_BIT_ETC___d86 &&
	     !f_reqs_rv_port0__read__6_BITS_164_TO_107_7_EQ__ETC___d89 &&
	     rg_cached_clean ;
  assign WILL_FIRE_RL_rl_miss_clean_req = CAN_FIRE_RL_rl_miss_clean_req ;

  // rule RL_rl_refill
  assign CAN_FIRE_RL_rl_refill =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_refill = CAN_FIRE_RL_rl_refill ;

  // rule RL_rl_process_rd_req
  assign CAN_FIRE_RL_rl_process_rd_req =
	     f_reqs_rv[170] && slave_xactor_f_rd_data$FULL_N &&
	     rg_state_EQ_3_AND_f_reqs_rv_port0__read__6_BIT_ETC___d86 &&
	     f_reqs_rv_port0__read__6_BITS_164_TO_107_7_EQ__ETC___d89 &&
	     !f_reqs_rv[169] ;
  assign WILL_FIRE_RL_rl_process_rd_req = CAN_FIRE_RL_rl_process_rd_req ;

  // rule RL_rl_process_wr_req
  assign CAN_FIRE_RL_rl_process_wr_req =
	     f_reqs_rv[170] && slave_xactor_f_wr_resp$FULL_N &&
	     rg_state_EQ_3_AND_f_reqs_rv_port0__read__6_BIT_ETC___d86 &&
	     f_reqs_rv_port0__read__6_BITS_164_TO_107_7_EQ__ETC___d89 &&
	     f_reqs_rv[169] ;
  assign WILL_FIRE_RL_rl_process_wr_req = CAN_FIRE_RL_rl_process_wr_req ;

  // rule RL_rl_drain_mem_wr_resps
  assign CAN_FIRE_RL_rl_drain_mem_wr_resps = master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_drain_mem_wr_resps =
	     master_xactor_f_wr_resp$EMPTY_N ;

  // rule RL_rl_start
  assign CAN_FIRE_RL_rl_start = rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_start = CAN_FIRE_RL_rl_start ;

  // rule RL_rl_invalid_rd_address
  assign CAN_FIRE_RL_rl_invalid_rd_address =
	     f_reqs_rv[170] && slave_xactor_f_rd_data$FULL_N &&
	     rg_state_EQ_3_AND_NOT_f_reqs_rv_port0__read__6_ETC___d252 &&
	     !f_reqs_rv[169] ;
  assign WILL_FIRE_RL_rl_invalid_rd_address =
	     CAN_FIRE_RL_rl_invalid_rd_address ;

  // rule RL_rl_invalid_wr_address
  assign CAN_FIRE_RL_rl_invalid_wr_address =
	     f_reqs_rv[170] && slave_xactor_f_wr_resp$FULL_N &&
	     rg_state_EQ_3_AND_NOT_f_reqs_rv_port0__read__6_ETC___d252 &&
	     f_reqs_rv[169] ;
  assign WILL_FIRE_RL_rl_invalid_wr_address =
	     CAN_FIRE_RL_rl_invalid_wr_address ;

  // rule RL_rl_merge_rd_req
  assign CAN_FIRE_RL_rl_merge_rd_req =
	     slave_xactor_f_rd_addr$EMPTY_N && !f_reqs_rv$port1__read[170] &&
	     rg_state == 2'd3 ;
  assign WILL_FIRE_RL_rl_merge_rd_req =
	     CAN_FIRE_RL_rl_merge_rd_req && !WILL_FIRE_RL_rl_miss_clean_req ;

  // rule RL_rl_merge_wr_req
  assign CAN_FIRE_RL_rl_merge_wr_req =
	     !f_reqs_rv$port1__read[170] && slave_xactor_f_wr_addr$EMPTY_N &&
	     slave_xactor_f_wr_data$EMPTY_N &&
	     rg_state == 2'd3 ;
  assign WILL_FIRE_RL_rl_merge_wr_req =
	     CAN_FIRE_RL_rl_merge_wr_req && !WILL_FIRE_RL_rl_merge_rd_req &&
	     !WILL_FIRE_RL_rl_miss_clean_req ;

  // inputs to muxes for submodule ports
  assign MUX_rg_cached_clean$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_refill &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_rg_cached_clean$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_process_wr_req && rg_status == 8'd0 ;
  assign MUX_rg_cached_clean$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_writeback_dirty_miss ||
	     WILL_FIRE_RL_rl_writeback_dirty_idle ;
  assign MUX_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_miss_clean_req || EN_ma_ddr4_ready ;
  assign MUX_rg_status$write_1__SEL_2 =
	     master_xactor_f_wr_resp$EMPTY_N &&
	     master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 ;
  assign MUX_rg_status$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     rg_watch_tohost_95_AND_f_reqs_rv_port0__read___ETC___d201 &&
	     rg_status != 8'd1 ;
  assign MUX_rg_status$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_refill &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_f_reqs_rv$port1__write_1__VAL_1 =
	     { 2'd2, slave_xactor_f_rd_addr$D_OUT, 72'hAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_reqs_rv$port1__write_1__VAL_2 =
	     { 2'd3,
	       slave_xactor_f_wr_addr$D_OUT,
	       slave_xactor_f_wr_data$D_OUT[8:1],
	       slave_xactor_f_wr_data$D_OUT[72:9] } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 =
	     { 16'd0, f_reqs_rv[164:101], 29'd1638656 } ;
  assign MUX_rg_cached_data_512$write_1__VAL_2 =
	     { IF_f_reqs_rv_port0__read__6_BITS_106_TO_104_24_ETC___d188,
	       (f_reqs_rv[106:104] == 3'd1) ?
		 updated_data_64__h4894 :
		 rg_cached_data_512[127:64],
	       (f_reqs_rv[106:104] == 3'd0) ?
		 updated_data_64__h4894 :
		 rg_cached_data_512[63:0] } ;
  assign MUX_slave_xactor_f_rd_data$enq_1__VAL_1 =
	     { f_reqs_rv[168:165], rdata__h4066, rdr_rresp__h4100, 1'd1 } ;
  assign MUX_slave_xactor_f_rd_data$enq_1__VAL_2 =
	     { f_reqs_rv[168:101], 3'd5 } ;
  assign MUX_slave_xactor_f_wr_resp$enq_1__VAL_1 =
	     { f_reqs_rv[168:165], 2'd0 } ;
  assign MUX_slave_xactor_f_wr_resp$enq_1__VAL_2 =
	     { f_reqs_rv[168:165], 2'd2 } ;

  // inlined wires
  assign f_reqs_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_invalid_wr_address ||
	     WILL_FIRE_RL_rl_invalid_rd_address ||
	     WILL_FIRE_RL_rl_process_wr_req ||
	     WILL_FIRE_RL_rl_process_rd_req ;
  assign f_reqs_rv$port1__read =
	     f_reqs_rv$EN_port0__write ?
	       171'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_reqs_rv ;
  assign f_reqs_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_merge_rd_req || WILL_FIRE_RL_rl_merge_wr_req ;
  assign f_reqs_rv$port1__write_1 =
	     WILL_FIRE_RL_rl_merge_rd_req ?
	       MUX_f_reqs_rv$port1__write_1__VAL_1 :
	       MUX_f_reqs_rv$port1__write_1__VAL_2 ;
  assign f_reqs_rv$port2__read =
	     f_reqs_rv$EN_port1__write ?
	       f_reqs_rv$port1__write_1 :
	       f_reqs_rv$port1__read ;

  // register f_reqs_rv
  assign f_reqs_rv$D_IN = f_reqs_rv$port2__read ;
  assign f_reqs_rv$EN = 1'b1 ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = ma_set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_ma_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = ma_set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_ma_set_addr_map ;

  // register rg_cached_addr
  assign rg_cached_addr$D_IN =
	     WILL_FIRE_RL_rl_miss_clean_req ? f_reqs_rv[164:101] : 64'd0 ;
  assign rg_cached_addr$EN = MUX_rg_state$write_1__SEL_2 ;

  // register rg_cached_clean
  assign rg_cached_clean$D_IN = !MUX_rg_cached_clean$write_1__SEL_2 ;
  assign rg_cached_clean$EN =
	     WILL_FIRE_RL_rl_refill &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_process_wr_req && rg_status == 8'd0 ||
	     WILL_FIRE_RL_rl_writeback_dirty_miss ||
	     WILL_FIRE_RL_rl_writeback_dirty_idle ;

  // register rg_cached_data_512
  assign rg_cached_data_512$D_IN =
	     MUX_rg_cached_clean$write_1__SEL_1 ?
	       master_xactor_f_rd_data$D_OUT[514:3] :
	       MUX_rg_cached_data_512$write_1__VAL_2 ;
  assign rg_cached_data_512$EN =
	     WILL_FIRE_RL_rl_refill &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_process_wr_req && rg_status == 8'd0 ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_start or
	  MUX_rg_state$write_1__SEL_2 or WILL_FIRE_RL_rl_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_start: rg_state$D_IN = 2'd1;
      MUX_rg_state$write_1__SEL_2: rg_state$D_IN = 2'd2;
      WILL_FIRE_RL_rl_refill: rg_state$D_IN = 2'd3;
      default: rg_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_start || WILL_FIRE_RL_rl_miss_clean_req ||
	     EN_ma_ddr4_ready ||
	     WILL_FIRE_RL_rl_refill ;

  // register rg_status
  always@(WILL_FIRE_RL_rl_start or
	  MUX_rg_status$write_1__SEL_2 or
	  MUX_rg_status$write_1__SEL_3 or MUX_rg_status$write_1__SEL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_start: rg_status$D_IN = 8'd0;
    MUX_rg_status$write_1__SEL_2: rg_status$D_IN = 8'd2;
    MUX_rg_status$write_1__SEL_3: rg_status$D_IN = 8'd1;
    MUX_rg_status$write_1__SEL_4: rg_status$D_IN = 8'd2;
    default: rg_status$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign rg_status$EN =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     rg_watch_tohost_95_AND_f_reqs_rv_port0__read___ETC___d201 &&
	     rg_status != 8'd1 ||
	     WILL_FIRE_RL_rl_refill &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     master_xactor_f_wr_resp$EMPTY_N &&
	     master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0 ||
	     WILL_FIRE_RL_rl_start ;

  // register rg_tohost_addr
  assign rg_tohost_addr$D_IN = ma_set_watch_tohost_tohost_addr ;
  assign rg_tohost_addr$EN = EN_ma_set_watch_tohost ;

  // register rg_watch_tohost
  assign rg_watch_tohost$D_IN = ma_set_watch_tohost_watch_tohost ;
  assign rg_watch_tohost$EN = EN_ma_set_watch_tohost ;

  // submodule master_xactor_f_rd_addr
  assign master_xactor_f_rd_addr$D_IN =
	     WILL_FIRE_RL_rl_miss_clean_req ?
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_1 :
	       109'd1638656 ;
  assign master_xactor_f_rd_addr$ENQ = MUX_rg_state$write_1__SEL_2 ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N && to_ddr4_arready ;
  assign master_xactor_f_rd_addr$CLR = CAN_FIRE_RL_rl_start ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { to_ddr4_rid, to_ddr4_rdata, to_ddr4_rresp, to_ddr4_rlast } ;
  assign master_xactor_f_rd_data$ENQ =
	     to_ddr4_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ = CAN_FIRE_RL_rl_refill ;
  assign master_xactor_f_rd_data$CLR = CAN_FIRE_RL_rl_start ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN =
	     { 16'd0, rg_cached_addr, 29'd1638656 } ;
  assign master_xactor_f_wr_addr$ENQ = MUX_rg_cached_clean$write_1__SEL_3 ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N && to_ddr4_awready ;
  assign master_xactor_f_wr_addr$CLR = CAN_FIRE_RL_rl_start ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN =
	     { rg_cached_data_512, 65'h1FFFFFFFFFFFFFFFF } ;
  assign master_xactor_f_wr_data$ENQ = MUX_rg_cached_clean$write_1__SEL_3 ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && to_ddr4_wready ;
  assign master_xactor_f_wr_data$CLR = CAN_FIRE_RL_rl_start ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN = { to_ddr4_bid, to_ddr4_bresp } ;
  assign master_xactor_f_wr_resp$ENQ =
	     to_ddr4_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ = master_xactor_f_wr_resp$EMPTY_N ;
  assign master_xactor_f_wr_resp$CLR = CAN_FIRE_RL_rl_start ;

  // submodule slave_xactor_f_rd_addr
  assign slave_xactor_f_rd_addr$D_IN =
	     { slave_arid,
	       slave_araddr,
	       slave_arlen,
	       slave_arsize,
	       slave_arburst,
	       slave_arlock,
	       slave_arcache,
	       slave_arprot,
	       slave_arqos,
	       slave_arregion } ;
  assign slave_xactor_f_rd_addr$ENQ =
	     slave_arvalid && slave_xactor_f_rd_addr$FULL_N ;
  assign slave_xactor_f_rd_addr$DEQ =
	     CAN_FIRE_RL_rl_merge_rd_req && !WILL_FIRE_RL_rl_miss_clean_req ;
  assign slave_xactor_f_rd_addr$CLR = rg_state == 2'd0 ;

  // submodule slave_xactor_f_rd_data
  assign slave_xactor_f_rd_data$D_IN =
	     WILL_FIRE_RL_rl_process_rd_req ?
	       MUX_slave_xactor_f_rd_data$enq_1__VAL_1 :
	       MUX_slave_xactor_f_rd_data$enq_1__VAL_2 ;
  assign slave_xactor_f_rd_data$ENQ =
	     WILL_FIRE_RL_rl_process_rd_req ||
	     WILL_FIRE_RL_rl_invalid_rd_address ;
  assign slave_xactor_f_rd_data$DEQ =
	     slave_rready && slave_xactor_f_rd_data$EMPTY_N ;
  assign slave_xactor_f_rd_data$CLR = rg_state == 2'd0 ;

  // submodule slave_xactor_f_wr_addr
  assign slave_xactor_f_wr_addr$D_IN =
	     { slave_awid,
	       slave_awaddr,
	       slave_awlen,
	       slave_awsize,
	       slave_awburst,
	       slave_awlock,
	       slave_awcache,
	       slave_awprot,
	       slave_awqos,
	       slave_awregion } ;
  assign slave_xactor_f_wr_addr$ENQ =
	     slave_awvalid && slave_xactor_f_wr_addr$FULL_N ;
  assign slave_xactor_f_wr_addr$DEQ =
	     CAN_FIRE_RL_rl_merge_wr_req && !WILL_FIRE_RL_rl_merge_rd_req &&
	     !WILL_FIRE_RL_rl_miss_clean_req ;
  assign slave_xactor_f_wr_addr$CLR = rg_state == 2'd0 ;

  // submodule slave_xactor_f_wr_data
  assign slave_xactor_f_wr_data$D_IN =
	     { slave_wdata, slave_wstrb, slave_wlast } ;
  assign slave_xactor_f_wr_data$ENQ =
	     slave_wvalid && slave_xactor_f_wr_data$FULL_N ;
  assign slave_xactor_f_wr_data$DEQ =
	     CAN_FIRE_RL_rl_merge_wr_req && !WILL_FIRE_RL_rl_merge_rd_req &&
	     !WILL_FIRE_RL_rl_miss_clean_req ;
  assign slave_xactor_f_wr_data$CLR = rg_state == 2'd0 ;

  // submodule slave_xactor_f_wr_resp
  assign slave_xactor_f_wr_resp$D_IN =
	     WILL_FIRE_RL_rl_process_wr_req ?
	       MUX_slave_xactor_f_wr_resp$enq_1__VAL_1 :
	       MUX_slave_xactor_f_wr_resp$enq_1__VAL_2 ;
  assign slave_xactor_f_wr_resp$ENQ =
	     WILL_FIRE_RL_rl_process_wr_req ||
	     WILL_FIRE_RL_rl_invalid_wr_address ;
  assign slave_xactor_f_wr_resp$DEQ =
	     slave_bready && slave_xactor_f_wr_resp$EMPTY_N ;
  assign slave_xactor_f_wr_resp$CLR = rg_state == 2'd0 ;

  // remaining internal signals
  assign IF_f_reqs_rv_port0__read__6_BITS_106_TO_104_24_ETC___d183 =
	     { (f_reqs_rv[106:104] == 3'd7) ?
		 updated_data_64__h4894 :
		 rg_cached_data_512[511:448],
	       (f_reqs_rv[106:104] == 3'd6) ?
		 updated_data_64__h4894 :
		 rg_cached_data_512[447:384],
	       (f_reqs_rv[106:104] == 3'd5) ?
		 updated_data_64__h4894 :
		 rg_cached_data_512[383:320],
	       (f_reqs_rv[106:104] == 3'd4) ?
		 updated_data_64__h4894 :
		 rg_cached_data_512[319:256] } ;
  assign IF_f_reqs_rv_port0__read__6_BITS_106_TO_104_24_ETC___d188 =
	     { IF_f_reqs_rv_port0__read__6_BITS_106_TO_104_24_ETC___d183,
	       (f_reqs_rv[106:104] == 3'd3) ?
		 updated_data_64__h4894 :
		 rg_cached_data_512[255:192],
	       (f_reqs_rv[106:104] == 3'd2) ?
		 updated_data_64__h4894 :
		 rg_cached_data_512[191:128] } ;
  assign NOT_f_reqs_rv_port0__read__6_BITS_92_TO_90_0_E_ETC___d246 =
	     f_reqs_rv[92:90] != 3'b0 &&
	     (f_reqs_rv[92:90] != 3'b001 || f_reqs_rv[101]) &&
	     (f_reqs_rv[92:90] != 3'b010 || f_reqs_rv[102:101] != 2'h0) &&
	     (f_reqs_rv[92:90] != 3'b011 || f_reqs_rv[103:101] != 3'h0) &&
	     (f_reqs_rv[92:90] != 3'b100 || f_reqs_rv[104:101] != 4'h0) &&
	     (f_reqs_rv[92:90] != 3'b101 || f_reqs_rv[105:101] != 5'h0) &&
	     (f_reqs_rv[92:90] != 3'b110 || f_reqs_rv[106:101] != 6'h0) &&
	     (f_reqs_rv[92:90] != 3'b111 || f_reqs_rv[107:101] != 7'h0) ;
  assign SEXT_f_reqs_rv_port0__read__6_BIT_64_63___d164 = {8{f_reqs_rv[64]}} ;
  assign SEXT_f_reqs_rv_port0__read__6_BIT_65_60___d161 = {8{f_reqs_rv[65]}} ;
  assign SEXT_f_reqs_rv_port0__read__6_BIT_66_56___d157 = {8{f_reqs_rv[66]}} ;
  assign SEXT_f_reqs_rv_port0__read__6_BIT_67_53___d154 = {8{f_reqs_rv[67]}} ;
  assign SEXT_f_reqs_rv_port0__read__6_BIT_68_49___d150 = {8{f_reqs_rv[68]}} ;
  assign SEXT_f_reqs_rv_port0__read__6_BIT_69_46___d147 = {8{f_reqs_rv[69]}} ;
  assign SEXT_f_reqs_rv_port0__read__6_BIT_70_42___d143 = {8{f_reqs_rv[70]}} ;
  assign SEXT_f_reqs_rv_port0__read__6_BIT_71_39___d140 = {8{f_reqs_rv[71]}} ;
  assign exit_value__h7270 = { 1'd0, f_reqs_rv[63:1] } ;
  assign f_reqs_rv_port0__read__6_BITS_164_TO_101_0_ULT_ETC___d83 =
	     f_reqs_rv[164:101] < rg_addr_lim ;
  assign f_reqs_rv_port0__read__6_BITS_164_TO_107_7_EQ__ETC___d89 =
	     f_reqs_rv[164:107] == rg_cached_addr[63:6] ;
  assign f_reqs_rv_port0__read__6_BITS_92_TO_90_0_EQ_0b_ETC___d77 =
	     f_reqs_rv[92:90] == 3'b0 ||
	     f_reqs_rv[92:90] == 3'b001 && !f_reqs_rv[101] ||
	     f_reqs_rv[92:90] == 3'b010 && f_reqs_rv[102:101] == 2'h0 ||
	     f_reqs_rv[92:90] == 3'b011 && f_reqs_rv[103:101] == 3'h0 ||
	     f_reqs_rv[92:90] == 3'b100 && f_reqs_rv[104:101] == 4'h0 ||
	     f_reqs_rv[92:90] == 3'b101 && f_reqs_rv[105:101] == 5'h0 ||
	     f_reqs_rv[92:90] == 3'b110 && f_reqs_rv[106:101] == 6'h0 ||
	     f_reqs_rv[92:90] == 3'b111 && f_reqs_rv[107:101] == 7'h0 ;
  assign f_reqs_rv_port0__read__6_BITS_92_TO_90_0_ULE_0b11___d41 =
	     f_reqs_rv[92:90] <= 3'b011 ;
  assign mask__h4893 =
	     { SEXT_f_reqs_rv_port0__read__6_BIT_71_39___d140,
	       SEXT_f_reqs_rv_port0__read__6_BIT_70_42___d143,
	       SEXT_f_reqs_rv_port0__read__6_BIT_69_46___d147,
	       SEXT_f_reqs_rv_port0__read__6_BIT_68_49___d150,
	       SEXT_f_reqs_rv_port0__read__6_BIT_67_53___d154,
	       SEXT_f_reqs_rv_port0__read__6_BIT_66_56___d157,
	       SEXT_f_reqs_rv_port0__read__6_BIT_65_60___d161,
	       SEXT_f_reqs_rv_port0__read__6_BIT_64_63___d164 } ;
  assign n__h4065 = { 3'd0, f_reqs_rv[106:104] } ;
  assign rdr_rresp__h4100 = (rg_status == 8'd0) ? 2'b0 : 2'b10 ;
  assign rg_addr_base_9_ULE_f_reqs_rv_port0__read__6_BI_ETC___d81 =
	     rg_addr_base <= f_reqs_rv[164:101] ;
  assign rg_state_EQ_3_AND_NOT_f_reqs_rv_port0__read__6_ETC___d252 =
	     rg_state == 2'd3 &&
	     (!f_reqs_rv_port0__read__6_BITS_92_TO_90_0_ULE_0b11___d41 ||
	      NOT_f_reqs_rv_port0__read__6_BITS_92_TO_90_0_E_ETC___d246 ||
	      !rg_addr_base_9_ULE_f_reqs_rv_port0__read__6_BI_ETC___d81 ||
	      !f_reqs_rv_port0__read__6_BITS_164_TO_101_0_ULT_ETC___d83) ;
  assign rg_state_EQ_3_AND_f_reqs_rv_port0__read__6_BIT_ETC___d86 =
	     rg_state == 2'd3 &&
	     f_reqs_rv_port0__read__6_BITS_92_TO_90_0_ULE_0b11___d41 &&
	     f_reqs_rv_port0__read__6_BITS_92_TO_90_0_EQ_0b_ETC___d77 &&
	     rg_addr_base_9_ULE_f_reqs_rv_port0__read__6_BI_ETC___d81 &&
	     f_reqs_rv_port0__read__6_BITS_164_TO_101_0_ULT_ETC___d83 ;
  assign rg_watch_tohost_95_AND_f_reqs_rv_port0__read___ETC___d201 =
	     rg_watch_tohost && f_reqs_rv[164:101] == rg_tohost_addr &&
	     f_reqs_rv[63:0] != 64'd0 ;
  assign updated_data_64__h4894 = x__h5530 | y__h5531 ;
  assign x__h5530 = data_64_old__h4889 & y__h5532 ;
  assign y__h5531 = f_reqs_rv[63:0] & mask__h4893 ;
  assign y__h5532 =
	     { ~SEXT_f_reqs_rv_port0__read__6_BIT_71_39___d140,
	       ~SEXT_f_reqs_rv_port0__read__6_BIT_70_42___d143,
	       ~SEXT_f_reqs_rv_port0__read__6_BIT_69_46___d147,
	       ~SEXT_f_reqs_rv_port0__read__6_BIT_68_49___d150,
	       ~SEXT_f_reqs_rv_port0__read__6_BIT_67_53___d154,
	       ~SEXT_f_reqs_rv_port0__read__6_BIT_66_56___d157,
	       ~SEXT_f_reqs_rv_port0__read__6_BIT_65_60___d161,
	       ~SEXT_f_reqs_rv_port0__read__6_BIT_64_63___d164 } ;
  always@(f_reqs_rv or rg_cached_data_512)
  begin
    case (f_reqs_rv[106:104])
      3'd0: data_64_old__h4889 = rg_cached_data_512[63:0];
      3'd1: data_64_old__h4889 = rg_cached_data_512[127:64];
      3'd2: data_64_old__h4889 = rg_cached_data_512[191:128];
      3'd3: data_64_old__h4889 = rg_cached_data_512[255:192];
      3'd4: data_64_old__h4889 = rg_cached_data_512[319:256];
      3'd5: data_64_old__h4889 = rg_cached_data_512[383:320];
      3'd6: data_64_old__h4889 = rg_cached_data_512[447:384];
      3'd7: data_64_old__h4889 = rg_cached_data_512[511:448];
    endcase
  end
  always@(n__h4065 or rg_cached_data_512)
  begin
    case (n__h4065)
      6'd0: rdata__h4066 = rg_cached_data_512[63:0];
      6'd1: rdata__h4066 = rg_cached_data_512[127:64];
      6'd2: rdata__h4066 = rg_cached_data_512[191:128];
      6'd3: rdata__h4066 = rg_cached_data_512[255:192];
      6'd4: rdata__h4066 = rg_cached_data_512[319:256];
      6'd5: rdata__h4066 = rg_cached_data_512[383:320];
      6'd6: rdata__h4066 = rg_cached_data_512[447:384];
      6'd7: rdata__h4066 = rg_cached_data_512[511:448];
      default: rdata__h4066 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        f_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    171'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_status <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_tohost_addr <= `BSV_ASSIGNMENT_DELAY 64'h0000000080001000;
	rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (f_reqs_rv$EN) f_reqs_rv <= `BSV_ASSIGNMENT_DELAY f_reqs_rv$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_status$EN) rg_status <= `BSV_ASSIGNMENT_DELAY rg_status$D_IN;
	if (rg_tohost_addr$EN)
	  rg_tohost_addr <= `BSV_ASSIGNMENT_DELAY rg_tohost_addr$D_IN;
	if (rg_watch_tohost$EN)
	  rg_watch_tohost <= `BSV_ASSIGNMENT_DELAY rg_watch_tohost$D_IN;
      end
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
    if (rg_cached_addr$EN)
      rg_cached_addr <= `BSV_ASSIGNMENT_DELAY rg_cached_addr$D_IN;
    if (rg_cached_clean$EN)
      rg_cached_clean <= `BSV_ASSIGNMENT_DELAY rg_cached_clean$D_IN;
    if (rg_cached_data_512$EN)
      rg_cached_data_512 <= `BSV_ASSIGNMENT_DELAY rg_cached_data_512$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    f_reqs_rv = 171'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_addr_base = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_lim = 64'hAAAAAAAAAAAAAAAA;
    rg_cached_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_cached_clean = 1'h0;
    rg_cached_data_512 =
	512'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state = 2'h2;
    rg_status = 8'hAA;
    rg_tohost_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_watch_tohost = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_set_addr_map)
	begin
	  v__h9750 = $stime;
	  #0;
	end
    v__h9744 = v__h9750 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_set_addr_map)
	$display("%0d: AWS_DDR4_Adapter.ma_set_addr_map: addr_base %0h lim %0h",
		 v__h9744,
		 ma_set_addr_map_addr_base,
		 ma_set_addr_map_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_set_watch_tohost && ma_set_watch_tohost_watch_tohost)
	$display("AWS_DDR4_Adapter.ma_set_watch_tohost: tohost_addr %0h",
		 ma_set_watch_tohost_tohost_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_ddr4_ready)
	$display("AWS_DDR4_Adapater.ma_ddr4_ready; start serving requests.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  rg_watch_tohost_95_AND_f_reqs_rv_port0__read___ETC___d201 &&
	  rg_status != 8'd1)
	begin
	  v__h7232 = $stime;
	  #0;
	end
    v__h7226 = v__h7232 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  rg_watch_tohost_95_AND_f_reqs_rv_port0__read___ETC___d201 &&
	  rg_status != 8'd1)
	$display("%0d: AWS_DDR4_Adapter.rl_process_wr_req: addr 0x%0h (<tohost>) data 0x%0h",
		 v__h7226,
		 f_reqs_rv[164:101],
		 f_reqs_rv[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  rg_watch_tohost_95_AND_f_reqs_rv_port0__read___ETC___d201 &&
	  rg_status != 8'd1 &&
	  f_reqs_rv[63:1] == 63'd0)
	$display("PASS ISA Test");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  rg_watch_tohost_95_AND_f_reqs_rv_port0__read___ETC___d201 &&
	  rg_status != 8'd1 &&
	  f_reqs_rv[63:1] != 63'd0)
	$display("FAIL ISA Test, sub-test number %0d", exit_value__h7270);
    if (RST_N != `BSV_RESET_VALUE)
      if (master_xactor_f_wr_resp$EMPTY_N &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	begin
	  v__h7854 = $stime;
	  #0;
	end
    v__h7848 = v__h7854 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("%0d: ERROR: AWS_DDR4_Adapter:", v__h7848);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address &&
	  NOT_f_reqs_rv_port0__read__6_BITS_92_TO_90_0_E_ETC___d246)
	$display(" read-addr is misaligned");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address &&
	  f_reqs_rv_port0__read__6_BITS_92_TO_90_0_EQ_0b_ETC___d77)
	$display(" read-addr is out of bounds");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$display("        rg_addr_base 0x%0h  rg_addr_lim 0x%0h",
		 rg_addr_base,
		 rg_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("Req { ", "req_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("REQ_OP_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[168:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[164:101]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[100:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[92:90]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "burst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[89:88]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "lock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("'h%h", f_reqs_rv[87]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "cache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[86:83]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "prot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[82:80]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "qos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[79:76]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "region: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[75:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "user: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[71:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[168:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[164:101]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	begin
	  v__h8646 = $stime;
	  #0;
	end
    v__h8640 = v__h8646 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("%0d: ERROR: AWS_DDR4_Adapter:", v__h8640);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address &&
	  NOT_f_reqs_rv_port0__read__6_BITS_92_TO_90_0_E_ETC___d246)
	$display(" write-addr is misaligned");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address &&
	  f_reqs_rv_port0__read__6_BITS_92_TO_90_0_EQ_0b_ETC___d77)
	$display(" write-addr is out of bounds");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$display("        rg_addr_base 0x%0h  rg_addr_lim 0x%0h",
		 rg_addr_base,
		 rg_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("Req { ", "req_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("REQ_OP_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "id: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[168:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[164:101]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[100:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[92:90]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "burst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[89:88]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "lock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("'h%h", f_reqs_rv[87]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "cache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[86:83]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "prot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[82:80]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "qos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[79:76]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "region: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[75:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "user: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[71:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[168:165]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("'h%h", 2'b10);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("\n");
  end
  // synopsys translate_on
endmodule  // mkAWS_DDR4_Adapter

