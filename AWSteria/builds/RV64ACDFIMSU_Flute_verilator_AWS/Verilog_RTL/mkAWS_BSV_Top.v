//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// dma_pcis_slave_awready         O     1 reg
// dma_pcis_slave_wready          O     1 reg
// dma_pcis_slave_bid             O    15 reg
// dma_pcis_slave_bresp           O     2 reg
// dma_pcis_slave_bvalid          O     1 reg
// dma_pcis_slave_arready         O     1 reg
// dma_pcis_slave_rid             O    15 reg
// dma_pcis_slave_rdata           O   512 reg
// dma_pcis_slave_rresp           O     2 reg
// dma_pcis_slave_rlast           O     1 reg
// dma_pcis_slave_rvalid          O     1 reg
// ocl_slave_aw_awready           O     1 reg
// ocl_slave_w_wready             O     1 reg
// ocl_slave_b_bresp              O     2 reg
// ocl_slave_b_bvalid             O     1 reg
// ocl_slave_ar_arready           O     1 reg
// ocl_slave_r_rdata              O    32 reg
// ocl_slave_r_rresp              O     2 reg
// ocl_slave_r_rvalid             O     1 reg
// ddr4_A_master_awid             O    16 reg
// ddr4_A_master_awaddr           O    64 reg
// ddr4_A_master_awlen            O     8 reg
// ddr4_A_master_awsize           O     3 reg
// ddr4_A_master_awburst          O     2 reg
// ddr4_A_master_awlock           O     1 reg
// ddr4_A_master_awcache          O     4 reg
// ddr4_A_master_awprot           O     3 reg
// ddr4_A_master_awqos            O     4 reg
// ddr4_A_master_awregion         O     4 reg
// ddr4_A_master_awvalid          O     1 reg
// ddr4_A_master_wdata            O   512 reg
// ddr4_A_master_wstrb            O    64 reg
// ddr4_A_master_wlast            O     1 reg
// ddr4_A_master_wvalid           O     1 reg
// ddr4_A_master_bready           O     1 reg
// ddr4_A_master_arid             O    16 reg
// ddr4_A_master_araddr           O    64 reg
// ddr4_A_master_arlen            O     8 reg
// ddr4_A_master_arsize           O     3 reg
// ddr4_A_master_arburst          O     2 reg
// ddr4_A_master_arlock           O     1 reg
// ddr4_A_master_arcache          O     4 reg
// ddr4_A_master_arprot           O     3 reg
// ddr4_A_master_arqos            O     4 reg
// ddr4_A_master_arregion         O     4 reg
// ddr4_A_master_arvalid          O     1 reg
// ddr4_A_master_rready           O     1 reg
// ddr4_B_master_awid             O    16 reg
// ddr4_B_master_awaddr           O    64 reg
// ddr4_B_master_awlen            O     8 reg
// ddr4_B_master_awsize           O     3 reg
// ddr4_B_master_awburst          O     2 reg
// ddr4_B_master_awlock           O     1 reg
// ddr4_B_master_awcache          O     4 reg
// ddr4_B_master_awprot           O     3 reg
// ddr4_B_master_awqos            O     4 reg
// ddr4_B_master_awregion         O     4 reg
// ddr4_B_master_awvalid          O     1 reg
// ddr4_B_master_wdata            O   512 reg
// ddr4_B_master_wstrb            O    64 reg
// ddr4_B_master_wlast            O     1 reg
// ddr4_B_master_wvalid           O     1 reg
// ddr4_B_master_bready           O     1 reg
// ddr4_B_master_arid             O    16 reg
// ddr4_B_master_araddr           O    64 reg
// ddr4_B_master_arlen            O     8 reg
// ddr4_B_master_arsize           O     3 reg
// ddr4_B_master_arburst          O     2 reg
// ddr4_B_master_arlock           O     1 reg
// ddr4_B_master_arcache          O     4 reg
// ddr4_B_master_arprot           O     3 reg
// ddr4_B_master_arqos            O     4 reg
// ddr4_B_master_arregion         O     4 reg
// ddr4_B_master_arvalid          O     1 reg
// ddr4_B_master_rready           O     1 reg
// ddr4_C_master_awid             O    16 reg
// ddr4_C_master_awaddr           O    64 reg
// ddr4_C_master_awlen            O     8 reg
// ddr4_C_master_awsize           O     3 reg
// ddr4_C_master_awburst          O     2 reg
// ddr4_C_master_awlock           O     1 reg
// ddr4_C_master_awcache          O     4 reg
// ddr4_C_master_awprot           O     3 reg
// ddr4_C_master_awqos            O     4 reg
// ddr4_C_master_awregion         O     4 reg
// ddr4_C_master_awvalid          O     1 reg
// ddr4_C_master_wdata            O   512 reg
// ddr4_C_master_wstrb            O    64 reg
// ddr4_C_master_wlast            O     1 reg
// ddr4_C_master_wvalid           O     1 reg
// ddr4_C_master_bready           O     1 reg
// ddr4_C_master_arid             O    16 reg
// ddr4_C_master_araddr           O    64 reg
// ddr4_C_master_arlen            O     8 reg
// ddr4_C_master_arsize           O     3 reg
// ddr4_C_master_arburst          O     2 reg
// ddr4_C_master_arlock           O     1 reg
// ddr4_C_master_arcache          O     4 reg
// ddr4_C_master_arprot           O     3 reg
// ddr4_C_master_arqos            O     4 reg
// ddr4_C_master_arregion         O     4 reg
// ddr4_C_master_arvalid          O     1 reg
// ddr4_C_master_rready           O     1 reg
// ddr4_D_master_awid             O    16 reg
// ddr4_D_master_awaddr           O    64 reg
// ddr4_D_master_awlen            O     8 reg
// ddr4_D_master_awsize           O     3 reg
// ddr4_D_master_awburst          O     2 reg
// ddr4_D_master_awlock           O     1 reg
// ddr4_D_master_awcache          O     4 reg
// ddr4_D_master_awprot           O     3 reg
// ddr4_D_master_awqos            O     4 reg
// ddr4_D_master_awregion         O     4 reg
// ddr4_D_master_awvalid          O     1 reg
// ddr4_D_master_wdata            O   512 reg
// ddr4_D_master_wstrb            O    64 reg
// ddr4_D_master_wlast            O     1 reg
// ddr4_D_master_wvalid           O     1 reg
// ddr4_D_master_bready           O     1 reg
// ddr4_D_master_arid             O    16 reg
// ddr4_D_master_araddr           O    64 reg
// ddr4_D_master_arlen            O     8 reg
// ddr4_D_master_arsize           O     3 reg
// ddr4_D_master_arburst          O     2 reg
// ddr4_D_master_arlock           O     1 reg
// ddr4_D_master_arcache          O     4 reg
// ddr4_D_master_arprot           O     3 reg
// ddr4_D_master_arqos            O     4 reg
// ddr4_D_master_arregion         O     4 reg
// ddr4_D_master_arvalid          O     1 reg
// ddr4_D_master_rready           O     1 reg
// m_vled                         O    16 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// dma_pcis_slave_awid            I    15 reg
// dma_pcis_slave_awaddr          I    64 reg
// dma_pcis_slave_awlen           I     8 reg
// dma_pcis_slave_awsize          I     3 reg
// dma_pcis_slave_awburst         I     2 reg
// dma_pcis_slave_awlock          I     1 reg
// dma_pcis_slave_awcache         I     4 reg
// dma_pcis_slave_awprot          I     3 reg
// dma_pcis_slave_awqos           I     4 reg
// dma_pcis_slave_awregion        I     4 reg
// dma_pcis_slave_wdata           I   512 reg
// dma_pcis_slave_wstrb           I    64 reg
// dma_pcis_slave_wlast           I     1 reg
// dma_pcis_slave_bready          I     1
// dma_pcis_slave_arid            I    15 reg
// dma_pcis_slave_araddr          I    64 reg
// dma_pcis_slave_arlen           I     8 reg
// dma_pcis_slave_arsize          I     3 reg
// dma_pcis_slave_arburst         I     2 reg
// dma_pcis_slave_arlock          I     1 reg
// dma_pcis_slave_arcache         I     4 reg
// dma_pcis_slave_arprot          I     3 reg
// dma_pcis_slave_arqos           I     4 reg
// dma_pcis_slave_arregion        I     4 reg
// dma_pcis_slave_rready          I     1
// ocl_slave_aw_awaddr            I    32 reg
// ocl_slave_aw_awprot            I     3 reg
// ocl_slave_w_wdata              I    32 reg
// ocl_slave_w_wstrb              I     4 reg
// ocl_slave_b_bready             I     1
// ocl_slave_ar_araddr            I    32 reg
// ocl_slave_ar_arprot            I     3 reg
// ocl_slave_r_rready             I     1
// ddr4_A_master_awready          I     1
// ddr4_A_master_wready           I     1
// ddr4_A_master_bid              I    16 reg
// ddr4_A_master_bresp            I     2 reg
// ddr4_A_master_arready          I     1
// ddr4_A_master_rid              I    16 reg
// ddr4_A_master_rdata            I   512 reg
// ddr4_A_master_rresp            I     2 reg
// ddr4_A_master_rlast            I     1 reg
// ddr4_B_master_awready          I     1
// ddr4_B_master_wready           I     1
// ddr4_B_master_bid              I    16 reg
// ddr4_B_master_bresp            I     2 reg
// ddr4_B_master_arready          I     1
// ddr4_B_master_rid              I    16 reg
// ddr4_B_master_rdata            I   512 reg
// ddr4_B_master_rresp            I     2 reg
// ddr4_B_master_rlast            I     1 reg
// ddr4_C_master_awready          I     1
// ddr4_C_master_wready           I     1
// ddr4_C_master_bid              I    16 reg
// ddr4_C_master_bresp            I     2 reg
// ddr4_C_master_arready          I     1
// ddr4_C_master_rid              I    16 reg
// ddr4_C_master_rdata            I   512 reg
// ddr4_C_master_rresp            I     2 reg
// ddr4_C_master_rlast            I     1 reg
// ddr4_D_master_awready          I     1
// ddr4_D_master_wready           I     1
// ddr4_D_master_bid              I    16 reg
// ddr4_D_master_bresp            I     2 reg
// ddr4_D_master_arready          I     1
// ddr4_D_master_rid              I    16 reg
// ddr4_D_master_rdata            I   512 reg
// ddr4_D_master_rresp            I     2 reg
// ddr4_D_master_rlast            I     1 reg
// m_ddr4_ready_ddr4_A_B_C_D_ready  I     4 reg
// m_glcount0_glcount0            I    64 unused
// m_glcount1_glcount1            I    64 unused
// m_vdip_vdip                    I    16 unused
// dma_pcis_slave_awvalid         I     1
// dma_pcis_slave_wvalid          I     1
// dma_pcis_slave_arvalid         I     1
// ocl_slave_aw_awvalid           I     1
// ocl_slave_w_wvalid             I     1
// ocl_slave_ar_arvalid           I     1
// ddr4_A_master_bvalid           I     1
// ddr4_A_master_rvalid           I     1
// ddr4_B_master_bvalid           I     1
// ddr4_B_master_rvalid           I     1
// ddr4_C_master_bvalid           I     1
// ddr4_C_master_rvalid           I     1
// ddr4_D_master_bvalid           I     1
// ddr4_D_master_rvalid           I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAWS_BSV_Top(CLK,
		     RST_N,

		     dma_pcis_slave_awid,
		     dma_pcis_slave_awaddr,
		     dma_pcis_slave_awlen,
		     dma_pcis_slave_awsize,
		     dma_pcis_slave_awburst,
		     dma_pcis_slave_awlock,
		     dma_pcis_slave_awcache,
		     dma_pcis_slave_awprot,
		     dma_pcis_slave_awqos,
		     dma_pcis_slave_awregion,
		     dma_pcis_slave_awvalid,

		     dma_pcis_slave_awready,

		     dma_pcis_slave_wdata,
		     dma_pcis_slave_wstrb,
		     dma_pcis_slave_wlast,
		     dma_pcis_slave_wvalid,

		     dma_pcis_slave_wready,

		     dma_pcis_slave_bid,

		     dma_pcis_slave_bresp,

		     dma_pcis_slave_bvalid,

		     dma_pcis_slave_bready,

		     dma_pcis_slave_arid,
		     dma_pcis_slave_araddr,
		     dma_pcis_slave_arlen,
		     dma_pcis_slave_arsize,
		     dma_pcis_slave_arburst,
		     dma_pcis_slave_arlock,
		     dma_pcis_slave_arcache,
		     dma_pcis_slave_arprot,
		     dma_pcis_slave_arqos,
		     dma_pcis_slave_arregion,
		     dma_pcis_slave_arvalid,

		     dma_pcis_slave_arready,

		     dma_pcis_slave_rid,

		     dma_pcis_slave_rdata,

		     dma_pcis_slave_rresp,

		     dma_pcis_slave_rlast,

		     dma_pcis_slave_rvalid,

		     dma_pcis_slave_rready,

		     ocl_slave_aw_awaddr,
		     ocl_slave_aw_awprot,
		     ocl_slave_aw_awvalid,

		     ocl_slave_aw_awready,

		     ocl_slave_w_wdata,
		     ocl_slave_w_wstrb,
		     ocl_slave_w_wvalid,

		     ocl_slave_w_wready,

		     ocl_slave_b_bresp,

		     ocl_slave_b_bvalid,

		     ocl_slave_b_bready,

		     ocl_slave_ar_araddr,
		     ocl_slave_ar_arprot,
		     ocl_slave_ar_arvalid,

		     ocl_slave_ar_arready,

		     ocl_slave_r_rdata,

		     ocl_slave_r_rresp,

		     ocl_slave_r_rvalid,

		     ocl_slave_r_rready,

		     ddr4_A_master_awid,

		     ddr4_A_master_awaddr,

		     ddr4_A_master_awlen,

		     ddr4_A_master_awsize,

		     ddr4_A_master_awburst,

		     ddr4_A_master_awlock,

		     ddr4_A_master_awcache,

		     ddr4_A_master_awprot,

		     ddr4_A_master_awqos,

		     ddr4_A_master_awregion,

		     ddr4_A_master_awvalid,

		     ddr4_A_master_awready,

		     ddr4_A_master_wdata,

		     ddr4_A_master_wstrb,

		     ddr4_A_master_wlast,

		     ddr4_A_master_wvalid,

		     ddr4_A_master_wready,

		     ddr4_A_master_bid,
		     ddr4_A_master_bresp,
		     ddr4_A_master_bvalid,

		     ddr4_A_master_bready,

		     ddr4_A_master_arid,

		     ddr4_A_master_araddr,

		     ddr4_A_master_arlen,

		     ddr4_A_master_arsize,

		     ddr4_A_master_arburst,

		     ddr4_A_master_arlock,

		     ddr4_A_master_arcache,

		     ddr4_A_master_arprot,

		     ddr4_A_master_arqos,

		     ddr4_A_master_arregion,

		     ddr4_A_master_arvalid,

		     ddr4_A_master_arready,

		     ddr4_A_master_rid,
		     ddr4_A_master_rdata,
		     ddr4_A_master_rresp,
		     ddr4_A_master_rlast,
		     ddr4_A_master_rvalid,

		     ddr4_A_master_rready,

		     ddr4_B_master_awid,

		     ddr4_B_master_awaddr,

		     ddr4_B_master_awlen,

		     ddr4_B_master_awsize,

		     ddr4_B_master_awburst,

		     ddr4_B_master_awlock,

		     ddr4_B_master_awcache,

		     ddr4_B_master_awprot,

		     ddr4_B_master_awqos,

		     ddr4_B_master_awregion,

		     ddr4_B_master_awvalid,

		     ddr4_B_master_awready,

		     ddr4_B_master_wdata,

		     ddr4_B_master_wstrb,

		     ddr4_B_master_wlast,

		     ddr4_B_master_wvalid,

		     ddr4_B_master_wready,

		     ddr4_B_master_bid,
		     ddr4_B_master_bresp,
		     ddr4_B_master_bvalid,

		     ddr4_B_master_bready,

		     ddr4_B_master_arid,

		     ddr4_B_master_araddr,

		     ddr4_B_master_arlen,

		     ddr4_B_master_arsize,

		     ddr4_B_master_arburst,

		     ddr4_B_master_arlock,

		     ddr4_B_master_arcache,

		     ddr4_B_master_arprot,

		     ddr4_B_master_arqos,

		     ddr4_B_master_arregion,

		     ddr4_B_master_arvalid,

		     ddr4_B_master_arready,

		     ddr4_B_master_rid,
		     ddr4_B_master_rdata,
		     ddr4_B_master_rresp,
		     ddr4_B_master_rlast,
		     ddr4_B_master_rvalid,

		     ddr4_B_master_rready,

		     ddr4_C_master_awid,

		     ddr4_C_master_awaddr,

		     ddr4_C_master_awlen,

		     ddr4_C_master_awsize,

		     ddr4_C_master_awburst,

		     ddr4_C_master_awlock,

		     ddr4_C_master_awcache,

		     ddr4_C_master_awprot,

		     ddr4_C_master_awqos,

		     ddr4_C_master_awregion,

		     ddr4_C_master_awvalid,

		     ddr4_C_master_awready,

		     ddr4_C_master_wdata,

		     ddr4_C_master_wstrb,

		     ddr4_C_master_wlast,

		     ddr4_C_master_wvalid,

		     ddr4_C_master_wready,

		     ddr4_C_master_bid,
		     ddr4_C_master_bresp,
		     ddr4_C_master_bvalid,

		     ddr4_C_master_bready,

		     ddr4_C_master_arid,

		     ddr4_C_master_araddr,

		     ddr4_C_master_arlen,

		     ddr4_C_master_arsize,

		     ddr4_C_master_arburst,

		     ddr4_C_master_arlock,

		     ddr4_C_master_arcache,

		     ddr4_C_master_arprot,

		     ddr4_C_master_arqos,

		     ddr4_C_master_arregion,

		     ddr4_C_master_arvalid,

		     ddr4_C_master_arready,

		     ddr4_C_master_rid,
		     ddr4_C_master_rdata,
		     ddr4_C_master_rresp,
		     ddr4_C_master_rlast,
		     ddr4_C_master_rvalid,

		     ddr4_C_master_rready,

		     ddr4_D_master_awid,

		     ddr4_D_master_awaddr,

		     ddr4_D_master_awlen,

		     ddr4_D_master_awsize,

		     ddr4_D_master_awburst,

		     ddr4_D_master_awlock,

		     ddr4_D_master_awcache,

		     ddr4_D_master_awprot,

		     ddr4_D_master_awqos,

		     ddr4_D_master_awregion,

		     ddr4_D_master_awvalid,

		     ddr4_D_master_awready,

		     ddr4_D_master_wdata,

		     ddr4_D_master_wstrb,

		     ddr4_D_master_wlast,

		     ddr4_D_master_wvalid,

		     ddr4_D_master_wready,

		     ddr4_D_master_bid,
		     ddr4_D_master_bresp,
		     ddr4_D_master_bvalid,

		     ddr4_D_master_bready,

		     ddr4_D_master_arid,

		     ddr4_D_master_araddr,

		     ddr4_D_master_arlen,

		     ddr4_D_master_arsize,

		     ddr4_D_master_arburst,

		     ddr4_D_master_arlock,

		     ddr4_D_master_arcache,

		     ddr4_D_master_arprot,

		     ddr4_D_master_arqos,

		     ddr4_D_master_arregion,

		     ddr4_D_master_arvalid,

		     ddr4_D_master_arready,

		     ddr4_D_master_rid,
		     ddr4_D_master_rdata,
		     ddr4_D_master_rresp,
		     ddr4_D_master_rlast,
		     ddr4_D_master_rvalid,

		     ddr4_D_master_rready,

		     m_ddr4_ready_ddr4_A_B_C_D_ready,

		     m_glcount0_glcount0,

		     m_glcount1_glcount1,

		     m_vled,

		     m_vdip_vdip);
  input  CLK;
  input  RST_N;

  // action method dma_pcis_slave_aw_awflit
  input  [14 : 0] dma_pcis_slave_awid;
  input  [63 : 0] dma_pcis_slave_awaddr;
  input  [7 : 0] dma_pcis_slave_awlen;
  input  [2 : 0] dma_pcis_slave_awsize;
  input  [1 : 0] dma_pcis_slave_awburst;
  input  dma_pcis_slave_awlock;
  input  [3 : 0] dma_pcis_slave_awcache;
  input  [2 : 0] dma_pcis_slave_awprot;
  input  [3 : 0] dma_pcis_slave_awqos;
  input  [3 : 0] dma_pcis_slave_awregion;
  input  dma_pcis_slave_awvalid;

  // value method dma_pcis_slave_aw_awready
  output dma_pcis_slave_awready;

  // action method dma_pcis_slave_w_wflit
  input  [511 : 0] dma_pcis_slave_wdata;
  input  [63 : 0] dma_pcis_slave_wstrb;
  input  dma_pcis_slave_wlast;
  input  dma_pcis_slave_wvalid;

  // value method dma_pcis_slave_w_wready
  output dma_pcis_slave_wready;

  // value method dma_pcis_slave_b_bid
  output [14 : 0] dma_pcis_slave_bid;

  // value method dma_pcis_slave_b_bresp
  output [1 : 0] dma_pcis_slave_bresp;

  // value method dma_pcis_slave_b_buser

  // value method dma_pcis_slave_b_bvalid
  output dma_pcis_slave_bvalid;

  // action method dma_pcis_slave_b_bready
  input  dma_pcis_slave_bready;

  // action method dma_pcis_slave_ar_arflit
  input  [14 : 0] dma_pcis_slave_arid;
  input  [63 : 0] dma_pcis_slave_araddr;
  input  [7 : 0] dma_pcis_slave_arlen;
  input  [2 : 0] dma_pcis_slave_arsize;
  input  [1 : 0] dma_pcis_slave_arburst;
  input  dma_pcis_slave_arlock;
  input  [3 : 0] dma_pcis_slave_arcache;
  input  [2 : 0] dma_pcis_slave_arprot;
  input  [3 : 0] dma_pcis_slave_arqos;
  input  [3 : 0] dma_pcis_slave_arregion;
  input  dma_pcis_slave_arvalid;

  // value method dma_pcis_slave_ar_arready
  output dma_pcis_slave_arready;

  // value method dma_pcis_slave_r_rid
  output [14 : 0] dma_pcis_slave_rid;

  // value method dma_pcis_slave_r_rdata
  output [511 : 0] dma_pcis_slave_rdata;

  // value method dma_pcis_slave_r_rresp
  output [1 : 0] dma_pcis_slave_rresp;

  // value method dma_pcis_slave_r_rlast
  output dma_pcis_slave_rlast;

  // value method dma_pcis_slave_r_ruser

  // value method dma_pcis_slave_r_rvalid
  output dma_pcis_slave_rvalid;

  // action method dma_pcis_slave_r_rready
  input  dma_pcis_slave_rready;

  // action method ocl_slave_aw_awflit
  input  [31 : 0] ocl_slave_aw_awaddr;
  input  [2 : 0] ocl_slave_aw_awprot;
  input  ocl_slave_aw_awvalid;

  // value method ocl_slave_aw_awready
  output ocl_slave_aw_awready;

  // action method ocl_slave_w_wflit
  input  [31 : 0] ocl_slave_w_wdata;
  input  [3 : 0] ocl_slave_w_wstrb;
  input  ocl_slave_w_wvalid;

  // value method ocl_slave_w_wready
  output ocl_slave_w_wready;

  // value method ocl_slave_b_bresp
  output [1 : 0] ocl_slave_b_bresp;

  // value method ocl_slave_b_buser

  // value method ocl_slave_b_bvalid
  output ocl_slave_b_bvalid;

  // action method ocl_slave_b_bready
  input  ocl_slave_b_bready;

  // action method ocl_slave_ar_arflit
  input  [31 : 0] ocl_slave_ar_araddr;
  input  [2 : 0] ocl_slave_ar_arprot;
  input  ocl_slave_ar_arvalid;

  // value method ocl_slave_ar_arready
  output ocl_slave_ar_arready;

  // value method ocl_slave_r_rdata
  output [31 : 0] ocl_slave_r_rdata;

  // value method ocl_slave_r_rresp
  output [1 : 0] ocl_slave_r_rresp;

  // value method ocl_slave_r_ruser

  // value method ocl_slave_r_rvalid
  output ocl_slave_r_rvalid;

  // action method ocl_slave_r_rready
  input  ocl_slave_r_rready;

  // value method ddr4_A_master_aw_awid
  output [15 : 0] ddr4_A_master_awid;

  // value method ddr4_A_master_aw_awaddr
  output [63 : 0] ddr4_A_master_awaddr;

  // value method ddr4_A_master_aw_awlen
  output [7 : 0] ddr4_A_master_awlen;

  // value method ddr4_A_master_aw_awsize
  output [2 : 0] ddr4_A_master_awsize;

  // value method ddr4_A_master_aw_awburst
  output [1 : 0] ddr4_A_master_awburst;

  // value method ddr4_A_master_aw_awlock
  output ddr4_A_master_awlock;

  // value method ddr4_A_master_aw_awcache
  output [3 : 0] ddr4_A_master_awcache;

  // value method ddr4_A_master_aw_awprot
  output [2 : 0] ddr4_A_master_awprot;

  // value method ddr4_A_master_aw_awqos
  output [3 : 0] ddr4_A_master_awqos;

  // value method ddr4_A_master_aw_awregion
  output [3 : 0] ddr4_A_master_awregion;

  // value method ddr4_A_master_aw_awuser

  // value method ddr4_A_master_aw_awvalid
  output ddr4_A_master_awvalid;

  // action method ddr4_A_master_aw_awready
  input  ddr4_A_master_awready;

  // value method ddr4_A_master_w_wdata
  output [511 : 0] ddr4_A_master_wdata;

  // value method ddr4_A_master_w_wstrb
  output [63 : 0] ddr4_A_master_wstrb;

  // value method ddr4_A_master_w_wlast
  output ddr4_A_master_wlast;

  // value method ddr4_A_master_w_wuser

  // value method ddr4_A_master_w_wvalid
  output ddr4_A_master_wvalid;

  // action method ddr4_A_master_w_wready
  input  ddr4_A_master_wready;

  // action method ddr4_A_master_b_bflit
  input  [15 : 0] ddr4_A_master_bid;
  input  [1 : 0] ddr4_A_master_bresp;
  input  ddr4_A_master_bvalid;

  // value method ddr4_A_master_b_bready
  output ddr4_A_master_bready;

  // value method ddr4_A_master_ar_arid
  output [15 : 0] ddr4_A_master_arid;

  // value method ddr4_A_master_ar_araddr
  output [63 : 0] ddr4_A_master_araddr;

  // value method ddr4_A_master_ar_arlen
  output [7 : 0] ddr4_A_master_arlen;

  // value method ddr4_A_master_ar_arsize
  output [2 : 0] ddr4_A_master_arsize;

  // value method ddr4_A_master_ar_arburst
  output [1 : 0] ddr4_A_master_arburst;

  // value method ddr4_A_master_ar_arlock
  output ddr4_A_master_arlock;

  // value method ddr4_A_master_ar_arcache
  output [3 : 0] ddr4_A_master_arcache;

  // value method ddr4_A_master_ar_arprot
  output [2 : 0] ddr4_A_master_arprot;

  // value method ddr4_A_master_ar_arqos
  output [3 : 0] ddr4_A_master_arqos;

  // value method ddr4_A_master_ar_arregion
  output [3 : 0] ddr4_A_master_arregion;

  // value method ddr4_A_master_ar_aruser

  // value method ddr4_A_master_ar_arvalid
  output ddr4_A_master_arvalid;

  // action method ddr4_A_master_ar_arready
  input  ddr4_A_master_arready;

  // action method ddr4_A_master_r_rflit
  input  [15 : 0] ddr4_A_master_rid;
  input  [511 : 0] ddr4_A_master_rdata;
  input  [1 : 0] ddr4_A_master_rresp;
  input  ddr4_A_master_rlast;
  input  ddr4_A_master_rvalid;

  // value method ddr4_A_master_r_rready
  output ddr4_A_master_rready;

  // value method ddr4_B_master_aw_awid
  output [15 : 0] ddr4_B_master_awid;

  // value method ddr4_B_master_aw_awaddr
  output [63 : 0] ddr4_B_master_awaddr;

  // value method ddr4_B_master_aw_awlen
  output [7 : 0] ddr4_B_master_awlen;

  // value method ddr4_B_master_aw_awsize
  output [2 : 0] ddr4_B_master_awsize;

  // value method ddr4_B_master_aw_awburst
  output [1 : 0] ddr4_B_master_awburst;

  // value method ddr4_B_master_aw_awlock
  output ddr4_B_master_awlock;

  // value method ddr4_B_master_aw_awcache
  output [3 : 0] ddr4_B_master_awcache;

  // value method ddr4_B_master_aw_awprot
  output [2 : 0] ddr4_B_master_awprot;

  // value method ddr4_B_master_aw_awqos
  output [3 : 0] ddr4_B_master_awqos;

  // value method ddr4_B_master_aw_awregion
  output [3 : 0] ddr4_B_master_awregion;

  // value method ddr4_B_master_aw_awuser

  // value method ddr4_B_master_aw_awvalid
  output ddr4_B_master_awvalid;

  // action method ddr4_B_master_aw_awready
  input  ddr4_B_master_awready;

  // value method ddr4_B_master_w_wdata
  output [511 : 0] ddr4_B_master_wdata;

  // value method ddr4_B_master_w_wstrb
  output [63 : 0] ddr4_B_master_wstrb;

  // value method ddr4_B_master_w_wlast
  output ddr4_B_master_wlast;

  // value method ddr4_B_master_w_wuser

  // value method ddr4_B_master_w_wvalid
  output ddr4_B_master_wvalid;

  // action method ddr4_B_master_w_wready
  input  ddr4_B_master_wready;

  // action method ddr4_B_master_b_bflit
  input  [15 : 0] ddr4_B_master_bid;
  input  [1 : 0] ddr4_B_master_bresp;
  input  ddr4_B_master_bvalid;

  // value method ddr4_B_master_b_bready
  output ddr4_B_master_bready;

  // value method ddr4_B_master_ar_arid
  output [15 : 0] ddr4_B_master_arid;

  // value method ddr4_B_master_ar_araddr
  output [63 : 0] ddr4_B_master_araddr;

  // value method ddr4_B_master_ar_arlen
  output [7 : 0] ddr4_B_master_arlen;

  // value method ddr4_B_master_ar_arsize
  output [2 : 0] ddr4_B_master_arsize;

  // value method ddr4_B_master_ar_arburst
  output [1 : 0] ddr4_B_master_arburst;

  // value method ddr4_B_master_ar_arlock
  output ddr4_B_master_arlock;

  // value method ddr4_B_master_ar_arcache
  output [3 : 0] ddr4_B_master_arcache;

  // value method ddr4_B_master_ar_arprot
  output [2 : 0] ddr4_B_master_arprot;

  // value method ddr4_B_master_ar_arqos
  output [3 : 0] ddr4_B_master_arqos;

  // value method ddr4_B_master_ar_arregion
  output [3 : 0] ddr4_B_master_arregion;

  // value method ddr4_B_master_ar_aruser

  // value method ddr4_B_master_ar_arvalid
  output ddr4_B_master_arvalid;

  // action method ddr4_B_master_ar_arready
  input  ddr4_B_master_arready;

  // action method ddr4_B_master_r_rflit
  input  [15 : 0] ddr4_B_master_rid;
  input  [511 : 0] ddr4_B_master_rdata;
  input  [1 : 0] ddr4_B_master_rresp;
  input  ddr4_B_master_rlast;
  input  ddr4_B_master_rvalid;

  // value method ddr4_B_master_r_rready
  output ddr4_B_master_rready;

  // value method ddr4_C_master_aw_awid
  output [15 : 0] ddr4_C_master_awid;

  // value method ddr4_C_master_aw_awaddr
  output [63 : 0] ddr4_C_master_awaddr;

  // value method ddr4_C_master_aw_awlen
  output [7 : 0] ddr4_C_master_awlen;

  // value method ddr4_C_master_aw_awsize
  output [2 : 0] ddr4_C_master_awsize;

  // value method ddr4_C_master_aw_awburst
  output [1 : 0] ddr4_C_master_awburst;

  // value method ddr4_C_master_aw_awlock
  output ddr4_C_master_awlock;

  // value method ddr4_C_master_aw_awcache
  output [3 : 0] ddr4_C_master_awcache;

  // value method ddr4_C_master_aw_awprot
  output [2 : 0] ddr4_C_master_awprot;

  // value method ddr4_C_master_aw_awqos
  output [3 : 0] ddr4_C_master_awqos;

  // value method ddr4_C_master_aw_awregion
  output [3 : 0] ddr4_C_master_awregion;

  // value method ddr4_C_master_aw_awuser

  // value method ddr4_C_master_aw_awvalid
  output ddr4_C_master_awvalid;

  // action method ddr4_C_master_aw_awready
  input  ddr4_C_master_awready;

  // value method ddr4_C_master_w_wdata
  output [511 : 0] ddr4_C_master_wdata;

  // value method ddr4_C_master_w_wstrb
  output [63 : 0] ddr4_C_master_wstrb;

  // value method ddr4_C_master_w_wlast
  output ddr4_C_master_wlast;

  // value method ddr4_C_master_w_wuser

  // value method ddr4_C_master_w_wvalid
  output ddr4_C_master_wvalid;

  // action method ddr4_C_master_w_wready
  input  ddr4_C_master_wready;

  // action method ddr4_C_master_b_bflit
  input  [15 : 0] ddr4_C_master_bid;
  input  [1 : 0] ddr4_C_master_bresp;
  input  ddr4_C_master_bvalid;

  // value method ddr4_C_master_b_bready
  output ddr4_C_master_bready;

  // value method ddr4_C_master_ar_arid
  output [15 : 0] ddr4_C_master_arid;

  // value method ddr4_C_master_ar_araddr
  output [63 : 0] ddr4_C_master_araddr;

  // value method ddr4_C_master_ar_arlen
  output [7 : 0] ddr4_C_master_arlen;

  // value method ddr4_C_master_ar_arsize
  output [2 : 0] ddr4_C_master_arsize;

  // value method ddr4_C_master_ar_arburst
  output [1 : 0] ddr4_C_master_arburst;

  // value method ddr4_C_master_ar_arlock
  output ddr4_C_master_arlock;

  // value method ddr4_C_master_ar_arcache
  output [3 : 0] ddr4_C_master_arcache;

  // value method ddr4_C_master_ar_arprot
  output [2 : 0] ddr4_C_master_arprot;

  // value method ddr4_C_master_ar_arqos
  output [3 : 0] ddr4_C_master_arqos;

  // value method ddr4_C_master_ar_arregion
  output [3 : 0] ddr4_C_master_arregion;

  // value method ddr4_C_master_ar_aruser

  // value method ddr4_C_master_ar_arvalid
  output ddr4_C_master_arvalid;

  // action method ddr4_C_master_ar_arready
  input  ddr4_C_master_arready;

  // action method ddr4_C_master_r_rflit
  input  [15 : 0] ddr4_C_master_rid;
  input  [511 : 0] ddr4_C_master_rdata;
  input  [1 : 0] ddr4_C_master_rresp;
  input  ddr4_C_master_rlast;
  input  ddr4_C_master_rvalid;

  // value method ddr4_C_master_r_rready
  output ddr4_C_master_rready;

  // value method ddr4_D_master_aw_awid
  output [15 : 0] ddr4_D_master_awid;

  // value method ddr4_D_master_aw_awaddr
  output [63 : 0] ddr4_D_master_awaddr;

  // value method ddr4_D_master_aw_awlen
  output [7 : 0] ddr4_D_master_awlen;

  // value method ddr4_D_master_aw_awsize
  output [2 : 0] ddr4_D_master_awsize;

  // value method ddr4_D_master_aw_awburst
  output [1 : 0] ddr4_D_master_awburst;

  // value method ddr4_D_master_aw_awlock
  output ddr4_D_master_awlock;

  // value method ddr4_D_master_aw_awcache
  output [3 : 0] ddr4_D_master_awcache;

  // value method ddr4_D_master_aw_awprot
  output [2 : 0] ddr4_D_master_awprot;

  // value method ddr4_D_master_aw_awqos
  output [3 : 0] ddr4_D_master_awqos;

  // value method ddr4_D_master_aw_awregion
  output [3 : 0] ddr4_D_master_awregion;

  // value method ddr4_D_master_aw_awuser

  // value method ddr4_D_master_aw_awvalid
  output ddr4_D_master_awvalid;

  // action method ddr4_D_master_aw_awready
  input  ddr4_D_master_awready;

  // value method ddr4_D_master_w_wdata
  output [511 : 0] ddr4_D_master_wdata;

  // value method ddr4_D_master_w_wstrb
  output [63 : 0] ddr4_D_master_wstrb;

  // value method ddr4_D_master_w_wlast
  output ddr4_D_master_wlast;

  // value method ddr4_D_master_w_wuser

  // value method ddr4_D_master_w_wvalid
  output ddr4_D_master_wvalid;

  // action method ddr4_D_master_w_wready
  input  ddr4_D_master_wready;

  // action method ddr4_D_master_b_bflit
  input  [15 : 0] ddr4_D_master_bid;
  input  [1 : 0] ddr4_D_master_bresp;
  input  ddr4_D_master_bvalid;

  // value method ddr4_D_master_b_bready
  output ddr4_D_master_bready;

  // value method ddr4_D_master_ar_arid
  output [15 : 0] ddr4_D_master_arid;

  // value method ddr4_D_master_ar_araddr
  output [63 : 0] ddr4_D_master_araddr;

  // value method ddr4_D_master_ar_arlen
  output [7 : 0] ddr4_D_master_arlen;

  // value method ddr4_D_master_ar_arsize
  output [2 : 0] ddr4_D_master_arsize;

  // value method ddr4_D_master_ar_arburst
  output [1 : 0] ddr4_D_master_arburst;

  // value method ddr4_D_master_ar_arlock
  output ddr4_D_master_arlock;

  // value method ddr4_D_master_ar_arcache
  output [3 : 0] ddr4_D_master_arcache;

  // value method ddr4_D_master_ar_arprot
  output [2 : 0] ddr4_D_master_arprot;

  // value method ddr4_D_master_ar_arqos
  output [3 : 0] ddr4_D_master_arqos;

  // value method ddr4_D_master_ar_arregion
  output [3 : 0] ddr4_D_master_arregion;

  // value method ddr4_D_master_ar_aruser

  // value method ddr4_D_master_ar_arvalid
  output ddr4_D_master_arvalid;

  // action method ddr4_D_master_ar_arready
  input  ddr4_D_master_arready;

  // action method ddr4_D_master_r_rflit
  input  [15 : 0] ddr4_D_master_rid;
  input  [511 : 0] ddr4_D_master_rdata;
  input  [1 : 0] ddr4_D_master_rresp;
  input  ddr4_D_master_rlast;
  input  ddr4_D_master_rvalid;

  // value method ddr4_D_master_r_rready
  output ddr4_D_master_rready;

  // action method m_ddr4_ready
  input  [3 : 0] m_ddr4_ready_ddr4_A_B_C_D_ready;

  // action method m_glcount0
  input  [63 : 0] m_glcount0_glcount0;

  // action method m_glcount1
  input  [63 : 0] m_glcount1_glcount1;

  // value method m_vled
  output [15 : 0] m_vled;

  // action method m_vdip
  input  [15 : 0] m_vdip_vdip;

  // signals for module outputs
  wire [511 : 0] ddr4_A_master_wdata,
		 ddr4_B_master_wdata,
		 ddr4_C_master_wdata,
		 ddr4_D_master_wdata,
		 dma_pcis_slave_rdata;
  wire [63 : 0] ddr4_A_master_araddr,
		ddr4_A_master_awaddr,
		ddr4_A_master_wstrb,
		ddr4_B_master_araddr,
		ddr4_B_master_awaddr,
		ddr4_B_master_wstrb,
		ddr4_C_master_araddr,
		ddr4_C_master_awaddr,
		ddr4_C_master_wstrb,
		ddr4_D_master_araddr,
		ddr4_D_master_awaddr,
		ddr4_D_master_wstrb;
  wire [31 : 0] ocl_slave_r_rdata;
  wire [15 : 0] ddr4_A_master_arid,
		ddr4_A_master_awid,
		ddr4_B_master_arid,
		ddr4_B_master_awid,
		ddr4_C_master_arid,
		ddr4_C_master_awid,
		ddr4_D_master_arid,
		ddr4_D_master_awid,
		m_vled;
  wire [14 : 0] dma_pcis_slave_bid, dma_pcis_slave_rid;
  wire [7 : 0] ddr4_A_master_arlen,
	       ddr4_A_master_awlen,
	       ddr4_B_master_arlen,
	       ddr4_B_master_awlen,
	       ddr4_C_master_arlen,
	       ddr4_C_master_awlen,
	       ddr4_D_master_arlen,
	       ddr4_D_master_awlen;
  wire [3 : 0] ddr4_A_master_arcache,
	       ddr4_A_master_arqos,
	       ddr4_A_master_arregion,
	       ddr4_A_master_awcache,
	       ddr4_A_master_awqos,
	       ddr4_A_master_awregion,
	       ddr4_B_master_arcache,
	       ddr4_B_master_arqos,
	       ddr4_B_master_arregion,
	       ddr4_B_master_awcache,
	       ddr4_B_master_awqos,
	       ddr4_B_master_awregion,
	       ddr4_C_master_arcache,
	       ddr4_C_master_arqos,
	       ddr4_C_master_arregion,
	       ddr4_C_master_awcache,
	       ddr4_C_master_awqos,
	       ddr4_C_master_awregion,
	       ddr4_D_master_arcache,
	       ddr4_D_master_arqos,
	       ddr4_D_master_arregion,
	       ddr4_D_master_awcache,
	       ddr4_D_master_awqos,
	       ddr4_D_master_awregion;
  wire [2 : 0] ddr4_A_master_arprot,
	       ddr4_A_master_arsize,
	       ddr4_A_master_awprot,
	       ddr4_A_master_awsize,
	       ddr4_B_master_arprot,
	       ddr4_B_master_arsize,
	       ddr4_B_master_awprot,
	       ddr4_B_master_awsize,
	       ddr4_C_master_arprot,
	       ddr4_C_master_arsize,
	       ddr4_C_master_awprot,
	       ddr4_C_master_awsize,
	       ddr4_D_master_arprot,
	       ddr4_D_master_arsize,
	       ddr4_D_master_awprot,
	       ddr4_D_master_awsize;
  wire [1 : 0] ddr4_A_master_arburst,
	       ddr4_A_master_awburst,
	       ddr4_B_master_arburst,
	       ddr4_B_master_awburst,
	       ddr4_C_master_arburst,
	       ddr4_C_master_awburst,
	       ddr4_D_master_arburst,
	       ddr4_D_master_awburst,
	       dma_pcis_slave_bresp,
	       dma_pcis_slave_rresp,
	       ocl_slave_b_bresp,
	       ocl_slave_r_rresp;
  wire ddr4_A_master_arlock,
       ddr4_A_master_arvalid,
       ddr4_A_master_awlock,
       ddr4_A_master_awvalid,
       ddr4_A_master_bready,
       ddr4_A_master_rready,
       ddr4_A_master_wlast,
       ddr4_A_master_wvalid,
       ddr4_B_master_arlock,
       ddr4_B_master_arvalid,
       ddr4_B_master_awlock,
       ddr4_B_master_awvalid,
       ddr4_B_master_bready,
       ddr4_B_master_rready,
       ddr4_B_master_wlast,
       ddr4_B_master_wvalid,
       ddr4_C_master_arlock,
       ddr4_C_master_arvalid,
       ddr4_C_master_awlock,
       ddr4_C_master_awvalid,
       ddr4_C_master_bready,
       ddr4_C_master_rready,
       ddr4_C_master_wlast,
       ddr4_C_master_wvalid,
       ddr4_D_master_arlock,
       ddr4_D_master_arvalid,
       ddr4_D_master_awlock,
       ddr4_D_master_awvalid,
       ddr4_D_master_bready,
       ddr4_D_master_rready,
       ddr4_D_master_wlast,
       ddr4_D_master_wvalid,
       dma_pcis_slave_arready,
       dma_pcis_slave_awready,
       dma_pcis_slave_bvalid,
       dma_pcis_slave_rlast,
       dma_pcis_slave_rvalid,
       dma_pcis_slave_wready,
       ocl_slave_ar_arready,
       ocl_slave_aw_awready,
       ocl_slave_b_bvalid,
       ocl_slave_r_rvalid,
       ocl_slave_w_wready;

  // inlined wires
  wire [686 : 0] split_0_doPut$wget,
		 split_1_doPut$wget,
		 split_2_doPut$wget,
		 split_3_doPut$wget;
  wire [576 : 0] inner_shim_shim_ug_slave_u_w_putWire$wget,
		 outer_shim_0_shim_ug_slave_u_w_putWire$wget,
		 outer_shim_1_shim_ug_slave_u_w_putWire$wget,
		 outer_shim_2_shim_ug_slave_u_w_putWire$wget,
		 outer_shim_3_shim_ug_slave_u_w_putWire$wget;
  wire [530 : 0] outer_shim_0_shim_ug_master_u_r_putWire$wget,
		 outer_shim_1_shim_ug_master_u_r_putWire$wget,
		 outer_shim_2_shim_ug_master_u_r_putWire$wget,
		 outer_shim_3_shim_ug_master_u_r_putWire$wget;
  wire [529 : 0] inner_shim_shim_ug_master_u_r_putWire$wget,
		 msNoSynth_0_r_buffer_enqw$wget,
		 msNoSynth_1_r_buffer_enqw$wget;
  wire [108 : 0] outer_shim_0_shim_ug_slave_u_ar_putWire$wget,
		 outer_shim_0_shim_ug_slave_u_aw_putWire$wget,
		 outer_shim_1_shim_ug_slave_u_ar_putWire$wget,
		 outer_shim_1_shim_ug_slave_u_aw_putWire$wget,
		 outer_shim_2_shim_ug_slave_u_ar_putWire$wget,
		 outer_shim_2_shim_ug_slave_u_aw_putWire$wget,
		 outer_shim_3_shim_ug_slave_u_ar_putWire$wget,
		 outer_shim_3_shim_ug_slave_u_aw_putWire$wget,
		 ssNoSynth_0_ar_buffer_enqw$wget,
		 ssNoSynth_1_ar_buffer_enqw$wget,
		 ssNoSynth_2_ar_buffer_enqw$wget,
		 ssNoSynth_3_ar_buffer_enqw$wget;
  wire [107 : 0] ifcs_0_1_noRoute_currentReq$port1__read,
		 ifcs_0_noRoute_inner_currentReq$port1__read,
		 ifcs_1_1_noRoute_currentReq$port0__write_1,
		 ifcs_1_1_noRoute_currentReq$port1__read,
		 ifcs_1_noRoute_inner_currentReq$port0__write_1,
		 ifcs_1_noRoute_inner_currentReq$port1__read,
		 inner_shim_shim_ug_slave_u_ar_putWire$wget,
		 inner_shim_shim_ug_slave_u_aw_putWire$wget;
  wire [17 : 0] outer_shim_0_shim_ug_master_u_b_putWire$wget,
		outer_shim_1_shim_ug_master_u_b_putWire$wget,
		outer_shim_2_shim_ug_master_u_b_putWire$wget,
		outer_shim_3_shim_ug_master_u_b_putWire$wget;
  wire [16 : 0] inner_shim_shim_ug_master_u_b_putWire$wget,
		msNoSynth_0_b_buffer_enqw$wget,
		msNoSynth_1_b_buffer_enqw$wget;
  wire [8 : 0] ifcs_0_1_noRoute_flitCount$port0__write_1,
	       ifcs_0_1_noRoute_flitCount$port1__read,
	       ifcs_0_1_noRoute_flitCount$port1__write_1,
	       ifcs_0_1_noRoute_flitCount$port2__read,
	       ifcs_1_1_noRoute_flitCount$port0__write_1,
	       ifcs_1_1_noRoute_flitCount$port1__read,
	       ifcs_1_1_noRoute_flitCount$port1__write_1,
	       ifcs_1_1_noRoute_flitCount$port2__read;
  wire flitToSink_0$whas,
       flitToSink_1$whas,
       flitToSink_1_0$whas,
       flitToSink_1_0_1$whas,
       flitToSink_1_1$whas,
       flitToSink_1_1_0$whas,
       flitToSink_1_1_1$whas,
       flitToSink_1_1_1_1$whas,
       flitToSink_1_2$whas,
       flitToSink_1_3$whas,
       flitToSink_2$whas,
       flitToSink_3$whas,
       ifcs_0_1_rspFwd$whas,
       ifcs_0_noRoute_inner_currentReq$EN_port0__write,
       ifcs_0_noRoute_inner_pendingReq$EN_port0__write,
       ifcs_0_noRoute_inner_pendingReq$port1__read,
       ifcs_0_noRoute_inner_pendingReq$port2__read,
       ifcs_1_1_noRoute_currentReq$EN_port0__write,
       ifcs_1_1_noRoute_flitCount$EN_port0__write,
       ifcs_1_1_rspFwd$whas,
       ifcs_1_noRoute_inner_currentReq$EN_port0__write,
       ifcs_1_noRoute_inner_pendingReq$EN_port0__write,
       ifcs_1_noRoute_inner_pendingReq$EN_port1__write,
       ifcs_1_noRoute_inner_pendingReq$port1__read,
       ifcs_1_noRoute_inner_pendingReq$port2__read,
       inner_shim_shim_ug_master_u_ar_dropWire$whas,
       inner_shim_shim_ug_master_u_aw_dropWire$whas,
       inner_shim_shim_ug_master_u_b_putWire$whas,
       inner_shim_shim_ug_master_u_r_putWire$whas,
       inner_shim_shim_ug_master_u_w_dropWire$whas,
       inner_shim_shim_ug_slave_u_ar_putWire$whas,
       inner_shim_shim_ug_slave_u_aw_putWire$whas,
       inner_shim_shim_ug_slave_u_b_dropWire$whas,
       inner_shim_shim_ug_slave_u_r_dropWire$whas,
       inner_shim_shim_ug_slave_u_w_putWire$whas,
       isSinkReady_0$wget,
       isSinkReady_1$wget,
       isSinkReady_2$wget,
       merged_0_doDrop$whas,
       merged_1_doDrop$whas,
       msNoSynth_0_ar_dwReady$whas,
       msNoSynth_0_b_buffer_enqw$whas,
       msNoSynth_0_r_buffer_enqw$whas,
       msNoSynth_0_w_dwReady$whas,
       msNoSynth_1_ar_dwReady$whas,
       msNoSynth_1_aw_dwReady$whas,
       msNoSynth_1_b_buffer_dequeueing$whas,
       msNoSynth_1_b_buffer_enqw$whas,
       msNoSynth_1_r_buffer_dequeueing$whas,
       msNoSynth_1_r_buffer_enqw$whas,
       msNoSynth_1_w_dwReady$whas,
       outer_shim_0_shim_ug_master_u_ar_dropWire$whas,
       outer_shim_0_shim_ug_master_u_aw_dropWire$whas,
       outer_shim_0_shim_ug_master_u_b_putWire$whas,
       outer_shim_0_shim_ug_master_u_r_putWire$whas,
       outer_shim_0_shim_ug_master_u_w_dropWire$whas,
       outer_shim_0_shim_ug_slave_u_ar_putWire$whas,
       outer_shim_0_shim_ug_slave_u_aw_putWire$whas,
       outer_shim_0_shim_ug_slave_u_b_dropWire$whas,
       outer_shim_0_shim_ug_slave_u_r_dropWire$whas,
       outer_shim_0_shim_ug_slave_u_w_putWire$whas,
       outer_shim_1_shim_ug_master_u_ar_dropWire$whas,
       outer_shim_1_shim_ug_master_u_aw_dropWire$whas,
       outer_shim_1_shim_ug_master_u_b_putWire$whas,
       outer_shim_1_shim_ug_master_u_r_putWire$whas,
       outer_shim_1_shim_ug_master_u_w_dropWire$whas,
       outer_shim_1_shim_ug_slave_u_ar_putWire$whas,
       outer_shim_1_shim_ug_slave_u_aw_putWire$whas,
       outer_shim_1_shim_ug_slave_u_b_dropWire$whas,
       outer_shim_1_shim_ug_slave_u_r_dropWire$whas,
       outer_shim_1_shim_ug_slave_u_w_putWire$whas,
       outer_shim_2_shim_ug_master_u_ar_dropWire$whas,
       outer_shim_2_shim_ug_master_u_aw_dropWire$whas,
       outer_shim_2_shim_ug_master_u_b_putWire$whas,
       outer_shim_2_shim_ug_master_u_r_putWire$whas,
       outer_shim_2_shim_ug_master_u_w_dropWire$whas,
       outer_shim_2_shim_ug_slave_u_ar_putWire$whas,
       outer_shim_2_shim_ug_slave_u_aw_putWire$whas,
       outer_shim_2_shim_ug_slave_u_b_dropWire$whas,
       outer_shim_2_shim_ug_slave_u_r_dropWire$whas,
       outer_shim_2_shim_ug_slave_u_w_putWire$whas,
       outer_shim_3_shim_ug_master_u_ar_dropWire$whas,
       outer_shim_3_shim_ug_master_u_aw_dropWire$whas,
       outer_shim_3_shim_ug_master_u_b_putWire$whas,
       outer_shim_3_shim_ug_master_u_r_putWire$whas,
       outer_shim_3_shim_ug_master_u_w_dropWire$whas,
       outer_shim_3_shim_ug_slave_u_ar_putWire$whas,
       outer_shim_3_shim_ug_slave_u_aw_putWire$whas,
       outer_shim_3_shim_ug_slave_u_b_dropWire$whas,
       outer_shim_3_shim_ug_slave_u_r_dropWire$whas,
       outer_shim_3_shim_ug_slave_u_w_putWire$whas,
       reqWires_0$wget,
       reqWires_1$wget,
       reqWires_1_0$wget,
       reqWires_1_0_1$wget,
       reqWires_1_1$wget,
       reqWires_1_1_0$wget,
       reqWires_1_1_1$wget,
       reqWires_1_1_1_1$wget,
       reqWires_1_1_2$wget,
       reqWires_1_1_2$whas,
       reqWires_1_1_3$wget,
       reqWires_1_2$wget,
       reqWires_1_3$wget,
       sourceSelect_1_0$whas,
       sourceSelect_1_0_1$whas,
       sourceSelect_1_1$whas,
       sourceSelect_1_1_1$whas,
       sourceSelect_1_2$whas,
       sourceSelect_1_3$whas,
       ssNoSynth_0_b_dwReady$whas,
       ssNoSynth_0_r_dwReady$whas,
       ssNoSynth_0_w_buffer_enqw$whas,
       ssNoSynth_1_b_dwReady$whas,
       ssNoSynth_1_r_dwReady$whas,
       ssNoSynth_1_w_buffer_enqw$whas,
       ssNoSynth_2_b_dwReady$whas,
       ssNoSynth_2_r_dwReady$whas,
       ssNoSynth_2_w_buffer_enqw$whas,
       ssNoSynth_3_b_dwReady$whas,
       ssNoSynth_3_r_dwReady$whas,
       ssNoSynth_3_w_buffer_enqw$whas;

  // register activeSource_0
  reg activeSource_0;
  wire activeSource_0$D_IN, activeSource_0$EN;

  // register activeSource_1
  reg activeSource_1;
  wire activeSource_1$D_IN, activeSource_1$EN;

  // register activeSource_1_0
  reg activeSource_1_0;
  wire activeSource_1_0$D_IN, activeSource_1_0$EN;

  // register activeSource_1_0_1
  reg activeSource_1_0_1;
  wire activeSource_1_0_1$D_IN, activeSource_1_0_1$EN;

  // register activeSource_1_1
  reg activeSource_1_1;
  wire activeSource_1_1$D_IN, activeSource_1_1$EN;

  // register activeSource_1_1_0
  reg activeSource_1_1_0;
  reg activeSource_1_1_0$D_IN;
  wire activeSource_1_1_0$EN;

  // register activeSource_1_1_1
  reg activeSource_1_1_1;
  wire activeSource_1_1_1$D_IN, activeSource_1_1_1$EN;

  // register activeSource_1_1_1_1
  reg activeSource_1_1_1_1;
  reg activeSource_1_1_1_1$D_IN;
  wire activeSource_1_1_1_1$EN;

  // register activeSource_1_1_2
  reg activeSource_1_1_2;
  reg activeSource_1_1_2$D_IN;
  wire activeSource_1_1_2$EN;

  // register activeSource_1_1_3
  reg activeSource_1_1_3;
  reg activeSource_1_1_3$D_IN;
  wire activeSource_1_1_3$EN;

  // register activeSource_1_2
  reg activeSource_1_2;
  wire activeSource_1_2$D_IN, activeSource_1_2$EN;

  // register activeSource_1_3
  reg activeSource_1_3;
  wire activeSource_1_3$D_IN, activeSource_1_3$EN;

  // register arbiter_1_1_firstHot
  reg arbiter_1_1_firstHot;
  wire arbiter_1_1_firstHot$D_IN, arbiter_1_1_firstHot$EN;

  // register arbiter_1_1_lastSelect
  reg arbiter_1_1_lastSelect;
  wire arbiter_1_1_lastSelect$D_IN, arbiter_1_1_lastSelect$EN;

  // register arbiter_1_1_lastSelect_1
  reg arbiter_1_1_lastSelect_1;
  wire arbiter_1_1_lastSelect_1$D_IN, arbiter_1_1_lastSelect_1$EN;

  // register arbiter_1_1_lastSelect_2
  reg arbiter_1_1_lastSelect_2;
  wire arbiter_1_1_lastSelect_2$D_IN, arbiter_1_1_lastSelect_2$EN;

  // register arbiter_1_firstHot
  reg arbiter_1_firstHot;
  wire arbiter_1_firstHot$D_IN, arbiter_1_firstHot$EN;

  // register arbiter_1_firstHot_1
  reg arbiter_1_firstHot_1;
  wire arbiter_1_firstHot_1$D_IN, arbiter_1_firstHot_1$EN;

  // register arbiter_1_lastSelect
  reg arbiter_1_lastSelect;
  wire arbiter_1_lastSelect$D_IN, arbiter_1_lastSelect$EN;

  // register arbiter_1_lastSelect_1
  reg arbiter_1_lastSelect_1;
  wire arbiter_1_lastSelect_1$D_IN, arbiter_1_lastSelect_1$EN;

  // register arbiter_1_lastSelect_2
  reg arbiter_1_lastSelect_2;
  wire arbiter_1_lastSelect_2$D_IN, arbiter_1_lastSelect_2$EN;

  // register arbiter_1_lastSelect_3
  reg arbiter_1_lastSelect_3;
  wire arbiter_1_lastSelect_3$D_IN, arbiter_1_lastSelect_3$EN;

  // register arbiter_firstHot
  reg arbiter_firstHot;
  wire arbiter_firstHot$D_IN, arbiter_firstHot$EN;

  // register arbiter_lastSelect
  reg arbiter_lastSelect;
  wire arbiter_lastSelect$D_IN, arbiter_lastSelect$EN;

  // register ifcs_0_1_noRoute_currentReq
  reg [107 : 0] ifcs_0_1_noRoute_currentReq;
  wire [107 : 0] ifcs_0_1_noRoute_currentReq$D_IN;
  wire ifcs_0_1_noRoute_currentReq$EN;

  // register ifcs_0_1_noRoute_flitCount
  reg [8 : 0] ifcs_0_1_noRoute_flitCount;
  wire [8 : 0] ifcs_0_1_noRoute_flitCount$D_IN;
  wire ifcs_0_1_noRoute_flitCount$EN;

  // register ifcs_0_1_state
  reg [1 : 0] ifcs_0_1_state;
  wire [1 : 0] ifcs_0_1_state$D_IN;
  wire ifcs_0_1_state$EN;

  // register ifcs_0_1_state_1
  reg ifcs_0_1_state_1;
  wire ifcs_0_1_state_1$D_IN, ifcs_0_1_state_1$EN;

  // register ifcs_0_noRoute_inner_currentReq
  reg [107 : 0] ifcs_0_noRoute_inner_currentReq;
  wire [107 : 0] ifcs_0_noRoute_inner_currentReq$D_IN;
  wire ifcs_0_noRoute_inner_currentReq$EN;

  // register ifcs_0_noRoute_inner_pendingReq
  reg ifcs_0_noRoute_inner_pendingReq;
  wire ifcs_0_noRoute_inner_pendingReq$D_IN,
       ifcs_0_noRoute_inner_pendingReq$EN;

  // register ifcs_0_state
  reg [1 : 0] ifcs_0_state;
  reg [1 : 0] ifcs_0_state$D_IN;
  wire ifcs_0_state$EN;

  // register ifcs_0_state_1
  reg ifcs_0_state_1;
  wire ifcs_0_state_1$D_IN, ifcs_0_state_1$EN;

  // register ifcs_1_1_noRoute_currentReq
  reg [107 : 0] ifcs_1_1_noRoute_currentReq;
  wire [107 : 0] ifcs_1_1_noRoute_currentReq$D_IN;
  wire ifcs_1_1_noRoute_currentReq$EN;

  // register ifcs_1_1_noRoute_flitCount
  reg [8 : 0] ifcs_1_1_noRoute_flitCount;
  wire [8 : 0] ifcs_1_1_noRoute_flitCount$D_IN;
  wire ifcs_1_1_noRoute_flitCount$EN;

  // register ifcs_1_1_state
  reg [1 : 0] ifcs_1_1_state;
  wire [1 : 0] ifcs_1_1_state$D_IN;
  wire ifcs_1_1_state$EN;

  // register ifcs_1_1_state_1
  reg ifcs_1_1_state_1;
  wire ifcs_1_1_state_1$D_IN, ifcs_1_1_state_1$EN;

  // register ifcs_1_noRoute_inner_currentReq
  reg [107 : 0] ifcs_1_noRoute_inner_currentReq;
  wire [107 : 0] ifcs_1_noRoute_inner_currentReq$D_IN;
  wire ifcs_1_noRoute_inner_currentReq$EN;

  // register ifcs_1_noRoute_inner_pendingReq
  reg ifcs_1_noRoute_inner_pendingReq;
  wire ifcs_1_noRoute_inner_pendingReq$D_IN,
       ifcs_1_noRoute_inner_pendingReq$EN;

  // register ifcs_1_state
  reg [1 : 0] ifcs_1_state;
  reg [1 : 0] ifcs_1_state$D_IN;
  wire ifcs_1_state$EN;

  // register ifcs_1_state_1
  reg ifcs_1_state_1;
  wire ifcs_1_state_1$D_IN, ifcs_1_state_1$EN;

  // register ifcs_2_1_state
  reg ifcs_2_1_state;
  wire ifcs_2_1_state$D_IN, ifcs_2_1_state$EN;

  // register ifcs_2_state
  reg ifcs_2_state;
  wire ifcs_2_state$D_IN, ifcs_2_state$EN;

  // register ifcs_3_1_state
  reg ifcs_3_1_state;
  wire ifcs_3_1_state$D_IN, ifcs_3_1_state$EN;

  // register ifcs_3_state
  reg ifcs_3_state;
  wire ifcs_3_state$D_IN, ifcs_3_state$EN;

  // register merged_0_flitLeft
  reg [7 : 0] merged_0_flitLeft;
  wire [7 : 0] merged_0_flitLeft$D_IN;
  wire merged_0_flitLeft$EN;

  // register merged_1_flitLeft
  reg [7 : 0] merged_1_flitLeft;
  wire [7 : 0] merged_1_flitLeft$D_IN;
  wire merged_1_flitLeft$EN;

  // register rg_ddr4_is_loaded
  reg rg_ddr4_is_loaded;
  wire rg_ddr4_is_loaded$D_IN, rg_ddr4_is_loaded$EN;

  // register rg_ddr4_ready
  reg [3 : 0] rg_ddr4_ready;
  wire [3 : 0] rg_ddr4_ready$D_IN;
  wire rg_ddr4_ready$EN;

  // register rg_initialized
  reg rg_initialized;
  wire rg_initialized$D_IN, rg_initialized$EN;

  // register split_0_flitLeft
  reg [7 : 0] split_0_flitLeft;
  wire [7 : 0] split_0_flitLeft$D_IN;
  wire split_0_flitLeft$EN;

  // register split_1_flitLeft
  reg [7 : 0] split_1_flitLeft;
  wire [7 : 0] split_1_flitLeft$D_IN;
  wire split_1_flitLeft$EN;

  // register split_2_flitLeft
  reg [7 : 0] split_2_flitLeft;
  wire [7 : 0] split_2_flitLeft$D_IN;
  wire split_2_flitLeft$EN;

  // register split_3_flitLeft
  reg [7 : 0] split_3_flitLeft;
  wire [7 : 0] split_3_flitLeft$D_IN;
  wire split_3_flitLeft$EN;

  // register state
  reg state;
  wire state$D_IN, state$EN;

  // register state_1
  reg state_1;
  wire state_1$D_IN, state_1$EN;

  // register state_1_1
  reg state_1_1;
  wire state_1_1$D_IN, state_1_1$EN;

  // register state_1_1_1
  reg state_1_1_1;
  wire state_1_1_1$D_IN, state_1_1_1$EN;

  // ports of submodule ifcs_0_1_innerReq
  wire [108 : 0] ifcs_0_1_innerReq$D_IN, ifcs_0_1_innerReq$D_OUT;
  wire ifcs_0_1_innerReq$CLR,
       ifcs_0_1_innerReq$DEQ,
       ifcs_0_1_innerReq$EMPTY_N,
       ifcs_0_1_innerReq$ENQ,
       ifcs_0_1_innerReq$FULL_N;

  // ports of submodule ifcs_0_1_innerRoute
  wire [3 : 0] ifcs_0_1_innerRoute$D_IN, ifcs_0_1_innerRoute$D_OUT;
  wire ifcs_0_1_innerRoute$CLR,
       ifcs_0_1_innerRoute$DEQ,
       ifcs_0_1_innerRoute$EMPTY_N,
       ifcs_0_1_innerRoute$ENQ,
       ifcs_0_1_innerRoute$FULL_N;

  // ports of submodule ifcs_0_1_noRouteRsp
  wire [529 : 0] ifcs_0_1_noRouteRsp$D_IN, ifcs_0_1_noRouteRsp$D_OUT;
  wire ifcs_0_1_noRouteRsp$CLR,
       ifcs_0_1_noRouteRsp$DEQ,
       ifcs_0_1_noRouteRsp$EMPTY_N,
       ifcs_0_1_noRouteRsp$ENQ,
       ifcs_0_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_0_1_routeBack
  wire [1 : 0] ifcs_0_1_routeBack$D_IN, ifcs_0_1_routeBack$D_OUT;
  wire ifcs_0_1_routeBack$CLR,
       ifcs_0_1_routeBack$DEQ,
       ifcs_0_1_routeBack$EMPTY_N,
       ifcs_0_1_routeBack$ENQ,
       ifcs_0_1_routeBack$FULL_N;

  // ports of submodule ifcs_0_1_rspBack
  wire [529 : 0] ifcs_0_1_rspBack$D_IN, ifcs_0_1_rspBack$D_OUT;
  wire ifcs_0_1_rspBack$CLR,
       ifcs_0_1_rspBack$DEQ,
       ifcs_0_1_rspBack$EMPTY_N,
       ifcs_0_1_rspBack$ENQ,
       ifcs_0_1_rspBack$FULL_N;

  // ports of submodule ifcs_0_innerReq
  wire [686 : 0] ifcs_0_innerReq$D_IN, ifcs_0_innerReq$D_OUT;
  wire ifcs_0_innerReq$CLR,
       ifcs_0_innerReq$DEQ,
       ifcs_0_innerReq$EMPTY_N,
       ifcs_0_innerReq$ENQ,
       ifcs_0_innerReq$FULL_N;

  // ports of submodule ifcs_0_innerRoute
  wire [3 : 0] ifcs_0_innerRoute$D_IN, ifcs_0_innerRoute$D_OUT;
  wire ifcs_0_innerRoute$CLR,
       ifcs_0_innerRoute$DEQ,
       ifcs_0_innerRoute$EMPTY_N,
       ifcs_0_innerRoute$ENQ,
       ifcs_0_innerRoute$FULL_N;

  // ports of submodule ifcs_0_noRouteRsp
  wire [16 : 0] ifcs_0_noRouteRsp$D_IN, ifcs_0_noRouteRsp$D_OUT;
  wire ifcs_0_noRouteRsp$CLR,
       ifcs_0_noRouteRsp$DEQ,
       ifcs_0_noRouteRsp$EMPTY_N,
       ifcs_0_noRouteRsp$ENQ,
       ifcs_0_noRouteRsp$FULL_N;

  // ports of submodule ifcs_0_routeBack
  wire [1 : 0] ifcs_0_routeBack$D_IN, ifcs_0_routeBack$D_OUT;
  wire ifcs_0_routeBack$CLR,
       ifcs_0_routeBack$DEQ,
       ifcs_0_routeBack$EMPTY_N,
       ifcs_0_routeBack$ENQ,
       ifcs_0_routeBack$FULL_N;

  // ports of submodule ifcs_0_rspBack
  wire [16 : 0] ifcs_0_rspBack$D_IN, ifcs_0_rspBack$D_OUT;
  wire ifcs_0_rspBack$CLR,
       ifcs_0_rspBack$DEQ,
       ifcs_0_rspBack$EMPTY_N,
       ifcs_0_rspBack$ENQ,
       ifcs_0_rspBack$FULL_N;

  // ports of submodule ifcs_1_1_innerReq
  wire [108 : 0] ifcs_1_1_innerReq$D_IN, ifcs_1_1_innerReq$D_OUT;
  wire ifcs_1_1_innerReq$CLR,
       ifcs_1_1_innerReq$DEQ,
       ifcs_1_1_innerReq$EMPTY_N,
       ifcs_1_1_innerReq$ENQ,
       ifcs_1_1_innerReq$FULL_N;

  // ports of submodule ifcs_1_1_innerRoute
  wire [3 : 0] ifcs_1_1_innerRoute$D_IN, ifcs_1_1_innerRoute$D_OUT;
  wire ifcs_1_1_innerRoute$CLR,
       ifcs_1_1_innerRoute$DEQ,
       ifcs_1_1_innerRoute$EMPTY_N,
       ifcs_1_1_innerRoute$ENQ,
       ifcs_1_1_innerRoute$FULL_N;

  // ports of submodule ifcs_1_1_noRouteRsp
  wire [529 : 0] ifcs_1_1_noRouteRsp$D_IN, ifcs_1_1_noRouteRsp$D_OUT;
  wire ifcs_1_1_noRouteRsp$CLR,
       ifcs_1_1_noRouteRsp$DEQ,
       ifcs_1_1_noRouteRsp$EMPTY_N,
       ifcs_1_1_noRouteRsp$ENQ,
       ifcs_1_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_1_1_routeBack
  wire [1 : 0] ifcs_1_1_routeBack$D_IN, ifcs_1_1_routeBack$D_OUT;
  wire ifcs_1_1_routeBack$CLR,
       ifcs_1_1_routeBack$DEQ,
       ifcs_1_1_routeBack$EMPTY_N,
       ifcs_1_1_routeBack$ENQ,
       ifcs_1_1_routeBack$FULL_N;

  // ports of submodule ifcs_1_1_rspBack
  wire [529 : 0] ifcs_1_1_rspBack$D_IN, ifcs_1_1_rspBack$D_OUT;
  wire ifcs_1_1_rspBack$CLR,
       ifcs_1_1_rspBack$DEQ,
       ifcs_1_1_rspBack$EMPTY_N,
       ifcs_1_1_rspBack$ENQ,
       ifcs_1_1_rspBack$FULL_N;

  // ports of submodule ifcs_1_innerReq
  wire [686 : 0] ifcs_1_innerReq$D_IN, ifcs_1_innerReq$D_OUT;
  wire ifcs_1_innerReq$CLR,
       ifcs_1_innerReq$DEQ,
       ifcs_1_innerReq$EMPTY_N,
       ifcs_1_innerReq$ENQ,
       ifcs_1_innerReq$FULL_N;

  // ports of submodule ifcs_1_innerRoute
  wire [3 : 0] ifcs_1_innerRoute$D_IN, ifcs_1_innerRoute$D_OUT;
  wire ifcs_1_innerRoute$CLR,
       ifcs_1_innerRoute$DEQ,
       ifcs_1_innerRoute$EMPTY_N,
       ifcs_1_innerRoute$ENQ,
       ifcs_1_innerRoute$FULL_N;

  // ports of submodule ifcs_1_noRouteRsp
  wire [16 : 0] ifcs_1_noRouteRsp$D_IN, ifcs_1_noRouteRsp$D_OUT;
  wire ifcs_1_noRouteRsp$CLR,
       ifcs_1_noRouteRsp$DEQ,
       ifcs_1_noRouteRsp$EMPTY_N,
       ifcs_1_noRouteRsp$ENQ,
       ifcs_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_1_routeBack
  wire [1 : 0] ifcs_1_routeBack$D_IN, ifcs_1_routeBack$D_OUT;
  wire ifcs_1_routeBack$CLR,
       ifcs_1_routeBack$DEQ,
       ifcs_1_routeBack$EMPTY_N,
       ifcs_1_routeBack$ENQ,
       ifcs_1_routeBack$FULL_N;

  // ports of submodule ifcs_1_rspBack
  wire [16 : 0] ifcs_1_rspBack$D_IN, ifcs_1_rspBack$D_OUT;
  wire ifcs_1_rspBack$CLR,
       ifcs_1_rspBack$DEQ,
       ifcs_1_rspBack$EMPTY_N,
       ifcs_1_rspBack$ENQ,
       ifcs_1_rspBack$FULL_N;

  // ports of submodule ifcs_2_1_routeBack
  wire [1 : 0] ifcs_2_1_routeBack$D_IN, ifcs_2_1_routeBack$D_OUT;
  wire ifcs_2_1_routeBack$CLR,
       ifcs_2_1_routeBack$DEQ,
       ifcs_2_1_routeBack$EMPTY_N,
       ifcs_2_1_routeBack$ENQ,
       ifcs_2_1_routeBack$FULL_N;

  // ports of submodule ifcs_2_1_rspBack
  wire [529 : 0] ifcs_2_1_rspBack$D_IN, ifcs_2_1_rspBack$D_OUT;
  wire ifcs_2_1_rspBack$CLR,
       ifcs_2_1_rspBack$DEQ,
       ifcs_2_1_rspBack$EMPTY_N,
       ifcs_2_1_rspBack$ENQ,
       ifcs_2_1_rspBack$FULL_N;

  // ports of submodule ifcs_2_routeBack
  wire [1 : 0] ifcs_2_routeBack$D_IN, ifcs_2_routeBack$D_OUT;
  wire ifcs_2_routeBack$CLR,
       ifcs_2_routeBack$DEQ,
       ifcs_2_routeBack$EMPTY_N,
       ifcs_2_routeBack$ENQ,
       ifcs_2_routeBack$FULL_N;

  // ports of submodule ifcs_2_rspBack
  wire [16 : 0] ifcs_2_rspBack$D_IN, ifcs_2_rspBack$D_OUT;
  wire ifcs_2_rspBack$CLR,
       ifcs_2_rspBack$DEQ,
       ifcs_2_rspBack$EMPTY_N,
       ifcs_2_rspBack$ENQ,
       ifcs_2_rspBack$FULL_N;

  // ports of submodule ifcs_3_1_routeBack
  wire [1 : 0] ifcs_3_1_routeBack$D_IN, ifcs_3_1_routeBack$D_OUT;
  wire ifcs_3_1_routeBack$CLR,
       ifcs_3_1_routeBack$DEQ,
       ifcs_3_1_routeBack$EMPTY_N,
       ifcs_3_1_routeBack$ENQ,
       ifcs_3_1_routeBack$FULL_N;

  // ports of submodule ifcs_3_1_rspBack
  wire [529 : 0] ifcs_3_1_rspBack$D_IN, ifcs_3_1_rspBack$D_OUT;
  wire ifcs_3_1_rspBack$CLR,
       ifcs_3_1_rspBack$DEQ,
       ifcs_3_1_rspBack$EMPTY_N,
       ifcs_3_1_rspBack$ENQ,
       ifcs_3_1_rspBack$FULL_N;

  // ports of submodule ifcs_3_routeBack
  wire [1 : 0] ifcs_3_routeBack$D_IN, ifcs_3_routeBack$D_OUT;
  wire ifcs_3_routeBack$CLR,
       ifcs_3_routeBack$DEQ,
       ifcs_3_routeBack$EMPTY_N,
       ifcs_3_routeBack$ENQ,
       ifcs_3_routeBack$FULL_N;

  // ports of submodule ifcs_3_rspBack
  wire [16 : 0] ifcs_3_rspBack$D_IN, ifcs_3_rspBack$D_OUT;
  wire ifcs_3_rspBack$CLR,
       ifcs_3_rspBack$DEQ,
       ifcs_3_rspBack$EMPTY_N,
       ifcs_3_rspBack$ENQ,
       ifcs_3_rspBack$FULL_N;

  // ports of submodule inner_shim_tmp_arff
  wire [107 : 0] inner_shim_tmp_arff$D_IN, inner_shim_tmp_arff$D_OUT;
  wire inner_shim_tmp_arff$CLR,
       inner_shim_tmp_arff$DEQ,
       inner_shim_tmp_arff$EMPTY_N,
       inner_shim_tmp_arff$ENQ,
       inner_shim_tmp_arff$FULL_N;

  // ports of submodule inner_shim_tmp_awff
  wire [107 : 0] inner_shim_tmp_awff$D_IN, inner_shim_tmp_awff$D_OUT;
  wire inner_shim_tmp_awff$CLR,
       inner_shim_tmp_awff$DEQ,
       inner_shim_tmp_awff$EMPTY_N,
       inner_shim_tmp_awff$ENQ,
       inner_shim_tmp_awff$FULL_N;

  // ports of submodule inner_shim_tmp_bff
  wire [16 : 0] inner_shim_tmp_bff$D_IN, inner_shim_tmp_bff$D_OUT;
  wire inner_shim_tmp_bff$CLR,
       inner_shim_tmp_bff$DEQ,
       inner_shim_tmp_bff$EMPTY_N,
       inner_shim_tmp_bff$ENQ,
       inner_shim_tmp_bff$FULL_N;

  // ports of submodule inner_shim_tmp_rff
  wire [529 : 0] inner_shim_tmp_rff$D_IN, inner_shim_tmp_rff$D_OUT;
  wire inner_shim_tmp_rff$CLR,
       inner_shim_tmp_rff$DEQ,
       inner_shim_tmp_rff$EMPTY_N,
       inner_shim_tmp_rff$ENQ,
       inner_shim_tmp_rff$FULL_N;

  // ports of submodule inner_shim_tmp_wff
  wire [576 : 0] inner_shim_tmp_wff$D_IN, inner_shim_tmp_wff$D_OUT;
  wire inner_shim_tmp_wff$CLR,
       inner_shim_tmp_wff$DEQ,
       inner_shim_tmp_wff$EMPTY_N,
       inner_shim_tmp_wff$ENQ,
       inner_shim_tmp_wff$FULL_N;

  // ports of submodule msNoSynth_0_b_buffer_ff
  wire [16 : 0] msNoSynth_0_b_buffer_ff$D_IN, msNoSynth_0_b_buffer_ff$D_OUT;
  wire msNoSynth_0_b_buffer_ff$CLR,
       msNoSynth_0_b_buffer_ff$DEQ,
       msNoSynth_0_b_buffer_ff$EMPTY_N,
       msNoSynth_0_b_buffer_ff$ENQ,
       msNoSynth_0_b_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_0_b_buffer_firstValid
  wire msNoSynth_0_b_buffer_firstValid$D_IN,
       msNoSynth_0_b_buffer_firstValid$EN,
       msNoSynth_0_b_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_0_r_buffer_ff
  wire [529 : 0] msNoSynth_0_r_buffer_ff$D_IN, msNoSynth_0_r_buffer_ff$D_OUT;
  wire msNoSynth_0_r_buffer_ff$CLR,
       msNoSynth_0_r_buffer_ff$DEQ,
       msNoSynth_0_r_buffer_ff$EMPTY_N,
       msNoSynth_0_r_buffer_ff$ENQ,
       msNoSynth_0_r_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_0_r_buffer_firstValid
  wire msNoSynth_0_r_buffer_firstValid$D_IN,
       msNoSynth_0_r_buffer_firstValid$EN,
       msNoSynth_0_r_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_1_b_buffer_ff
  wire [16 : 0] msNoSynth_1_b_buffer_ff$D_IN, msNoSynth_1_b_buffer_ff$D_OUT;
  wire msNoSynth_1_b_buffer_ff$CLR,
       msNoSynth_1_b_buffer_ff$DEQ,
       msNoSynth_1_b_buffer_ff$EMPTY_N,
       msNoSynth_1_b_buffer_ff$ENQ,
       msNoSynth_1_b_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_1_b_buffer_firstValid
  wire msNoSynth_1_b_buffer_firstValid$D_IN,
       msNoSynth_1_b_buffer_firstValid$EN,
       msNoSynth_1_b_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_1_r_buffer_ff
  wire [529 : 0] msNoSynth_1_r_buffer_ff$D_IN, msNoSynth_1_r_buffer_ff$D_OUT;
  wire msNoSynth_1_r_buffer_ff$CLR,
       msNoSynth_1_r_buffer_ff$DEQ,
       msNoSynth_1_r_buffer_ff$EMPTY_N,
       msNoSynth_1_r_buffer_ff$ENQ,
       msNoSynth_1_r_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_1_r_buffer_firstValid
  wire msNoSynth_1_r_buffer_firstValid$D_IN,
       msNoSynth_1_r_buffer_firstValid$EN,
       msNoSynth_1_r_buffer_firstValid$Q_OUT;

  // ports of submodule ocl_adapter
  wire [31 : 0] ocl_adapter$ocl_slave_ar_araddr,
		ocl_adapter$ocl_slave_aw_awaddr,
		ocl_adapter$ocl_slave_r_rdata,
		ocl_adapter$ocl_slave_w_wdata,
		ocl_adapter$v_from_host_0_first,
		ocl_adapter$v_from_host_1_first,
		ocl_adapter$v_from_host_2_first,
		ocl_adapter$v_from_host_4_first,
		ocl_adapter$v_to_host_0_enq_x,
		ocl_adapter$v_to_host_1_enq_x,
		ocl_adapter$v_to_host_2_enq_x,
		ocl_adapter$v_to_host_3_enq_x;
  wire [3 : 0] ocl_adapter$ocl_slave_w_wstrb;
  wire [2 : 0] ocl_adapter$ocl_slave_ar_arprot,
	       ocl_adapter$ocl_slave_aw_awprot;
  wire [1 : 0] ocl_adapter$ocl_slave_b_bresp, ocl_adapter$ocl_slave_r_rresp;
  wire ocl_adapter$EN_v_from_host_0_deq,
       ocl_adapter$EN_v_from_host_1_deq,
       ocl_adapter$EN_v_from_host_2_deq,
       ocl_adapter$EN_v_from_host_3_deq,
       ocl_adapter$EN_v_from_host_4_deq,
       ocl_adapter$EN_v_to_host_0_enq,
       ocl_adapter$EN_v_to_host_1_enq,
       ocl_adapter$EN_v_to_host_2_enq,
       ocl_adapter$EN_v_to_host_3_enq,
       ocl_adapter$RDY_v_from_host_0_deq,
       ocl_adapter$RDY_v_from_host_0_first,
       ocl_adapter$RDY_v_from_host_1_deq,
       ocl_adapter$RDY_v_from_host_1_first,
       ocl_adapter$RDY_v_from_host_2_deq,
       ocl_adapter$RDY_v_from_host_2_first,
       ocl_adapter$RDY_v_from_host_4_deq,
       ocl_adapter$RDY_v_from_host_4_first,
       ocl_adapter$RDY_v_to_host_0_enq,
       ocl_adapter$RDY_v_to_host_1_enq,
       ocl_adapter$RDY_v_to_host_2_enq,
       ocl_adapter$ocl_slave_ar_arready,
       ocl_adapter$ocl_slave_ar_arvalid,
       ocl_adapter$ocl_slave_aw_awready,
       ocl_adapter$ocl_slave_aw_awvalid,
       ocl_adapter$ocl_slave_b_bready,
       ocl_adapter$ocl_slave_b_bvalid,
       ocl_adapter$ocl_slave_r_rready,
       ocl_adapter$ocl_slave_r_rvalid,
       ocl_adapter$ocl_slave_w_wready,
       ocl_adapter$ocl_slave_w_wvalid;

  // ports of submodule outer_shim_0_tmp_arff
  wire [108 : 0] outer_shim_0_tmp_arff$D_IN, outer_shim_0_tmp_arff$D_OUT;
  wire outer_shim_0_tmp_arff$CLR,
       outer_shim_0_tmp_arff$DEQ,
       outer_shim_0_tmp_arff$EMPTY_N,
       outer_shim_0_tmp_arff$ENQ,
       outer_shim_0_tmp_arff$FULL_N;

  // ports of submodule outer_shim_0_tmp_awff
  wire [108 : 0] outer_shim_0_tmp_awff$D_IN, outer_shim_0_tmp_awff$D_OUT;
  wire outer_shim_0_tmp_awff$CLR,
       outer_shim_0_tmp_awff$DEQ,
       outer_shim_0_tmp_awff$EMPTY_N,
       outer_shim_0_tmp_awff$ENQ,
       outer_shim_0_tmp_awff$FULL_N;

  // ports of submodule outer_shim_0_tmp_bff
  wire [17 : 0] outer_shim_0_tmp_bff$D_IN, outer_shim_0_tmp_bff$D_OUT;
  wire outer_shim_0_tmp_bff$CLR,
       outer_shim_0_tmp_bff$DEQ,
       outer_shim_0_tmp_bff$EMPTY_N,
       outer_shim_0_tmp_bff$ENQ,
       outer_shim_0_tmp_bff$FULL_N;

  // ports of submodule outer_shim_0_tmp_rff
  wire [530 : 0] outer_shim_0_tmp_rff$D_IN, outer_shim_0_tmp_rff$D_OUT;
  wire outer_shim_0_tmp_rff$CLR,
       outer_shim_0_tmp_rff$DEQ,
       outer_shim_0_tmp_rff$EMPTY_N,
       outer_shim_0_tmp_rff$ENQ,
       outer_shim_0_tmp_rff$FULL_N;

  // ports of submodule outer_shim_0_tmp_wff
  wire [576 : 0] outer_shim_0_tmp_wff$D_IN, outer_shim_0_tmp_wff$D_OUT;
  wire outer_shim_0_tmp_wff$CLR,
       outer_shim_0_tmp_wff$DEQ,
       outer_shim_0_tmp_wff$EMPTY_N,
       outer_shim_0_tmp_wff$ENQ,
       outer_shim_0_tmp_wff$FULL_N;

  // ports of submodule outer_shim_1_tmp_arff
  wire [108 : 0] outer_shim_1_tmp_arff$D_IN, outer_shim_1_tmp_arff$D_OUT;
  wire outer_shim_1_tmp_arff$CLR,
       outer_shim_1_tmp_arff$DEQ,
       outer_shim_1_tmp_arff$EMPTY_N,
       outer_shim_1_tmp_arff$ENQ,
       outer_shim_1_tmp_arff$FULL_N;

  // ports of submodule outer_shim_1_tmp_awff
  wire [108 : 0] outer_shim_1_tmp_awff$D_IN, outer_shim_1_tmp_awff$D_OUT;
  wire outer_shim_1_tmp_awff$CLR,
       outer_shim_1_tmp_awff$DEQ,
       outer_shim_1_tmp_awff$EMPTY_N,
       outer_shim_1_tmp_awff$ENQ,
       outer_shim_1_tmp_awff$FULL_N;

  // ports of submodule outer_shim_1_tmp_bff
  wire [17 : 0] outer_shim_1_tmp_bff$D_IN, outer_shim_1_tmp_bff$D_OUT;
  wire outer_shim_1_tmp_bff$CLR,
       outer_shim_1_tmp_bff$DEQ,
       outer_shim_1_tmp_bff$EMPTY_N,
       outer_shim_1_tmp_bff$ENQ,
       outer_shim_1_tmp_bff$FULL_N;

  // ports of submodule outer_shim_1_tmp_rff
  wire [530 : 0] outer_shim_1_tmp_rff$D_IN, outer_shim_1_tmp_rff$D_OUT;
  wire outer_shim_1_tmp_rff$CLR,
       outer_shim_1_tmp_rff$DEQ,
       outer_shim_1_tmp_rff$EMPTY_N,
       outer_shim_1_tmp_rff$ENQ,
       outer_shim_1_tmp_rff$FULL_N;

  // ports of submodule outer_shim_1_tmp_wff
  wire [576 : 0] outer_shim_1_tmp_wff$D_IN, outer_shim_1_tmp_wff$D_OUT;
  wire outer_shim_1_tmp_wff$CLR,
       outer_shim_1_tmp_wff$DEQ,
       outer_shim_1_tmp_wff$EMPTY_N,
       outer_shim_1_tmp_wff$ENQ,
       outer_shim_1_tmp_wff$FULL_N;

  // ports of submodule outer_shim_2_tmp_arff
  wire [108 : 0] outer_shim_2_tmp_arff$D_IN, outer_shim_2_tmp_arff$D_OUT;
  wire outer_shim_2_tmp_arff$CLR,
       outer_shim_2_tmp_arff$DEQ,
       outer_shim_2_tmp_arff$EMPTY_N,
       outer_shim_2_tmp_arff$ENQ,
       outer_shim_2_tmp_arff$FULL_N;

  // ports of submodule outer_shim_2_tmp_awff
  wire [108 : 0] outer_shim_2_tmp_awff$D_IN, outer_shim_2_tmp_awff$D_OUT;
  wire outer_shim_2_tmp_awff$CLR,
       outer_shim_2_tmp_awff$DEQ,
       outer_shim_2_tmp_awff$EMPTY_N,
       outer_shim_2_tmp_awff$ENQ,
       outer_shim_2_tmp_awff$FULL_N;

  // ports of submodule outer_shim_2_tmp_bff
  wire [17 : 0] outer_shim_2_tmp_bff$D_IN, outer_shim_2_tmp_bff$D_OUT;
  wire outer_shim_2_tmp_bff$CLR,
       outer_shim_2_tmp_bff$DEQ,
       outer_shim_2_tmp_bff$EMPTY_N,
       outer_shim_2_tmp_bff$ENQ,
       outer_shim_2_tmp_bff$FULL_N;

  // ports of submodule outer_shim_2_tmp_rff
  wire [530 : 0] outer_shim_2_tmp_rff$D_IN, outer_shim_2_tmp_rff$D_OUT;
  wire outer_shim_2_tmp_rff$CLR,
       outer_shim_2_tmp_rff$DEQ,
       outer_shim_2_tmp_rff$EMPTY_N,
       outer_shim_2_tmp_rff$ENQ,
       outer_shim_2_tmp_rff$FULL_N;

  // ports of submodule outer_shim_2_tmp_wff
  wire [576 : 0] outer_shim_2_tmp_wff$D_IN, outer_shim_2_tmp_wff$D_OUT;
  wire outer_shim_2_tmp_wff$CLR,
       outer_shim_2_tmp_wff$DEQ,
       outer_shim_2_tmp_wff$EMPTY_N,
       outer_shim_2_tmp_wff$ENQ,
       outer_shim_2_tmp_wff$FULL_N;

  // ports of submodule outer_shim_3_tmp_arff
  wire [108 : 0] outer_shim_3_tmp_arff$D_IN, outer_shim_3_tmp_arff$D_OUT;
  wire outer_shim_3_tmp_arff$CLR,
       outer_shim_3_tmp_arff$DEQ,
       outer_shim_3_tmp_arff$EMPTY_N,
       outer_shim_3_tmp_arff$ENQ,
       outer_shim_3_tmp_arff$FULL_N;

  // ports of submodule outer_shim_3_tmp_awff
  wire [108 : 0] outer_shim_3_tmp_awff$D_IN, outer_shim_3_tmp_awff$D_OUT;
  wire outer_shim_3_tmp_awff$CLR,
       outer_shim_3_tmp_awff$DEQ,
       outer_shim_3_tmp_awff$EMPTY_N,
       outer_shim_3_tmp_awff$ENQ,
       outer_shim_3_tmp_awff$FULL_N;

  // ports of submodule outer_shim_3_tmp_bff
  wire [17 : 0] outer_shim_3_tmp_bff$D_IN, outer_shim_3_tmp_bff$D_OUT;
  wire outer_shim_3_tmp_bff$CLR,
       outer_shim_3_tmp_bff$DEQ,
       outer_shim_3_tmp_bff$EMPTY_N,
       outer_shim_3_tmp_bff$ENQ,
       outer_shim_3_tmp_bff$FULL_N;

  // ports of submodule outer_shim_3_tmp_rff
  wire [530 : 0] outer_shim_3_tmp_rff$D_IN, outer_shim_3_tmp_rff$D_OUT;
  wire outer_shim_3_tmp_rff$CLR,
       outer_shim_3_tmp_rff$DEQ,
       outer_shim_3_tmp_rff$EMPTY_N,
       outer_shim_3_tmp_rff$ENQ,
       outer_shim_3_tmp_rff$FULL_N;

  // ports of submodule outer_shim_3_tmp_wff
  wire [576 : 0] outer_shim_3_tmp_wff$D_IN, outer_shim_3_tmp_wff$D_OUT;
  wire outer_shim_3_tmp_wff$CLR,
       outer_shim_3_tmp_wff$DEQ,
       outer_shim_3_tmp_wff$EMPTY_N,
       outer_shim_3_tmp_wff$ENQ,
       outer_shim_3_tmp_wff$FULL_N;

  // ports of submodule soc_top
  wire [511 : 0] soc_top$to_ddr4_rdata, soc_top$to_ddr4_wdata;
  wire [63 : 0] soc_top$ma_set_verbosity_logdelay1,
		soc_top$ma_set_watch_tohost_tohost_addr,
		soc_top$to_ddr4_araddr,
		soc_top$to_ddr4_awaddr,
		soc_top$to_ddr4_wstrb;
  wire [31 : 0] soc_top$from_aws_host_put, soc_top$to_aws_host_get;
  wire [14 : 0] soc_top$to_ddr4_arid,
		soc_top$to_ddr4_awid,
		soc_top$to_ddr4_bid,
		soc_top$to_ddr4_rid;
  wire [7 : 0] soc_top$get_to_console_get,
	       soc_top$mv_status,
	       soc_top$put_from_console_put,
	       soc_top$to_ddr4_arlen,
	       soc_top$to_ddr4_awlen;
  wire [3 : 0] soc_top$ma_set_verbosity_verbosity1,
	       soc_top$to_ddr4_arcache,
	       soc_top$to_ddr4_arqos,
	       soc_top$to_ddr4_arregion,
	       soc_top$to_ddr4_awcache,
	       soc_top$to_ddr4_awqos,
	       soc_top$to_ddr4_awregion;
  wire [2 : 0] soc_top$to_ddr4_arprot,
	       soc_top$to_ddr4_arsize,
	       soc_top$to_ddr4_awprot,
	       soc_top$to_ddr4_awsize;
  wire [1 : 0] soc_top$to_ddr4_arburst,
	       soc_top$to_ddr4_awburst,
	       soc_top$to_ddr4_bresp,
	       soc_top$to_ddr4_rresp;
  wire soc_top$EN_from_aws_host_put,
       soc_top$EN_get_to_console_get,
       soc_top$EN_ma_aws_host_to_hw_interrupt,
       soc_top$EN_ma_ddr4_ready,
       soc_top$EN_ma_set_verbosity,
       soc_top$EN_ma_set_watch_tohost,
       soc_top$EN_put_from_console_put,
       soc_top$EN_to_aws_host_get,
       soc_top$RDY_from_aws_host_put,
       soc_top$RDY_get_to_console_get,
       soc_top$RDY_ma_ddr4_ready,
       soc_top$RDY_ma_set_watch_tohost,
       soc_top$RDY_put_from_console_put,
       soc_top$RDY_to_aws_host_get,
       soc_top$ma_aws_host_to_hw_interrupt_x,
       soc_top$ma_set_watch_tohost_watch_tohost,
       soc_top$to_ddr4_arlock,
       soc_top$to_ddr4_arready,
       soc_top$to_ddr4_arvalid,
       soc_top$to_ddr4_awlock,
       soc_top$to_ddr4_awready,
       soc_top$to_ddr4_awvalid,
       soc_top$to_ddr4_bready,
       soc_top$to_ddr4_bvalid,
       soc_top$to_ddr4_rlast,
       soc_top$to_ddr4_rready,
       soc_top$to_ddr4_rvalid,
       soc_top$to_ddr4_wlast,
       soc_top$to_ddr4_wready,
       soc_top$to_ddr4_wvalid;

  // ports of submodule ssNoSynth_0_ar_buffer_ff
  wire [108 : 0] ssNoSynth_0_ar_buffer_ff$D_IN,
		 ssNoSynth_0_ar_buffer_ff$D_OUT;
  wire ssNoSynth_0_ar_buffer_ff$CLR,
       ssNoSynth_0_ar_buffer_ff$DEQ,
       ssNoSynth_0_ar_buffer_ff$EMPTY_N,
       ssNoSynth_0_ar_buffer_ff$ENQ,
       ssNoSynth_0_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_ar_buffer_firstValid
  wire ssNoSynth_0_ar_buffer_firstValid$D_IN,
       ssNoSynth_0_ar_buffer_firstValid$EN,
       ssNoSynth_0_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_0_aw_buffer_ff
  wire [108 : 0] ssNoSynth_0_aw_buffer_ff$D_IN,
		 ssNoSynth_0_aw_buffer_ff$D_OUT;
  wire ssNoSynth_0_aw_buffer_ff$CLR,
       ssNoSynth_0_aw_buffer_ff$DEQ,
       ssNoSynth_0_aw_buffer_ff$EMPTY_N,
       ssNoSynth_0_aw_buffer_ff$ENQ,
       ssNoSynth_0_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_aw_buffer_firstValid
  wire ssNoSynth_0_aw_buffer_firstValid$D_IN,
       ssNoSynth_0_aw_buffer_firstValid$EN,
       ssNoSynth_0_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_0_w_buffer_ff
  wire [576 : 0] ssNoSynth_0_w_buffer_ff$D_IN, ssNoSynth_0_w_buffer_ff$D_OUT;
  wire ssNoSynth_0_w_buffer_ff$CLR,
       ssNoSynth_0_w_buffer_ff$DEQ,
       ssNoSynth_0_w_buffer_ff$EMPTY_N,
       ssNoSynth_0_w_buffer_ff$ENQ,
       ssNoSynth_0_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_w_buffer_firstValid
  wire ssNoSynth_0_w_buffer_firstValid$D_IN,
       ssNoSynth_0_w_buffer_firstValid$EN,
       ssNoSynth_0_w_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_ar_buffer_ff
  wire [108 : 0] ssNoSynth_1_ar_buffer_ff$D_IN,
		 ssNoSynth_1_ar_buffer_ff$D_OUT;
  wire ssNoSynth_1_ar_buffer_ff$CLR,
       ssNoSynth_1_ar_buffer_ff$DEQ,
       ssNoSynth_1_ar_buffer_ff$EMPTY_N,
       ssNoSynth_1_ar_buffer_ff$ENQ,
       ssNoSynth_1_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_ar_buffer_firstValid
  wire ssNoSynth_1_ar_buffer_firstValid$D_IN,
       ssNoSynth_1_ar_buffer_firstValid$EN,
       ssNoSynth_1_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_aw_buffer_ff
  wire [108 : 0] ssNoSynth_1_aw_buffer_ff$D_IN,
		 ssNoSynth_1_aw_buffer_ff$D_OUT;
  wire ssNoSynth_1_aw_buffer_ff$CLR,
       ssNoSynth_1_aw_buffer_ff$DEQ,
       ssNoSynth_1_aw_buffer_ff$EMPTY_N,
       ssNoSynth_1_aw_buffer_ff$ENQ,
       ssNoSynth_1_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_aw_buffer_firstValid
  wire ssNoSynth_1_aw_buffer_firstValid$D_IN,
       ssNoSynth_1_aw_buffer_firstValid$EN,
       ssNoSynth_1_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_w_buffer_ff
  wire [576 : 0] ssNoSynth_1_w_buffer_ff$D_IN, ssNoSynth_1_w_buffer_ff$D_OUT;
  wire ssNoSynth_1_w_buffer_ff$CLR,
       ssNoSynth_1_w_buffer_ff$DEQ,
       ssNoSynth_1_w_buffer_ff$EMPTY_N,
       ssNoSynth_1_w_buffer_ff$ENQ,
       ssNoSynth_1_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_w_buffer_firstValid
  wire ssNoSynth_1_w_buffer_firstValid$D_IN,
       ssNoSynth_1_w_buffer_firstValid$EN,
       ssNoSynth_1_w_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_ar_buffer_ff
  wire [108 : 0] ssNoSynth_2_ar_buffer_ff$D_IN,
		 ssNoSynth_2_ar_buffer_ff$D_OUT;
  wire ssNoSynth_2_ar_buffer_ff$CLR,
       ssNoSynth_2_ar_buffer_ff$DEQ,
       ssNoSynth_2_ar_buffer_ff$EMPTY_N,
       ssNoSynth_2_ar_buffer_ff$ENQ,
       ssNoSynth_2_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_ar_buffer_firstValid
  wire ssNoSynth_2_ar_buffer_firstValid$D_IN,
       ssNoSynth_2_ar_buffer_firstValid$EN,
       ssNoSynth_2_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_aw_buffer_ff
  wire [108 : 0] ssNoSynth_2_aw_buffer_ff$D_IN,
		 ssNoSynth_2_aw_buffer_ff$D_OUT;
  wire ssNoSynth_2_aw_buffer_ff$CLR,
       ssNoSynth_2_aw_buffer_ff$DEQ,
       ssNoSynth_2_aw_buffer_ff$EMPTY_N,
       ssNoSynth_2_aw_buffer_ff$ENQ,
       ssNoSynth_2_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_aw_buffer_firstValid
  wire ssNoSynth_2_aw_buffer_firstValid$D_IN,
       ssNoSynth_2_aw_buffer_firstValid$EN,
       ssNoSynth_2_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_w_buffer_ff
  wire [576 : 0] ssNoSynth_2_w_buffer_ff$D_IN, ssNoSynth_2_w_buffer_ff$D_OUT;
  wire ssNoSynth_2_w_buffer_ff$CLR,
       ssNoSynth_2_w_buffer_ff$DEQ,
       ssNoSynth_2_w_buffer_ff$EMPTY_N,
       ssNoSynth_2_w_buffer_ff$ENQ,
       ssNoSynth_2_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_w_buffer_firstValid
  wire ssNoSynth_2_w_buffer_firstValid$D_IN,
       ssNoSynth_2_w_buffer_firstValid$EN,
       ssNoSynth_2_w_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_3_ar_buffer_ff
  wire [108 : 0] ssNoSynth_3_ar_buffer_ff$D_IN,
		 ssNoSynth_3_ar_buffer_ff$D_OUT;
  wire ssNoSynth_3_ar_buffer_ff$CLR,
       ssNoSynth_3_ar_buffer_ff$DEQ,
       ssNoSynth_3_ar_buffer_ff$EMPTY_N,
       ssNoSynth_3_ar_buffer_ff$ENQ,
       ssNoSynth_3_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_3_ar_buffer_firstValid
  wire ssNoSynth_3_ar_buffer_firstValid$D_IN,
       ssNoSynth_3_ar_buffer_firstValid$EN,
       ssNoSynth_3_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_3_aw_buffer_ff
  wire [108 : 0] ssNoSynth_3_aw_buffer_ff$D_IN,
		 ssNoSynth_3_aw_buffer_ff$D_OUT;
  wire ssNoSynth_3_aw_buffer_ff$CLR,
       ssNoSynth_3_aw_buffer_ff$DEQ,
       ssNoSynth_3_aw_buffer_ff$EMPTY_N,
       ssNoSynth_3_aw_buffer_ff$ENQ,
       ssNoSynth_3_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_3_aw_buffer_firstValid
  wire ssNoSynth_3_aw_buffer_firstValid$D_IN,
       ssNoSynth_3_aw_buffer_firstValid$EN,
       ssNoSynth_3_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_3_w_buffer_ff
  wire [576 : 0] ssNoSynth_3_w_buffer_ff$D_IN, ssNoSynth_3_w_buffer_ff$D_OUT;
  wire ssNoSynth_3_w_buffer_ff$CLR,
       ssNoSynth_3_w_buffer_ff$DEQ,
       ssNoSynth_3_w_buffer_ff$EMPTY_N,
       ssNoSynth_3_w_buffer_ff$ENQ,
       ssNoSynth_3_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_3_w_buffer_firstValid
  wire ssNoSynth_3_w_buffer_firstValid$D_IN,
       ssNoSynth_3_w_buffer_firstValid$EN,
       ssNoSynth_3_w_buffer_firstValid$Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_arbitrate,
       CAN_FIRE_RL_arbitrate_1,
       CAN_FIRE_RL_arbitrate_2,
       CAN_FIRE_RL_arbitrate_3,
       CAN_FIRE_RL_burst,
       CAN_FIRE_RL_burst_1,
       CAN_FIRE_RL_burst_10,
       CAN_FIRE_RL_burst_11,
       CAN_FIRE_RL_burst_2,
       CAN_FIRE_RL_burst_3,
       CAN_FIRE_RL_burst_4,
       CAN_FIRE_RL_burst_5,
       CAN_FIRE_RL_burst_6,
       CAN_FIRE_RL_burst_7,
       CAN_FIRE_RL_burst_8,
       CAN_FIRE_RL_burst_9,
       CAN_FIRE_RL_checkSinkReady,
       CAN_FIRE_RL_checkSinkReady_1,
       CAN_FIRE_RL_checkSinkReady_10,
       CAN_FIRE_RL_checkSinkReady_11,
       CAN_FIRE_RL_checkSinkReady_2,
       CAN_FIRE_RL_checkSinkReady_3,
       CAN_FIRE_RL_checkSinkReady_4,
       CAN_FIRE_RL_checkSinkReady_5,
       CAN_FIRE_RL_checkSinkReady_6,
       CAN_FIRE_RL_checkSinkReady_7,
       CAN_FIRE_RL_checkSinkReady_8,
       CAN_FIRE_RL_checkSinkReady_9,
       CAN_FIRE_RL_craftReq,
       CAN_FIRE_RL_craftReq_1,
       CAN_FIRE_RL_craftReq_10,
       CAN_FIRE_RL_craftReq_11,
       CAN_FIRE_RL_craftReq_2,
       CAN_FIRE_RL_craftReq_3,
       CAN_FIRE_RL_craftReq_4,
       CAN_FIRE_RL_craftReq_5,
       CAN_FIRE_RL_craftReq_6,
       CAN_FIRE_RL_craftReq_7,
       CAN_FIRE_RL_craftReq_8,
       CAN_FIRE_RL_craftReq_9,
       CAN_FIRE_RL_ifcs_0_1_drainFlits,
       CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_0_1_firstFlit,
       CAN_FIRE_RL_ifcs_0_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_0_1_followFlits,
       CAN_FIRE_RL_ifcs_0_1_followFlits_1,
       CAN_FIRE_RL_ifcs_0_1_forwardRsp,
       CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_0_drainFlits,
       CAN_FIRE_RL_ifcs_0_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_0_firstFlit,
       CAN_FIRE_RL_ifcs_0_firstFlit_1,
       CAN_FIRE_RL_ifcs_0_followFlits,
       CAN_FIRE_RL_ifcs_0_followFlits_1,
       CAN_FIRE_RL_ifcs_0_forwardRsp,
       CAN_FIRE_RL_ifcs_0_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_1_1_drainFlits,
       CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_1_1_firstFlit,
       CAN_FIRE_RL_ifcs_1_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_1_1_followFlits,
       CAN_FIRE_RL_ifcs_1_1_followFlits_1,
       CAN_FIRE_RL_ifcs_1_1_forwardRsp,
       CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_1_drainFlits,
       CAN_FIRE_RL_ifcs_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_1_firstFlit,
       CAN_FIRE_RL_ifcs_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_1_followFlits,
       CAN_FIRE_RL_ifcs_1_followFlits_1,
       CAN_FIRE_RL_ifcs_1_forwardRsp,
       CAN_FIRE_RL_ifcs_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_2_1_firstFlit,
       CAN_FIRE_RL_ifcs_2_1_followFlits,
       CAN_FIRE_RL_ifcs_2_firstFlit,
       CAN_FIRE_RL_ifcs_2_followFlits,
       CAN_FIRE_RL_ifcs_3_1_firstFlit,
       CAN_FIRE_RL_ifcs_3_1_followFlits,
       CAN_FIRE_RL_ifcs_3_firstFlit,
       CAN_FIRE_RL_ifcs_3_followFlits,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_b_doPut,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_r_doPut,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_w_doDrop,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_w_setPeek,
       CAN_FIRE_RL_inner_shim_shim_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_ar_doPut,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_aw_doPut,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_b_doDrop,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_b_setPeek,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_r_doDrop,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_r_setPeek,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_w_doPut,
       CAN_FIRE_RL_inner_shim_shim_ug_slave_u_w_warnDoPut,
       CAN_FIRE_RL_merged_0_genFirst,
       CAN_FIRE_RL_merged_0_genOther,
       CAN_FIRE_RL_merged_1_genFirst,
       CAN_FIRE_RL_merged_1_genOther,
       CAN_FIRE_RL_msNoSynth_0_ar_forwardReady,
       CAN_FIRE_RL_msNoSynth_0_aw_forwardReady,
       CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_0_b_dropFlit,
       CAN_FIRE_RL_msNoSynth_0_b_forwardFlit,
       CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_0_r_dropFlit,
       CAN_FIRE_RL_msNoSynth_0_r_forwardFlit,
       CAN_FIRE_RL_msNoSynth_0_w_forwardReady,
       CAN_FIRE_RL_msNoSynth_1_ar_forwardReady,
       CAN_FIRE_RL_msNoSynth_1_aw_forwardReady,
       CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_1_b_dropFlit,
       CAN_FIRE_RL_msNoSynth_1_b_forwardFlit,
       CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_1_r_dropFlit,
       CAN_FIRE_RL_msNoSynth_1_r_forwardFlit,
       CAN_FIRE_RL_msNoSynth_1_w_forwardReady,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_b_doPut,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_r_doPut,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_w_doDrop,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_w_setPeek,
       CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_doPut,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_doPut,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_doDrop,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_setPeek,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_doDrop,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_setPeek,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_doPut,
       CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_warnDoPut,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_b_doPut,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_r_doPut,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_w_doDrop,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_w_setPeek,
       CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_doPut,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_doPut,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_doDrop,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_setPeek,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_doDrop,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_setPeek,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_doPut,
       CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_warnDoPut,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_b_doPut,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_r_doPut,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_w_doDrop,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_w_setPeek,
       CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_doPut,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_doPut,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_doDrop,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_setPeek,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_doDrop,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_setPeek,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_doPut,
       CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_warnDoPut,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_b_doPut,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_r_doPut,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_w_doDrop,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_w_setPeek,
       CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_doPut,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_doPut,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_doDrop,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_setPeek,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_doDrop,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_setPeek,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_doPut,
       CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_warnDoPut,
       CAN_FIRE_RL_rl_UART_to_console,
       CAN_FIRE_RL_rl_aws_host_to_hw_interrupt,
       CAN_FIRE_RL_rl_aws_host_to_hw_mem_rsp,
       CAN_FIRE_RL_rl_console_to_UART,
       CAN_FIRE_RL_rl_host_to_hw_control,
       CAN_FIRE_RL_rl_hw_to_aws_host_mem_req,
       CAN_FIRE_RL_rl_hw_to_host_status,
       CAN_FIRE_RL_rl_initialize,
       CAN_FIRE_RL_sink_selected,
       CAN_FIRE_RL_sink_selected_1,
       CAN_FIRE_RL_sink_selected_10,
       CAN_FIRE_RL_sink_selected_11,
       CAN_FIRE_RL_sink_selected_2,
       CAN_FIRE_RL_sink_selected_3,
       CAN_FIRE_RL_sink_selected_4,
       CAN_FIRE_RL_sink_selected_5,
       CAN_FIRE_RL_sink_selected_6,
       CAN_FIRE_RL_sink_selected_7,
       CAN_FIRE_RL_sink_selected_8,
       CAN_FIRE_RL_sink_selected_9,
       CAN_FIRE_RL_source_selected,
       CAN_FIRE_RL_source_selected_1,
       CAN_FIRE_RL_source_selected_10,
       CAN_FIRE_RL_source_selected_11,
       CAN_FIRE_RL_source_selected_2,
       CAN_FIRE_RL_source_selected_3,
       CAN_FIRE_RL_source_selected_4,
       CAN_FIRE_RL_source_selected_5,
       CAN_FIRE_RL_source_selected_6,
       CAN_FIRE_RL_source_selected_7,
       CAN_FIRE_RL_source_selected_8,
       CAN_FIRE_RL_source_selected_9,
       CAN_FIRE_RL_split_0_putFirst,
       CAN_FIRE_RL_split_0_putOther,
       CAN_FIRE_RL_split_1_putFirst,
       CAN_FIRE_RL_split_1_putOther,
       CAN_FIRE_RL_split_2_putFirst,
       CAN_FIRE_RL_split_2_putOther,
       CAN_FIRE_RL_split_3_putFirst,
       CAN_FIRE_RL_split_3_putOther,
       CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_0_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_0_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_1_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_2_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_3_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_3_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_3_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_3_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_3_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_3_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_3_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_3_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_3_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_3_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_3_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_3_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_3_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_3_w_forwardFlit,
       CAN_FIRE___me_check_222,
       CAN_FIRE___me_check_223,
       CAN_FIRE___me_check_224,
       CAN_FIRE___me_check_226,
       CAN_FIRE___me_check_229,
       CAN_FIRE___me_check_230,
       CAN_FIRE___me_check_231,
       CAN_FIRE___me_check_233,
       CAN_FIRE___me_check_236,
       CAN_FIRE___me_check_238,
       CAN_FIRE___me_check_240,
       CAN_FIRE___me_check_242,
       CAN_FIRE___me_check_251,
       CAN_FIRE___me_check_253,
       CAN_FIRE___me_check_255,
       CAN_FIRE___me_check_266,
       CAN_FIRE___me_check_268,
       CAN_FIRE___me_check_270,
       CAN_FIRE___me_check_272,
       CAN_FIRE___me_check_274,
       CAN_FIRE___me_check_276,
       CAN_FIRE___me_check_277,
       CAN_FIRE___me_check_278,
       CAN_FIRE___me_check_280,
       CAN_FIRE___me_check_283,
       CAN_FIRE___me_check_284,
       CAN_FIRE___me_check_285,
       CAN_FIRE___me_check_287,
       CAN_FIRE___me_check_290,
       CAN_FIRE___me_check_292,
       CAN_FIRE___me_check_294,
       CAN_FIRE___me_check_296,
       CAN_FIRE___me_check_305,
       CAN_FIRE___me_check_307,
       CAN_FIRE___me_check_309,
       CAN_FIRE___me_check_320,
       CAN_FIRE___me_check_322,
       CAN_FIRE___me_check_324,
       CAN_FIRE___me_check_326,
       CAN_FIRE___me_check_328,
       CAN_FIRE_ddr4_A_master_ar_arready,
       CAN_FIRE_ddr4_A_master_aw_awready,
       CAN_FIRE_ddr4_A_master_b_bflit,
       CAN_FIRE_ddr4_A_master_r_rflit,
       CAN_FIRE_ddr4_A_master_w_wready,
       CAN_FIRE_ddr4_B_master_ar_arready,
       CAN_FIRE_ddr4_B_master_aw_awready,
       CAN_FIRE_ddr4_B_master_b_bflit,
       CAN_FIRE_ddr4_B_master_r_rflit,
       CAN_FIRE_ddr4_B_master_w_wready,
       CAN_FIRE_ddr4_C_master_ar_arready,
       CAN_FIRE_ddr4_C_master_aw_awready,
       CAN_FIRE_ddr4_C_master_b_bflit,
       CAN_FIRE_ddr4_C_master_r_rflit,
       CAN_FIRE_ddr4_C_master_w_wready,
       CAN_FIRE_ddr4_D_master_ar_arready,
       CAN_FIRE_ddr4_D_master_aw_awready,
       CAN_FIRE_ddr4_D_master_b_bflit,
       CAN_FIRE_ddr4_D_master_r_rflit,
       CAN_FIRE_ddr4_D_master_w_wready,
       CAN_FIRE_dma_pcis_slave_ar_arflit,
       CAN_FIRE_dma_pcis_slave_aw_awflit,
       CAN_FIRE_dma_pcis_slave_b_bready,
       CAN_FIRE_dma_pcis_slave_r_rready,
       CAN_FIRE_dma_pcis_slave_w_wflit,
       CAN_FIRE_m_ddr4_ready,
       CAN_FIRE_m_glcount0,
       CAN_FIRE_m_glcount1,
       CAN_FIRE_m_vdip,
       CAN_FIRE_ocl_slave_ar_arflit,
       CAN_FIRE_ocl_slave_aw_awflit,
       CAN_FIRE_ocl_slave_b_bready,
       CAN_FIRE_ocl_slave_r_rready,
       CAN_FIRE_ocl_slave_w_wflit,
       WILL_FIRE_RL_arbitrate,
       WILL_FIRE_RL_arbitrate_1,
       WILL_FIRE_RL_arbitrate_2,
       WILL_FIRE_RL_arbitrate_3,
       WILL_FIRE_RL_burst,
       WILL_FIRE_RL_burst_1,
       WILL_FIRE_RL_burst_10,
       WILL_FIRE_RL_burst_11,
       WILL_FIRE_RL_burst_2,
       WILL_FIRE_RL_burst_3,
       WILL_FIRE_RL_burst_4,
       WILL_FIRE_RL_burst_5,
       WILL_FIRE_RL_burst_6,
       WILL_FIRE_RL_burst_7,
       WILL_FIRE_RL_burst_8,
       WILL_FIRE_RL_burst_9,
       WILL_FIRE_RL_checkSinkReady,
       WILL_FIRE_RL_checkSinkReady_1,
       WILL_FIRE_RL_checkSinkReady_10,
       WILL_FIRE_RL_checkSinkReady_11,
       WILL_FIRE_RL_checkSinkReady_2,
       WILL_FIRE_RL_checkSinkReady_3,
       WILL_FIRE_RL_checkSinkReady_4,
       WILL_FIRE_RL_checkSinkReady_5,
       WILL_FIRE_RL_checkSinkReady_6,
       WILL_FIRE_RL_checkSinkReady_7,
       WILL_FIRE_RL_checkSinkReady_8,
       WILL_FIRE_RL_checkSinkReady_9,
       WILL_FIRE_RL_craftReq,
       WILL_FIRE_RL_craftReq_1,
       WILL_FIRE_RL_craftReq_10,
       WILL_FIRE_RL_craftReq_11,
       WILL_FIRE_RL_craftReq_2,
       WILL_FIRE_RL_craftReq_3,
       WILL_FIRE_RL_craftReq_4,
       WILL_FIRE_RL_craftReq_5,
       WILL_FIRE_RL_craftReq_6,
       WILL_FIRE_RL_craftReq_7,
       WILL_FIRE_RL_craftReq_8,
       WILL_FIRE_RL_craftReq_9,
       WILL_FIRE_RL_ifcs_0_1_drainFlits,
       WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_0_1_firstFlit,
       WILL_FIRE_RL_ifcs_0_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_0_1_followFlits,
       WILL_FIRE_RL_ifcs_0_1_followFlits_1,
       WILL_FIRE_RL_ifcs_0_1_forwardRsp,
       WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_0_drainFlits,
       WILL_FIRE_RL_ifcs_0_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_0_firstFlit,
       WILL_FIRE_RL_ifcs_0_firstFlit_1,
       WILL_FIRE_RL_ifcs_0_followFlits,
       WILL_FIRE_RL_ifcs_0_followFlits_1,
       WILL_FIRE_RL_ifcs_0_forwardRsp,
       WILL_FIRE_RL_ifcs_0_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_1_1_drainFlits,
       WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_1_1_firstFlit,
       WILL_FIRE_RL_ifcs_1_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_1_1_followFlits,
       WILL_FIRE_RL_ifcs_1_1_followFlits_1,
       WILL_FIRE_RL_ifcs_1_1_forwardRsp,
       WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_1_drainFlits,
       WILL_FIRE_RL_ifcs_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_1_firstFlit,
       WILL_FIRE_RL_ifcs_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_1_followFlits,
       WILL_FIRE_RL_ifcs_1_followFlits_1,
       WILL_FIRE_RL_ifcs_1_forwardRsp,
       WILL_FIRE_RL_ifcs_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_2_1_firstFlit,
       WILL_FIRE_RL_ifcs_2_1_followFlits,
       WILL_FIRE_RL_ifcs_2_firstFlit,
       WILL_FIRE_RL_ifcs_2_followFlits,
       WILL_FIRE_RL_ifcs_3_1_firstFlit,
       WILL_FIRE_RL_ifcs_3_1_followFlits,
       WILL_FIRE_RL_ifcs_3_firstFlit,
       WILL_FIRE_RL_ifcs_3_followFlits,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_b_doPut,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_r_doPut,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_w_doDrop,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_w_setPeek,
       WILL_FIRE_RL_inner_shim_shim_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_ar_doPut,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_aw_doPut,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_b_doDrop,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_b_setPeek,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_r_doDrop,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_r_setPeek,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_w_doPut,
       WILL_FIRE_RL_inner_shim_shim_ug_slave_u_w_warnDoPut,
       WILL_FIRE_RL_merged_0_genFirst,
       WILL_FIRE_RL_merged_0_genOther,
       WILL_FIRE_RL_merged_1_genFirst,
       WILL_FIRE_RL_merged_1_genOther,
       WILL_FIRE_RL_msNoSynth_0_ar_forwardReady,
       WILL_FIRE_RL_msNoSynth_0_aw_forwardReady,
       WILL_FIRE_RL_msNoSynth_0_b_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_0_b_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_0_b_dropFlit,
       WILL_FIRE_RL_msNoSynth_0_b_forwardFlit,
       WILL_FIRE_RL_msNoSynth_0_r_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_0_r_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_0_r_dropFlit,
       WILL_FIRE_RL_msNoSynth_0_r_forwardFlit,
       WILL_FIRE_RL_msNoSynth_0_w_forwardReady,
       WILL_FIRE_RL_msNoSynth_1_ar_forwardReady,
       WILL_FIRE_RL_msNoSynth_1_aw_forwardReady,
       WILL_FIRE_RL_msNoSynth_1_b_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_1_b_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_1_b_dropFlit,
       WILL_FIRE_RL_msNoSynth_1_b_forwardFlit,
       WILL_FIRE_RL_msNoSynth_1_r_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_1_r_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_1_r_dropFlit,
       WILL_FIRE_RL_msNoSynth_1_r_forwardFlit,
       WILL_FIRE_RL_msNoSynth_1_w_forwardReady,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_b_doPut,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_r_doPut,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_w_doDrop,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_w_setPeek,
       WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_doPut,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_doPut,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_doDrop,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_setPeek,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_doDrop,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_setPeek,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_doPut,
       WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_warnDoPut,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_b_doPut,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_r_doPut,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_w_doDrop,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_w_setPeek,
       WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_doPut,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_doPut,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_doDrop,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_setPeek,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_doDrop,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_setPeek,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_doPut,
       WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_warnDoPut,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_b_doPut,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_r_doPut,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_w_doDrop,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_w_setPeek,
       WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_doPut,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_doPut,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_doDrop,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_setPeek,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_doDrop,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_setPeek,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_doPut,
       WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_warnDoPut,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_b_doPut,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_r_doPut,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_w_doDrop,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_w_setPeek,
       WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_doPut,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_doPut,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_doDrop,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_setPeek,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_doDrop,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_setPeek,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_doPut,
       WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_warnDoPut,
       WILL_FIRE_RL_rl_UART_to_console,
       WILL_FIRE_RL_rl_aws_host_to_hw_interrupt,
       WILL_FIRE_RL_rl_aws_host_to_hw_mem_rsp,
       WILL_FIRE_RL_rl_console_to_UART,
       WILL_FIRE_RL_rl_host_to_hw_control,
       WILL_FIRE_RL_rl_hw_to_aws_host_mem_req,
       WILL_FIRE_RL_rl_hw_to_host_status,
       WILL_FIRE_RL_rl_initialize,
       WILL_FIRE_RL_sink_selected,
       WILL_FIRE_RL_sink_selected_1,
       WILL_FIRE_RL_sink_selected_10,
       WILL_FIRE_RL_sink_selected_11,
       WILL_FIRE_RL_sink_selected_2,
       WILL_FIRE_RL_sink_selected_3,
       WILL_FIRE_RL_sink_selected_4,
       WILL_FIRE_RL_sink_selected_5,
       WILL_FIRE_RL_sink_selected_6,
       WILL_FIRE_RL_sink_selected_7,
       WILL_FIRE_RL_sink_selected_8,
       WILL_FIRE_RL_sink_selected_9,
       WILL_FIRE_RL_source_selected,
       WILL_FIRE_RL_source_selected_1,
       WILL_FIRE_RL_source_selected_10,
       WILL_FIRE_RL_source_selected_11,
       WILL_FIRE_RL_source_selected_2,
       WILL_FIRE_RL_source_selected_3,
       WILL_FIRE_RL_source_selected_4,
       WILL_FIRE_RL_source_selected_5,
       WILL_FIRE_RL_source_selected_6,
       WILL_FIRE_RL_source_selected_7,
       WILL_FIRE_RL_source_selected_8,
       WILL_FIRE_RL_source_selected_9,
       WILL_FIRE_RL_split_0_putFirst,
       WILL_FIRE_RL_split_0_putOther,
       WILL_FIRE_RL_split_1_putFirst,
       WILL_FIRE_RL_split_1_putOther,
       WILL_FIRE_RL_split_2_putFirst,
       WILL_FIRE_RL_split_2_putOther,
       WILL_FIRE_RL_split_3_putFirst,
       WILL_FIRE_RL_split_3_putOther,
       WILL_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_0_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_0_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_0_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_1_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_1_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_w_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_2_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_2_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_w_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_3_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_3_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_3_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_3_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_3_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_3_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_3_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_3_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_3_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_3_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_3_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_3_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_3_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_3_w_forwardFlit,
       WILL_FIRE___me_check_222,
       WILL_FIRE___me_check_223,
       WILL_FIRE___me_check_224,
       WILL_FIRE___me_check_226,
       WILL_FIRE___me_check_229,
       WILL_FIRE___me_check_230,
       WILL_FIRE___me_check_231,
       WILL_FIRE___me_check_233,
       WILL_FIRE___me_check_236,
       WILL_FIRE___me_check_238,
       WILL_FIRE___me_check_240,
       WILL_FIRE___me_check_242,
       WILL_FIRE___me_check_251,
       WILL_FIRE___me_check_253,
       WILL_FIRE___me_check_255,
       WILL_FIRE___me_check_266,
       WILL_FIRE___me_check_268,
       WILL_FIRE___me_check_270,
       WILL_FIRE___me_check_272,
       WILL_FIRE___me_check_274,
       WILL_FIRE___me_check_276,
       WILL_FIRE___me_check_277,
       WILL_FIRE___me_check_278,
       WILL_FIRE___me_check_280,
       WILL_FIRE___me_check_283,
       WILL_FIRE___me_check_284,
       WILL_FIRE___me_check_285,
       WILL_FIRE___me_check_287,
       WILL_FIRE___me_check_290,
       WILL_FIRE___me_check_292,
       WILL_FIRE___me_check_294,
       WILL_FIRE___me_check_296,
       WILL_FIRE___me_check_305,
       WILL_FIRE___me_check_307,
       WILL_FIRE___me_check_309,
       WILL_FIRE___me_check_320,
       WILL_FIRE___me_check_322,
       WILL_FIRE___me_check_324,
       WILL_FIRE___me_check_326,
       WILL_FIRE___me_check_328,
       WILL_FIRE_ddr4_A_master_ar_arready,
       WILL_FIRE_ddr4_A_master_aw_awready,
       WILL_FIRE_ddr4_A_master_b_bflit,
       WILL_FIRE_ddr4_A_master_r_rflit,
       WILL_FIRE_ddr4_A_master_w_wready,
       WILL_FIRE_ddr4_B_master_ar_arready,
       WILL_FIRE_ddr4_B_master_aw_awready,
       WILL_FIRE_ddr4_B_master_b_bflit,
       WILL_FIRE_ddr4_B_master_r_rflit,
       WILL_FIRE_ddr4_B_master_w_wready,
       WILL_FIRE_ddr4_C_master_ar_arready,
       WILL_FIRE_ddr4_C_master_aw_awready,
       WILL_FIRE_ddr4_C_master_b_bflit,
       WILL_FIRE_ddr4_C_master_r_rflit,
       WILL_FIRE_ddr4_C_master_w_wready,
       WILL_FIRE_ddr4_D_master_ar_arready,
       WILL_FIRE_ddr4_D_master_aw_awready,
       WILL_FIRE_ddr4_D_master_b_bflit,
       WILL_FIRE_ddr4_D_master_r_rflit,
       WILL_FIRE_ddr4_D_master_w_wready,
       WILL_FIRE_dma_pcis_slave_ar_arflit,
       WILL_FIRE_dma_pcis_slave_aw_awflit,
       WILL_FIRE_dma_pcis_slave_b_bready,
       WILL_FIRE_dma_pcis_slave_r_rready,
       WILL_FIRE_dma_pcis_slave_w_wflit,
       WILL_FIRE_m_ddr4_ready,
       WILL_FIRE_m_glcount0,
       WILL_FIRE_m_glcount1,
       WILL_FIRE_m_vdip,
       WILL_FIRE_ocl_slave_ar_arflit,
       WILL_FIRE_ocl_slave_aw_awflit,
       WILL_FIRE_ocl_slave_b_bready,
       WILL_FIRE_ocl_slave_r_rready,
       WILL_FIRE_ocl_slave_w_wflit;

  // inputs to muxes for submodule ports
  reg [529 : 0] MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2,
		MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2;
  reg [16 : 0] MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2,
	       MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2;
  wire [7 : 0] MUX_merged_0_flitLeft$write_1__VAL_2,
	       MUX_merged_1_flitLeft$write_1__VAL_1,
	       MUX_split_0_flitLeft$write_1__VAL_1,
	       MUX_split_1_flitLeft$write_1__VAL_1,
	       MUX_split_2_flitLeft$write_1__VAL_1,
	       MUX_split_3_flitLeft$write_1__VAL_1;
  wire MUX_activeSource_0$write_1__SEL_1,
       MUX_activeSource_0$write_1__VAL_1,
       MUX_activeSource_1$write_1__VAL_1,
       MUX_activeSource_1_1_0$write_1__PSEL_3,
       MUX_activeSource_1_1_0$write_1__SEL_1,
       MUX_activeSource_1_1_0$write_1__SEL_3,
       MUX_activeSource_1_1_0$write_1__SEL_4,
       MUX_activeSource_1_1_0$write_1__VAL_1,
       MUX_activeSource_1_1_1_1$write_1__SEL_2,
       MUX_activeSource_1_1_1_1$write_1__VAL_1,
       MUX_activeSource_1_1_2$write_1__VAL_1,
       MUX_activeSource_1_1_3$write_1__VAL_3,
       MUX_flitToSink_0$wset_1__SEL_1,
       MUX_flitToSink_0$wset_1__SEL_3,
       MUX_flitToSink_1$wset_1__SEL_1,
       MUX_flitToSink_1$wset_1__SEL_3,
       MUX_flitToSink_1_0$wset_1__SEL_1,
       MUX_flitToSink_1_0$wset_1__SEL_2,
       MUX_flitToSink_1_0$wset_1__SEL_3,
       MUX_flitToSink_1_0$wset_1__SEL_4,
       MUX_flitToSink_1_0$wset_1__SEL_5,
       MUX_flitToSink_1_0$wset_1__SEL_6,
       MUX_flitToSink_1_0$wset_1__SEL_7,
       MUX_flitToSink_1_0$wset_1__SEL_8,
       MUX_flitToSink_1_0_1$wset_1__SEL_1,
       MUX_flitToSink_1_0_1$wset_1__SEL_3,
       MUX_flitToSink_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1$wset_1__SEL_2,
       MUX_flitToSink_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1$wset_1__SEL_4,
       MUX_flitToSink_1_1$wset_1__SEL_5,
       MUX_flitToSink_1_1$wset_1__SEL_6,
       MUX_flitToSink_1_1$wset_1__SEL_7,
       MUX_flitToSink_1_1$wset_1__SEL_8,
       MUX_flitToSink_1_1_0$wset_1__PSEL_3,
       MUX_flitToSink_1_1_0$wset_1__PSEL_4,
       MUX_flitToSink_1_1_0$wset_1__SEL_1,
       MUX_flitToSink_1_1_0$wset_1__SEL_2,
       MUX_flitToSink_1_1_0$wset_1__SEL_3,
       MUX_flitToSink_1_1_0$wset_1__SEL_4,
       MUX_flitToSink_1_1_0$wset_1__SEL_5,
       MUX_flitToSink_1_1_0$wset_1__SEL_6,
       MUX_flitToSink_1_1_0$wset_1__SEL_7,
       MUX_flitToSink_1_1_0$wset_1__SEL_8,
       MUX_flitToSink_1_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_2,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_4,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_5,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_6,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_7,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_8,
       MUX_flitToSink_1_2$wset_1__SEL_1,
       MUX_flitToSink_1_2$wset_1__SEL_3,
       MUX_flitToSink_1_3$wset_1__SEL_1,
       MUX_flitToSink_1_3$wset_1__SEL_3,
       MUX_flitToSink_2$wset_1__SEL_1,
       MUX_flitToSink_2$wset_1__SEL_3,
       MUX_flitToSink_3$wset_1__SEL_1,
       MUX_flitToSink_3$wset_1__SEL_3,
       MUX_ifcs_0_1_state_1$write_1__SEL_1,
       MUX_ifcs_0_state$write_1__PSEL_1,
       MUX_ifcs_0_state$write_1__SEL_1,
       MUX_ifcs_0_state$write_1__SEL_2,
       MUX_ifcs_0_state$write_1__SEL_3,
       MUX_ifcs_1_1_state_1$write_1__SEL_1,
       MUX_ifcs_1_state$write_1__PSEL_1,
       MUX_ifcs_1_state$write_1__SEL_1,
       MUX_ifcs_1_state$write_1__SEL_2,
       MUX_ifcs_1_state$write_1__SEL_3,
       MUX_ifcs_2_1_state$write_1__SEL_1,
       MUX_ifcs_3_1_state$write_1__SEL_1,
       MUX_split_0_flitLeft$write_1__SEL_1,
       MUX_split_0_flitLeft$write_1__SEL_2,
       MUX_split_1_flitLeft$write_1__SEL_1,
       MUX_split_1_flitLeft$write_1__SEL_2,
       MUX_split_2_flitLeft$write_1__SEL_1,
       MUX_split_2_flitLeft$write_1__SEL_2,
       MUX_split_3_flitLeft$write_1__SEL_1,
       MUX_split_3_flitLeft$write_1__SEL_2,
       MUX_state$write_1__SEL_1,
       MUX_state$write_1__SEL_2,
       MUX_state_1_1_1$write_1__SEL_1,
       MUX_state_1_1_1$write_1__SEL_2,
       MUX_state_1_1_1$write_1__SEL_3,
       MUX_state_1_1_1$write_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h49852;
  reg [63 : 0] v__h49152;
  reg [63 : 0] v__h54714;
  reg [63 : 0] v__h54014;
  reg [63 : 0] v__h92972;
  reg [63 : 0] v__h92272;
  reg [63 : 0] v__h96468;
  reg [63 : 0] v__h95768;
  reg [31 : 0] v__h118001;
  reg [63 : 0] v__h68334;
  reg [63 : 0] v__h67953;
  reg [63 : 0] v__h70431;
  reg [63 : 0] v__h70050;
  reg [63 : 0] v__h72330;
  reg [63 : 0] v__h71949;
  reg [63 : 0] v__h74229;
  reg [63 : 0] v__h73848;
  reg [63 : 0] v__h108320;
  reg [63 : 0] v__h107939;
  reg [63 : 0] v__h110949;
  reg [63 : 0] v__h110568;
  reg [63 : 0] v__h113366;
  reg [63 : 0] v__h112985;
  reg [63 : 0] v__h115783;
  reg [63 : 0] v__h115402;
  reg [31 : 0] v__h117995;
  // synopsys translate_on

  // remaining internal signals
  wire [63 : 0] logdelay__h1213,
		x__h33681,
		x__h33755,
		x__h33818,
		x__h37363,
		x__h37437,
		x__h37500,
		x__h77260,
		x__h77334,
		x__h77397,
		x__h80599,
		x__h80673,
		x__h80736;
  wire [31 : 0] _theResult____h1457,
		status__h1645,
		x__h1382,
		x__h1641,
		y__h1642;
  wire [23 : 0] IF_rg_initialized_5_THEN_1_ELSE_0___d36;
  wire [15 : 0] a_awid__h34648,
		a_awid__h38953,
		fatReq_arid__h78194,
		fatReq_arid__h81518,
		outer_shim_0_tmp_bffD_OUT_BITS_17_TO_2__q2,
		outer_shim_0_tmp_rffD_OUT_BITS_530_TO_515__q1,
		outer_shim_1_tmp_bffD_OUT_BITS_17_TO_2__q4,
		outer_shim_1_tmp_rffD_OUT_BITS_530_TO_515__q3,
		outer_shim_2_tmp_bffD_OUT_BITS_17_TO_2__q6,
		outer_shim_2_tmp_rffD_OUT_BITS_530_TO_515__q5,
		outer_shim_3_tmp_bffD_OUT_BITS_17_TO_2__q32,
		outer_shim_3_tmp_rffD_OUT_BITS_530_TO_515__q31;
  wire [8 : 0] x_port1__read__h78845, x_port1__read__h82166;
  wire [2 : 0] IF_IF_inner_shim_shim_ug_master_u_ar_peekWire__ETC___d1795,
	       IF_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inn_ETC___d984,
	       IF_IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_to_ETC___d1086,
	       IF_NOT_IF_inner_shim_shim_ug_master_u_ar_peekW_ETC___d1783,
	       IF_NOT_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_ETC___d972,
	       IF_NOT_IF_merged_1_flitLeft_08_EQ_0_09_THEN_so_ETC___d1074,
	       IF_NOT_soc_top_to_ddr4_ar_araddr__860_ULT_0x40_ETC___d1877,
	       IF_soc_top_to_ddr4_ar_araddr__860_ULT_0x400000_ETC___d1889;
  wire [1 : 0] SEXT_SEXT_arbiter_1_1_firstHot_344_345_BIT_0_3_ETC__q27,
	       SEXT_SEXT_arbiter_1_firstHot_1_122_123_BIT_0_1_ETC__q19,
	       SEXT_SEXT_arbiter_1_firstHot_537_538_BIT_0_539_ETC__q23,
	       SEXT_SEXT_arbiter_firstHot_305_306_BIT_0_307_A_ETC__q21,
	       SEXT_arbiter_1_1_firstHot__q11,
	       SEXT_arbiter_1_1_lastSelect_1__q13,
	       SEXT_arbiter_1_1_lastSelect_2__q14,
	       SEXT_arbiter_1_1_lastSelect__q12,
	       SEXT_arbiter_1_firstHot_1__q17,
	       SEXT_arbiter_1_firstHot__q7,
	       SEXT_arbiter_1_lastSelect_1__q9,
	       SEXT_arbiter_1_lastSelect_2__q10,
	       SEXT_arbiter_1_lastSelect_3__q18,
	       SEXT_arbiter_1_lastSelect__q8,
	       SEXT_arbiter_firstHot__q15,
	       SEXT_arbiter_lastSelect__q16,
	       SEXT_x06057__q28,
	       SEXT_x06094__q29,
	       SEXT_x06129__q30,
	       SEXT_x1408__q20,
	       SEXT_x6075__q24,
	       SEXT_x6112__q25,
	       SEXT_x6147__q26,
	       SEXT_x8282__q22;
  wire IF_NOT_ifcs_0_1_innerRoute_first__055_BIT_1_06_ETC___d2086,
       IF_NOT_ifcs_0_innerRoute_first__238_BIT_1_247__ETC___d1269,
       IF_NOT_ifcs_1_1_innerRoute_first__093_BIT_1_09_ETC___d2106,
       IF_NOT_ifcs_1_innerRoute_first__276_BIT_1_280__ETC___d1289,
       IF_SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_3_ETC___d2415,
       IF_SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_1_ETC___d2142,
       IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1767,
       IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1770,
       IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1777,
       IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1780,
       IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d956,
       IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d959,
       IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d966,
       IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d969,
       IF_merged_0_flitLeft_81_EQ_0_82_THEN_NOT_inner_ETC___d1013,
       IF_merged_0_flitLeft_81_EQ_0_82_THEN_NOT_inner_ETC___d945,
       IF_merged_0_flitLeft_81_EQ_0_82_THEN_inner_shi_ETC___d940,
       IF_merged_1_flitLeft_08_EQ_0_09_THEN_NOT_soc_t_ETC___d1048,
       IF_merged_1_flitLeft_08_EQ_0_09_THEN_NOT_soc_t_ETC___d1125,
       IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1041,
       IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1058,
       IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1061,
       IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1068,
       IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1071,
       IF_split_3_flitLeft_19_EQ_0_20_THEN_ssNoSynth__ETC___d1232,
       NOT_IF_inner_shim_shim_ug_master_u_ar_peekWire_ETC___d1792,
       NOT_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_in_ETC___d981,
       NOT_IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_t_ETC___d1083,
       NOT_SEXT_arbiter_1_1_lastSelect_331_332_BIT_0__ETC___d2377,
       NOT_SEXT_arbiter_1_lastSelect_524_525_BIT_0_52_ETC___d1570,
       NOT_soc_top_to_ddr4_ar_araddr__860_ULT_0xC0000_ETC___d1886,
       SEXT_arbiter_1_1_firstHot_344_345_BIT_0_346_AN_ETC___d2373,
       SEXT_arbiter_1_1_lastSelect_1_335_336_BIT_0_33_ETC___d2357,
       SEXT_arbiter_1_1_lastSelect_2_340_341_BIT_0_34_ETC___d2365,
       SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2349,
       SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2380,
       SEXT_arbiter_1_firstHot_1_122_123_BIT_0_124_AN_ETC___d2130,
       SEXT_arbiter_1_firstHot_537_538_BIT_0_539_AND__ETC___d1566,
       SEXT_arbiter_1_lastSelect_1_528_529_BIT_0_530__ETC___d1550,
       SEXT_arbiter_1_lastSelect_2_533_534_BIT_0_535__ETC___d1558,
       SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_120__ETC___d2126,
       SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1542,
       SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1573,
       SEXT_arbiter_firstHot_305_306_BIT_0_307_AND_re_ETC___d1313,
       SEXT_arbiter_lastSelect_301_302_BIT_0_303_AND__ETC___d1309,
       ifcs_1_innerReq_i_notFull__042_AND_ifcs_1_inne_ETC___d1051,
       ocl_adapter_RDY_v_from_host_0_first_AND_ocl_ad_ETC___d15,
       reqWires_1_0_whas__506_AND_reqWires_1_0_wget___ETC___d1520,
       reqWires_1_1_0_whas__313_AND_reqWires_1_1_0_wg_ETC___d2327,
       soc_top_to_ddr4_ar_araddr__860_MINUS_0x4000000_ETC___d1864,
       soc_top_to_ddr4_ar_araddr__860_MINUS_0x8000000_ETC___d1874,
       soc_top_to_ddr4_ar_araddr__860_ULT_0x400000000___d1861,
       soc_top_to_ddr4_ar_araddr__860_ULT_0x800000000___d1871,
       split_0_doPut_whas__24_AND_split_0_doPut_wget__ETC___d831,
       split_1_doPut_whas__53_AND_split_1_doPut_wget__ETC___d860,
       split_2_doPut_whas__82_AND_split_2_doPut_wget__ETC___d889,
       split_3_doPut_whas__11_AND_split_3_doPut_wget__ETC___d918,
       state_1_1_115_AND_activeSource_1_0_1_189_190_A_ETC___d2192,
       state_1_1_115_AND_activeSource_1_1_1_236_237_A_ETC___d2239,
       state_1_1_1_328_AND_activeSource_1_1_0_459_460_ETC___d2462,
       state_1_1_1_328_AND_activeSource_1_1_1_1_495_4_ETC___d2498,
       state_1_1_1_328_AND_activeSource_1_1_2_531_532_ETC___d2534,
       state_1_1_1_328_AND_activeSource_1_1_3_567_568_ETC___d2570,
       state_1_521_AND_activeSource_1_0_645_646_AND_i_ETC___d1648,
       state_1_521_AND_activeSource_1_1_678_679_AND_i_ETC___d1681,
       state_1_521_AND_activeSource_1_2_712_713_AND_i_ETC___d1715,
       state_1_521_AND_activeSource_1_3_746_747_AND_i_ETC___d1749,
       state_298_AND_activeSource_0_378_379_AND_ifcs__ETC___d1381,
       state_298_AND_activeSource_1_429_430_AND_ifcs__ETC___d1432,
       x__h104856,
       x__h104858,
       x__h104930,
       x__h105056,
       x__h105058,
       x__h105118,
       x__h105232,
       x__h105234,
       x__h105294,
       x__h105408,
       x__h105410,
       x__h105470,
       x__h105994,
       x__h105996,
       x__h106057,
       x__h106065,
       x__h106094,
       x__h106129,
       x__h106233,
       x__h106235,
       x__h106295,
       x__h106453,
       x__h106455,
       x__h106515,
       x__h106679,
       x__h106681,
       x__h106741,
       x__h47755,
       x__h47858,
       x__h48223,
       x__h48282,
       x__h48364,
       x__h64874,
       x__h64876,
       x__h64948,
       x__h65074,
       x__h65076,
       x__h65136,
       x__h65250,
       x__h65252,
       x__h65312,
       x__h65426,
       x__h65428,
       x__h65488,
       x__h66012,
       x__h66014,
       x__h66075,
       x__h66083,
       x__h66112,
       x__h66147,
       x__h66251,
       x__h66253,
       x__h66313,
       x__h66471,
       x__h66473,
       x__h66533,
       x__h66697,
       x__h66699,
       x__h66759,
       x__h90881,
       x__h90984,
       x__h91349,
       x__h91408,
       x__h91490,
       y__h104857,
       y__h104859,
       y__h104931,
       y__h105057,
       y__h105059,
       y__h105119,
       y__h105233,
       y__h105235,
       y__h105295,
       y__h105409,
       y__h105411,
       y__h105471,
       y__h105995,
       y__h105997,
       y__h106066,
       y__h106234,
       y__h106236,
       y__h106296,
       y__h106454,
       y__h106456,
       y__h106516,
       y__h106680,
       y__h106682,
       y__h106742,
       y__h47756,
       y__h47859,
       y__h48224,
       y__h48365,
       y__h64875,
       y__h64877,
       y__h64949,
       y__h65075,
       y__h65077,
       y__h65137,
       y__h65251,
       y__h65253,
       y__h65313,
       y__h65427,
       y__h65429,
       y__h65489,
       y__h66013,
       y__h66015,
       y__h66084,
       y__h66252,
       y__h66254,
       y__h66314,
       y__h66472,
       y__h66474,
       y__h66534,
       y__h66698,
       y__h66700,
       y__h66760,
       y__h90882,
       y__h90985,
       y__h91350,
       y__h91491;

  // action method dma_pcis_slave_aw_awflit
  assign CAN_FIRE_dma_pcis_slave_aw_awflit = 1'd1 ;
  assign WILL_FIRE_dma_pcis_slave_aw_awflit = dma_pcis_slave_awvalid ;

  // value method dma_pcis_slave_aw_awready
  assign dma_pcis_slave_awready = inner_shim_tmp_awff$FULL_N ;

  // action method dma_pcis_slave_w_wflit
  assign CAN_FIRE_dma_pcis_slave_w_wflit = 1'd1 ;
  assign WILL_FIRE_dma_pcis_slave_w_wflit = dma_pcis_slave_wvalid ;

  // value method dma_pcis_slave_w_wready
  assign dma_pcis_slave_wready = inner_shim_tmp_wff$FULL_N ;

  // value method dma_pcis_slave_b_bid
  assign dma_pcis_slave_bid = inner_shim_tmp_bff$D_OUT[16:2] ;

  // value method dma_pcis_slave_b_bresp
  assign dma_pcis_slave_bresp = inner_shim_tmp_bff$D_OUT[1:0] ;

  // value method dma_pcis_slave_b_bvalid
  assign dma_pcis_slave_bvalid = inner_shim_tmp_bff$EMPTY_N ;

  // action method dma_pcis_slave_b_bready
  assign CAN_FIRE_dma_pcis_slave_b_bready = 1'd1 ;
  assign WILL_FIRE_dma_pcis_slave_b_bready = 1'd1 ;

  // action method dma_pcis_slave_ar_arflit
  assign CAN_FIRE_dma_pcis_slave_ar_arflit = 1'd1 ;
  assign WILL_FIRE_dma_pcis_slave_ar_arflit = dma_pcis_slave_arvalid ;

  // value method dma_pcis_slave_ar_arready
  assign dma_pcis_slave_arready = inner_shim_tmp_arff$FULL_N ;

  // value method dma_pcis_slave_r_rid
  assign dma_pcis_slave_rid = inner_shim_tmp_rff$D_OUT[529:515] ;

  // value method dma_pcis_slave_r_rdata
  assign dma_pcis_slave_rdata = inner_shim_tmp_rff$D_OUT[514:3] ;

  // value method dma_pcis_slave_r_rresp
  assign dma_pcis_slave_rresp = inner_shim_tmp_rff$D_OUT[2:1] ;

  // value method dma_pcis_slave_r_rlast
  assign dma_pcis_slave_rlast = inner_shim_tmp_rff$D_OUT[0] ;

  // value method dma_pcis_slave_r_rvalid
  assign dma_pcis_slave_rvalid = inner_shim_tmp_rff$EMPTY_N ;

  // action method dma_pcis_slave_r_rready
  assign CAN_FIRE_dma_pcis_slave_r_rready = 1'd1 ;
  assign WILL_FIRE_dma_pcis_slave_r_rready = 1'd1 ;

  // action method ocl_slave_aw_awflit
  assign CAN_FIRE_ocl_slave_aw_awflit = 1'd1 ;
  assign WILL_FIRE_ocl_slave_aw_awflit = ocl_slave_aw_awvalid ;

  // value method ocl_slave_aw_awready
  assign ocl_slave_aw_awready = ocl_adapter$ocl_slave_aw_awready ;

  // action method ocl_slave_w_wflit
  assign CAN_FIRE_ocl_slave_w_wflit = 1'd1 ;
  assign WILL_FIRE_ocl_slave_w_wflit = ocl_slave_w_wvalid ;

  // value method ocl_slave_w_wready
  assign ocl_slave_w_wready = ocl_adapter$ocl_slave_w_wready ;

  // value method ocl_slave_b_bresp
  assign ocl_slave_b_bresp = ocl_adapter$ocl_slave_b_bresp ;

  // value method ocl_slave_b_bvalid
  assign ocl_slave_b_bvalid = ocl_adapter$ocl_slave_b_bvalid ;

  // action method ocl_slave_b_bready
  assign CAN_FIRE_ocl_slave_b_bready = 1'd1 ;
  assign WILL_FIRE_ocl_slave_b_bready = 1'd1 ;

  // action method ocl_slave_ar_arflit
  assign CAN_FIRE_ocl_slave_ar_arflit = 1'd1 ;
  assign WILL_FIRE_ocl_slave_ar_arflit = ocl_slave_ar_arvalid ;

  // value method ocl_slave_ar_arready
  assign ocl_slave_ar_arready = ocl_adapter$ocl_slave_ar_arready ;

  // value method ocl_slave_r_rdata
  assign ocl_slave_r_rdata = ocl_adapter$ocl_slave_r_rdata ;

  // value method ocl_slave_r_rresp
  assign ocl_slave_r_rresp = ocl_adapter$ocl_slave_r_rresp ;

  // value method ocl_slave_r_rvalid
  assign ocl_slave_r_rvalid = ocl_adapter$ocl_slave_r_rvalid ;

  // action method ocl_slave_r_rready
  assign CAN_FIRE_ocl_slave_r_rready = 1'd1 ;
  assign WILL_FIRE_ocl_slave_r_rready = 1'd1 ;

  // value method ddr4_A_master_aw_awid
  assign ddr4_A_master_awid = outer_shim_0_tmp_awff$D_OUT[108:93] ;

  // value method ddr4_A_master_aw_awaddr
  assign ddr4_A_master_awaddr = outer_shim_0_tmp_awff$D_OUT[92:29] ;

  // value method ddr4_A_master_aw_awlen
  assign ddr4_A_master_awlen = outer_shim_0_tmp_awff$D_OUT[28:21] ;

  // value method ddr4_A_master_aw_awsize
  assign ddr4_A_master_awsize = outer_shim_0_tmp_awff$D_OUT[20:18] ;

  // value method ddr4_A_master_aw_awburst
  assign ddr4_A_master_awburst = outer_shim_0_tmp_awff$D_OUT[17:16] ;

  // value method ddr4_A_master_aw_awlock
  assign ddr4_A_master_awlock = outer_shim_0_tmp_awff$D_OUT[15] ;

  // value method ddr4_A_master_aw_awcache
  assign ddr4_A_master_awcache = outer_shim_0_tmp_awff$D_OUT[14:11] ;

  // value method ddr4_A_master_aw_awprot
  assign ddr4_A_master_awprot = outer_shim_0_tmp_awff$D_OUT[10:8] ;

  // value method ddr4_A_master_aw_awqos
  assign ddr4_A_master_awqos = outer_shim_0_tmp_awff$D_OUT[7:4] ;

  // value method ddr4_A_master_aw_awregion
  assign ddr4_A_master_awregion = outer_shim_0_tmp_awff$D_OUT[3:0] ;

  // value method ddr4_A_master_aw_awvalid
  assign ddr4_A_master_awvalid = outer_shim_0_tmp_awff$EMPTY_N ;

  // action method ddr4_A_master_aw_awready
  assign CAN_FIRE_ddr4_A_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_ddr4_A_master_aw_awready = 1'd1 ;

  // value method ddr4_A_master_w_wdata
  assign ddr4_A_master_wdata = outer_shim_0_tmp_wff$D_OUT[576:65] ;

  // value method ddr4_A_master_w_wstrb
  assign ddr4_A_master_wstrb = outer_shim_0_tmp_wff$D_OUT[64:1] ;

  // value method ddr4_A_master_w_wlast
  assign ddr4_A_master_wlast = outer_shim_0_tmp_wff$D_OUT[0] ;

  // value method ddr4_A_master_w_wvalid
  assign ddr4_A_master_wvalid = outer_shim_0_tmp_wff$EMPTY_N ;

  // action method ddr4_A_master_w_wready
  assign CAN_FIRE_ddr4_A_master_w_wready = 1'd1 ;
  assign WILL_FIRE_ddr4_A_master_w_wready = 1'd1 ;

  // action method ddr4_A_master_b_bflit
  assign CAN_FIRE_ddr4_A_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_ddr4_A_master_b_bflit = ddr4_A_master_bvalid ;

  // value method ddr4_A_master_b_bready
  assign ddr4_A_master_bready = outer_shim_0_tmp_bff$FULL_N ;

  // value method ddr4_A_master_ar_arid
  assign ddr4_A_master_arid = outer_shim_0_tmp_arff$D_OUT[108:93] ;

  // value method ddr4_A_master_ar_araddr
  assign ddr4_A_master_araddr = outer_shim_0_tmp_arff$D_OUT[92:29] ;

  // value method ddr4_A_master_ar_arlen
  assign ddr4_A_master_arlen = outer_shim_0_tmp_arff$D_OUT[28:21] ;

  // value method ddr4_A_master_ar_arsize
  assign ddr4_A_master_arsize = outer_shim_0_tmp_arff$D_OUT[20:18] ;

  // value method ddr4_A_master_ar_arburst
  assign ddr4_A_master_arburst = outer_shim_0_tmp_arff$D_OUT[17:16] ;

  // value method ddr4_A_master_ar_arlock
  assign ddr4_A_master_arlock = outer_shim_0_tmp_arff$D_OUT[15] ;

  // value method ddr4_A_master_ar_arcache
  assign ddr4_A_master_arcache = outer_shim_0_tmp_arff$D_OUT[14:11] ;

  // value method ddr4_A_master_ar_arprot
  assign ddr4_A_master_arprot = outer_shim_0_tmp_arff$D_OUT[10:8] ;

  // value method ddr4_A_master_ar_arqos
  assign ddr4_A_master_arqos = outer_shim_0_tmp_arff$D_OUT[7:4] ;

  // value method ddr4_A_master_ar_arregion
  assign ddr4_A_master_arregion = outer_shim_0_tmp_arff$D_OUT[3:0] ;

  // value method ddr4_A_master_ar_arvalid
  assign ddr4_A_master_arvalid = outer_shim_0_tmp_arff$EMPTY_N ;

  // action method ddr4_A_master_ar_arready
  assign CAN_FIRE_ddr4_A_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_ddr4_A_master_ar_arready = 1'd1 ;

  // action method ddr4_A_master_r_rflit
  assign CAN_FIRE_ddr4_A_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_ddr4_A_master_r_rflit = ddr4_A_master_rvalid ;

  // value method ddr4_A_master_r_rready
  assign ddr4_A_master_rready = outer_shim_0_tmp_rff$FULL_N ;

  // value method ddr4_B_master_aw_awid
  assign ddr4_B_master_awid = outer_shim_1_tmp_awff$D_OUT[108:93] ;

  // value method ddr4_B_master_aw_awaddr
  assign ddr4_B_master_awaddr = outer_shim_1_tmp_awff$D_OUT[92:29] ;

  // value method ddr4_B_master_aw_awlen
  assign ddr4_B_master_awlen = outer_shim_1_tmp_awff$D_OUT[28:21] ;

  // value method ddr4_B_master_aw_awsize
  assign ddr4_B_master_awsize = outer_shim_1_tmp_awff$D_OUT[20:18] ;

  // value method ddr4_B_master_aw_awburst
  assign ddr4_B_master_awburst = outer_shim_1_tmp_awff$D_OUT[17:16] ;

  // value method ddr4_B_master_aw_awlock
  assign ddr4_B_master_awlock = outer_shim_1_tmp_awff$D_OUT[15] ;

  // value method ddr4_B_master_aw_awcache
  assign ddr4_B_master_awcache = outer_shim_1_tmp_awff$D_OUT[14:11] ;

  // value method ddr4_B_master_aw_awprot
  assign ddr4_B_master_awprot = outer_shim_1_tmp_awff$D_OUT[10:8] ;

  // value method ddr4_B_master_aw_awqos
  assign ddr4_B_master_awqos = outer_shim_1_tmp_awff$D_OUT[7:4] ;

  // value method ddr4_B_master_aw_awregion
  assign ddr4_B_master_awregion = outer_shim_1_tmp_awff$D_OUT[3:0] ;

  // value method ddr4_B_master_aw_awvalid
  assign ddr4_B_master_awvalid = outer_shim_1_tmp_awff$EMPTY_N ;

  // action method ddr4_B_master_aw_awready
  assign CAN_FIRE_ddr4_B_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_ddr4_B_master_aw_awready = 1'd1 ;

  // value method ddr4_B_master_w_wdata
  assign ddr4_B_master_wdata = outer_shim_1_tmp_wff$D_OUT[576:65] ;

  // value method ddr4_B_master_w_wstrb
  assign ddr4_B_master_wstrb = outer_shim_1_tmp_wff$D_OUT[64:1] ;

  // value method ddr4_B_master_w_wlast
  assign ddr4_B_master_wlast = outer_shim_1_tmp_wff$D_OUT[0] ;

  // value method ddr4_B_master_w_wvalid
  assign ddr4_B_master_wvalid = outer_shim_1_tmp_wff$EMPTY_N ;

  // action method ddr4_B_master_w_wready
  assign CAN_FIRE_ddr4_B_master_w_wready = 1'd1 ;
  assign WILL_FIRE_ddr4_B_master_w_wready = 1'd1 ;

  // action method ddr4_B_master_b_bflit
  assign CAN_FIRE_ddr4_B_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_ddr4_B_master_b_bflit = ddr4_B_master_bvalid ;

  // value method ddr4_B_master_b_bready
  assign ddr4_B_master_bready = outer_shim_1_tmp_bff$FULL_N ;

  // value method ddr4_B_master_ar_arid
  assign ddr4_B_master_arid = outer_shim_1_tmp_arff$D_OUT[108:93] ;

  // value method ddr4_B_master_ar_araddr
  assign ddr4_B_master_araddr = outer_shim_1_tmp_arff$D_OUT[92:29] ;

  // value method ddr4_B_master_ar_arlen
  assign ddr4_B_master_arlen = outer_shim_1_tmp_arff$D_OUT[28:21] ;

  // value method ddr4_B_master_ar_arsize
  assign ddr4_B_master_arsize = outer_shim_1_tmp_arff$D_OUT[20:18] ;

  // value method ddr4_B_master_ar_arburst
  assign ddr4_B_master_arburst = outer_shim_1_tmp_arff$D_OUT[17:16] ;

  // value method ddr4_B_master_ar_arlock
  assign ddr4_B_master_arlock = outer_shim_1_tmp_arff$D_OUT[15] ;

  // value method ddr4_B_master_ar_arcache
  assign ddr4_B_master_arcache = outer_shim_1_tmp_arff$D_OUT[14:11] ;

  // value method ddr4_B_master_ar_arprot
  assign ddr4_B_master_arprot = outer_shim_1_tmp_arff$D_OUT[10:8] ;

  // value method ddr4_B_master_ar_arqos
  assign ddr4_B_master_arqos = outer_shim_1_tmp_arff$D_OUT[7:4] ;

  // value method ddr4_B_master_ar_arregion
  assign ddr4_B_master_arregion = outer_shim_1_tmp_arff$D_OUT[3:0] ;

  // value method ddr4_B_master_ar_arvalid
  assign ddr4_B_master_arvalid = outer_shim_1_tmp_arff$EMPTY_N ;

  // action method ddr4_B_master_ar_arready
  assign CAN_FIRE_ddr4_B_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_ddr4_B_master_ar_arready = 1'd1 ;

  // action method ddr4_B_master_r_rflit
  assign CAN_FIRE_ddr4_B_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_ddr4_B_master_r_rflit = ddr4_B_master_rvalid ;

  // value method ddr4_B_master_r_rready
  assign ddr4_B_master_rready = outer_shim_1_tmp_rff$FULL_N ;

  // value method ddr4_C_master_aw_awid
  assign ddr4_C_master_awid = outer_shim_2_tmp_awff$D_OUT[108:93] ;

  // value method ddr4_C_master_aw_awaddr
  assign ddr4_C_master_awaddr = outer_shim_2_tmp_awff$D_OUT[92:29] ;

  // value method ddr4_C_master_aw_awlen
  assign ddr4_C_master_awlen = outer_shim_2_tmp_awff$D_OUT[28:21] ;

  // value method ddr4_C_master_aw_awsize
  assign ddr4_C_master_awsize = outer_shim_2_tmp_awff$D_OUT[20:18] ;

  // value method ddr4_C_master_aw_awburst
  assign ddr4_C_master_awburst = outer_shim_2_tmp_awff$D_OUT[17:16] ;

  // value method ddr4_C_master_aw_awlock
  assign ddr4_C_master_awlock = outer_shim_2_tmp_awff$D_OUT[15] ;

  // value method ddr4_C_master_aw_awcache
  assign ddr4_C_master_awcache = outer_shim_2_tmp_awff$D_OUT[14:11] ;

  // value method ddr4_C_master_aw_awprot
  assign ddr4_C_master_awprot = outer_shim_2_tmp_awff$D_OUT[10:8] ;

  // value method ddr4_C_master_aw_awqos
  assign ddr4_C_master_awqos = outer_shim_2_tmp_awff$D_OUT[7:4] ;

  // value method ddr4_C_master_aw_awregion
  assign ddr4_C_master_awregion = outer_shim_2_tmp_awff$D_OUT[3:0] ;

  // value method ddr4_C_master_aw_awvalid
  assign ddr4_C_master_awvalid = outer_shim_2_tmp_awff$EMPTY_N ;

  // action method ddr4_C_master_aw_awready
  assign CAN_FIRE_ddr4_C_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_ddr4_C_master_aw_awready = 1'd1 ;

  // value method ddr4_C_master_w_wdata
  assign ddr4_C_master_wdata = outer_shim_2_tmp_wff$D_OUT[576:65] ;

  // value method ddr4_C_master_w_wstrb
  assign ddr4_C_master_wstrb = outer_shim_2_tmp_wff$D_OUT[64:1] ;

  // value method ddr4_C_master_w_wlast
  assign ddr4_C_master_wlast = outer_shim_2_tmp_wff$D_OUT[0] ;

  // value method ddr4_C_master_w_wvalid
  assign ddr4_C_master_wvalid = outer_shim_2_tmp_wff$EMPTY_N ;

  // action method ddr4_C_master_w_wready
  assign CAN_FIRE_ddr4_C_master_w_wready = 1'd1 ;
  assign WILL_FIRE_ddr4_C_master_w_wready = 1'd1 ;

  // action method ddr4_C_master_b_bflit
  assign CAN_FIRE_ddr4_C_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_ddr4_C_master_b_bflit = ddr4_C_master_bvalid ;

  // value method ddr4_C_master_b_bready
  assign ddr4_C_master_bready = outer_shim_2_tmp_bff$FULL_N ;

  // value method ddr4_C_master_ar_arid
  assign ddr4_C_master_arid = outer_shim_2_tmp_arff$D_OUT[108:93] ;

  // value method ddr4_C_master_ar_araddr
  assign ddr4_C_master_araddr = outer_shim_2_tmp_arff$D_OUT[92:29] ;

  // value method ddr4_C_master_ar_arlen
  assign ddr4_C_master_arlen = outer_shim_2_tmp_arff$D_OUT[28:21] ;

  // value method ddr4_C_master_ar_arsize
  assign ddr4_C_master_arsize = outer_shim_2_tmp_arff$D_OUT[20:18] ;

  // value method ddr4_C_master_ar_arburst
  assign ddr4_C_master_arburst = outer_shim_2_tmp_arff$D_OUT[17:16] ;

  // value method ddr4_C_master_ar_arlock
  assign ddr4_C_master_arlock = outer_shim_2_tmp_arff$D_OUT[15] ;

  // value method ddr4_C_master_ar_arcache
  assign ddr4_C_master_arcache = outer_shim_2_tmp_arff$D_OUT[14:11] ;

  // value method ddr4_C_master_ar_arprot
  assign ddr4_C_master_arprot = outer_shim_2_tmp_arff$D_OUT[10:8] ;

  // value method ddr4_C_master_ar_arqos
  assign ddr4_C_master_arqos = outer_shim_2_tmp_arff$D_OUT[7:4] ;

  // value method ddr4_C_master_ar_arregion
  assign ddr4_C_master_arregion = outer_shim_2_tmp_arff$D_OUT[3:0] ;

  // value method ddr4_C_master_ar_arvalid
  assign ddr4_C_master_arvalid = outer_shim_2_tmp_arff$EMPTY_N ;

  // action method ddr4_C_master_ar_arready
  assign CAN_FIRE_ddr4_C_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_ddr4_C_master_ar_arready = 1'd1 ;

  // action method ddr4_C_master_r_rflit
  assign CAN_FIRE_ddr4_C_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_ddr4_C_master_r_rflit = ddr4_C_master_rvalid ;

  // value method ddr4_C_master_r_rready
  assign ddr4_C_master_rready = outer_shim_2_tmp_rff$FULL_N ;

  // value method ddr4_D_master_aw_awid
  assign ddr4_D_master_awid = outer_shim_3_tmp_awff$D_OUT[108:93] ;

  // value method ddr4_D_master_aw_awaddr
  assign ddr4_D_master_awaddr = outer_shim_3_tmp_awff$D_OUT[92:29] ;

  // value method ddr4_D_master_aw_awlen
  assign ddr4_D_master_awlen = outer_shim_3_tmp_awff$D_OUT[28:21] ;

  // value method ddr4_D_master_aw_awsize
  assign ddr4_D_master_awsize = outer_shim_3_tmp_awff$D_OUT[20:18] ;

  // value method ddr4_D_master_aw_awburst
  assign ddr4_D_master_awburst = outer_shim_3_tmp_awff$D_OUT[17:16] ;

  // value method ddr4_D_master_aw_awlock
  assign ddr4_D_master_awlock = outer_shim_3_tmp_awff$D_OUT[15] ;

  // value method ddr4_D_master_aw_awcache
  assign ddr4_D_master_awcache = outer_shim_3_tmp_awff$D_OUT[14:11] ;

  // value method ddr4_D_master_aw_awprot
  assign ddr4_D_master_awprot = outer_shim_3_tmp_awff$D_OUT[10:8] ;

  // value method ddr4_D_master_aw_awqos
  assign ddr4_D_master_awqos = outer_shim_3_tmp_awff$D_OUT[7:4] ;

  // value method ddr4_D_master_aw_awregion
  assign ddr4_D_master_awregion = outer_shim_3_tmp_awff$D_OUT[3:0] ;

  // value method ddr4_D_master_aw_awvalid
  assign ddr4_D_master_awvalid = outer_shim_3_tmp_awff$EMPTY_N ;

  // action method ddr4_D_master_aw_awready
  assign CAN_FIRE_ddr4_D_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_ddr4_D_master_aw_awready = 1'd1 ;

  // value method ddr4_D_master_w_wdata
  assign ddr4_D_master_wdata = outer_shim_3_tmp_wff$D_OUT[576:65] ;

  // value method ddr4_D_master_w_wstrb
  assign ddr4_D_master_wstrb = outer_shim_3_tmp_wff$D_OUT[64:1] ;

  // value method ddr4_D_master_w_wlast
  assign ddr4_D_master_wlast = outer_shim_3_tmp_wff$D_OUT[0] ;

  // value method ddr4_D_master_w_wvalid
  assign ddr4_D_master_wvalid = outer_shim_3_tmp_wff$EMPTY_N ;

  // action method ddr4_D_master_w_wready
  assign CAN_FIRE_ddr4_D_master_w_wready = 1'd1 ;
  assign WILL_FIRE_ddr4_D_master_w_wready = 1'd1 ;

  // action method ddr4_D_master_b_bflit
  assign CAN_FIRE_ddr4_D_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_ddr4_D_master_b_bflit = ddr4_D_master_bvalid ;

  // value method ddr4_D_master_b_bready
  assign ddr4_D_master_bready = outer_shim_3_tmp_bff$FULL_N ;

  // value method ddr4_D_master_ar_arid
  assign ddr4_D_master_arid = outer_shim_3_tmp_arff$D_OUT[108:93] ;

  // value method ddr4_D_master_ar_araddr
  assign ddr4_D_master_araddr = outer_shim_3_tmp_arff$D_OUT[92:29] ;

  // value method ddr4_D_master_ar_arlen
  assign ddr4_D_master_arlen = outer_shim_3_tmp_arff$D_OUT[28:21] ;

  // value method ddr4_D_master_ar_arsize
  assign ddr4_D_master_arsize = outer_shim_3_tmp_arff$D_OUT[20:18] ;

  // value method ddr4_D_master_ar_arburst
  assign ddr4_D_master_arburst = outer_shim_3_tmp_arff$D_OUT[17:16] ;

  // value method ddr4_D_master_ar_arlock
  assign ddr4_D_master_arlock = outer_shim_3_tmp_arff$D_OUT[15] ;

  // value method ddr4_D_master_ar_arcache
  assign ddr4_D_master_arcache = outer_shim_3_tmp_arff$D_OUT[14:11] ;

  // value method ddr4_D_master_ar_arprot
  assign ddr4_D_master_arprot = outer_shim_3_tmp_arff$D_OUT[10:8] ;

  // value method ddr4_D_master_ar_arqos
  assign ddr4_D_master_arqos = outer_shim_3_tmp_arff$D_OUT[7:4] ;

  // value method ddr4_D_master_ar_arregion
  assign ddr4_D_master_arregion = outer_shim_3_tmp_arff$D_OUT[3:0] ;

  // value method ddr4_D_master_ar_arvalid
  assign ddr4_D_master_arvalid = outer_shim_3_tmp_arff$EMPTY_N ;

  // action method ddr4_D_master_ar_arready
  assign CAN_FIRE_ddr4_D_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_ddr4_D_master_ar_arready = 1'd1 ;

  // action method ddr4_D_master_r_rflit
  assign CAN_FIRE_ddr4_D_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_ddr4_D_master_r_rflit = ddr4_D_master_rvalid ;

  // value method ddr4_D_master_r_rready
  assign ddr4_D_master_rready = outer_shim_3_tmp_rff$FULL_N ;

  // action method m_ddr4_ready
  assign CAN_FIRE_m_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_m_ddr4_ready = 1'd1 ;

  // action method m_glcount0
  assign CAN_FIRE_m_glcount0 = 1'd1 ;
  assign WILL_FIRE_m_glcount0 = 1'd1 ;

  // action method m_glcount1
  assign CAN_FIRE_m_glcount1 = 1'd1 ;
  assign WILL_FIRE_m_glcount1 = 1'd1 ;

  // value method m_vled
  assign m_vled = 16'd0 ;

  // action method m_vdip
  assign CAN_FIRE_m_vdip = 1'd1 ;
  assign WILL_FIRE_m_vdip = 1'd1 ;

  // submodule ifcs_0_1_innerReq
  FIFO2 #(.width(32'd109), .guarded(32'd1)) ifcs_0_1_innerReq(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_0_1_innerReq$D_IN),
							      .ENQ(ifcs_0_1_innerReq$ENQ),
							      .DEQ(ifcs_0_1_innerReq$DEQ),
							      .CLR(ifcs_0_1_innerReq$CLR),
							      .D_OUT(ifcs_0_1_innerReq$D_OUT),
							      .FULL_N(ifcs_0_1_innerReq$FULL_N),
							      .EMPTY_N(ifcs_0_1_innerReq$EMPTY_N));

  // submodule ifcs_0_1_innerRoute
  FIFO2 #(.width(32'd4), .guarded(32'd1)) ifcs_0_1_innerRoute(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_0_1_innerRoute$D_IN),
							      .ENQ(ifcs_0_1_innerRoute$ENQ),
							      .DEQ(ifcs_0_1_innerRoute$DEQ),
							      .CLR(ifcs_0_1_innerRoute$CLR),
							      .D_OUT(ifcs_0_1_innerRoute$D_OUT),
							      .FULL_N(ifcs_0_1_innerRoute$FULL_N),
							      .EMPTY_N(ifcs_0_1_innerRoute$EMPTY_N));

  // submodule ifcs_0_1_noRouteRsp
  FIFO2 #(.width(32'd530), .guarded(32'd1)) ifcs_0_1_noRouteRsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ifcs_0_1_noRouteRsp$D_IN),
								.ENQ(ifcs_0_1_noRouteRsp$ENQ),
								.DEQ(ifcs_0_1_noRouteRsp$DEQ),
								.CLR(ifcs_0_1_noRouteRsp$CLR),
								.D_OUT(ifcs_0_1_noRouteRsp$D_OUT),
								.FULL_N(ifcs_0_1_noRouteRsp$FULL_N),
								.EMPTY_N(ifcs_0_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_0_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_0_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_routeBack$D_IN),
							     .ENQ(ifcs_0_1_routeBack$ENQ),
							     .DEQ(ifcs_0_1_routeBack$DEQ),
							     .CLR(ifcs_0_1_routeBack$CLR),
							     .D_OUT(ifcs_0_1_routeBack$D_OUT),
							     .FULL_N(ifcs_0_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_0_1_routeBack$EMPTY_N));

  // submodule ifcs_0_1_rspBack
  FIFO2 #(.width(32'd530), .guarded(32'd1)) ifcs_0_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_rspBack$D_IN),
							     .ENQ(ifcs_0_1_rspBack$ENQ),
							     .DEQ(ifcs_0_1_rspBack$DEQ),
							     .CLR(ifcs_0_1_rspBack$CLR),
							     .D_OUT(ifcs_0_1_rspBack$D_OUT),
							     .FULL_N(ifcs_0_1_rspBack$FULL_N),
							     .EMPTY_N(ifcs_0_1_rspBack$EMPTY_N));

  // submodule ifcs_0_innerReq
  FIFO2 #(.width(32'd687), .guarded(32'd1)) ifcs_0_innerReq(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_innerReq$D_IN),
							    .ENQ(ifcs_0_innerReq$ENQ),
							    .DEQ(ifcs_0_innerReq$DEQ),
							    .CLR(ifcs_0_innerReq$CLR),
							    .D_OUT(ifcs_0_innerReq$D_OUT),
							    .FULL_N(ifcs_0_innerReq$FULL_N),
							    .EMPTY_N(ifcs_0_innerReq$EMPTY_N));

  // submodule ifcs_0_innerRoute
  FIFO2 #(.width(32'd4), .guarded(32'd1)) ifcs_0_innerRoute(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_innerRoute$D_IN),
							    .ENQ(ifcs_0_innerRoute$ENQ),
							    .DEQ(ifcs_0_innerRoute$DEQ),
							    .CLR(ifcs_0_innerRoute$CLR),
							    .D_OUT(ifcs_0_innerRoute$D_OUT),
							    .FULL_N(ifcs_0_innerRoute$FULL_N),
							    .EMPTY_N(ifcs_0_innerRoute$EMPTY_N));

  // submodule ifcs_0_noRouteRsp
  FIFO2 #(.width(32'd17), .guarded(32'd1)) ifcs_0_noRouteRsp(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_noRouteRsp$D_IN),
							     .ENQ(ifcs_0_noRouteRsp$ENQ),
							     .DEQ(ifcs_0_noRouteRsp$DEQ),
							     .CLR(ifcs_0_noRouteRsp$CLR),
							     .D_OUT(ifcs_0_noRouteRsp$D_OUT),
							     .FULL_N(ifcs_0_noRouteRsp$FULL_N),
							     .EMPTY_N(ifcs_0_noRouteRsp$EMPTY_N));

  // submodule ifcs_0_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_0_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_0_routeBack$D_IN),
							   .ENQ(ifcs_0_routeBack$ENQ),
							   .DEQ(ifcs_0_routeBack$DEQ),
							   .CLR(ifcs_0_routeBack$CLR),
							   .D_OUT(ifcs_0_routeBack$D_OUT),
							   .FULL_N(ifcs_0_routeBack$FULL_N),
							   .EMPTY_N(ifcs_0_routeBack$EMPTY_N));

  // submodule ifcs_0_rspBack
  FIFO2 #(.width(32'd17), .guarded(32'd1)) ifcs_0_rspBack(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ifcs_0_rspBack$D_IN),
							  .ENQ(ifcs_0_rspBack$ENQ),
							  .DEQ(ifcs_0_rspBack$DEQ),
							  .CLR(ifcs_0_rspBack$CLR),
							  .D_OUT(ifcs_0_rspBack$D_OUT),
							  .FULL_N(ifcs_0_rspBack$FULL_N),
							  .EMPTY_N(ifcs_0_rspBack$EMPTY_N));

  // submodule ifcs_1_1_innerReq
  FIFO2 #(.width(32'd109), .guarded(32'd1)) ifcs_1_1_innerReq(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_1_1_innerReq$D_IN),
							      .ENQ(ifcs_1_1_innerReq$ENQ),
							      .DEQ(ifcs_1_1_innerReq$DEQ),
							      .CLR(ifcs_1_1_innerReq$CLR),
							      .D_OUT(ifcs_1_1_innerReq$D_OUT),
							      .FULL_N(ifcs_1_1_innerReq$FULL_N),
							      .EMPTY_N(ifcs_1_1_innerReq$EMPTY_N));

  // submodule ifcs_1_1_innerRoute
  FIFO2 #(.width(32'd4), .guarded(32'd1)) ifcs_1_1_innerRoute(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_1_1_innerRoute$D_IN),
							      .ENQ(ifcs_1_1_innerRoute$ENQ),
							      .DEQ(ifcs_1_1_innerRoute$DEQ),
							      .CLR(ifcs_1_1_innerRoute$CLR),
							      .D_OUT(ifcs_1_1_innerRoute$D_OUT),
							      .FULL_N(ifcs_1_1_innerRoute$FULL_N),
							      .EMPTY_N(ifcs_1_1_innerRoute$EMPTY_N));

  // submodule ifcs_1_1_noRouteRsp
  FIFO2 #(.width(32'd530), .guarded(32'd1)) ifcs_1_1_noRouteRsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ifcs_1_1_noRouteRsp$D_IN),
								.ENQ(ifcs_1_1_noRouteRsp$ENQ),
								.DEQ(ifcs_1_1_noRouteRsp$DEQ),
								.CLR(ifcs_1_1_noRouteRsp$CLR),
								.D_OUT(ifcs_1_1_noRouteRsp$D_OUT),
								.FULL_N(ifcs_1_1_noRouteRsp$FULL_N),
								.EMPTY_N(ifcs_1_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_1_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_1_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_routeBack$D_IN),
							     .ENQ(ifcs_1_1_routeBack$ENQ),
							     .DEQ(ifcs_1_1_routeBack$DEQ),
							     .CLR(ifcs_1_1_routeBack$CLR),
							     .D_OUT(ifcs_1_1_routeBack$D_OUT),
							     .FULL_N(ifcs_1_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_1_1_routeBack$EMPTY_N));

  // submodule ifcs_1_1_rspBack
  FIFO2 #(.width(32'd530), .guarded(32'd1)) ifcs_1_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_rspBack$D_IN),
							     .ENQ(ifcs_1_1_rspBack$ENQ),
							     .DEQ(ifcs_1_1_rspBack$DEQ),
							     .CLR(ifcs_1_1_rspBack$CLR),
							     .D_OUT(ifcs_1_1_rspBack$D_OUT),
							     .FULL_N(ifcs_1_1_rspBack$FULL_N),
							     .EMPTY_N(ifcs_1_1_rspBack$EMPTY_N));

  // submodule ifcs_1_innerReq
  FIFO2 #(.width(32'd687), .guarded(32'd1)) ifcs_1_innerReq(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_innerReq$D_IN),
							    .ENQ(ifcs_1_innerReq$ENQ),
							    .DEQ(ifcs_1_innerReq$DEQ),
							    .CLR(ifcs_1_innerReq$CLR),
							    .D_OUT(ifcs_1_innerReq$D_OUT),
							    .FULL_N(ifcs_1_innerReq$FULL_N),
							    .EMPTY_N(ifcs_1_innerReq$EMPTY_N));

  // submodule ifcs_1_innerRoute
  FIFO2 #(.width(32'd4), .guarded(32'd1)) ifcs_1_innerRoute(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_innerRoute$D_IN),
							    .ENQ(ifcs_1_innerRoute$ENQ),
							    .DEQ(ifcs_1_innerRoute$DEQ),
							    .CLR(ifcs_1_innerRoute$CLR),
							    .D_OUT(ifcs_1_innerRoute$D_OUT),
							    .FULL_N(ifcs_1_innerRoute$FULL_N),
							    .EMPTY_N(ifcs_1_innerRoute$EMPTY_N));

  // submodule ifcs_1_noRouteRsp
  FIFO2 #(.width(32'd17), .guarded(32'd1)) ifcs_1_noRouteRsp(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_noRouteRsp$D_IN),
							     .ENQ(ifcs_1_noRouteRsp$ENQ),
							     .DEQ(ifcs_1_noRouteRsp$DEQ),
							     .CLR(ifcs_1_noRouteRsp$CLR),
							     .D_OUT(ifcs_1_noRouteRsp$D_OUT),
							     .FULL_N(ifcs_1_noRouteRsp$FULL_N),
							     .EMPTY_N(ifcs_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_1_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_1_routeBack$D_IN),
							   .ENQ(ifcs_1_routeBack$ENQ),
							   .DEQ(ifcs_1_routeBack$DEQ),
							   .CLR(ifcs_1_routeBack$CLR),
							   .D_OUT(ifcs_1_routeBack$D_OUT),
							   .FULL_N(ifcs_1_routeBack$FULL_N),
							   .EMPTY_N(ifcs_1_routeBack$EMPTY_N));

  // submodule ifcs_1_rspBack
  FIFO2 #(.width(32'd17), .guarded(32'd1)) ifcs_1_rspBack(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ifcs_1_rspBack$D_IN),
							  .ENQ(ifcs_1_rspBack$ENQ),
							  .DEQ(ifcs_1_rspBack$DEQ),
							  .CLR(ifcs_1_rspBack$CLR),
							  .D_OUT(ifcs_1_rspBack$D_OUT),
							  .FULL_N(ifcs_1_rspBack$FULL_N),
							  .EMPTY_N(ifcs_1_rspBack$EMPTY_N));

  // submodule ifcs_2_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_2_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_2_1_routeBack$D_IN),
							     .ENQ(ifcs_2_1_routeBack$ENQ),
							     .DEQ(ifcs_2_1_routeBack$DEQ),
							     .CLR(ifcs_2_1_routeBack$CLR),
							     .D_OUT(ifcs_2_1_routeBack$D_OUT),
							     .FULL_N(ifcs_2_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_2_1_routeBack$EMPTY_N));

  // submodule ifcs_2_1_rspBack
  FIFO2 #(.width(32'd530), .guarded(32'd1)) ifcs_2_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_2_1_rspBack$D_IN),
							     .ENQ(ifcs_2_1_rspBack$ENQ),
							     .DEQ(ifcs_2_1_rspBack$DEQ),
							     .CLR(ifcs_2_1_rspBack$CLR),
							     .D_OUT(ifcs_2_1_rspBack$D_OUT),
							     .FULL_N(ifcs_2_1_rspBack$FULL_N),
							     .EMPTY_N(ifcs_2_1_rspBack$EMPTY_N));

  // submodule ifcs_2_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_2_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_2_routeBack$D_IN),
							   .ENQ(ifcs_2_routeBack$ENQ),
							   .DEQ(ifcs_2_routeBack$DEQ),
							   .CLR(ifcs_2_routeBack$CLR),
							   .D_OUT(ifcs_2_routeBack$D_OUT),
							   .FULL_N(ifcs_2_routeBack$FULL_N),
							   .EMPTY_N(ifcs_2_routeBack$EMPTY_N));

  // submodule ifcs_2_rspBack
  FIFO2 #(.width(32'd17), .guarded(32'd1)) ifcs_2_rspBack(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ifcs_2_rspBack$D_IN),
							  .ENQ(ifcs_2_rspBack$ENQ),
							  .DEQ(ifcs_2_rspBack$DEQ),
							  .CLR(ifcs_2_rspBack$CLR),
							  .D_OUT(ifcs_2_rspBack$D_OUT),
							  .FULL_N(ifcs_2_rspBack$FULL_N),
							  .EMPTY_N(ifcs_2_rspBack$EMPTY_N));

  // submodule ifcs_3_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_3_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_3_1_routeBack$D_IN),
							     .ENQ(ifcs_3_1_routeBack$ENQ),
							     .DEQ(ifcs_3_1_routeBack$DEQ),
							     .CLR(ifcs_3_1_routeBack$CLR),
							     .D_OUT(ifcs_3_1_routeBack$D_OUT),
							     .FULL_N(ifcs_3_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_3_1_routeBack$EMPTY_N));

  // submodule ifcs_3_1_rspBack
  FIFO2 #(.width(32'd530), .guarded(32'd1)) ifcs_3_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_3_1_rspBack$D_IN),
							     .ENQ(ifcs_3_1_rspBack$ENQ),
							     .DEQ(ifcs_3_1_rspBack$DEQ),
							     .CLR(ifcs_3_1_rspBack$CLR),
							     .D_OUT(ifcs_3_1_rspBack$D_OUT),
							     .FULL_N(ifcs_3_1_rspBack$FULL_N),
							     .EMPTY_N(ifcs_3_1_rspBack$EMPTY_N));

  // submodule ifcs_3_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_3_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_3_routeBack$D_IN),
							   .ENQ(ifcs_3_routeBack$ENQ),
							   .DEQ(ifcs_3_routeBack$DEQ),
							   .CLR(ifcs_3_routeBack$CLR),
							   .D_OUT(ifcs_3_routeBack$D_OUT),
							   .FULL_N(ifcs_3_routeBack$FULL_N),
							   .EMPTY_N(ifcs_3_routeBack$EMPTY_N));

  // submodule ifcs_3_rspBack
  FIFO2 #(.width(32'd17), .guarded(32'd1)) ifcs_3_rspBack(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ifcs_3_rspBack$D_IN),
							  .ENQ(ifcs_3_rspBack$ENQ),
							  .DEQ(ifcs_3_rspBack$DEQ),
							  .CLR(ifcs_3_rspBack$CLR),
							  .D_OUT(ifcs_3_rspBack$D_OUT),
							  .FULL_N(ifcs_3_rspBack$FULL_N),
							  .EMPTY_N(ifcs_3_rspBack$EMPTY_N));

  // submodule inner_shim_tmp_arff
  FIFO2 #(.width(32'd108), .guarded(32'd1)) inner_shim_tmp_arff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(inner_shim_tmp_arff$D_IN),
								.ENQ(inner_shim_tmp_arff$ENQ),
								.DEQ(inner_shim_tmp_arff$DEQ),
								.CLR(inner_shim_tmp_arff$CLR),
								.D_OUT(inner_shim_tmp_arff$D_OUT),
								.FULL_N(inner_shim_tmp_arff$FULL_N),
								.EMPTY_N(inner_shim_tmp_arff$EMPTY_N));

  // submodule inner_shim_tmp_awff
  FIFO2 #(.width(32'd108), .guarded(32'd1)) inner_shim_tmp_awff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(inner_shim_tmp_awff$D_IN),
								.ENQ(inner_shim_tmp_awff$ENQ),
								.DEQ(inner_shim_tmp_awff$DEQ),
								.CLR(inner_shim_tmp_awff$CLR),
								.D_OUT(inner_shim_tmp_awff$D_OUT),
								.FULL_N(inner_shim_tmp_awff$FULL_N),
								.EMPTY_N(inner_shim_tmp_awff$EMPTY_N));

  // submodule inner_shim_tmp_bff
  FIFO2 #(.width(32'd17), .guarded(32'd1)) inner_shim_tmp_bff(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(inner_shim_tmp_bff$D_IN),
							      .ENQ(inner_shim_tmp_bff$ENQ),
							      .DEQ(inner_shim_tmp_bff$DEQ),
							      .CLR(inner_shim_tmp_bff$CLR),
							      .D_OUT(inner_shim_tmp_bff$D_OUT),
							      .FULL_N(inner_shim_tmp_bff$FULL_N),
							      .EMPTY_N(inner_shim_tmp_bff$EMPTY_N));

  // submodule inner_shim_tmp_rff
  FIFO2 #(.width(32'd530), .guarded(32'd1)) inner_shim_tmp_rff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(inner_shim_tmp_rff$D_IN),
							       .ENQ(inner_shim_tmp_rff$ENQ),
							       .DEQ(inner_shim_tmp_rff$DEQ),
							       .CLR(inner_shim_tmp_rff$CLR),
							       .D_OUT(inner_shim_tmp_rff$D_OUT),
							       .FULL_N(inner_shim_tmp_rff$FULL_N),
							       .EMPTY_N(inner_shim_tmp_rff$EMPTY_N));

  // submodule inner_shim_tmp_wff
  FIFO2 #(.width(32'd577), .guarded(32'd1)) inner_shim_tmp_wff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(inner_shim_tmp_wff$D_IN),
							       .ENQ(inner_shim_tmp_wff$ENQ),
							       .DEQ(inner_shim_tmp_wff$DEQ),
							       .CLR(inner_shim_tmp_wff$CLR),
							       .D_OUT(inner_shim_tmp_wff$D_OUT),
							       .FULL_N(inner_shim_tmp_wff$FULL_N),
							       .EMPTY_N(inner_shim_tmp_wff$EMPTY_N));

  // submodule msNoSynth_0_b_buffer_ff
  FIFO1 #(.width(32'd17),
	  .guarded(32'd0)) msNoSynth_0_b_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(msNoSynth_0_b_buffer_ff$D_IN),
						   .ENQ(msNoSynth_0_b_buffer_ff$ENQ),
						   .DEQ(msNoSynth_0_b_buffer_ff$DEQ),
						   .CLR(msNoSynth_0_b_buffer_ff$CLR),
						   .D_OUT(msNoSynth_0_b_buffer_ff$D_OUT),
						   .FULL_N(msNoSynth_0_b_buffer_ff$FULL_N),
						   .EMPTY_N(msNoSynth_0_b_buffer_ff$EMPTY_N));

  // submodule msNoSynth_0_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_0_b_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_0_b_buffer_firstValid$D_IN),
							   .EN(msNoSynth_0_b_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_0_b_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_0_r_buffer_ff
  FIFO1 #(.width(32'd530),
	  .guarded(32'd0)) msNoSynth_0_r_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(msNoSynth_0_r_buffer_ff$D_IN),
						   .ENQ(msNoSynth_0_r_buffer_ff$ENQ),
						   .DEQ(msNoSynth_0_r_buffer_ff$DEQ),
						   .CLR(msNoSynth_0_r_buffer_ff$CLR),
						   .D_OUT(msNoSynth_0_r_buffer_ff$D_OUT),
						   .FULL_N(msNoSynth_0_r_buffer_ff$FULL_N),
						   .EMPTY_N(msNoSynth_0_r_buffer_ff$EMPTY_N));

  // submodule msNoSynth_0_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_0_r_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_0_r_buffer_firstValid$D_IN),
							   .EN(msNoSynth_0_r_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_0_r_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_1_b_buffer_ff
  FIFO1 #(.width(32'd17),
	  .guarded(32'd0)) msNoSynth_1_b_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(msNoSynth_1_b_buffer_ff$D_IN),
						   .ENQ(msNoSynth_1_b_buffer_ff$ENQ),
						   .DEQ(msNoSynth_1_b_buffer_ff$DEQ),
						   .CLR(msNoSynth_1_b_buffer_ff$CLR),
						   .D_OUT(msNoSynth_1_b_buffer_ff$D_OUT),
						   .FULL_N(msNoSynth_1_b_buffer_ff$FULL_N),
						   .EMPTY_N(msNoSynth_1_b_buffer_ff$EMPTY_N));

  // submodule msNoSynth_1_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_1_b_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_1_b_buffer_firstValid$D_IN),
							   .EN(msNoSynth_1_b_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_1_b_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_1_r_buffer_ff
  FIFO1 #(.width(32'd530),
	  .guarded(32'd0)) msNoSynth_1_r_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(msNoSynth_1_r_buffer_ff$D_IN),
						   .ENQ(msNoSynth_1_r_buffer_ff$ENQ),
						   .DEQ(msNoSynth_1_r_buffer_ff$DEQ),
						   .CLR(msNoSynth_1_r_buffer_ff$CLR),
						   .D_OUT(msNoSynth_1_r_buffer_ff$D_OUT),
						   .FULL_N(msNoSynth_1_r_buffer_ff$FULL_N),
						   .EMPTY_N(msNoSynth_1_r_buffer_ff$EMPTY_N));

  // submodule msNoSynth_1_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_1_r_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_1_r_buffer_firstValid$D_IN),
							   .EN(msNoSynth_1_r_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_1_r_buffer_firstValid$Q_OUT));

  // submodule ocl_adapter
  mkOCL_Adapter ocl_adapter(.CLK(CLK),
			    .RST_N(RST_N),
			    .ocl_slave_ar_araddr(ocl_adapter$ocl_slave_ar_araddr),
			    .ocl_slave_ar_arprot(ocl_adapter$ocl_slave_ar_arprot),
			    .ocl_slave_aw_awaddr(ocl_adapter$ocl_slave_aw_awaddr),
			    .ocl_slave_aw_awprot(ocl_adapter$ocl_slave_aw_awprot),
			    .ocl_slave_b_bready(ocl_adapter$ocl_slave_b_bready),
			    .ocl_slave_r_rready(ocl_adapter$ocl_slave_r_rready),
			    .ocl_slave_w_wdata(ocl_adapter$ocl_slave_w_wdata),
			    .ocl_slave_w_wstrb(ocl_adapter$ocl_slave_w_wstrb),
			    .v_to_host_0_enq_x(ocl_adapter$v_to_host_0_enq_x),
			    .v_to_host_1_enq_x(ocl_adapter$v_to_host_1_enq_x),
			    .v_to_host_2_enq_x(ocl_adapter$v_to_host_2_enq_x),
			    .v_to_host_3_enq_x(ocl_adapter$v_to_host_3_enq_x),
			    .ocl_slave_aw_awvalid(ocl_adapter$ocl_slave_aw_awvalid),
			    .ocl_slave_w_wvalid(ocl_adapter$ocl_slave_w_wvalid),
			    .ocl_slave_ar_arvalid(ocl_adapter$ocl_slave_ar_arvalid),
			    .EN_v_from_host_0_deq(ocl_adapter$EN_v_from_host_0_deq),
			    .EN_v_from_host_1_deq(ocl_adapter$EN_v_from_host_1_deq),
			    .EN_v_from_host_2_deq(ocl_adapter$EN_v_from_host_2_deq),
			    .EN_v_from_host_3_deq(ocl_adapter$EN_v_from_host_3_deq),
			    .EN_v_from_host_4_deq(ocl_adapter$EN_v_from_host_4_deq),
			    .EN_v_to_host_0_enq(ocl_adapter$EN_v_to_host_0_enq),
			    .EN_v_to_host_1_enq(ocl_adapter$EN_v_to_host_1_enq),
			    .EN_v_to_host_2_enq(ocl_adapter$EN_v_to_host_2_enq),
			    .EN_v_to_host_3_enq(ocl_adapter$EN_v_to_host_3_enq),
			    .ocl_slave_aw_awready(ocl_adapter$ocl_slave_aw_awready),
			    .ocl_slave_w_wready(ocl_adapter$ocl_slave_w_wready),
			    .ocl_slave_b_bresp(ocl_adapter$ocl_slave_b_bresp),
			    .ocl_slave_b_bvalid(ocl_adapter$ocl_slave_b_bvalid),
			    .ocl_slave_ar_arready(ocl_adapter$ocl_slave_ar_arready),
			    .ocl_slave_r_rdata(ocl_adapter$ocl_slave_r_rdata),
			    .ocl_slave_r_rresp(ocl_adapter$ocl_slave_r_rresp),
			    .ocl_slave_r_rvalid(ocl_adapter$ocl_slave_r_rvalid),
			    .v_from_host_0_first(ocl_adapter$v_from_host_0_first),
			    .RDY_v_from_host_0_first(ocl_adapter$RDY_v_from_host_0_first),
			    .RDY_v_from_host_0_deq(ocl_adapter$RDY_v_from_host_0_deq),
			    .v_from_host_0_notEmpty(),
			    .RDY_v_from_host_0_notEmpty(),
			    .v_from_host_1_first(ocl_adapter$v_from_host_1_first),
			    .RDY_v_from_host_1_first(ocl_adapter$RDY_v_from_host_1_first),
			    .RDY_v_from_host_1_deq(ocl_adapter$RDY_v_from_host_1_deq),
			    .v_from_host_1_notEmpty(),
			    .RDY_v_from_host_1_notEmpty(),
			    .v_from_host_2_first(ocl_adapter$v_from_host_2_first),
			    .RDY_v_from_host_2_first(ocl_adapter$RDY_v_from_host_2_first),
			    .RDY_v_from_host_2_deq(ocl_adapter$RDY_v_from_host_2_deq),
			    .v_from_host_2_notEmpty(),
			    .RDY_v_from_host_2_notEmpty(),
			    .v_from_host_3_first(),
			    .RDY_v_from_host_3_first(),
			    .RDY_v_from_host_3_deq(),
			    .v_from_host_3_notEmpty(),
			    .RDY_v_from_host_3_notEmpty(),
			    .v_from_host_4_first(ocl_adapter$v_from_host_4_first),
			    .RDY_v_from_host_4_first(ocl_adapter$RDY_v_from_host_4_first),
			    .RDY_v_from_host_4_deq(ocl_adapter$RDY_v_from_host_4_deq),
			    .v_from_host_4_notEmpty(),
			    .RDY_v_from_host_4_notEmpty(),
			    .RDY_v_to_host_0_enq(ocl_adapter$RDY_v_to_host_0_enq),
			    .v_to_host_0_notFull(),
			    .RDY_v_to_host_0_notFull(),
			    .RDY_v_to_host_1_enq(ocl_adapter$RDY_v_to_host_1_enq),
			    .v_to_host_1_notFull(),
			    .RDY_v_to_host_1_notFull(),
			    .RDY_v_to_host_2_enq(ocl_adapter$RDY_v_to_host_2_enq),
			    .v_to_host_2_notFull(),
			    .RDY_v_to_host_2_notFull(),
			    .RDY_v_to_host_3_enq(),
			    .v_to_host_3_notFull(),
			    .RDY_v_to_host_3_notFull());

  // submodule outer_shim_0_tmp_arff
  FIFO2 #(.width(32'd109), .guarded(32'd1)) outer_shim_0_tmp_arff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(outer_shim_0_tmp_arff$D_IN),
								  .ENQ(outer_shim_0_tmp_arff$ENQ),
								  .DEQ(outer_shim_0_tmp_arff$DEQ),
								  .CLR(outer_shim_0_tmp_arff$CLR),
								  .D_OUT(outer_shim_0_tmp_arff$D_OUT),
								  .FULL_N(outer_shim_0_tmp_arff$FULL_N),
								  .EMPTY_N(outer_shim_0_tmp_arff$EMPTY_N));

  // submodule outer_shim_0_tmp_awff
  FIFO2 #(.width(32'd109), .guarded(32'd1)) outer_shim_0_tmp_awff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(outer_shim_0_tmp_awff$D_IN),
								  .ENQ(outer_shim_0_tmp_awff$ENQ),
								  .DEQ(outer_shim_0_tmp_awff$DEQ),
								  .CLR(outer_shim_0_tmp_awff$CLR),
								  .D_OUT(outer_shim_0_tmp_awff$D_OUT),
								  .FULL_N(outer_shim_0_tmp_awff$FULL_N),
								  .EMPTY_N(outer_shim_0_tmp_awff$EMPTY_N));

  // submodule outer_shim_0_tmp_bff
  FIFO2 #(.width(32'd18), .guarded(32'd1)) outer_shim_0_tmp_bff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(outer_shim_0_tmp_bff$D_IN),
								.ENQ(outer_shim_0_tmp_bff$ENQ),
								.DEQ(outer_shim_0_tmp_bff$DEQ),
								.CLR(outer_shim_0_tmp_bff$CLR),
								.D_OUT(outer_shim_0_tmp_bff$D_OUT),
								.FULL_N(outer_shim_0_tmp_bff$FULL_N),
								.EMPTY_N(outer_shim_0_tmp_bff$EMPTY_N));

  // submodule outer_shim_0_tmp_rff
  FIFO2 #(.width(32'd531), .guarded(32'd1)) outer_shim_0_tmp_rff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(outer_shim_0_tmp_rff$D_IN),
								 .ENQ(outer_shim_0_tmp_rff$ENQ),
								 .DEQ(outer_shim_0_tmp_rff$DEQ),
								 .CLR(outer_shim_0_tmp_rff$CLR),
								 .D_OUT(outer_shim_0_tmp_rff$D_OUT),
								 .FULL_N(outer_shim_0_tmp_rff$FULL_N),
								 .EMPTY_N(outer_shim_0_tmp_rff$EMPTY_N));

  // submodule outer_shim_0_tmp_wff
  FIFO2 #(.width(32'd577), .guarded(32'd1)) outer_shim_0_tmp_wff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(outer_shim_0_tmp_wff$D_IN),
								 .ENQ(outer_shim_0_tmp_wff$ENQ),
								 .DEQ(outer_shim_0_tmp_wff$DEQ),
								 .CLR(outer_shim_0_tmp_wff$CLR),
								 .D_OUT(outer_shim_0_tmp_wff$D_OUT),
								 .FULL_N(outer_shim_0_tmp_wff$FULL_N),
								 .EMPTY_N(outer_shim_0_tmp_wff$EMPTY_N));

  // submodule outer_shim_1_tmp_arff
  FIFO2 #(.width(32'd109), .guarded(32'd1)) outer_shim_1_tmp_arff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(outer_shim_1_tmp_arff$D_IN),
								  .ENQ(outer_shim_1_tmp_arff$ENQ),
								  .DEQ(outer_shim_1_tmp_arff$DEQ),
								  .CLR(outer_shim_1_tmp_arff$CLR),
								  .D_OUT(outer_shim_1_tmp_arff$D_OUT),
								  .FULL_N(outer_shim_1_tmp_arff$FULL_N),
								  .EMPTY_N(outer_shim_1_tmp_arff$EMPTY_N));

  // submodule outer_shim_1_tmp_awff
  FIFO2 #(.width(32'd109), .guarded(32'd1)) outer_shim_1_tmp_awff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(outer_shim_1_tmp_awff$D_IN),
								  .ENQ(outer_shim_1_tmp_awff$ENQ),
								  .DEQ(outer_shim_1_tmp_awff$DEQ),
								  .CLR(outer_shim_1_tmp_awff$CLR),
								  .D_OUT(outer_shim_1_tmp_awff$D_OUT),
								  .FULL_N(outer_shim_1_tmp_awff$FULL_N),
								  .EMPTY_N(outer_shim_1_tmp_awff$EMPTY_N));

  // submodule outer_shim_1_tmp_bff
  FIFO2 #(.width(32'd18), .guarded(32'd1)) outer_shim_1_tmp_bff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(outer_shim_1_tmp_bff$D_IN),
								.ENQ(outer_shim_1_tmp_bff$ENQ),
								.DEQ(outer_shim_1_tmp_bff$DEQ),
								.CLR(outer_shim_1_tmp_bff$CLR),
								.D_OUT(outer_shim_1_tmp_bff$D_OUT),
								.FULL_N(outer_shim_1_tmp_bff$FULL_N),
								.EMPTY_N(outer_shim_1_tmp_bff$EMPTY_N));

  // submodule outer_shim_1_tmp_rff
  FIFO2 #(.width(32'd531), .guarded(32'd1)) outer_shim_1_tmp_rff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(outer_shim_1_tmp_rff$D_IN),
								 .ENQ(outer_shim_1_tmp_rff$ENQ),
								 .DEQ(outer_shim_1_tmp_rff$DEQ),
								 .CLR(outer_shim_1_tmp_rff$CLR),
								 .D_OUT(outer_shim_1_tmp_rff$D_OUT),
								 .FULL_N(outer_shim_1_tmp_rff$FULL_N),
								 .EMPTY_N(outer_shim_1_tmp_rff$EMPTY_N));

  // submodule outer_shim_1_tmp_wff
  FIFO2 #(.width(32'd577), .guarded(32'd1)) outer_shim_1_tmp_wff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(outer_shim_1_tmp_wff$D_IN),
								 .ENQ(outer_shim_1_tmp_wff$ENQ),
								 .DEQ(outer_shim_1_tmp_wff$DEQ),
								 .CLR(outer_shim_1_tmp_wff$CLR),
								 .D_OUT(outer_shim_1_tmp_wff$D_OUT),
								 .FULL_N(outer_shim_1_tmp_wff$FULL_N),
								 .EMPTY_N(outer_shim_1_tmp_wff$EMPTY_N));

  // submodule outer_shim_2_tmp_arff
  FIFO2 #(.width(32'd109), .guarded(32'd1)) outer_shim_2_tmp_arff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(outer_shim_2_tmp_arff$D_IN),
								  .ENQ(outer_shim_2_tmp_arff$ENQ),
								  .DEQ(outer_shim_2_tmp_arff$DEQ),
								  .CLR(outer_shim_2_tmp_arff$CLR),
								  .D_OUT(outer_shim_2_tmp_arff$D_OUT),
								  .FULL_N(outer_shim_2_tmp_arff$FULL_N),
								  .EMPTY_N(outer_shim_2_tmp_arff$EMPTY_N));

  // submodule outer_shim_2_tmp_awff
  FIFO2 #(.width(32'd109), .guarded(32'd1)) outer_shim_2_tmp_awff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(outer_shim_2_tmp_awff$D_IN),
								  .ENQ(outer_shim_2_tmp_awff$ENQ),
								  .DEQ(outer_shim_2_tmp_awff$DEQ),
								  .CLR(outer_shim_2_tmp_awff$CLR),
								  .D_OUT(outer_shim_2_tmp_awff$D_OUT),
								  .FULL_N(outer_shim_2_tmp_awff$FULL_N),
								  .EMPTY_N(outer_shim_2_tmp_awff$EMPTY_N));

  // submodule outer_shim_2_tmp_bff
  FIFO2 #(.width(32'd18), .guarded(32'd1)) outer_shim_2_tmp_bff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(outer_shim_2_tmp_bff$D_IN),
								.ENQ(outer_shim_2_tmp_bff$ENQ),
								.DEQ(outer_shim_2_tmp_bff$DEQ),
								.CLR(outer_shim_2_tmp_bff$CLR),
								.D_OUT(outer_shim_2_tmp_bff$D_OUT),
								.FULL_N(outer_shim_2_tmp_bff$FULL_N),
								.EMPTY_N(outer_shim_2_tmp_bff$EMPTY_N));

  // submodule outer_shim_2_tmp_rff
  FIFO2 #(.width(32'd531), .guarded(32'd1)) outer_shim_2_tmp_rff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(outer_shim_2_tmp_rff$D_IN),
								 .ENQ(outer_shim_2_tmp_rff$ENQ),
								 .DEQ(outer_shim_2_tmp_rff$DEQ),
								 .CLR(outer_shim_2_tmp_rff$CLR),
								 .D_OUT(outer_shim_2_tmp_rff$D_OUT),
								 .FULL_N(outer_shim_2_tmp_rff$FULL_N),
								 .EMPTY_N(outer_shim_2_tmp_rff$EMPTY_N));

  // submodule outer_shim_2_tmp_wff
  FIFO2 #(.width(32'd577), .guarded(32'd1)) outer_shim_2_tmp_wff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(outer_shim_2_tmp_wff$D_IN),
								 .ENQ(outer_shim_2_tmp_wff$ENQ),
								 .DEQ(outer_shim_2_tmp_wff$DEQ),
								 .CLR(outer_shim_2_tmp_wff$CLR),
								 .D_OUT(outer_shim_2_tmp_wff$D_OUT),
								 .FULL_N(outer_shim_2_tmp_wff$FULL_N),
								 .EMPTY_N(outer_shim_2_tmp_wff$EMPTY_N));

  // submodule outer_shim_3_tmp_arff
  FIFO2 #(.width(32'd109), .guarded(32'd1)) outer_shim_3_tmp_arff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(outer_shim_3_tmp_arff$D_IN),
								  .ENQ(outer_shim_3_tmp_arff$ENQ),
								  .DEQ(outer_shim_3_tmp_arff$DEQ),
								  .CLR(outer_shim_3_tmp_arff$CLR),
								  .D_OUT(outer_shim_3_tmp_arff$D_OUT),
								  .FULL_N(outer_shim_3_tmp_arff$FULL_N),
								  .EMPTY_N(outer_shim_3_tmp_arff$EMPTY_N));

  // submodule outer_shim_3_tmp_awff
  FIFO2 #(.width(32'd109), .guarded(32'd1)) outer_shim_3_tmp_awff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(outer_shim_3_tmp_awff$D_IN),
								  .ENQ(outer_shim_3_tmp_awff$ENQ),
								  .DEQ(outer_shim_3_tmp_awff$DEQ),
								  .CLR(outer_shim_3_tmp_awff$CLR),
								  .D_OUT(outer_shim_3_tmp_awff$D_OUT),
								  .FULL_N(outer_shim_3_tmp_awff$FULL_N),
								  .EMPTY_N(outer_shim_3_tmp_awff$EMPTY_N));

  // submodule outer_shim_3_tmp_bff
  FIFO2 #(.width(32'd18), .guarded(32'd1)) outer_shim_3_tmp_bff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(outer_shim_3_tmp_bff$D_IN),
								.ENQ(outer_shim_3_tmp_bff$ENQ),
								.DEQ(outer_shim_3_tmp_bff$DEQ),
								.CLR(outer_shim_3_tmp_bff$CLR),
								.D_OUT(outer_shim_3_tmp_bff$D_OUT),
								.FULL_N(outer_shim_3_tmp_bff$FULL_N),
								.EMPTY_N(outer_shim_3_tmp_bff$EMPTY_N));

  // submodule outer_shim_3_tmp_rff
  FIFO2 #(.width(32'd531), .guarded(32'd1)) outer_shim_3_tmp_rff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(outer_shim_3_tmp_rff$D_IN),
								 .ENQ(outer_shim_3_tmp_rff$ENQ),
								 .DEQ(outer_shim_3_tmp_rff$DEQ),
								 .CLR(outer_shim_3_tmp_rff$CLR),
								 .D_OUT(outer_shim_3_tmp_rff$D_OUT),
								 .FULL_N(outer_shim_3_tmp_rff$FULL_N),
								 .EMPTY_N(outer_shim_3_tmp_rff$EMPTY_N));

  // submodule outer_shim_3_tmp_wff
  FIFO2 #(.width(32'd577), .guarded(32'd1)) outer_shim_3_tmp_wff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(outer_shim_3_tmp_wff$D_IN),
								 .ENQ(outer_shim_3_tmp_wff$ENQ),
								 .DEQ(outer_shim_3_tmp_wff$DEQ),
								 .CLR(outer_shim_3_tmp_wff$CLR),
								 .D_OUT(outer_shim_3_tmp_wff$D_OUT),
								 .FULL_N(outer_shim_3_tmp_wff$FULL_N),
								 .EMPTY_N(outer_shim_3_tmp_wff$EMPTY_N));

  // submodule soc_top
  mkAWS_SoC_Top soc_top(.CLK(CLK),
			.RST_N(RST_N),
			.from_aws_host_put(soc_top$from_aws_host_put),
			.ma_aws_host_to_hw_interrupt_x(soc_top$ma_aws_host_to_hw_interrupt_x),
			.ma_set_verbosity_logdelay1(soc_top$ma_set_verbosity_logdelay1),
			.ma_set_verbosity_verbosity1(soc_top$ma_set_verbosity_verbosity1),
			.ma_set_watch_tohost_tohost_addr(soc_top$ma_set_watch_tohost_tohost_addr),
			.ma_set_watch_tohost_watch_tohost(soc_top$ma_set_watch_tohost_watch_tohost),
			.put_from_console_put(soc_top$put_from_console_put),
			.to_ddr4_arready(soc_top$to_ddr4_arready),
			.to_ddr4_awready(soc_top$to_ddr4_awready),
			.to_ddr4_bid(soc_top$to_ddr4_bid),
			.to_ddr4_bresp(soc_top$to_ddr4_bresp),
			.to_ddr4_rdata(soc_top$to_ddr4_rdata),
			.to_ddr4_rid(soc_top$to_ddr4_rid),
			.to_ddr4_rlast(soc_top$to_ddr4_rlast),
			.to_ddr4_rresp(soc_top$to_ddr4_rresp),
			.to_ddr4_wready(soc_top$to_ddr4_wready),
			.to_ddr4_bvalid(soc_top$to_ddr4_bvalid),
			.to_ddr4_rvalid(soc_top$to_ddr4_rvalid),
			.EN_get_to_console_get(soc_top$EN_get_to_console_get),
			.EN_put_from_console_put(soc_top$EN_put_from_console_put),
			.EN_to_aws_host_get(soc_top$EN_to_aws_host_get),
			.EN_from_aws_host_put(soc_top$EN_from_aws_host_put),
			.EN_ma_aws_host_to_hw_interrupt(soc_top$EN_ma_aws_host_to_hw_interrupt),
			.EN_ma_set_verbosity(soc_top$EN_ma_set_verbosity),
			.EN_ma_set_watch_tohost(soc_top$EN_ma_set_watch_tohost),
			.EN_ma_ddr4_ready(soc_top$EN_ma_ddr4_ready),
			.to_ddr4_awid(soc_top$to_ddr4_awid),
			.to_ddr4_awaddr(soc_top$to_ddr4_awaddr),
			.to_ddr4_awlen(soc_top$to_ddr4_awlen),
			.to_ddr4_awsize(soc_top$to_ddr4_awsize),
			.to_ddr4_awburst(soc_top$to_ddr4_awburst),
			.to_ddr4_awlock(soc_top$to_ddr4_awlock),
			.to_ddr4_awcache(soc_top$to_ddr4_awcache),
			.to_ddr4_awprot(soc_top$to_ddr4_awprot),
			.to_ddr4_awqos(soc_top$to_ddr4_awqos),
			.to_ddr4_awregion(soc_top$to_ddr4_awregion),
			.to_ddr4_awvalid(soc_top$to_ddr4_awvalid),
			.to_ddr4_wdata(soc_top$to_ddr4_wdata),
			.to_ddr4_wstrb(soc_top$to_ddr4_wstrb),
			.to_ddr4_wlast(soc_top$to_ddr4_wlast),
			.to_ddr4_wvalid(soc_top$to_ddr4_wvalid),
			.to_ddr4_bready(soc_top$to_ddr4_bready),
			.to_ddr4_arid(soc_top$to_ddr4_arid),
			.to_ddr4_araddr(soc_top$to_ddr4_araddr),
			.to_ddr4_arlen(soc_top$to_ddr4_arlen),
			.to_ddr4_arsize(soc_top$to_ddr4_arsize),
			.to_ddr4_arburst(soc_top$to_ddr4_arburst),
			.to_ddr4_arlock(soc_top$to_ddr4_arlock),
			.to_ddr4_arcache(soc_top$to_ddr4_arcache),
			.to_ddr4_arprot(soc_top$to_ddr4_arprot),
			.to_ddr4_arqos(soc_top$to_ddr4_arqos),
			.to_ddr4_arregion(soc_top$to_ddr4_arregion),
			.to_ddr4_arvalid(soc_top$to_ddr4_arvalid),
			.to_ddr4_rready(soc_top$to_ddr4_rready),
			.get_to_console_get(soc_top$get_to_console_get),
			.RDY_get_to_console_get(soc_top$RDY_get_to_console_get),
			.RDY_put_from_console_put(soc_top$RDY_put_from_console_put),
			.to_aws_host_get(soc_top$to_aws_host_get),
			.RDY_to_aws_host_get(soc_top$RDY_to_aws_host_get),
			.RDY_from_aws_host_put(soc_top$RDY_from_aws_host_put),
			.RDY_ma_aws_host_to_hw_interrupt(),
			.RDY_ma_set_verbosity(),
			.RDY_ma_set_watch_tohost(soc_top$RDY_ma_set_watch_tohost),
			.RDY_ma_ddr4_ready(soc_top$RDY_ma_ddr4_ready),
			.mv_status(soc_top$mv_status));

  // submodule ssNoSynth_0_ar_buffer_ff
  FIFO1 #(.width(32'd109),
	  .guarded(32'd0)) ssNoSynth_0_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_0_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_0_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_0_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_0_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_0_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_0_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_0_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_0_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_0_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_0_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_0_aw_buffer_ff
  FIFO1 #(.width(32'd109),
	  .guarded(32'd0)) ssNoSynth_0_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_0_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_0_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_0_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_0_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_0_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_0_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_0_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_0_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_0_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_0_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_0_w_buffer_ff
  FIFO1 #(.width(32'd577),
	  .guarded(32'd0)) ssNoSynth_0_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_0_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_0_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_0_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_0_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_0_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_0_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_0_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_0_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_0_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_0_w_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_ar_buffer_ff
  FIFO1 #(.width(32'd109),
	  .guarded(32'd0)) ssNoSynth_1_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_1_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_1_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_1_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_1_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_1_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_1_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_1_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_1_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_1_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_1_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_aw_buffer_ff
  FIFO1 #(.width(32'd109),
	  .guarded(32'd0)) ssNoSynth_1_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_1_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_1_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_1_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_1_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_1_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_1_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_1_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_1_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_1_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_1_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_w_buffer_ff
  FIFO1 #(.width(32'd577),
	  .guarded(32'd0)) ssNoSynth_1_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_1_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_1_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_1_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_1_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_1_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_1_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_1_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_1_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_1_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_1_w_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_ar_buffer_ff
  FIFO1 #(.width(32'd109),
	  .guarded(32'd0)) ssNoSynth_2_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_2_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_2_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_2_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_2_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_2_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_2_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_2_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_2_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_2_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_2_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_aw_buffer_ff
  FIFO1 #(.width(32'd109),
	  .guarded(32'd0)) ssNoSynth_2_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_2_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_2_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_2_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_2_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_2_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_2_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_2_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_2_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_2_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_2_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_w_buffer_ff
  FIFO1 #(.width(32'd577),
	  .guarded(32'd0)) ssNoSynth_2_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_2_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_2_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_2_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_2_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_2_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_2_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_2_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_2_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_2_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_2_w_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_3_ar_buffer_ff
  FIFO1 #(.width(32'd109),
	  .guarded(32'd0)) ssNoSynth_3_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_3_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_3_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_3_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_3_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_3_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_3_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_3_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_3_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_3_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_3_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_3_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_3_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_3_aw_buffer_ff
  FIFO1 #(.width(32'd109),
	  .guarded(32'd0)) ssNoSynth_3_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_3_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_3_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_3_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_3_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_3_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_3_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_3_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_3_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_3_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_3_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_3_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_3_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_3_w_buffer_ff
  FIFO1 #(.width(32'd577),
	  .guarded(32'd0)) ssNoSynth_3_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_3_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_3_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_3_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_3_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_3_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_3_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_3_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_3_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_3_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_3_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_3_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_3_w_buffer_firstValid$Q_OUT));

  // rule RL_rl_hw_to_host_status
  assign CAN_FIRE_RL_rl_hw_to_host_status = ocl_adapter$RDY_v_to_host_0_enq ;
  assign WILL_FIRE_RL_rl_hw_to_host_status = ocl_adapter$RDY_v_to_host_0_enq ;

  // rule RL_rl_host_to_hw_control
  assign CAN_FIRE_RL_rl_host_to_hw_control =
	     ocl_adapter$RDY_v_from_host_0_deq &&
	     ocl_adapter_RDY_v_from_host_0_first_AND_ocl_ad_ETC___d15 ;
  assign WILL_FIRE_RL_rl_host_to_hw_control =
	     CAN_FIRE_RL_rl_host_to_hw_control ;

  // rule RL_rl_console_to_UART
  assign CAN_FIRE_RL_rl_console_to_UART =
	     ocl_adapter$RDY_v_from_host_1_deq &&
	     ocl_adapter$RDY_v_from_host_1_first &&
	     soc_top$RDY_put_from_console_put ;
  assign WILL_FIRE_RL_rl_console_to_UART = CAN_FIRE_RL_rl_console_to_UART ;

  // rule RL_rl_UART_to_console
  assign CAN_FIRE_RL_rl_UART_to_console =
	     ocl_adapter$RDY_v_to_host_1_enq &&
	     soc_top$RDY_get_to_console_get ;
  assign WILL_FIRE_RL_rl_UART_to_console = CAN_FIRE_RL_rl_UART_to_console ;

  // rule RL_rl_hw_to_aws_host_mem_req
  assign CAN_FIRE_RL_rl_hw_to_aws_host_mem_req =
	     ocl_adapter$RDY_v_to_host_2_enq && soc_top$RDY_to_aws_host_get ;
  assign WILL_FIRE_RL_rl_hw_to_aws_host_mem_req =
	     CAN_FIRE_RL_rl_hw_to_aws_host_mem_req ;

  // rule RL_rl_aws_host_to_hw_mem_rsp
  assign CAN_FIRE_RL_rl_aws_host_to_hw_mem_rsp =
	     ocl_adapter$RDY_v_from_host_2_deq &&
	     ocl_adapter$RDY_v_from_host_2_first &&
	     soc_top$RDY_from_aws_host_put ;
  assign WILL_FIRE_RL_rl_aws_host_to_hw_mem_rsp =
	     CAN_FIRE_RL_rl_aws_host_to_hw_mem_rsp ;

  // rule RL_rl_aws_host_to_hw_interrupt
  assign CAN_FIRE_RL_rl_aws_host_to_hw_interrupt =
	     ocl_adapter$RDY_v_from_host_4_deq &&
	     ocl_adapter$RDY_v_from_host_4_first ;
  assign WILL_FIRE_RL_rl_aws_host_to_hw_interrupt =
	     CAN_FIRE_RL_rl_aws_host_to_hw_interrupt ;

  // rule RL_checkSinkReady
  assign CAN_FIRE_RL_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady = 1'd1 ;

  // rule RL_checkSinkReady_1
  assign CAN_FIRE_RL_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_1 = 1'd1 ;

  // rule RL_checkSinkReady_2
  assign CAN_FIRE_RL_checkSinkReady_2 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_2 = 1'd1 ;

  // rule RL_checkSinkReady_3
  assign CAN_FIRE_RL_checkSinkReady_3 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_3 = 1'd1 ;

  // rule RL_craftReq
  assign CAN_FIRE_RL_craftReq =
	     ifcs_0_innerRoute$EMPTY_N && ifcs_0_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq = CAN_FIRE_RL_craftReq ;

  // rule RL_craftReq_1
  assign CAN_FIRE_RL_craftReq_1 =
	     ifcs_1_innerRoute$EMPTY_N && ifcs_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_1 = CAN_FIRE_RL_craftReq_1 ;

  // rule RL_arbitrate
  assign CAN_FIRE_RL_arbitrate =
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget ||
	      CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) &&
	     !state ;
  assign WILL_FIRE_RL_arbitrate = CAN_FIRE_RL_arbitrate ;

  // rule RL_source_selected
  assign CAN_FIRE_RL_source_selected =
	     (!ifcs_0_innerRoute$EMPTY_N || ifcs_0_innerReq$EMPTY_N) &&
	     !state &&
	     MUX_activeSource_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected = CAN_FIRE_RL_source_selected ;

  // rule RL_burst
  assign CAN_FIRE_RL_burst =
	     ifcs_0_innerReq$EMPTY_N && ifcs_0_innerRoute$EMPTY_N &&
	     state_298_AND_activeSource_0_378_379_AND_ifcs__ETC___d1381 ;
  assign WILL_FIRE_RL_burst = CAN_FIRE_RL_burst ;

  // rule RL_source_selected_1
  assign CAN_FIRE_RL_source_selected_1 =
	     (!ifcs_1_innerRoute$EMPTY_N || ifcs_1_innerReq$EMPTY_N) &&
	     !state &&
	     MUX_activeSource_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_1 = CAN_FIRE_RL_source_selected_1 ;

  // rule RL_burst_1
  assign CAN_FIRE_RL_burst_1 =
	     ifcs_1_innerReq$EMPTY_N && ifcs_1_innerRoute$EMPTY_N &&
	     state_298_AND_activeSource_1_429_430_AND_ifcs__ETC___d1432 ;
  assign WILL_FIRE_RL_burst_1 = CAN_FIRE_RL_burst_1 ;

  // rule __me_check_251
  assign CAN_FIRE___me_check_251 = 1'b1 ;
  assign WILL_FIRE___me_check_251 = 1'b1 ;

  // rule __me_check_253
  assign CAN_FIRE___me_check_253 = 1'b1 ;
  assign WILL_FIRE___me_check_253 = 1'b1 ;

  // rule RL_sink_selected
  assign CAN_FIRE_RL_sink_selected = isSinkReady_0$wget && flitToSink_0$whas ;
  assign WILL_FIRE_RL_sink_selected = CAN_FIRE_RL_sink_selected ;

  // rule RL_sink_selected_1
  assign CAN_FIRE_RL_sink_selected_1 =
	     isSinkReady_1$wget && flitToSink_1$whas ;
  assign WILL_FIRE_RL_sink_selected_1 = CAN_FIRE_RL_sink_selected_1 ;

  // rule RL_sink_selected_2
  assign CAN_FIRE_RL_sink_selected_2 =
	     isSinkReady_2$wget && flitToSink_2$whas ;
  assign WILL_FIRE_RL_sink_selected_2 = CAN_FIRE_RL_sink_selected_2 ;

  // rule RL_sink_selected_3
  assign CAN_FIRE_RL_sink_selected_3 =
	     IF_split_3_flitLeft_19_EQ_0_20_THEN_ssNoSynth__ETC___d1232 &&
	     flitToSink_3$whas ;
  assign WILL_FIRE_RL_sink_selected_3 = CAN_FIRE_RL_sink_selected_3 ;

  // rule __me_check_255
  assign CAN_FIRE___me_check_255 = 1'b1 ;
  assign WILL_FIRE___me_check_255 = 1'b1 ;

  // rule RL_checkSinkReady_6
  assign CAN_FIRE_RL_checkSinkReady_6 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_6 = 1'd1 ;

  // rule RL_checkSinkReady_7
  assign CAN_FIRE_RL_checkSinkReady_7 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_7 = 1'd1 ;

  // rule RL_checkSinkReady_8
  assign CAN_FIRE_RL_checkSinkReady_8 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_8 = 1'd1 ;

  // rule RL_checkSinkReady_9
  assign CAN_FIRE_RL_checkSinkReady_9 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_9 = 1'd1 ;

  // rule RL_craftReq_6
  assign CAN_FIRE_RL_craftReq_6 =
	     ifcs_0_1_innerRoute$EMPTY_N && ifcs_0_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_6 = CAN_FIRE_RL_craftReq_6 ;

  // rule RL_craftReq_7
  assign CAN_FIRE_RL_craftReq_7 =
	     ifcs_1_1_innerRoute$EMPTY_N && ifcs_1_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_7 = CAN_FIRE_RL_craftReq_7 ;

  // rule RL_arbitrate_2
  assign CAN_FIRE_RL_arbitrate_2 =
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_0_1$wget ||
	      CAN_FIRE_RL_craftReq_7 && reqWires_1_1_1$wget) &&
	     !state_1_1 ;
  assign WILL_FIRE_RL_arbitrate_2 = CAN_FIRE_RL_arbitrate_2 ;

  // rule RL_source_selected_6
  assign CAN_FIRE_RL_source_selected_6 =
	     (!ifcs_0_1_innerRoute$EMPTY_N || ifcs_0_1_innerReq$EMPTY_N) &&
	     !state_1_1 &&
	     sourceSelect_1_0_1$whas ;
  assign WILL_FIRE_RL_source_selected_6 = CAN_FIRE_RL_source_selected_6 ;

  // rule RL_burst_6
  assign CAN_FIRE_RL_burst_6 =
	     ifcs_0_1_innerReq$EMPTY_N && ifcs_0_1_innerRoute$EMPTY_N &&
	     state_1_1_115_AND_activeSource_1_0_1_189_190_A_ETC___d2192 ;
  assign WILL_FIRE_RL_burst_6 = CAN_FIRE_RL_burst_6 ;

  // rule RL_source_selected_7
  assign CAN_FIRE_RL_source_selected_7 =
	     (!ifcs_1_1_innerRoute$EMPTY_N || ifcs_1_1_innerReq$EMPTY_N) &&
	     !state_1_1 &&
	     sourceSelect_1_1_1$whas ;
  assign WILL_FIRE_RL_source_selected_7 = CAN_FIRE_RL_source_selected_7 ;

  // rule RL_burst_7
  assign CAN_FIRE_RL_burst_7 =
	     ifcs_1_1_innerReq$EMPTY_N && ifcs_1_1_innerRoute$EMPTY_N &&
	     state_1_1_115_AND_activeSource_1_1_1_236_237_A_ETC___d2239 ;
  assign WILL_FIRE_RL_burst_7 = CAN_FIRE_RL_burst_7 ;

  // rule __me_check_305
  assign CAN_FIRE___me_check_305 = 1'b1 ;
  assign WILL_FIRE___me_check_305 = 1'b1 ;

  // rule __me_check_307
  assign CAN_FIRE___me_check_307 = 1'b1 ;
  assign WILL_FIRE___me_check_307 = 1'b1 ;

  // rule RL_sink_selected_6
  assign CAN_FIRE_RL_sink_selected_6 =
	     ssNoSynth_0_ar_buffer_ff$FULL_N && flitToSink_1_0_1$whas ;
  assign WILL_FIRE_RL_sink_selected_6 = CAN_FIRE_RL_sink_selected_6 ;

  // rule RL_sink_selected_7
  assign CAN_FIRE_RL_sink_selected_7 =
	     ssNoSynth_1_ar_buffer_ff$FULL_N && flitToSink_1_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_7 = CAN_FIRE_RL_sink_selected_7 ;

  // rule RL_sink_selected_8
  assign CAN_FIRE_RL_sink_selected_8 =
	     ssNoSynth_2_ar_buffer_ff$FULL_N && flitToSink_1_2$whas ;
  assign WILL_FIRE_RL_sink_selected_8 = CAN_FIRE_RL_sink_selected_8 ;

  // rule RL_sink_selected_9
  assign CAN_FIRE_RL_sink_selected_9 =
	     ssNoSynth_3_ar_buffer_ff$FULL_N && flitToSink_1_3$whas ;
  assign WILL_FIRE_RL_sink_selected_9 = CAN_FIRE_RL_sink_selected_9 ;

  // rule __me_check_309
  assign CAN_FIRE___me_check_309 = 1'b1 ;
  assign WILL_FIRE___me_check_309 = 1'b1 ;

  // rule RL_rl_initialize
  assign CAN_FIRE_RL_rl_initialize =
	     soc_top$RDY_ma_ddr4_ready && !rg_initialized &&
	     rg_ddr4_ready == 4'b1111 &&
	     rg_ddr4_is_loaded ;
  assign WILL_FIRE_RL_rl_initialize =
	     CAN_FIRE_RL_rl_initialize &&
	     !WILL_FIRE_RL_rl_host_to_hw_control ;

  // rule RL_inner_shim_shim_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_aw_setPeek =
	     inner_shim_tmp_awff$EMPTY_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_aw_setPeek =
	     inner_shim_tmp_awff$EMPTY_N ;

  // rule RL_inner_shim_shim_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_w_setPeek =
	     inner_shim_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_w_setPeek =
	     inner_shim_tmp_wff$EMPTY_N ;

  // rule RL_inner_shim_shim_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_ar_setPeek =
	     inner_shim_tmp_arff$EMPTY_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_ar_setPeek =
	     inner_shim_tmp_arff$EMPTY_N ;

  // rule RL_inner_shim_shim_ug_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_aw_warnDoPut =
	     inner_shim_shim_ug_slave_u_aw_putWire$whas &&
	     !inner_shim_tmp_awff$FULL_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_aw_warnDoPut ;

  // rule RL_inner_shim_shim_ug_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_w_warnDoPut =
	     inner_shim_shim_ug_slave_u_w_putWire$whas &&
	     !inner_shim_tmp_wff$FULL_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_w_warnDoPut ;

  // rule RL_inner_shim_shim_ug_slave_u_b_setPeek
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_b_setPeek =
	     inner_shim_tmp_bff$EMPTY_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_b_setPeek =
	     inner_shim_tmp_bff$EMPTY_N ;

  // rule RL_inner_shim_shim_ug_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_b_warnDoDrop =
	     inner_shim_shim_ug_slave_u_b_dropWire$whas &&
	     !inner_shim_tmp_bff$EMPTY_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_b_warnDoDrop ;

  // rule RL_inner_shim_shim_ug_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_ar_warnDoPut =
	     inner_shim_shim_ug_slave_u_ar_putWire$whas &&
	     !inner_shim_tmp_arff$FULL_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_ar_warnDoPut ;

  // rule RL_inner_shim_shim_ug_slave_u_r_setPeek
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_r_setPeek =
	     inner_shim_tmp_rff$EMPTY_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_r_setPeek =
	     inner_shim_tmp_rff$EMPTY_N ;

  // rule RL_inner_shim_shim_ug_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_r_warnDoDrop =
	     inner_shim_shim_ug_slave_u_r_dropWire$whas &&
	     !inner_shim_tmp_rff$EMPTY_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_r_warnDoDrop ;

  // rule RL_outer_shim_0_shim_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_setPeek =
	     outer_shim_0_tmp_awff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_setPeek =
	     outer_shim_0_tmp_awff$EMPTY_N ;

  // rule RL_outer_shim_0_shim_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_warnDoDrop =
	     outer_shim_0_shim_ug_master_u_aw_dropWire$whas &&
	     !outer_shim_0_tmp_awff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_warnDoDrop ;

  // rule RL_outer_shim_0_shim_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_w_setPeek =
	     outer_shim_0_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_w_setPeek =
	     outer_shim_0_tmp_wff$EMPTY_N ;

  // rule RL_outer_shim_0_shim_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_w_warnDoDrop =
	     outer_shim_0_shim_ug_master_u_w_dropWire$whas &&
	     !outer_shim_0_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_w_warnDoDrop ;

  // rule RL_outer_shim_0_shim_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_b_warnDoPut =
	     outer_shim_0_shim_ug_master_u_b_putWire$whas &&
	     !outer_shim_0_tmp_bff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_b_warnDoPut ;

  // rule RL_outer_shim_0_shim_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_setPeek =
	     outer_shim_0_tmp_arff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_setPeek =
	     outer_shim_0_tmp_arff$EMPTY_N ;

  // rule RL_outer_shim_0_shim_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_warnDoDrop =
	     outer_shim_0_shim_ug_master_u_ar_dropWire$whas &&
	     !outer_shim_0_tmp_arff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_warnDoDrop ;

  // rule RL_outer_shim_0_shim_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_r_warnDoPut =
	     outer_shim_0_shim_ug_master_u_r_putWire$whas &&
	     !outer_shim_0_tmp_rff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_r_warnDoPut ;

  // rule RL_outer_shim_0_shim_ug_slave_u_b_setPeek
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_setPeek =
	     outer_shim_0_tmp_bff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_setPeek =
	     outer_shim_0_tmp_bff$EMPTY_N ;

  // rule RL_outer_shim_0_shim_ug_slave_u_r_setPeek
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_setPeek =
	     outer_shim_0_tmp_rff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_setPeek =
	     outer_shim_0_tmp_rff$EMPTY_N ;

  // rule RL_outer_shim_1_shim_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_setPeek =
	     outer_shim_1_tmp_awff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_setPeek =
	     outer_shim_1_tmp_awff$EMPTY_N ;

  // rule RL_outer_shim_1_shim_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_warnDoDrop =
	     outer_shim_1_shim_ug_master_u_aw_dropWire$whas &&
	     !outer_shim_1_tmp_awff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_warnDoDrop ;

  // rule RL_outer_shim_1_shim_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_w_setPeek =
	     outer_shim_1_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_w_setPeek =
	     outer_shim_1_tmp_wff$EMPTY_N ;

  // rule RL_outer_shim_1_shim_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_w_warnDoDrop =
	     outer_shim_1_shim_ug_master_u_w_dropWire$whas &&
	     !outer_shim_1_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_w_warnDoDrop ;

  // rule RL_outer_shim_1_shim_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_b_warnDoPut =
	     outer_shim_1_shim_ug_master_u_b_putWire$whas &&
	     !outer_shim_1_tmp_bff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_b_warnDoPut ;

  // rule RL_outer_shim_1_shim_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_setPeek =
	     outer_shim_1_tmp_arff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_setPeek =
	     outer_shim_1_tmp_arff$EMPTY_N ;

  // rule RL_outer_shim_1_shim_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_warnDoDrop =
	     outer_shim_1_shim_ug_master_u_ar_dropWire$whas &&
	     !outer_shim_1_tmp_arff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_warnDoDrop ;

  // rule RL_outer_shim_1_shim_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_r_warnDoPut =
	     outer_shim_1_shim_ug_master_u_r_putWire$whas &&
	     !outer_shim_1_tmp_rff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_r_warnDoPut ;

  // rule RL_outer_shim_1_shim_ug_slave_u_b_setPeek
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_setPeek =
	     outer_shim_1_tmp_bff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_setPeek =
	     outer_shim_1_tmp_bff$EMPTY_N ;

  // rule RL_outer_shim_1_shim_ug_slave_u_r_setPeek
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_setPeek =
	     outer_shim_1_tmp_rff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_setPeek =
	     outer_shim_1_tmp_rff$EMPTY_N ;

  // rule RL_outer_shim_2_shim_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_setPeek =
	     outer_shim_2_tmp_awff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_setPeek =
	     outer_shim_2_tmp_awff$EMPTY_N ;

  // rule RL_outer_shim_2_shim_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_warnDoDrop =
	     outer_shim_2_shim_ug_master_u_aw_dropWire$whas &&
	     !outer_shim_2_tmp_awff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_warnDoDrop ;

  // rule RL_outer_shim_2_shim_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_w_setPeek =
	     outer_shim_2_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_w_setPeek =
	     outer_shim_2_tmp_wff$EMPTY_N ;

  // rule RL_outer_shim_2_shim_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_w_warnDoDrop =
	     outer_shim_2_shim_ug_master_u_w_dropWire$whas &&
	     !outer_shim_2_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_w_warnDoDrop ;

  // rule RL_outer_shim_2_shim_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_b_warnDoPut =
	     outer_shim_2_shim_ug_master_u_b_putWire$whas &&
	     !outer_shim_2_tmp_bff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_b_warnDoPut ;

  // rule RL_outer_shim_2_shim_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_setPeek =
	     outer_shim_2_tmp_arff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_setPeek =
	     outer_shim_2_tmp_arff$EMPTY_N ;

  // rule RL_outer_shim_2_shim_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_warnDoDrop =
	     outer_shim_2_shim_ug_master_u_ar_dropWire$whas &&
	     !outer_shim_2_tmp_arff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_warnDoDrop ;

  // rule RL_outer_shim_2_shim_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_r_warnDoPut =
	     outer_shim_2_shim_ug_master_u_r_putWire$whas &&
	     !outer_shim_2_tmp_rff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_r_warnDoPut ;

  // rule RL_outer_shim_2_shim_ug_slave_u_b_setPeek
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_setPeek =
	     outer_shim_2_tmp_bff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_setPeek =
	     outer_shim_2_tmp_bff$EMPTY_N ;

  // rule RL_outer_shim_2_shim_ug_slave_u_r_setPeek
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_setPeek =
	     outer_shim_2_tmp_rff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_setPeek =
	     outer_shim_2_tmp_rff$EMPTY_N ;

  // rule RL_outer_shim_3_shim_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_setPeek =
	     outer_shim_3_tmp_awff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_setPeek =
	     outer_shim_3_tmp_awff$EMPTY_N ;

  // rule RL_outer_shim_3_shim_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_warnDoDrop =
	     outer_shim_3_shim_ug_master_u_aw_dropWire$whas &&
	     !outer_shim_3_tmp_awff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_warnDoDrop ;

  // rule RL_outer_shim_3_shim_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_w_setPeek =
	     outer_shim_3_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_w_setPeek =
	     outer_shim_3_tmp_wff$EMPTY_N ;

  // rule RL_outer_shim_3_shim_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_w_warnDoDrop =
	     outer_shim_3_shim_ug_master_u_w_dropWire$whas &&
	     !outer_shim_3_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_w_warnDoDrop ;

  // rule RL_outer_shim_3_shim_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_b_warnDoPut =
	     outer_shim_3_shim_ug_master_u_b_putWire$whas &&
	     !outer_shim_3_tmp_bff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_b_warnDoPut ;

  // rule RL_outer_shim_3_shim_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_setPeek =
	     outer_shim_3_tmp_arff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_setPeek =
	     outer_shim_3_tmp_arff$EMPTY_N ;

  // rule RL_outer_shim_3_shim_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_warnDoDrop =
	     outer_shim_3_shim_ug_master_u_ar_dropWire$whas &&
	     !outer_shim_3_tmp_arff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_warnDoDrop ;

  // rule RL_outer_shim_3_shim_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_r_warnDoPut =
	     outer_shim_3_shim_ug_master_u_r_putWire$whas &&
	     !outer_shim_3_tmp_rff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_r_warnDoPut ;

  // rule RL_outer_shim_3_shim_ug_slave_u_b_setPeek
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_setPeek =
	     outer_shim_3_tmp_bff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_setPeek =
	     outer_shim_3_tmp_bff$EMPTY_N ;

  // rule RL_outer_shim_3_shim_ug_slave_u_r_setPeek
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_setPeek =
	     outer_shim_3_tmp_rff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_setPeek =
	     outer_shim_3_tmp_rff$EMPTY_N ;

  // rule RL_ssNoSynth_0_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit =
	     !outer_shim_0_tmp_arff$FULL_N ||
	     ssNoSynth_0_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_6) ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit ;

  // rule RL_outer_shim_0_shim_ug_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_warnDoPut =
	     outer_shim_0_shim_ug_slave_u_ar_putWire$whas &&
	     !outer_shim_0_tmp_arff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_warnDoPut ;

  // rule RL_ssNoSynth_0_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit =
	     (ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_6) &&
	     outer_shim_0_tmp_arff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ;

  // rule RL_outer_shim_0_shim_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_doDrop =
	     outer_shim_0_tmp_arff$EMPTY_N &&
	     outer_shim_0_shim_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_doDrop ;

  // rule RL_outer_shim_0_shim_ug_slave_u_ar_doPut
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_doPut =
	     outer_shim_0_tmp_arff$FULL_N &&
	     outer_shim_0_shim_ug_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_doPut =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_doPut ;

  // rule RL_ssNoSynth_0_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_6 &&
	     (!CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ||
	      ssNoSynth_0_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_0_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit &&
	     ssNoSynth_0_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue ;

  // rule RL_ssNoSynth_1_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit =
	     !outer_shim_1_tmp_arff$FULL_N ||
	     ssNoSynth_1_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_7) ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit ;

  // rule RL_outer_shim_1_shim_ug_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_warnDoPut =
	     outer_shim_1_shim_ug_slave_u_ar_putWire$whas &&
	     !outer_shim_1_tmp_arff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_warnDoPut ;

  // rule RL_ssNoSynth_1_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit =
	     (ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_7) &&
	     outer_shim_1_tmp_arff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ;

  // rule RL_outer_shim_1_shim_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_doDrop =
	     outer_shim_1_tmp_arff$EMPTY_N &&
	     outer_shim_1_shim_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_doDrop ;

  // rule RL_outer_shim_1_shim_ug_slave_u_ar_doPut
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_doPut =
	     outer_shim_1_tmp_arff$FULL_N &&
	     outer_shim_1_shim_ug_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_doPut =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_doPut ;

  // rule RL_ssNoSynth_1_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_7 &&
	     (!CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ||
	      ssNoSynth_1_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_1_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit &&
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue ;

  // rule RL_ssNoSynth_2_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit =
	     !outer_shim_2_tmp_arff$FULL_N ||
	     ssNoSynth_2_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_8) ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit ;

  // rule RL_outer_shim_2_shim_ug_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_warnDoPut =
	     outer_shim_2_shim_ug_slave_u_ar_putWire$whas &&
	     !outer_shim_2_tmp_arff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_warnDoPut ;

  // rule RL_ssNoSynth_2_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit =
	     (ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_8) &&
	     outer_shim_2_tmp_arff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ;

  // rule RL_outer_shim_2_shim_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_doDrop =
	     outer_shim_2_tmp_arff$EMPTY_N &&
	     outer_shim_2_shim_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_doDrop ;

  // rule RL_outer_shim_2_shim_ug_slave_u_ar_doPut
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_doPut =
	     outer_shim_2_tmp_arff$FULL_N &&
	     outer_shim_2_shim_ug_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_doPut =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_doPut ;

  // rule RL_ssNoSynth_2_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_8 &&
	     (!CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ||
	      ssNoSynth_2_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_2_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit &&
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue ;

  // rule RL_ssNoSynth_3_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_3_ar_forwardFlit =
	     !outer_shim_3_tmp_arff$FULL_N ||
	     ssNoSynth_3_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_3_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_9) ;
  assign WILL_FIRE_RL_ssNoSynth_3_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_3_ar_forwardFlit ;

  // rule RL_outer_shim_3_shim_ug_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_warnDoPut =
	     outer_shim_3_shim_ug_slave_u_ar_putWire$whas &&
	     !outer_shim_3_tmp_arff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_warnDoPut ;

  // rule RL_ssNoSynth_3_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_3_ar_dropFlit =
	     (ssNoSynth_3_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_9) &&
	     outer_shim_3_tmp_arff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_3_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_3_ar_dropFlit ;

  // rule RL_outer_shim_3_shim_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_doDrop =
	     outer_shim_3_tmp_arff$EMPTY_N &&
	     outer_shim_3_shim_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_doDrop ;

  // rule RL_outer_shim_3_shim_ug_slave_u_ar_doPut
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_doPut =
	     outer_shim_3_tmp_arff$FULL_N &&
	     outer_shim_3_shim_ug_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_doPut =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_doPut ;

  // rule RL_ssNoSynth_3_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_3_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_9 &&
	     (!CAN_FIRE_RL_ssNoSynth_3_ar_dropFlit ||
	      ssNoSynth_3_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_3_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_3_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_3_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_3_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_3_ar_dropFlit &&
	     ssNoSynth_3_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_3_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_3_ar_buffer_dequeue ;

  // rule RL_split_0_putFirst
  assign CAN_FIRE_RL_split_0_putFirst =
	     split_0_doPut_whas__24_AND_split_0_doPut_wget__ETC___d831 &&
	     split_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_0_putFirst = CAN_FIRE_RL_split_0_putFirst ;

  // rule RL_ssNoSynth_0_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit =
	     !outer_shim_0_tmp_awff$FULL_N ||
	     ssNoSynth_0_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_split_0_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit ;

  // rule RL_outer_shim_0_shim_ug_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_warnDoPut =
	     outer_shim_0_shim_ug_slave_u_aw_putWire$whas &&
	     !outer_shim_0_tmp_awff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_warnDoPut ;

  // rule RL_ssNoSynth_0_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit =
	     (ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_split_0_flitLeft$write_1__SEL_2) &&
	     outer_shim_0_tmp_awff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ;

  // rule RL_outer_shim_0_shim_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_doDrop =
	     outer_shim_0_tmp_awff$EMPTY_N &&
	     outer_shim_0_shim_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_doDrop ;

  // rule RL_outer_shim_0_shim_ug_slave_u_aw_doPut
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_doPut =
	     outer_shim_0_tmp_awff$FULL_N &&
	     outer_shim_0_shim_ug_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_doPut =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_doPut ;

  // rule RL_ssNoSynth_0_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue =
	     MUX_split_0_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ||
	      ssNoSynth_0_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_0_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit &&
	     ssNoSynth_0_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue ;

  // rule RL_split_0_putOther
  assign CAN_FIRE_RL_split_0_putOther =
	     CAN_FIRE_RL_sink_selected &&
	     (!split_0_doPut$wget[686] || ssNoSynth_0_w_buffer_ff$FULL_N) &&
	     split_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_0_putOther = CAN_FIRE_RL_split_0_putOther ;

  // rule RL_ssNoSynth_0_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit =
	     !outer_shim_0_tmp_wff$FULL_N ||
	     ssNoSynth_0_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_0_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit ;

  // rule RL_outer_shim_0_shim_ug_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_warnDoPut =
	     outer_shim_0_shim_ug_slave_u_w_putWire$whas &&
	     !outer_shim_0_tmp_wff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_warnDoPut ;

  // rule RL_ssNoSynth_0_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_w_dropFlit =
	     (ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_0_w_buffer_enqw$whas) &&
	     outer_shim_0_tmp_wff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ;

  // rule RL_outer_shim_0_shim_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_w_doDrop =
	     outer_shim_0_tmp_wff$EMPTY_N &&
	     outer_shim_0_shim_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_w_doDrop ;

  // rule RL_outer_shim_0_shim_ug_slave_u_w_doPut
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_doPut =
	     outer_shim_0_tmp_wff$FULL_N &&
	     outer_shim_0_shim_ug_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_doPut =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_doPut ;

  // rule RL_ssNoSynth_0_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue =
	     ssNoSynth_0_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ||
	      ssNoSynth_0_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue ;

  // rule RL_ssNoSynth_0_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit &&
	     ssNoSynth_0_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue ;

  // rule RL_split_1_putFirst
  assign CAN_FIRE_RL_split_1_putFirst =
	     split_1_doPut_whas__53_AND_split_1_doPut_wget__ETC___d860 &&
	     split_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_1_putFirst = CAN_FIRE_RL_split_1_putFirst ;

  // rule RL_ssNoSynth_1_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit =
	     !outer_shim_1_tmp_awff$FULL_N ||
	     ssNoSynth_1_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_split_1_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit ;

  // rule RL_outer_shim_1_shim_ug_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_warnDoPut =
	     outer_shim_1_shim_ug_slave_u_aw_putWire$whas &&
	     !outer_shim_1_tmp_awff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_warnDoPut ;

  // rule RL_ssNoSynth_1_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit =
	     (ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_split_1_flitLeft$write_1__SEL_2) &&
	     outer_shim_1_tmp_awff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ;

  // rule RL_outer_shim_1_shim_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_doDrop =
	     outer_shim_1_tmp_awff$EMPTY_N &&
	     outer_shim_1_shim_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_doDrop ;

  // rule RL_outer_shim_1_shim_ug_slave_u_aw_doPut
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_doPut =
	     outer_shim_1_tmp_awff$FULL_N &&
	     outer_shim_1_shim_ug_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_doPut =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_doPut ;

  // rule RL_ssNoSynth_1_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue =
	     MUX_split_1_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ||
	      ssNoSynth_1_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_1_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit &&
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue ;

  // rule RL_split_1_putOther
  assign CAN_FIRE_RL_split_1_putOther =
	     CAN_FIRE_RL_sink_selected_1 &&
	     (!split_1_doPut$wget[686] || ssNoSynth_1_w_buffer_ff$FULL_N) &&
	     split_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_1_putOther = CAN_FIRE_RL_split_1_putOther ;

  // rule RL_ssNoSynth_1_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit =
	     !outer_shim_1_tmp_wff$FULL_N ||
	     ssNoSynth_1_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_1_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit ;

  // rule RL_outer_shim_1_shim_ug_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_warnDoPut =
	     outer_shim_1_shim_ug_slave_u_w_putWire$whas &&
	     !outer_shim_1_tmp_wff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_warnDoPut ;

  // rule RL_ssNoSynth_1_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_w_dropFlit =
	     (ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_1_w_buffer_enqw$whas) &&
	     outer_shim_1_tmp_wff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ;

  // rule RL_outer_shim_1_shim_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_w_doDrop =
	     outer_shim_1_tmp_wff$EMPTY_N &&
	     outer_shim_1_shim_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_w_doDrop ;

  // rule RL_outer_shim_1_shim_ug_slave_u_w_doPut
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_doPut =
	     outer_shim_1_tmp_wff$FULL_N &&
	     outer_shim_1_shim_ug_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_doPut =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_doPut ;

  // rule RL_ssNoSynth_1_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue =
	     ssNoSynth_1_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ||
	      ssNoSynth_1_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue ;

  // rule RL_ssNoSynth_1_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit &&
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue ;

  // rule RL_split_2_putFirst
  assign CAN_FIRE_RL_split_2_putFirst =
	     split_2_doPut_whas__82_AND_split_2_doPut_wget__ETC___d889 &&
	     split_2_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_2_putFirst = CAN_FIRE_RL_split_2_putFirst ;

  // rule RL_ssNoSynth_2_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit =
	     !outer_shim_2_tmp_awff$FULL_N ||
	     ssNoSynth_2_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_split_2_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit ;

  // rule RL_outer_shim_2_shim_ug_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_warnDoPut =
	     outer_shim_2_shim_ug_slave_u_aw_putWire$whas &&
	     !outer_shim_2_tmp_awff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_warnDoPut ;

  // rule RL_ssNoSynth_2_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit =
	     (ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_split_2_flitLeft$write_1__SEL_2) &&
	     outer_shim_2_tmp_awff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ;

  // rule RL_outer_shim_2_shim_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_doDrop =
	     outer_shim_2_tmp_awff$EMPTY_N &&
	     outer_shim_2_shim_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_doDrop ;

  // rule RL_outer_shim_2_shim_ug_slave_u_aw_doPut
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_doPut =
	     outer_shim_2_tmp_awff$FULL_N &&
	     outer_shim_2_shim_ug_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_doPut =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_doPut ;

  // rule RL_ssNoSynth_2_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue =
	     MUX_split_2_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ||
	      ssNoSynth_2_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_2_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit &&
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue ;

  // rule RL_split_2_putOther
  assign CAN_FIRE_RL_split_2_putOther =
	     CAN_FIRE_RL_sink_selected_2 &&
	     (!split_2_doPut$wget[686] || ssNoSynth_2_w_buffer_ff$FULL_N) &&
	     split_2_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_2_putOther = CAN_FIRE_RL_split_2_putOther ;

  // rule RL_ssNoSynth_2_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit =
	     !outer_shim_2_tmp_wff$FULL_N ||
	     ssNoSynth_2_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_2_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit ;

  // rule RL_outer_shim_2_shim_ug_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_warnDoPut =
	     outer_shim_2_shim_ug_slave_u_w_putWire$whas &&
	     !outer_shim_2_tmp_wff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_warnDoPut ;

  // rule RL_ssNoSynth_2_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_w_dropFlit =
	     (ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_2_w_buffer_enqw$whas) &&
	     outer_shim_2_tmp_wff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ;

  // rule RL_outer_shim_2_shim_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_w_doDrop =
	     outer_shim_2_tmp_wff$EMPTY_N &&
	     outer_shim_2_shim_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_w_doDrop ;

  // rule RL_outer_shim_2_shim_ug_slave_u_w_doPut
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_doPut =
	     outer_shim_2_tmp_wff$FULL_N &&
	     outer_shim_2_shim_ug_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_doPut =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_doPut ;

  // rule RL_ssNoSynth_2_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue =
	     ssNoSynth_2_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ||
	      ssNoSynth_2_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue ;

  // rule RL_ssNoSynth_2_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit &&
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue ;

  // rule RL_split_3_putFirst
  assign CAN_FIRE_RL_split_3_putFirst =
	     split_3_doPut_whas__11_AND_split_3_doPut_wget__ETC___d918 &&
	     split_3_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_3_putFirst = CAN_FIRE_RL_split_3_putFirst ;

  // rule RL_ssNoSynth_3_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_3_aw_forwardFlit =
	     !outer_shim_3_tmp_awff$FULL_N ||
	     ssNoSynth_3_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_3_aw_buffer_ff$EMPTY_N ||
	      MUX_split_3_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_3_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_3_aw_forwardFlit ;

  // rule RL_outer_shim_3_shim_ug_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_warnDoPut =
	     outer_shim_3_shim_ug_slave_u_aw_putWire$whas &&
	     !outer_shim_3_tmp_awff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_warnDoPut ;

  // rule RL_ssNoSynth_3_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_3_aw_dropFlit =
	     (ssNoSynth_3_aw_buffer_ff$EMPTY_N ||
	      MUX_split_3_flitLeft$write_1__SEL_2) &&
	     outer_shim_3_tmp_awff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_3_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_3_aw_dropFlit ;

  // rule RL_outer_shim_3_shim_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_doDrop =
	     outer_shim_3_tmp_awff$EMPTY_N &&
	     outer_shim_3_shim_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_doDrop ;

  // rule RL_outer_shim_3_shim_ug_slave_u_aw_doPut
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_doPut =
	     outer_shim_3_tmp_awff$FULL_N &&
	     outer_shim_3_shim_ug_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_doPut =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_doPut ;

  // rule RL_ssNoSynth_3_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_3_aw_buffer_enqueue =
	     MUX_split_3_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_3_aw_dropFlit ||
	      ssNoSynth_3_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_3_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_3_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_3_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_3_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_3_aw_dropFlit &&
	     ssNoSynth_3_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_3_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_3_aw_buffer_dequeue ;

  // rule RL_split_3_putOther
  assign CAN_FIRE_RL_split_3_putOther =
	     CAN_FIRE_RL_sink_selected_3 &&
	     (!split_3_doPut$wget[686] || ssNoSynth_3_w_buffer_ff$FULL_N) &&
	     split_3_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_3_putOther = CAN_FIRE_RL_split_3_putOther ;

  // rule RL_ssNoSynth_3_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_3_w_forwardFlit =
	     !outer_shim_3_tmp_wff$FULL_N ||
	     ssNoSynth_3_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_3_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_3_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_3_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_3_w_forwardFlit ;

  // rule RL_outer_shim_3_shim_ug_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_warnDoPut =
	     outer_shim_3_shim_ug_slave_u_w_putWire$whas &&
	     !outer_shim_3_tmp_wff$FULL_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_warnDoPut ;

  // rule RL_ssNoSynth_3_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_3_w_dropFlit =
	     (ssNoSynth_3_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_3_w_buffer_enqw$whas) &&
	     outer_shim_3_tmp_wff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_3_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_3_w_dropFlit ;

  // rule RL_outer_shim_3_shim_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_w_doDrop =
	     outer_shim_3_tmp_wff$EMPTY_N &&
	     outer_shim_3_shim_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_w_doDrop ;

  // rule RL_outer_shim_3_shim_ug_slave_u_w_doPut
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_doPut =
	     outer_shim_3_tmp_wff$FULL_N &&
	     outer_shim_3_shim_ug_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_doPut =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_doPut ;

  // rule RL_ssNoSynth_3_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_3_w_buffer_enqueue =
	     ssNoSynth_3_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_3_w_dropFlit ||
	      ssNoSynth_3_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_3_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_3_w_buffer_enqueue ;

  // rule RL_ssNoSynth_3_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_3_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_3_w_dropFlit &&
	     ssNoSynth_3_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_3_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_3_w_buffer_dequeue ;

  // rule RL_ifcs_0_firstFlit
  assign CAN_FIRE_RL_ifcs_0_firstFlit =
	     inner_shim_tmp_wff$EMPTY_N &&
	     IF_merged_0_flitLeft_81_EQ_0_82_THEN_inner_shi_ETC___d940 &&
	     ifcs_0_innerReq$FULL_N &&
	     ifcs_0_innerRoute$FULL_N &&
	     (IF_merged_0_flitLeft_81_EQ_0_82_THEN_NOT_inner_ETC___d945 ||
	      inner_shim_tmp_awff$EMPTY_N) &&
	     ifcs_0_state == 2'd0 &&
	     IF_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inn_ETC___d984 ==
	     3'd1 ;
  assign WILL_FIRE_RL_ifcs_0_firstFlit = CAN_FIRE_RL_ifcs_0_firstFlit ;

  // rule RL_ifcs_0_followFlits
  assign CAN_FIRE_RL_ifcs_0_followFlits =
	     inner_shim_tmp_wff$EMPTY_N &&
	     IF_merged_0_flitLeft_81_EQ_0_82_THEN_inner_shi_ETC___d940 &&
	     ifcs_0_innerReq$FULL_N &&
	     (IF_merged_0_flitLeft_81_EQ_0_82_THEN_NOT_inner_ETC___d945 ||
	      inner_shim_tmp_awff$EMPTY_N) &&
	     ifcs_0_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_followFlits = CAN_FIRE_RL_ifcs_0_followFlits ;

  // rule RL_ifcs_0_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_0_nonRoutableFlit =
	     IF_merged_0_flitLeft_81_EQ_0_82_THEN_inner_shi_ETC___d940 &&
	     IF_merged_0_flitLeft_81_EQ_0_82_THEN_NOT_inner_ETC___d1013 &&
	     ifcs_0_state == 2'd0 &&
	     IF_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inn_ETC___d984 !=
	     3'd1 ;
  assign WILL_FIRE_RL_ifcs_0_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_0_nonRoutableFlit ;

  // rule RL_ifcs_0_drainFlits
  assign CAN_FIRE_RL_ifcs_0_drainFlits =
	     IF_merged_0_flitLeft_81_EQ_0_82_THEN_inner_shi_ETC___d940 &&
	     inner_shim_tmp_wff$EMPTY_N &&
	     ifcs_0_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_0_drainFlits = CAN_FIRE_RL_ifcs_0_drainFlits ;

  // rule __me_check_224
  assign CAN_FIRE___me_check_224 = 1'b1 ;
  assign WILL_FIRE___me_check_224 = 1'b1 ;

  // rule RL_ifcs_0_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_0_drainNoRouteResponse =
	     msNoSynth_0_b_buffer_ff$FULL_N && ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_0_drainNoRouteResponse ;

  // rule RL_checkSinkReady_4
  assign CAN_FIRE_RL_checkSinkReady_4 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_4 = 1'd1 ;

  // rule RL_ifcs_1_firstFlit
  assign CAN_FIRE_RL_ifcs_1_firstFlit =
	     soc_top$to_ddr4_wvalid &&
	     IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1041 &&
	     ifcs_1_innerReq_i_notFull__042_AND_ifcs_1_inne_ETC___d1051 &&
	     ifcs_1_state == 2'd0 &&
	     IF_IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_to_ETC___d1086 ==
	     3'd1 ;
  assign WILL_FIRE_RL_ifcs_1_firstFlit = CAN_FIRE_RL_ifcs_1_firstFlit ;

  // rule RL_ifcs_1_followFlits
  assign CAN_FIRE_RL_ifcs_1_followFlits =
	     soc_top$to_ddr4_wvalid &&
	     IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1041 &&
	     ifcs_1_innerReq$FULL_N &&
	     (IF_merged_1_flitLeft_08_EQ_0_09_THEN_NOT_soc_t_ETC___d1048 ||
	      soc_top$to_ddr4_awvalid) &&
	     ifcs_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_followFlits = CAN_FIRE_RL_ifcs_1_followFlits ;

  // rule RL_ifcs_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_1_nonRoutableFlit =
	     IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1041 &&
	     IF_merged_1_flitLeft_08_EQ_0_09_THEN_NOT_soc_t_ETC___d1125 &&
	     ifcs_1_state == 2'd0 &&
	     IF_IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_to_ETC___d1086 !=
	     3'd1 ;
  assign WILL_FIRE_RL_ifcs_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_1_nonRoutableFlit ;

  // rule RL_ifcs_1_drainFlits
  assign CAN_FIRE_RL_ifcs_1_drainFlits =
	     IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1041 &&
	     soc_top$to_ddr4_wvalid &&
	     ifcs_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_1_drainFlits = CAN_FIRE_RL_ifcs_1_drainFlits ;

  // rule __me_check_231
  assign CAN_FIRE___me_check_231 = 1'b1 ;
  assign WILL_FIRE___me_check_231 = 1'b1 ;

  // rule RL_ifcs_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_1_drainNoRouteResponse =
	     msNoSynth_1_b_buffer_ff$FULL_N && ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_5
  assign CAN_FIRE_RL_checkSinkReady_5 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_5 = 1'd1 ;

  // rule RL_craftReq_2
  assign CAN_FIRE_RL_craftReq_2 =
	     ifcs_0_routeBack$EMPTY_N && ifcs_0_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_2 = CAN_FIRE_RL_craftReq_2 ;

  // rule RL_craftReq_3
  assign CAN_FIRE_RL_craftReq_3 =
	     ifcs_1_routeBack$EMPTY_N && ifcs_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_3 = CAN_FIRE_RL_craftReq_3 ;

  // rule RL_craftReq_4
  assign CAN_FIRE_RL_craftReq_4 =
	     ifcs_2_routeBack$EMPTY_N && ifcs_2_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_4 = CAN_FIRE_RL_craftReq_4 ;

  // rule RL_craftReq_5
  assign CAN_FIRE_RL_craftReq_5 =
	     ifcs_3_routeBack$EMPTY_N && ifcs_3_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_5 = CAN_FIRE_RL_craftReq_5 ;

  // rule RL_arbitrate_1
  assign CAN_FIRE_RL_arbitrate_1 =
	     reqWires_1_0_whas__506_AND_reqWires_1_0_wget___ETC___d1520 &&
	     !state_1 ;
  assign WILL_FIRE_RL_arbitrate_1 = CAN_FIRE_RL_arbitrate_1 ;

  // rule RL_source_selected_2
  assign CAN_FIRE_RL_source_selected_2 =
	     (!ifcs_0_routeBack$EMPTY_N || ifcs_0_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_0$whas ;
  assign WILL_FIRE_RL_source_selected_2 = CAN_FIRE_RL_source_selected_2 ;

  // rule RL_burst_2
  assign CAN_FIRE_RL_burst_2 =
	     ifcs_0_rspBack$EMPTY_N && ifcs_0_routeBack$EMPTY_N &&
	     state_1_521_AND_activeSource_1_0_645_646_AND_i_ETC___d1648 ;
  assign WILL_FIRE_RL_burst_2 = CAN_FIRE_RL_burst_2 ;

  // rule RL_source_selected_3
  assign CAN_FIRE_RL_source_selected_3 =
	     (!ifcs_1_routeBack$EMPTY_N || ifcs_1_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_1$whas ;
  assign WILL_FIRE_RL_source_selected_3 = CAN_FIRE_RL_source_selected_3 ;

  // rule RL_burst_3
  assign CAN_FIRE_RL_burst_3 =
	     ifcs_1_rspBack$EMPTY_N && ifcs_1_routeBack$EMPTY_N &&
	     state_1_521_AND_activeSource_1_1_678_679_AND_i_ETC___d1681 ;
  assign WILL_FIRE_RL_burst_3 = CAN_FIRE_RL_burst_3 ;

  // rule __me_check_268
  assign CAN_FIRE___me_check_268 = 1'b1 ;
  assign WILL_FIRE___me_check_268 = 1'b1 ;

  // rule RL_source_selected_4
  assign CAN_FIRE_RL_source_selected_4 =
	     (!ifcs_2_routeBack$EMPTY_N || ifcs_2_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_2$whas ;
  assign WILL_FIRE_RL_source_selected_4 = CAN_FIRE_RL_source_selected_4 ;

  // rule RL_burst_4
  assign CAN_FIRE_RL_burst_4 =
	     ifcs_2_rspBack$EMPTY_N && ifcs_2_routeBack$EMPTY_N &&
	     state_1_521_AND_activeSource_1_2_712_713_AND_i_ETC___d1715 ;
  assign WILL_FIRE_RL_burst_4 = CAN_FIRE_RL_burst_4 ;

  // rule __me_check_270
  assign CAN_FIRE___me_check_270 = 1'b1 ;
  assign WILL_FIRE___me_check_270 = 1'b1 ;

  // rule RL_source_selected_5
  assign CAN_FIRE_RL_source_selected_5 =
	     (!ifcs_3_routeBack$EMPTY_N || ifcs_3_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_3$whas ;
  assign WILL_FIRE_RL_source_selected_5 = CAN_FIRE_RL_source_selected_5 ;

  // rule RL_burst_5
  assign CAN_FIRE_RL_burst_5 =
	     ifcs_3_rspBack$EMPTY_N && ifcs_3_routeBack$EMPTY_N &&
	     state_1_521_AND_activeSource_1_3_746_747_AND_i_ETC___d1749 ;
  assign WILL_FIRE_RL_burst_5 = CAN_FIRE_RL_burst_5 ;

  // rule __me_check_266
  assign CAN_FIRE___me_check_266 = 1'b1 ;
  assign WILL_FIRE___me_check_266 = 1'b1 ;

  // rule __me_check_272
  assign CAN_FIRE___me_check_272 = 1'b1 ;
  assign WILL_FIRE___me_check_272 = 1'b1 ;

  // rule RL_sink_selected_4
  assign CAN_FIRE_RL_sink_selected_4 =
	     !CAN_FIRE_RL_ifcs_0_drainNoRouteResponse && flitToSink_1_0$whas ;
  assign WILL_FIRE_RL_sink_selected_4 = CAN_FIRE_RL_sink_selected_4 ;

  // rule RL_sink_selected_5
  assign CAN_FIRE_RL_sink_selected_5 =
	     !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse && flitToSink_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_5 = CAN_FIRE_RL_sink_selected_5 ;

  // rule __me_check_274
  assign CAN_FIRE___me_check_274 = 1'b1 ;
  assign WILL_FIRE___me_check_274 = 1'b1 ;

  // rule RL_ifcs_0_forwardRsp
  assign CAN_FIRE_RL_ifcs_0_forwardRsp =
	     msNoSynth_0_b_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_4 &&
	     !ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_forwardRsp = CAN_FIRE_RL_ifcs_0_forwardRsp ;

  // rule RL_msNoSynth_0_b_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_0_b_forwardFlit =
	     !inner_shim_tmp_bff$FULL_N ||
	     msNoSynth_0_b_buffer_firstValid$Q_OUT &&
	     (msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      msNoSynth_0_b_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_0_b_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_0_b_forwardFlit ;

  // rule RL_inner_shim_shim_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_b_warnDoPut =
	     inner_shim_shim_ug_master_u_b_putWire$whas &&
	     !inner_shim_tmp_bff$FULL_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_b_warnDoPut ;

  // rule RL_msNoSynth_0_b_dropFlit
  assign CAN_FIRE_RL_msNoSynth_0_b_dropFlit =
	     (msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      msNoSynth_0_b_buffer_enqw$whas) &&
	     inner_shim_tmp_bff$FULL_N ;
  assign WILL_FIRE_RL_msNoSynth_0_b_dropFlit =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit ;

  // rule RL_inner_shim_shim_ug_slave_u_b_doDrop
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_b_doDrop =
	     inner_shim_tmp_bff$EMPTY_N &&
	     inner_shim_shim_ug_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_b_doDrop =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_b_doDrop ;

  // rule RL_inner_shim_shim_ug_master_u_b_doPut
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_b_doPut =
	     inner_shim_tmp_bff$FULL_N &&
	     inner_shim_shim_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_b_doPut =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_b_doPut ;

  // rule RL_msNoSynth_0_b_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue =
	     msNoSynth_0_b_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_0_b_dropFlit ||
	      msNoSynth_0_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_0_b_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue ;

  // rule RL_msNoSynth_0_b_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit &&
	     msNoSynth_0_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue ;

  // rule RL_ifcs_0_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp =
	     IF_merged_0_flitLeft_81_EQ_0_82_THEN_inner_shi_ETC___d940 &&
	     ifcs_0_noRoute_inner_pendingReq$port1__read &&
	     ifcs_0_noRouteRsp$FULL_N &&
	     inner_shim_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp ;

  // rule __me_check_222
  assign CAN_FIRE___me_check_222 = 1'b1 ;
  assign WILL_FIRE___me_check_222 = 1'b1 ;

  // rule __me_check_223
  assign CAN_FIRE___me_check_223 = 1'b1 ;
  assign WILL_FIRE___me_check_223 = 1'b1 ;

  // rule __me_check_226
  assign CAN_FIRE___me_check_226 = 1'b1 ;
  assign WILL_FIRE___me_check_226 = 1'b1 ;

  // rule RL_merged_0_genFirst
  assign CAN_FIRE_RL_merged_0_genFirst =
	     inner_shim_tmp_awff$EMPTY_N && inner_shim_tmp_wff$EMPTY_N &&
	     merged_0_doDrop$whas &&
	     merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genFirst = CAN_FIRE_RL_merged_0_genFirst ;

  // rule RL_msNoSynth_0_aw_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_aw_forwardReady = 1'd1 ;

  // rule RL_inner_shim_shim_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_aw_warnDoDrop =
	     inner_shim_shim_ug_master_u_aw_dropWire$whas &&
	     !inner_shim_tmp_awff$EMPTY_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_aw_warnDoDrop ;

  // rule RL_inner_shim_shim_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_aw_doDrop =
	     inner_shim_tmp_awff$EMPTY_N &&
	     inner_shim_shim_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_aw_doDrop ;

  // rule RL_inner_shim_shim_ug_slave_u_aw_doPut
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_aw_doPut =
	     inner_shim_tmp_awff$FULL_N &&
	     inner_shim_shim_ug_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_aw_doPut =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_aw_doPut ;

  // rule RL_merged_0_genOther
  assign CAN_FIRE_RL_merged_0_genOther =
	     inner_shim_tmp_wff$EMPTY_N && merged_0_doDrop$whas &&
	     merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genOther = CAN_FIRE_RL_merged_0_genOther ;

  // rule RL_msNoSynth_0_w_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_w_forwardReady = 1'd1 ;

  // rule RL_inner_shim_shim_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_w_warnDoDrop =
	     inner_shim_shim_ug_master_u_w_dropWire$whas &&
	     !inner_shim_tmp_wff$EMPTY_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_w_warnDoDrop ;

  // rule RL_inner_shim_shim_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_w_doDrop =
	     inner_shim_tmp_wff$EMPTY_N &&
	     inner_shim_shim_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_w_doDrop ;

  // rule RL_inner_shim_shim_ug_slave_u_w_doPut
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_w_doPut =
	     inner_shim_tmp_wff$FULL_N &&
	     inner_shim_shim_ug_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_w_doPut =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_w_doPut ;

  // rule RL_ifcs_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_1_forwardRsp =
	     msNoSynth_1_b_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_5 &&
	     !ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_forwardRsp = CAN_FIRE_RL_ifcs_1_forwardRsp ;

  // rule RL_msNoSynth_1_b_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_1_b_forwardFlit =
	     msNoSynth_1_b_buffer_firstValid$Q_OUT &&
	     (msNoSynth_1_b_buffer_ff$EMPTY_N ||
	      msNoSynth_1_b_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_1_b_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_1_b_forwardFlit ;

  // rule RL_msNoSynth_1_b_dropFlit
  assign CAN_FIRE_RL_msNoSynth_1_b_dropFlit =
	     msNoSynth_1_b_buffer_dequeueing$whas ;
  assign WILL_FIRE_RL_msNoSynth_1_b_dropFlit =
	     msNoSynth_1_b_buffer_dequeueing$whas ;

  // rule RL_msNoSynth_1_b_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue =
	     msNoSynth_1_b_buffer_enqw$whas &&
	     (!msNoSynth_1_b_buffer_dequeueing$whas ||
	      msNoSynth_1_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_1_b_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue ;

  // rule RL_msNoSynth_1_b_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue =
	     msNoSynth_1_b_buffer_dequeueing$whas &&
	     msNoSynth_1_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_1_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue ;

  // rule RL_ifcs_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp =
	     IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1041 &&
	     ifcs_1_noRoute_inner_pendingReq$port1__read &&
	     ifcs_1_noRouteRsp$FULL_N &&
	     soc_top$to_ddr4_wvalid ;
  assign WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp ;

  // rule __me_check_229
  assign CAN_FIRE___me_check_229 = 1'b1 ;
  assign WILL_FIRE___me_check_229 = 1'b1 ;

  // rule __me_check_230
  assign CAN_FIRE___me_check_230 = 1'b1 ;
  assign WILL_FIRE___me_check_230 = 1'b1 ;

  // rule __me_check_233
  assign CAN_FIRE___me_check_233 = 1'b1 ;
  assign WILL_FIRE___me_check_233 = 1'b1 ;

  // rule RL_merged_1_genFirst
  assign CAN_FIRE_RL_merged_1_genFirst = msNoSynth_1_aw_dwReady$whas ;
  assign WILL_FIRE_RL_merged_1_genFirst = msNoSynth_1_aw_dwReady$whas ;

  // rule RL_msNoSynth_1_aw_forwardReady
  assign CAN_FIRE_RL_msNoSynth_1_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_1_aw_forwardReady = 1'd1 ;

  // rule RL_merged_1_genOther
  assign CAN_FIRE_RL_merged_1_genOther =
	     soc_top$to_ddr4_wvalid && merged_1_doDrop$whas &&
	     merged_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genOther = CAN_FIRE_RL_merged_1_genOther ;

  // rule RL_msNoSynth_1_w_forwardReady
  assign CAN_FIRE_RL_msNoSynth_1_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_1_w_forwardReady = 1'd1 ;

  // rule RL_ifcs_0_firstFlit_1
  assign CAN_FIRE_RL_ifcs_0_firstFlit_1 =
	     outer_shim_0_tmp_bff$EMPTY_N && ifcs_0_rspBack$FULL_N &&
	     ifcs_0_routeBack$FULL_N &&
	     !ifcs_0_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_firstFlit_1 = CAN_FIRE_RL_ifcs_0_firstFlit_1 ;

  // rule RL_ifcs_0_followFlits_1
  assign CAN_FIRE_RL_ifcs_0_followFlits_1 =
	     outer_shim_0_tmp_bff$EMPTY_N && ifcs_0_rspBack$FULL_N &&
	     ifcs_0_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_followFlits_1 =
	     CAN_FIRE_RL_ifcs_0_followFlits_1 ;

  // rule __me_check_236
  assign CAN_FIRE___me_check_236 = 1'b1 ;
  assign WILL_FIRE___me_check_236 = 1'b1 ;

  // rule RL_ssNoSynth_0_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_0_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_0_b_forwardReady = 1'd1 ;

  // rule RL_outer_shim_0_shim_ug_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_warnDoDrop =
	     outer_shim_0_shim_ug_slave_u_b_dropWire$whas &&
	     !outer_shim_0_tmp_bff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_warnDoDrop ;

  // rule RL_outer_shim_0_shim_ug_slave_u_b_doDrop
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_doDrop =
	     outer_shim_0_tmp_bff$EMPTY_N &&
	     outer_shim_0_shim_ug_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_doDrop =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_doDrop ;

  // rule RL_outer_shim_0_shim_ug_master_u_b_doPut
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_b_doPut =
	     outer_shim_0_tmp_bff$FULL_N &&
	     outer_shim_0_shim_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_b_doPut =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_b_doPut ;

  // rule RL_ifcs_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_1_firstFlit_1 =
	     outer_shim_1_tmp_bff$EMPTY_N && ifcs_1_rspBack$FULL_N &&
	     ifcs_1_routeBack$FULL_N &&
	     !ifcs_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_firstFlit_1 = CAN_FIRE_RL_ifcs_1_firstFlit_1 ;

  // rule RL_ifcs_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_1_followFlits_1 =
	     outer_shim_1_tmp_bff$EMPTY_N && ifcs_1_rspBack$FULL_N &&
	     ifcs_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_1_followFlits_1 ;

  // rule __me_check_238
  assign CAN_FIRE___me_check_238 = 1'b1 ;
  assign WILL_FIRE___me_check_238 = 1'b1 ;

  // rule RL_ssNoSynth_1_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_1_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_1_b_forwardReady = 1'd1 ;

  // rule RL_outer_shim_1_shim_ug_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_warnDoDrop =
	     outer_shim_1_shim_ug_slave_u_b_dropWire$whas &&
	     !outer_shim_1_tmp_bff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_warnDoDrop ;

  // rule RL_outer_shim_1_shim_ug_slave_u_b_doDrop
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_doDrop =
	     outer_shim_1_tmp_bff$EMPTY_N &&
	     outer_shim_1_shim_ug_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_doDrop =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_doDrop ;

  // rule RL_outer_shim_1_shim_ug_master_u_b_doPut
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_b_doPut =
	     outer_shim_1_tmp_bff$FULL_N &&
	     outer_shim_1_shim_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_b_doPut =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_b_doPut ;

  // rule RL_ifcs_2_firstFlit
  assign CAN_FIRE_RL_ifcs_2_firstFlit =
	     outer_shim_2_tmp_bff$EMPTY_N && ifcs_2_rspBack$FULL_N &&
	     ifcs_2_routeBack$FULL_N &&
	     !ifcs_2_state ;
  assign WILL_FIRE_RL_ifcs_2_firstFlit = CAN_FIRE_RL_ifcs_2_firstFlit ;

  // rule RL_ifcs_2_followFlits
  assign CAN_FIRE_RL_ifcs_2_followFlits =
	     outer_shim_2_tmp_bff$EMPTY_N && ifcs_2_rspBack$FULL_N &&
	     ifcs_2_state ;
  assign WILL_FIRE_RL_ifcs_2_followFlits = CAN_FIRE_RL_ifcs_2_followFlits ;

  // rule __me_check_240
  assign CAN_FIRE___me_check_240 = 1'b1 ;
  assign WILL_FIRE___me_check_240 = 1'b1 ;

  // rule RL_ssNoSynth_2_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_2_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_2_b_forwardReady = 1'd1 ;

  // rule RL_outer_shim_2_shim_ug_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_warnDoDrop =
	     outer_shim_2_shim_ug_slave_u_b_dropWire$whas &&
	     !outer_shim_2_tmp_bff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_warnDoDrop ;

  // rule RL_outer_shim_2_shim_ug_slave_u_b_doDrop
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_doDrop =
	     outer_shim_2_tmp_bff$EMPTY_N &&
	     outer_shim_2_shim_ug_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_doDrop =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_doDrop ;

  // rule RL_outer_shim_2_shim_ug_master_u_b_doPut
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_b_doPut =
	     outer_shim_2_tmp_bff$FULL_N &&
	     outer_shim_2_shim_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_b_doPut =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_b_doPut ;

  // rule RL_ifcs_3_firstFlit
  assign CAN_FIRE_RL_ifcs_3_firstFlit =
	     outer_shim_3_tmp_bff$EMPTY_N && ifcs_3_rspBack$FULL_N &&
	     ifcs_3_routeBack$FULL_N &&
	     !ifcs_3_state ;
  assign WILL_FIRE_RL_ifcs_3_firstFlit = CAN_FIRE_RL_ifcs_3_firstFlit ;

  // rule RL_ifcs_3_followFlits
  assign CAN_FIRE_RL_ifcs_3_followFlits =
	     outer_shim_3_tmp_bff$EMPTY_N && ifcs_3_rspBack$FULL_N &&
	     ifcs_3_state ;
  assign WILL_FIRE_RL_ifcs_3_followFlits = CAN_FIRE_RL_ifcs_3_followFlits ;

  // rule __me_check_242
  assign CAN_FIRE___me_check_242 = 1'b1 ;
  assign WILL_FIRE___me_check_242 = 1'b1 ;

  // rule RL_ssNoSynth_3_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_3_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_3_b_forwardReady = 1'd1 ;

  // rule RL_outer_shim_3_shim_ug_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_warnDoDrop =
	     outer_shim_3_shim_ug_slave_u_b_dropWire$whas &&
	     !outer_shim_3_tmp_bff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_warnDoDrop ;

  // rule RL_outer_shim_3_shim_ug_slave_u_b_doDrop
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_doDrop =
	     outer_shim_3_tmp_bff$EMPTY_N &&
	     outer_shim_3_shim_ug_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_doDrop =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_doDrop ;

  // rule RL_outer_shim_3_shim_ug_master_u_b_doPut
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_b_doPut =
	     outer_shim_3_tmp_bff$FULL_N &&
	     outer_shim_3_shim_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_b_doPut =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_b_doPut ;

  // rule RL_ifcs_0_1_firstFlit
  assign CAN_FIRE_RL_ifcs_0_1_firstFlit =
	     inner_shim_tmp_arff$EMPTY_N && ifcs_0_1_innerReq$FULL_N &&
	     ifcs_0_1_innerRoute$FULL_N &&
	     ifcs_0_1_state == 2'd0 &&
	     IF_IF_inner_shim_shim_ug_master_u_ar_peekWire__ETC___d1795 ==
	     3'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_firstFlit = CAN_FIRE_RL_ifcs_0_1_firstFlit ;

  // rule RL_ifcs_0_1_followFlits
  assign CAN_FIRE_RL_ifcs_0_1_followFlits =
	     inner_shim_tmp_arff$EMPTY_N && ifcs_0_1_innerReq$FULL_N &&
	     ifcs_0_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_followFlits =
	     CAN_FIRE_RL_ifcs_0_1_followFlits ;

  // rule RL_ifcs_0_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit =
	     ifcs_0_1_noRoute_flitCount == 9'd0 &&
	     inner_shim_tmp_arff$EMPTY_N &&
	     ifcs_0_1_state == 2'd0 &&
	     IF_IF_inner_shim_shim_ug_master_u_ar_peekWire__ETC___d1795 !=
	     3'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ;

  // rule RL_ifcs_0_1_drainFlits
  assign CAN_FIRE_RL_ifcs_0_1_drainFlits =
	     inner_shim_tmp_arff$EMPTY_N && ifcs_0_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_0_1_drainFlits = CAN_FIRE_RL_ifcs_0_1_drainFlits ;

  // rule __me_check_278
  assign CAN_FIRE___me_check_278 = 1'b1 ;
  assign WILL_FIRE___me_check_278 = 1'b1 ;

  // rule RL_ifcs_0_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse =
	     msNoSynth_0_r_buffer_ff$FULL_N && ifcs_0_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_10
  assign CAN_FIRE_RL_checkSinkReady_10 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_10 = 1'd1 ;

  // rule RL_ifcs_1_1_firstFlit
  assign CAN_FIRE_RL_ifcs_1_1_firstFlit =
	     soc_top$to_ddr4_arvalid && ifcs_1_1_innerReq$FULL_N &&
	     ifcs_1_1_innerRoute$FULL_N &&
	     ifcs_1_1_state == 2'd0 &&
	     IF_soc_top_to_ddr4_ar_araddr__860_ULT_0x400000_ETC___d1889 ==
	     3'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_firstFlit = CAN_FIRE_RL_ifcs_1_1_firstFlit ;

  // rule RL_ifcs_1_1_followFlits
  assign CAN_FIRE_RL_ifcs_1_1_followFlits =
	     soc_top$to_ddr4_arvalid && ifcs_1_1_innerReq$FULL_N &&
	     ifcs_1_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_followFlits =
	     CAN_FIRE_RL_ifcs_1_1_followFlits ;

  // rule RL_ifcs_1_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit =
	     ifcs_1_1_noRoute_flitCount == 9'd0 && soc_top$to_ddr4_arvalid &&
	     ifcs_1_1_state == 2'd0 &&
	     IF_soc_top_to_ddr4_ar_araddr__860_ULT_0x400000_ETC___d1889 !=
	     3'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit ;

  // rule RL_ifcs_1_1_drainFlits
  assign CAN_FIRE_RL_ifcs_1_1_drainFlits =
	     soc_top$to_ddr4_arvalid && ifcs_1_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_1_1_drainFlits = CAN_FIRE_RL_ifcs_1_1_drainFlits ;

  // rule __me_check_285
  assign CAN_FIRE___me_check_285 = 1'b1 ;
  assign WILL_FIRE___me_check_285 = 1'b1 ;

  // rule RL_ifcs_1_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse =
	     msNoSynth_1_r_buffer_ff$FULL_N && ifcs_1_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_11
  assign CAN_FIRE_RL_checkSinkReady_11 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_11 = 1'd1 ;

  // rule RL_craftReq_8
  assign CAN_FIRE_RL_craftReq_8 =
	     ifcs_0_1_routeBack$EMPTY_N && ifcs_0_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_8 = CAN_FIRE_RL_craftReq_8 ;

  // rule RL_craftReq_9
  assign CAN_FIRE_RL_craftReq_9 =
	     ifcs_1_1_routeBack$EMPTY_N && ifcs_1_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_9 = CAN_FIRE_RL_craftReq_9 ;

  // rule RL_craftReq_10
  assign CAN_FIRE_RL_craftReq_10 = reqWires_1_1_2$whas ;
  assign WILL_FIRE_RL_craftReq_10 = reqWires_1_1_2$whas ;

  // rule RL_craftReq_11
  assign CAN_FIRE_RL_craftReq_11 =
	     ifcs_3_1_routeBack$EMPTY_N && ifcs_3_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_11 = CAN_FIRE_RL_craftReq_11 ;

  // rule RL_arbitrate_3
  assign CAN_FIRE_RL_arbitrate_3 =
	     reqWires_1_1_0_whas__313_AND_reqWires_1_1_0_wg_ETC___d2327 &&
	     !state_1_1_1 ;
  assign WILL_FIRE_RL_arbitrate_3 = CAN_FIRE_RL_arbitrate_3 ;

  // rule RL_source_selected_8
  assign CAN_FIRE_RL_source_selected_8 =
	     (!ifcs_0_1_routeBack$EMPTY_N || ifcs_0_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_8 = CAN_FIRE_RL_source_selected_8 ;

  // rule RL_burst_8
  assign CAN_FIRE_RL_burst_8 =
	     ifcs_0_1_rspBack$EMPTY_N && ifcs_0_1_routeBack$EMPTY_N &&
	     state_1_1_1_328_AND_activeSource_1_1_0_459_460_ETC___d2462 ;
  assign WILL_FIRE_RL_burst_8 = CAN_FIRE_RL_burst_8 ;

  // rule RL_source_selected_9
  assign CAN_FIRE_RL_source_selected_9 =
	     (!ifcs_1_1_routeBack$EMPTY_N || ifcs_1_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_1_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_9 = CAN_FIRE_RL_source_selected_9 ;

  // rule RL_burst_9
  assign CAN_FIRE_RL_burst_9 =
	     ifcs_1_1_rspBack$EMPTY_N && ifcs_1_1_routeBack$EMPTY_N &&
	     state_1_1_1_328_AND_activeSource_1_1_1_1_495_4_ETC___d2498 ;
  assign WILL_FIRE_RL_burst_9 = CAN_FIRE_RL_burst_9 ;

  // rule __me_check_322
  assign CAN_FIRE___me_check_322 = 1'b1 ;
  assign WILL_FIRE___me_check_322 = 1'b1 ;

  // rule RL_source_selected_10
  assign CAN_FIRE_RL_source_selected_10 =
	     MUX_activeSource_1_1_0$write_1__PSEL_3 ;
  assign WILL_FIRE_RL_source_selected_10 =
	     MUX_activeSource_1_1_0$write_1__PSEL_3 ;

  // rule RL_burst_10
  assign CAN_FIRE_RL_burst_10 = MUX_flitToSink_1_1_0$wset_1__PSEL_3 ;
  assign WILL_FIRE_RL_burst_10 = MUX_flitToSink_1_1_0$wset_1__PSEL_3 ;

  // rule __me_check_324
  assign CAN_FIRE___me_check_324 = 1'b1 ;
  assign WILL_FIRE___me_check_324 = 1'b1 ;

  // rule RL_source_selected_11
  assign CAN_FIRE_RL_source_selected_11 =
	     (!ifcs_3_1_routeBack$EMPTY_N || ifcs_3_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_3$write_1__VAL_3 ;
  assign WILL_FIRE_RL_source_selected_11 = CAN_FIRE_RL_source_selected_11 ;

  // rule RL_burst_11
  assign CAN_FIRE_RL_burst_11 = MUX_flitToSink_1_1_0$wset_1__PSEL_4 ;
  assign WILL_FIRE_RL_burst_11 = MUX_flitToSink_1_1_0$wset_1__PSEL_4 ;

  // rule __me_check_320
  assign CAN_FIRE___me_check_320 = 1'b1 ;
  assign WILL_FIRE___me_check_320 = 1'b1 ;

  // rule __me_check_326
  assign CAN_FIRE___me_check_326 = 1'b1 ;
  assign WILL_FIRE___me_check_326 = 1'b1 ;

  // rule RL_sink_selected_10
  assign CAN_FIRE_RL_sink_selected_10 = ifcs_0_1_rspFwd$whas ;
  assign WILL_FIRE_RL_sink_selected_10 = ifcs_0_1_rspFwd$whas ;

  // rule RL_sink_selected_11
  assign CAN_FIRE_RL_sink_selected_11 = ifcs_1_1_rspFwd$whas ;
  assign WILL_FIRE_RL_sink_selected_11 = ifcs_1_1_rspFwd$whas ;

  // rule __me_check_328
  assign CAN_FIRE___me_check_328 = 1'b1 ;
  assign WILL_FIRE___me_check_328 = 1'b1 ;

  // rule RL_ifcs_0_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_0_1_forwardRsp =
	     msNoSynth_0_r_buffer_ff$FULL_N && ifcs_0_1_rspFwd$whas &&
	     !ifcs_0_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_1_forwardRsp = CAN_FIRE_RL_ifcs_0_1_forwardRsp ;

  // rule RL_msNoSynth_0_r_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_0_r_forwardFlit =
	     !inner_shim_tmp_rff$FULL_N ||
	     msNoSynth_0_r_buffer_firstValid$Q_OUT &&
	     (msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      msNoSynth_0_r_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_0_r_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_0_r_forwardFlit ;

  // rule RL_inner_shim_shim_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_r_warnDoPut =
	     inner_shim_shim_ug_master_u_r_putWire$whas &&
	     !inner_shim_tmp_rff$FULL_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_r_warnDoPut ;

  // rule RL_msNoSynth_0_r_dropFlit
  assign CAN_FIRE_RL_msNoSynth_0_r_dropFlit =
	     (msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      msNoSynth_0_r_buffer_enqw$whas) &&
	     inner_shim_tmp_rff$FULL_N ;
  assign WILL_FIRE_RL_msNoSynth_0_r_dropFlit =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit ;

  // rule RL_inner_shim_shim_ug_slave_u_r_doDrop
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_r_doDrop =
	     inner_shim_tmp_rff$EMPTY_N &&
	     inner_shim_shim_ug_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_r_doDrop =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_r_doDrop ;

  // rule RL_inner_shim_shim_ug_master_u_r_doPut
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_r_doPut =
	     inner_shim_tmp_rff$FULL_N &&
	     inner_shim_shim_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_r_doPut =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_r_doPut ;

  // rule RL_msNoSynth_0_r_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue =
	     msNoSynth_0_r_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_0_r_dropFlit ||
	      msNoSynth_0_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_0_r_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue ;

  // rule RL_msNoSynth_0_r_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit &&
	     msNoSynth_0_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue ;

  // rule RL_ifcs_0_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp =
	     x_port1__read__h78845 != 9'd0 && ifcs_0_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h78845 != 9'd1 || inner_shim_tmp_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ;

  // rule __me_check_276
  assign CAN_FIRE___me_check_276 = 1'b1 ;
  assign WILL_FIRE___me_check_276 = 1'b1 ;

  // rule __me_check_277
  assign CAN_FIRE___me_check_277 = 1'b1 ;
  assign WILL_FIRE___me_check_277 = 1'b1 ;

  // rule __me_check_280
  assign CAN_FIRE___me_check_280 = 1'b1 ;
  assign WILL_FIRE___me_check_280 = 1'b1 ;

  // rule RL_msNoSynth_0_ar_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_ar_forwardReady = 1'd1 ;

  // rule RL_inner_shim_shim_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_ar_warnDoDrop =
	     inner_shim_shim_ug_master_u_ar_dropWire$whas &&
	     !inner_shim_tmp_arff$EMPTY_N ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_ar_warnDoDrop ;

  // rule RL_inner_shim_shim_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_inner_shim_shim_ug_master_u_ar_doDrop =
	     inner_shim_tmp_arff$EMPTY_N &&
	     inner_shim_shim_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_ar_doDrop ;

  // rule RL_inner_shim_shim_ug_slave_u_ar_doPut
  assign CAN_FIRE_RL_inner_shim_shim_ug_slave_u_ar_doPut =
	     inner_shim_tmp_arff$FULL_N &&
	     inner_shim_shim_ug_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_inner_shim_shim_ug_slave_u_ar_doPut =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_ar_doPut ;

  // rule RL_ifcs_1_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_1_1_forwardRsp =
	     msNoSynth_1_r_buffer_ff$FULL_N && ifcs_1_1_rspFwd$whas &&
	     !ifcs_1_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_1_forwardRsp = CAN_FIRE_RL_ifcs_1_1_forwardRsp ;

  // rule RL_msNoSynth_1_r_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_1_r_forwardFlit =
	     msNoSynth_1_r_buffer_firstValid$Q_OUT &&
	     (msNoSynth_1_r_buffer_ff$EMPTY_N ||
	      msNoSynth_1_r_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_1_r_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_1_r_forwardFlit ;

  // rule RL_msNoSynth_1_r_dropFlit
  assign CAN_FIRE_RL_msNoSynth_1_r_dropFlit =
	     msNoSynth_1_r_buffer_dequeueing$whas ;
  assign WILL_FIRE_RL_msNoSynth_1_r_dropFlit =
	     msNoSynth_1_r_buffer_dequeueing$whas ;

  // rule RL_msNoSynth_1_r_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue =
	     msNoSynth_1_r_buffer_enqw$whas &&
	     (!msNoSynth_1_r_buffer_dequeueing$whas ||
	      msNoSynth_1_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_1_r_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue ;

  // rule RL_msNoSynth_1_r_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue =
	     msNoSynth_1_r_buffer_dequeueing$whas &&
	     msNoSynth_1_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_1_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue ;

  // rule RL_ifcs_1_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp =
	     x_port1__read__h82166 != 9'd0 && ifcs_1_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h82166 != 9'd1 || soc_top$to_ddr4_arvalid) ;
  assign WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ;

  // rule __me_check_283
  assign CAN_FIRE___me_check_283 = 1'b1 ;
  assign WILL_FIRE___me_check_283 = 1'b1 ;

  // rule __me_check_284
  assign CAN_FIRE___me_check_284 = 1'b1 ;
  assign WILL_FIRE___me_check_284 = 1'b1 ;

  // rule __me_check_287
  assign CAN_FIRE___me_check_287 = 1'b1 ;
  assign WILL_FIRE___me_check_287 = 1'b1 ;

  // rule RL_msNoSynth_1_ar_forwardReady
  assign CAN_FIRE_RL_msNoSynth_1_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_1_ar_forwardReady = 1'd1 ;

  // rule RL_ifcs_0_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_0_1_firstFlit_1 =
	     outer_shim_0_tmp_rff$EMPTY_N && ifcs_0_1_rspBack$FULL_N &&
	     ifcs_0_1_routeBack$FULL_N &&
	     !ifcs_0_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_1_firstFlit_1 =
	     CAN_FIRE_RL_ifcs_0_1_firstFlit_1 ;

  // rule RL_ifcs_0_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_0_1_followFlits_1 =
	     outer_shim_0_tmp_rff$EMPTY_N && ifcs_0_1_rspBack$FULL_N &&
	     ifcs_0_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_0_1_followFlits_1 ;

  // rule __me_check_290
  assign CAN_FIRE___me_check_290 = 1'b1 ;
  assign WILL_FIRE___me_check_290 = 1'b1 ;

  // rule RL_ssNoSynth_0_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_0_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_0_r_forwardReady = 1'd1 ;

  // rule RL_outer_shim_0_shim_ug_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_warnDoDrop =
	     outer_shim_0_shim_ug_slave_u_r_dropWire$whas &&
	     !outer_shim_0_tmp_rff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_warnDoDrop ;

  // rule RL_outer_shim_0_shim_ug_slave_u_r_doDrop
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_doDrop =
	     outer_shim_0_tmp_rff$EMPTY_N &&
	     outer_shim_0_shim_ug_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_doDrop =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_doDrop ;

  // rule RL_outer_shim_0_shim_ug_master_u_r_doPut
  assign CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_r_doPut =
	     outer_shim_0_tmp_rff$FULL_N &&
	     outer_shim_0_shim_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_r_doPut =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_r_doPut ;

  // rule RL_ifcs_1_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_1_1_firstFlit_1 =
	     outer_shim_1_tmp_rff$EMPTY_N && ifcs_1_1_rspBack$FULL_N &&
	     ifcs_1_1_routeBack$FULL_N &&
	     !ifcs_1_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_1_firstFlit_1 =
	     CAN_FIRE_RL_ifcs_1_1_firstFlit_1 ;

  // rule RL_ifcs_1_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_1_1_followFlits_1 =
	     outer_shim_1_tmp_rff$EMPTY_N && ifcs_1_1_rspBack$FULL_N &&
	     ifcs_1_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_1_1_followFlits_1 ;

  // rule __me_check_292
  assign CAN_FIRE___me_check_292 = 1'b1 ;
  assign WILL_FIRE___me_check_292 = 1'b1 ;

  // rule RL_ssNoSynth_1_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_1_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_1_r_forwardReady = 1'd1 ;

  // rule RL_outer_shim_1_shim_ug_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_warnDoDrop =
	     outer_shim_1_shim_ug_slave_u_r_dropWire$whas &&
	     !outer_shim_1_tmp_rff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_warnDoDrop ;

  // rule RL_outer_shim_1_shim_ug_slave_u_r_doDrop
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_doDrop =
	     outer_shim_1_tmp_rff$EMPTY_N &&
	     outer_shim_1_shim_ug_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_doDrop =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_doDrop ;

  // rule RL_outer_shim_1_shim_ug_master_u_r_doPut
  assign CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_r_doPut =
	     outer_shim_1_tmp_rff$FULL_N &&
	     outer_shim_1_shim_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_r_doPut =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_r_doPut ;

  // rule RL_ifcs_2_1_firstFlit
  assign CAN_FIRE_RL_ifcs_2_1_firstFlit =
	     outer_shim_2_tmp_rff$EMPTY_N && ifcs_2_1_rspBack$FULL_N &&
	     ifcs_2_1_routeBack$FULL_N &&
	     !ifcs_2_1_state ;
  assign WILL_FIRE_RL_ifcs_2_1_firstFlit = CAN_FIRE_RL_ifcs_2_1_firstFlit ;

  // rule RL_ifcs_2_1_followFlits
  assign CAN_FIRE_RL_ifcs_2_1_followFlits =
	     outer_shim_2_tmp_rff$EMPTY_N && ifcs_2_1_rspBack$FULL_N &&
	     ifcs_2_1_state ;
  assign WILL_FIRE_RL_ifcs_2_1_followFlits =
	     CAN_FIRE_RL_ifcs_2_1_followFlits ;

  // rule __me_check_294
  assign CAN_FIRE___me_check_294 = 1'b1 ;
  assign WILL_FIRE___me_check_294 = 1'b1 ;

  // rule RL_ssNoSynth_2_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_2_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_2_r_forwardReady = 1'd1 ;

  // rule RL_outer_shim_2_shim_ug_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_warnDoDrop =
	     outer_shim_2_shim_ug_slave_u_r_dropWire$whas &&
	     !outer_shim_2_tmp_rff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_warnDoDrop ;

  // rule RL_outer_shim_2_shim_ug_slave_u_r_doDrop
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_doDrop =
	     outer_shim_2_tmp_rff$EMPTY_N &&
	     outer_shim_2_shim_ug_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_doDrop =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_doDrop ;

  // rule RL_outer_shim_2_shim_ug_master_u_r_doPut
  assign CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_r_doPut =
	     outer_shim_2_tmp_rff$FULL_N &&
	     outer_shim_2_shim_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_r_doPut =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_r_doPut ;

  // rule RL_ifcs_3_1_firstFlit
  assign CAN_FIRE_RL_ifcs_3_1_firstFlit =
	     outer_shim_3_tmp_rff$EMPTY_N && ifcs_3_1_rspBack$FULL_N &&
	     ifcs_3_1_routeBack$FULL_N &&
	     !ifcs_3_1_state ;
  assign WILL_FIRE_RL_ifcs_3_1_firstFlit = CAN_FIRE_RL_ifcs_3_1_firstFlit ;

  // rule RL_ifcs_3_1_followFlits
  assign CAN_FIRE_RL_ifcs_3_1_followFlits =
	     outer_shim_3_tmp_rff$EMPTY_N && ifcs_3_1_rspBack$FULL_N &&
	     ifcs_3_1_state ;
  assign WILL_FIRE_RL_ifcs_3_1_followFlits =
	     CAN_FIRE_RL_ifcs_3_1_followFlits ;

  // rule __me_check_296
  assign CAN_FIRE___me_check_296 = 1'b1 ;
  assign WILL_FIRE___me_check_296 = 1'b1 ;

  // rule RL_ssNoSynth_3_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_3_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_3_r_forwardReady = 1'd1 ;

  // rule RL_outer_shim_3_shim_ug_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_warnDoDrop =
	     outer_shim_3_shim_ug_slave_u_r_dropWire$whas &&
	     !outer_shim_3_tmp_rff$EMPTY_N ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_warnDoDrop ;

  // rule RL_outer_shim_3_shim_ug_slave_u_r_doDrop
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_doDrop =
	     outer_shim_3_tmp_rff$EMPTY_N &&
	     outer_shim_3_shim_ug_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_doDrop =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_doDrop ;

  // rule RL_outer_shim_3_shim_ug_master_u_r_doPut
  assign CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_r_doPut =
	     outer_shim_3_tmp_rff$FULL_N &&
	     outer_shim_3_shim_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_r_doPut =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_r_doPut ;

  // inputs to muxes for submodule ports
  assign MUX_activeSource_0$write_1__SEL_1 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[0] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_1 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[0] ;
  assign MUX_activeSource_1_1_0$write_1__PSEL_3 =
	     (!ifcs_2_1_routeBack$EMPTY_N || ifcs_2_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_2$write_1__VAL_1 ;
  assign MUX_activeSource_1_1_0$write_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[0] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     !ifcs_3_1_rspBack$D_OUT[0] ;
  assign MUX_activeSource_1_1_1_1$write_1__SEL_2 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[0] ;
  assign MUX_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_burst_5 && ifcs_3_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_7 =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_8 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	     ifcs_3_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_6 && ifcs_0_1_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_burst_5 && ifcs_3_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	     ifcs_3_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_8 && ifcs_0_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_9 && ifcs_1_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__PSEL_3 =
	     ifcs_2_1_rspBack$EMPTY_N && ifcs_2_1_routeBack$EMPTY_N &&
	     state_1_1_1_328_AND_activeSource_1_1_2_531_532_ETC___d2534 ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_10 && ifcs_2_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__PSEL_4 =
	     ifcs_3_1_rspBack$EMPTY_N && ifcs_3_1_routeBack$EMPTY_N &&
	     state_1_1_1_328_AND_activeSource_1_1_3_567_568_ETC___d2570 ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_burst_11 && ifcs_3_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_7 =
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_8 =
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     ifcs_3_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_6 && ifcs_0_1_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_8 && ifcs_0_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_9 && ifcs_1_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_10 && ifcs_2_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_burst_11 && ifcs_3_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_7 =
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_8 =
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     ifcs_3_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_6 && ifcs_0_1_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_1_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_1_3$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_6 && ifcs_0_1_innerRoute$D_OUT[3] ;
  assign MUX_flitToSink_1_3$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[3] ;
  assign MUX_flitToSink_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_3$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[3] ;
  assign MUX_flitToSink_3$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[3] ;
  assign MUX_ifcs_0_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	     !outer_shim_0_tmp_rff$D_OUT[0] ;
  assign MUX_ifcs_0_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_followFlits ;
  assign MUX_ifcs_0_state$write_1__SEL_1 =
	     MUX_ifcs_0_state$write_1__PSEL_1 && inner_shim_tmp_wff$D_OUT[0] ;
  assign MUX_ifcs_0_state$write_1__SEL_2 =
	     WILL_FIRE_RL_ifcs_0_firstFlit && !inner_shim_tmp_wff$D_OUT[0] ;
  assign MUX_ifcs_0_state$write_1__SEL_3 =
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp &&
	     !inner_shim_tmp_wff$D_OUT[0] ;
  assign MUX_ifcs_1_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 &&
	     !outer_shim_1_tmp_rff$D_OUT[0] ;
  assign MUX_ifcs_1_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_followFlits ;
  assign MUX_ifcs_1_state$write_1__SEL_1 =
	     MUX_ifcs_1_state$write_1__PSEL_1 && soc_top$to_ddr4_wlast ;
  assign MUX_ifcs_1_state$write_1__SEL_2 =
	     WILL_FIRE_RL_ifcs_1_firstFlit && !soc_top$to_ddr4_wlast ;
  assign MUX_ifcs_1_state$write_1__SEL_3 =
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp && !soc_top$to_ddr4_wlast ;
  assign MUX_ifcs_2_1_state$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_2_1_firstFlit &&
	     !outer_shim_2_tmp_rff$D_OUT[0] ;
  assign MUX_ifcs_3_1_state$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_3_1_firstFlit &&
	     !outer_shim_3_tmp_rff$D_OUT[0] ;
  assign MUX_split_0_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[686] ;
  assign MUX_split_0_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[686] ;
  assign MUX_split_1_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[686] ;
  assign MUX_split_1_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[686] ;
  assign MUX_split_2_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[686] ;
  assign MUX_split_2_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[686] ;
  assign MUX_split_3_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_3_putOther && split_3_doPut$wget[686] ;
  assign MUX_split_3_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_3_putFirst && !split_3_doPut$wget[686] ;
  assign MUX_state$write_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[0] ;
  assign MUX_state$write_1__SEL_2 =
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[0] ;
  assign MUX_state_1_1_1$write_1__SEL_1 =
	     WILL_FIRE_RL_burst_8 && ifcs_0_1_rspBack$D_OUT[0] ;
  assign MUX_state_1_1_1$write_1__SEL_2 =
	     WILL_FIRE_RL_burst_9 && ifcs_1_1_rspBack$D_OUT[0] ;
  assign MUX_state_1_1_1$write_1__SEL_3 =
	     WILL_FIRE_RL_burst_10 && ifcs_2_1_rspBack$D_OUT[0] ;
  assign MUX_state_1_1_1$write_1__SEL_4 =
	     WILL_FIRE_RL_burst_11 && ifcs_3_1_rspBack$D_OUT[0] ;
  assign MUX_activeSource_0$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate && arbiter_lastSelect$D_IN ;
  assign MUX_activeSource_1$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate && arbiter_firstHot$D_IN ;
  assign MUX_activeSource_1_1_0$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 && arbiter_1_1_lastSelect$D_IN ;
  assign MUX_activeSource_1_1_1_1$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 && arbiter_1_1_lastSelect_1$D_IN ;
  assign MUX_activeSource_1_1_2$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_3_ETC___d2415 ;
  assign MUX_activeSource_1_1_3$write_1__VAL_3 =
	     WILL_FIRE_RL_arbitrate_3 && arbiter_1_1_firstHot$D_IN ;
  assign MUX_merged_0_flitLeft$write_1__VAL_2 = merged_0_flitLeft - 8'd1 ;
  assign MUX_merged_1_flitLeft$write_1__VAL_1 = merged_1_flitLeft - 8'd1 ;
  always@(MUX_flitToSink_1_0$wset_1__SEL_1 or
	  MUX_flitToSink_1_0$wset_1__SEL_5 or
	  ifcs_0_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_2 or
	  MUX_flitToSink_1_0$wset_1__SEL_6 or
	  ifcs_1_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_3 or
	  MUX_flitToSink_1_0$wset_1__SEL_7 or
	  ifcs_2_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_4 or
	  MUX_flitToSink_1_0$wset_1__SEL_8 or ifcs_3_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_0$wset_1__SEL_1 || MUX_flitToSink_1_0$wset_1__SEL_5:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_0_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_2 || MUX_flitToSink_1_0$wset_1__SEL_6:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_1_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_3 || MUX_flitToSink_1_0$wset_1__SEL_7:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_2_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_4 || MUX_flitToSink_1_0$wset_1__SEL_8:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_3_rspBack$D_OUT;
      default: MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1_0$wset_1__SEL_1 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_5 or
	  ifcs_0_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_2 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_6 or
	  ifcs_1_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_3 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_7 or
	  ifcs_2_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_4 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_8 or ifcs_3_1_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1_0$wset_1__SEL_1 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_5:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_0_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_2 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_6:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_1_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_3 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_7:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_2_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_4 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_8:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_3_1_rspBack$D_OUT;
      default: MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
		   530'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1$wset_1__SEL_1 or
	  MUX_flitToSink_1_1$wset_1__SEL_5 or
	  ifcs_0_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_2 or
	  MUX_flitToSink_1_1$wset_1__SEL_6 or
	  ifcs_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_3 or
	  MUX_flitToSink_1_1$wset_1__SEL_7 or
	  ifcs_2_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_4 or
	  MUX_flitToSink_1_1$wset_1__SEL_8 or ifcs_3_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1$wset_1__SEL_1 || MUX_flitToSink_1_1$wset_1__SEL_5:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_0_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_2 || MUX_flitToSink_1_1$wset_1__SEL_6:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_1_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_3 || MUX_flitToSink_1_1$wset_1__SEL_7:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_2_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_4 || MUX_flitToSink_1_1$wset_1__SEL_8:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_3_rspBack$D_OUT;
      default: MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
		   17'b01010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1_1_1$wset_1__SEL_1 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_5 or
	  ifcs_0_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_2 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_6 or
	  ifcs_1_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_3 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_7 or
	  ifcs_2_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_4 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_8 or ifcs_3_1_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1_1_1$wset_1__SEL_1 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_5:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_0_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_2 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_6:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_1_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_3 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_7:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_2_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_4 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_8:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_3_1_rspBack$D_OUT;
      default: MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
		   530'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_split_0_flitLeft$write_1__VAL_1 = split_0_flitLeft - 8'd1 ;
  assign MUX_split_1_flitLeft$write_1__VAL_1 = split_1_flitLeft - 8'd1 ;
  assign MUX_split_2_flitLeft$write_1__VAL_1 = split_2_flitLeft - 8'd1 ;
  assign MUX_split_3_flitLeft$write_1__VAL_1 = split_3_flitLeft - 8'd1 ;

  // inlined wires
  assign inner_shim_shim_ug_master_u_b_putWire$wget =
	     msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       msNoSynth_0_b_buffer_ff$D_OUT :
	       msNoSynth_0_b_buffer_enqw$wget ;
  assign inner_shim_shim_ug_master_u_b_putWire$whas =
	     WILL_FIRE_RL_msNoSynth_0_b_forwardFlit &&
	     inner_shim_tmp_bff$FULL_N ;
  assign inner_shim_shim_ug_master_u_r_putWire$wget =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT :
	       msNoSynth_0_r_buffer_enqw$wget ;
  assign inner_shim_shim_ug_master_u_r_putWire$whas =
	     WILL_FIRE_RL_msNoSynth_0_r_forwardFlit &&
	     inner_shim_tmp_rff$FULL_N ;
  assign inner_shim_shim_ug_slave_u_aw_putWire$wget =
	     { dma_pcis_slave_awid,
	       dma_pcis_slave_awaddr,
	       dma_pcis_slave_awlen,
	       dma_pcis_slave_awsize,
	       dma_pcis_slave_awburst,
	       dma_pcis_slave_awlock,
	       dma_pcis_slave_awcache,
	       dma_pcis_slave_awprot,
	       dma_pcis_slave_awqos,
	       dma_pcis_slave_awregion } ;
  assign inner_shim_shim_ug_slave_u_aw_putWire$whas =
	     dma_pcis_slave_awvalid && inner_shim_tmp_awff$FULL_N ;
  assign inner_shim_shim_ug_slave_u_w_putWire$wget =
	     { dma_pcis_slave_wdata,
	       dma_pcis_slave_wstrb,
	       dma_pcis_slave_wlast } ;
  assign inner_shim_shim_ug_slave_u_w_putWire$whas =
	     dma_pcis_slave_wvalid && inner_shim_tmp_wff$FULL_N ;
  assign inner_shim_shim_ug_slave_u_ar_putWire$wget =
	     { dma_pcis_slave_arid,
	       dma_pcis_slave_araddr,
	       dma_pcis_slave_arlen,
	       dma_pcis_slave_arsize,
	       dma_pcis_slave_arburst,
	       dma_pcis_slave_arlock,
	       dma_pcis_slave_arcache,
	       dma_pcis_slave_arprot,
	       dma_pcis_slave_arqos,
	       dma_pcis_slave_arregion } ;
  assign inner_shim_shim_ug_slave_u_ar_putWire$whas =
	     dma_pcis_slave_arvalid && inner_shim_tmp_arff$FULL_N ;
  assign outer_shim_0_shim_ug_master_u_b_putWire$wget =
	     { ddr4_A_master_bid, ddr4_A_master_bresp } ;
  assign outer_shim_0_shim_ug_master_u_b_putWire$whas =
	     ddr4_A_master_bvalid && outer_shim_0_tmp_bff$FULL_N ;
  assign outer_shim_0_shim_ug_master_u_r_putWire$wget =
	     { ddr4_A_master_rid,
	       ddr4_A_master_rdata,
	       ddr4_A_master_rresp,
	       ddr4_A_master_rlast } ;
  assign outer_shim_0_shim_ug_master_u_r_putWire$whas =
	     ddr4_A_master_rvalid && outer_shim_0_tmp_rff$FULL_N ;
  assign outer_shim_0_shim_ug_slave_u_aw_putWire$wget =
	     ssNoSynth_0_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_aw_buffer_ff$D_OUT :
	       split_0_doPut$wget[685:577] ;
  assign outer_shim_0_shim_ug_slave_u_aw_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit &&
	     outer_shim_0_tmp_awff$FULL_N ;
  assign outer_shim_0_shim_ug_slave_u_w_putWire$wget =
	     ssNoSynth_0_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_w_buffer_ff$D_OUT :
	       split_0_doPut$wget[576:0] ;
  assign outer_shim_0_shim_ug_slave_u_w_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit &&
	     outer_shim_0_tmp_wff$FULL_N ;
  assign outer_shim_0_shim_ug_slave_u_ar_putWire$wget =
	     ssNoSynth_0_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_ar_buffer_ff$D_OUT :
	       ssNoSynth_0_ar_buffer_enqw$wget ;
  assign outer_shim_0_shim_ug_slave_u_ar_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit &&
	     outer_shim_0_tmp_arff$FULL_N ;
  assign outer_shim_1_shim_ug_master_u_b_putWire$wget =
	     { ddr4_B_master_bid, ddr4_B_master_bresp } ;
  assign outer_shim_1_shim_ug_master_u_b_putWire$whas =
	     ddr4_B_master_bvalid && outer_shim_1_tmp_bff$FULL_N ;
  assign outer_shim_1_shim_ug_master_u_r_putWire$wget =
	     { ddr4_B_master_rid,
	       ddr4_B_master_rdata,
	       ddr4_B_master_rresp,
	       ddr4_B_master_rlast } ;
  assign outer_shim_1_shim_ug_master_u_r_putWire$whas =
	     ddr4_B_master_rvalid && outer_shim_1_tmp_rff$FULL_N ;
  assign outer_shim_1_shim_ug_slave_u_aw_putWire$wget =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT :
	       split_1_doPut$wget[685:577] ;
  assign outer_shim_1_shim_ug_slave_u_aw_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_1_aw_forwardFlit &&
	     outer_shim_1_tmp_awff$FULL_N ;
  assign outer_shim_1_shim_ug_slave_u_w_putWire$wget =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT :
	       split_1_doPut$wget[576:0] ;
  assign outer_shim_1_shim_ug_slave_u_w_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_1_w_forwardFlit &&
	     outer_shim_1_tmp_wff$FULL_N ;
  assign outer_shim_1_shim_ug_slave_u_ar_putWire$wget =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT :
	       ssNoSynth_1_ar_buffer_enqw$wget ;
  assign outer_shim_1_shim_ug_slave_u_ar_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_1_ar_forwardFlit &&
	     outer_shim_1_tmp_arff$FULL_N ;
  assign outer_shim_2_shim_ug_master_u_b_putWire$wget =
	     { ddr4_C_master_bid, ddr4_C_master_bresp } ;
  assign outer_shim_2_shim_ug_master_u_b_putWire$whas =
	     ddr4_C_master_bvalid && outer_shim_2_tmp_bff$FULL_N ;
  assign outer_shim_2_shim_ug_master_u_r_putWire$wget =
	     { ddr4_C_master_rid,
	       ddr4_C_master_rdata,
	       ddr4_C_master_rresp,
	       ddr4_C_master_rlast } ;
  assign outer_shim_2_shim_ug_master_u_r_putWire$whas =
	     ddr4_C_master_rvalid && outer_shim_2_tmp_rff$FULL_N ;
  assign outer_shim_2_shim_ug_slave_u_aw_putWire$wget =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT :
	       split_2_doPut$wget[685:577] ;
  assign outer_shim_2_shim_ug_slave_u_aw_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_2_aw_forwardFlit &&
	     outer_shim_2_tmp_awff$FULL_N ;
  assign outer_shim_2_shim_ug_slave_u_w_putWire$wget =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT :
	       split_2_doPut$wget[576:0] ;
  assign outer_shim_2_shim_ug_slave_u_w_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_2_w_forwardFlit &&
	     outer_shim_2_tmp_wff$FULL_N ;
  assign outer_shim_2_shim_ug_slave_u_ar_putWire$wget =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT :
	       ssNoSynth_2_ar_buffer_enqw$wget ;
  assign outer_shim_2_shim_ug_slave_u_ar_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_2_ar_forwardFlit &&
	     outer_shim_2_tmp_arff$FULL_N ;
  assign outer_shim_3_shim_ug_master_u_b_putWire$wget =
	     { ddr4_D_master_bid, ddr4_D_master_bresp } ;
  assign outer_shim_3_shim_ug_master_u_b_putWire$whas =
	     ddr4_D_master_bvalid && outer_shim_3_tmp_bff$FULL_N ;
  assign outer_shim_3_shim_ug_master_u_r_putWire$wget =
	     { ddr4_D_master_rid,
	       ddr4_D_master_rdata,
	       ddr4_D_master_rresp,
	       ddr4_D_master_rlast } ;
  assign outer_shim_3_shim_ug_master_u_r_putWire$whas =
	     ddr4_D_master_rvalid && outer_shim_3_tmp_rff$FULL_N ;
  assign outer_shim_3_shim_ug_slave_u_aw_putWire$wget =
	     ssNoSynth_3_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_3_aw_buffer_ff$D_OUT :
	       split_3_doPut$wget[685:577] ;
  assign outer_shim_3_shim_ug_slave_u_aw_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_3_aw_forwardFlit &&
	     outer_shim_3_tmp_awff$FULL_N ;
  assign outer_shim_3_shim_ug_slave_u_w_putWire$wget =
	     ssNoSynth_3_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_3_w_buffer_ff$D_OUT :
	       split_3_doPut$wget[576:0] ;
  assign outer_shim_3_shim_ug_slave_u_w_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_3_w_forwardFlit &&
	     outer_shim_3_tmp_wff$FULL_N ;
  assign outer_shim_3_shim_ug_slave_u_ar_putWire$wget =
	     ssNoSynth_3_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_3_ar_buffer_ff$D_OUT :
	       ssNoSynth_3_ar_buffer_enqw$wget ;
  assign outer_shim_3_shim_ug_slave_u_ar_putWire$whas =
	     WILL_FIRE_RL_ssNoSynth_3_ar_forwardFlit &&
	     outer_shim_3_tmp_arff$FULL_N ;
  assign msNoSynth_0_w_dwReady$whas =
	     WILL_FIRE_RL_merged_0_genOther ||
	     WILL_FIRE_RL_merged_0_genFirst ;
  assign msNoSynth_0_b_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_0_drainNoRouteResponse ?
	       ifcs_0_noRouteRsp$D_OUT :
	       MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_0_b_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_0_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_0_forwardRsp ;
  assign msNoSynth_0_ar_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp &&
	     x_port1__read__h78845 == 9'd1 ||
	     WILL_FIRE_RL_ifcs_0_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit ;
  assign msNoSynth_0_r_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse ?
	       ifcs_0_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_0_r_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_0_1_forwardRsp ;
  assign msNoSynth_1_aw_dwReady$whas =
	     soc_top$to_ddr4_awvalid && soc_top$to_ddr4_wvalid &&
	     merged_1_doDrop$whas &&
	     merged_1_flitLeft == 8'd0 ;
  assign msNoSynth_1_w_dwReady$whas =
	     WILL_FIRE_RL_merged_1_genOther ||
	     WILL_FIRE_RL_merged_1_genFirst ;
  assign msNoSynth_1_b_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_1_drainNoRouteResponse ?
	       ifcs_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_1_b_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_1_forwardRsp ;
  assign msNoSynth_1_ar_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp &&
	     x_port1__read__h82166 == 9'd1 ||
	     WILL_FIRE_RL_ifcs_1_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit ;
  assign msNoSynth_1_r_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse ?
	       ifcs_1_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_1_r_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_1_1_forwardRsp ;
  assign ssNoSynth_0_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[686] ||
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[686] ;
  assign ssNoSynth_0_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign ssNoSynth_0_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_0_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1_0_1$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_0_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign ssNoSynth_1_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[686] ||
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[686] ;
  assign ssNoSynth_1_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign ssNoSynth_1_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_1_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1_1_1$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_1_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign ssNoSynth_2_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[686] ||
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[686] ;
  assign ssNoSynth_2_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_2_followFlits ||
	     WILL_FIRE_RL_ifcs_2_firstFlit ;
  assign ssNoSynth_2_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_2$wset_1__SEL_1 ||
	      MUX_flitToSink_1_2$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_2_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_2_1_followFlits ||
	     WILL_FIRE_RL_ifcs_2_1_firstFlit ;
  assign ssNoSynth_3_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_3_putOther && split_3_doPut$wget[686] ||
	     WILL_FIRE_RL_split_3_putFirst && !split_3_doPut$wget[686] ;
  assign ssNoSynth_3_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_3_followFlits ||
	     WILL_FIRE_RL_ifcs_3_firstFlit ;
  assign ssNoSynth_3_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_3$wset_1__SEL_1 ||
	      MUX_flitToSink_1_3$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_3_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_3_1_followFlits ||
	     WILL_FIRE_RL_ifcs_3_1_firstFlit ;
  assign split_0_doPut$wget =
	     (MUX_flitToSink_0$wset_1__SEL_1 ||
	      MUX_flitToSink_0$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_1_doPut$wget =
	     (MUX_flitToSink_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_2_doPut$wget =
	     (MUX_flitToSink_2$wset_1__SEL_1 ||
	      MUX_flitToSink_2$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_3_doPut$wget =
	     (MUX_flitToSink_3$wset_1__SEL_1 ||
	      MUX_flitToSink_3$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign isSinkReady_0$wget =
	     (split_0_flitLeft == 8'd0) ?
	       ssNoSynth_0_aw_buffer_ff$FULL_N &&
	       ssNoSynth_0_w_buffer_ff$FULL_N :
	       ssNoSynth_0_w_buffer_ff$FULL_N ;
  assign isSinkReady_1$wget =
	     (split_1_flitLeft == 8'd0) ?
	       ssNoSynth_1_aw_buffer_ff$FULL_N &&
	       ssNoSynth_1_w_buffer_ff$FULL_N :
	       ssNoSynth_1_w_buffer_ff$FULL_N ;
  assign isSinkReady_2$wget =
	     (split_2_flitLeft == 8'd0) ?
	       ssNoSynth_2_aw_buffer_ff$FULL_N &&
	       ssNoSynth_2_w_buffer_ff$FULL_N :
	       ssNoSynth_2_w_buffer_ff$FULL_N ;
  assign reqWires_0$wget =
	     (!ifcs_0_innerRoute$D_OUT[0] || !isSinkReady_0$wget) ?
	       IF_NOT_ifcs_0_innerRoute_first__238_BIT_1_247__ETC___d1269 :
	       ifcs_0_innerRoute$D_OUT[0] ;
  assign reqWires_1$wget =
	     (!ifcs_1_innerRoute$D_OUT[0] || !isSinkReady_0$wget) ?
	       IF_NOT_ifcs_1_innerRoute_first__276_BIT_1_280__ETC___d1289 :
	       ifcs_1_innerRoute$D_OUT[0] ;
  assign flitToSink_0$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[1] ;
  assign flitToSink_2$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[2] ;
  assign flitToSink_3$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[3] ;
  assign reqWires_1_0$wget =
	     (!ifcs_0_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_0_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_0_routeBack$D_OUT[0] ;
  assign reqWires_1_1$wget =
	     (!ifcs_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_1_routeBack$D_OUT[0] ;
  assign reqWires_1_2$wget =
	     (!ifcs_2_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_2_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_2_routeBack$D_OUT[0] ;
  assign reqWires_1_3$wget =
	     (!ifcs_3_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_3_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_3_routeBack$D_OUT[0] ;
  assign flitToSink_1_0$whas =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_5 && ifcs_3_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	     ifcs_3_routeBack$D_OUT[0] ;
  assign flitToSink_1_1$whas =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_5 && ifcs_3_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	     ifcs_3_routeBack$D_OUT[1] ;
  assign ifcs_0_1_rspFwd$whas =
	     !CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse &&
	     flitToSink_1_1_0$whas ;
  assign ifcs_1_1_rspFwd$whas =
	     !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse &&
	     flitToSink_1_1_1_1$whas ;
  assign reqWires_1_0_1$wget =
	     (!ifcs_0_1_innerRoute$D_OUT[0] ||
	      !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_ifcs_0_1_innerRoute_first__055_BIT_1_06_ETC___d2086 :
	       ifcs_0_1_innerRoute$D_OUT[0] ;
  assign reqWires_1_1_1$wget =
	     (!ifcs_1_1_innerRoute$D_OUT[0] ||
	      !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_ifcs_1_1_innerRoute_first__093_BIT_1_09_ETC___d2106 :
	       ifcs_1_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1_0_1$whas =
	     WILL_FIRE_RL_burst_6 && ifcs_0_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_burst_7 && ifcs_1_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1_1_1$whas =
	     WILL_FIRE_RL_burst_6 && ifcs_0_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_burst_7 && ifcs_1_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[1] ;
  assign flitToSink_1_2$whas =
	     WILL_FIRE_RL_burst_6 && ifcs_0_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_burst_7 && ifcs_1_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[2] ;
  assign flitToSink_1_3$whas =
	     WILL_FIRE_RL_burst_6 && ifcs_0_1_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_burst_7 && ifcs_1_1_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[3] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[3] ;
  assign reqWires_1_1_0$wget =
	     (!ifcs_0_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_0_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_0_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_1_1$wget =
	     (!ifcs_1_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_1_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_1_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_2$wget =
	     (!ifcs_2_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_2_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_2_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_2$whas =
	     ifcs_2_1_routeBack$EMPTY_N && ifcs_2_1_rspBack$EMPTY_N ;
  assign reqWires_1_1_3$wget =
	     (!ifcs_3_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_3_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_3_1_routeBack$D_OUT[0] ;
  assign flitToSink_1_1_0$whas =
	     WILL_FIRE_RL_burst_8 && ifcs_0_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_9 && ifcs_1_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_10 && ifcs_2_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_11 && ifcs_3_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     ifcs_3_1_routeBack$D_OUT[0] ;
  assign flitToSink_1_1_1_1$whas =
	     WILL_FIRE_RL_burst_8 && ifcs_0_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_9 && ifcs_1_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_10 && ifcs_2_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_11 && ifcs_3_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     ifcs_3_1_routeBack$D_OUT[1] ;
  assign inner_shim_shim_ug_master_u_aw_dropWire$whas =
	     inner_shim_tmp_awff$EMPTY_N && CAN_FIRE_RL_merged_0_genFirst ;
  assign inner_shim_shim_ug_master_u_w_dropWire$whas =
	     inner_shim_tmp_wff$EMPTY_N && msNoSynth_0_w_dwReady$whas ;
  assign inner_shim_shim_ug_master_u_ar_dropWire$whas =
	     inner_shim_tmp_arff$EMPTY_N && msNoSynth_0_ar_dwReady$whas ;
  assign inner_shim_shim_ug_slave_u_b_dropWire$whas =
	     inner_shim_tmp_bff$EMPTY_N && dma_pcis_slave_bready ;
  assign inner_shim_shim_ug_slave_u_r_dropWire$whas =
	     inner_shim_tmp_rff$EMPTY_N && dma_pcis_slave_rready ;
  assign outer_shim_0_shim_ug_master_u_aw_dropWire$whas =
	     outer_shim_0_tmp_awff$EMPTY_N && ddr4_A_master_awready ;
  assign outer_shim_0_shim_ug_master_u_w_dropWire$whas =
	     outer_shim_0_tmp_wff$EMPTY_N && ddr4_A_master_wready ;
  assign outer_shim_0_shim_ug_master_u_ar_dropWire$whas =
	     outer_shim_0_tmp_arff$EMPTY_N && ddr4_A_master_arready ;
  assign outer_shim_0_shim_ug_slave_u_b_dropWire$whas =
	     outer_shim_0_tmp_bff$EMPTY_N && ssNoSynth_0_b_dwReady$whas ;
  assign outer_shim_0_shim_ug_slave_u_r_dropWire$whas =
	     outer_shim_0_tmp_rff$EMPTY_N && ssNoSynth_0_r_dwReady$whas ;
  assign outer_shim_1_shim_ug_master_u_aw_dropWire$whas =
	     outer_shim_1_tmp_awff$EMPTY_N && ddr4_B_master_awready ;
  assign outer_shim_1_shim_ug_master_u_w_dropWire$whas =
	     outer_shim_1_tmp_wff$EMPTY_N && ddr4_B_master_wready ;
  assign outer_shim_1_shim_ug_master_u_ar_dropWire$whas =
	     outer_shim_1_tmp_arff$EMPTY_N && ddr4_B_master_arready ;
  assign outer_shim_1_shim_ug_slave_u_b_dropWire$whas =
	     outer_shim_1_tmp_bff$EMPTY_N && ssNoSynth_1_b_dwReady$whas ;
  assign outer_shim_1_shim_ug_slave_u_r_dropWire$whas =
	     outer_shim_1_tmp_rff$EMPTY_N && ssNoSynth_1_r_dwReady$whas ;
  assign outer_shim_2_shim_ug_master_u_aw_dropWire$whas =
	     outer_shim_2_tmp_awff$EMPTY_N && ddr4_C_master_awready ;
  assign outer_shim_2_shim_ug_master_u_w_dropWire$whas =
	     outer_shim_2_tmp_wff$EMPTY_N && ddr4_C_master_wready ;
  assign outer_shim_2_shim_ug_master_u_ar_dropWire$whas =
	     outer_shim_2_tmp_arff$EMPTY_N && ddr4_C_master_arready ;
  assign outer_shim_2_shim_ug_slave_u_b_dropWire$whas =
	     outer_shim_2_tmp_bff$EMPTY_N && ssNoSynth_2_b_dwReady$whas ;
  assign outer_shim_2_shim_ug_slave_u_r_dropWire$whas =
	     outer_shim_2_tmp_rff$EMPTY_N && ssNoSynth_2_r_dwReady$whas ;
  assign outer_shim_3_shim_ug_master_u_aw_dropWire$whas =
	     outer_shim_3_tmp_awff$EMPTY_N && ddr4_D_master_awready ;
  assign outer_shim_3_shim_ug_master_u_w_dropWire$whas =
	     outer_shim_3_tmp_wff$EMPTY_N && ddr4_D_master_wready ;
  assign outer_shim_3_shim_ug_master_u_ar_dropWire$whas =
	     outer_shim_3_tmp_arff$EMPTY_N && ddr4_D_master_arready ;
  assign outer_shim_3_shim_ug_slave_u_b_dropWire$whas =
	     outer_shim_3_tmp_bff$EMPTY_N && ssNoSynth_3_b_dwReady$whas ;
  assign outer_shim_3_shim_ug_slave_u_r_dropWire$whas =
	     outer_shim_3_tmp_rff$EMPTY_N && ssNoSynth_3_r_dwReady$whas ;
  assign msNoSynth_1_b_buffer_dequeueing$whas =
	     (msNoSynth_1_b_buffer_ff$EMPTY_N ||
	      msNoSynth_1_b_buffer_enqw$whas) &&
	     soc_top$to_ddr4_bready ;
  assign msNoSynth_1_r_buffer_dequeueing$whas =
	     (msNoSynth_1_r_buffer_ff$EMPTY_N ||
	      msNoSynth_1_r_buffer_enqw$whas) &&
	     soc_top$to_ddr4_rready ;
  assign merged_0_doDrop$whas =
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp ||
	     WILL_FIRE_RL_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_followFlits ||
	     WILL_FIRE_RL_ifcs_0_firstFlit ;
  assign merged_1_doDrop$whas =
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp ||
	     WILL_FIRE_RL_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_firstFlit ;
  assign sourceSelect_1_0$whas =
	     WILL_FIRE_RL_arbitrate_1 && arbiter_1_lastSelect$D_IN ;
  assign sourceSelect_1_1$whas =
	     WILL_FIRE_RL_arbitrate_1 && arbiter_1_lastSelect_1$D_IN ;
  assign sourceSelect_1_2$whas =
	     WILL_FIRE_RL_arbitrate_1 && arbiter_1_lastSelect_2$D_IN ;
  assign sourceSelect_1_3$whas =
	     WILL_FIRE_RL_arbitrate_1 && arbiter_1_firstHot$D_IN ;
  assign sourceSelect_1_0_1$whas =
	     WILL_FIRE_RL_arbitrate_2 &&
	     IF_SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_1_ETC___d2142 ;
  assign sourceSelect_1_1_1$whas =
	     WILL_FIRE_RL_arbitrate_2 && arbiter_1_firstHot_1$D_IN ;
  assign ifcs_0_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	     merged_0_flitLeft == 8'd0 ;
  assign ifcs_0_noRoute_inner_currentReq$port1__read =
	     ifcs_0_noRoute_inner_currentReq$EN_port0__write ?
	       inner_shim_tmp_awff$D_OUT :
	       ifcs_0_noRoute_inner_currentReq ;
  assign ifcs_0_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	     merged_0_flitLeft == 8'd0 ;
  assign ifcs_0_noRoute_inner_pendingReq$port1__read =
	     ifcs_0_noRoute_inner_pendingReq$EN_port0__write ||
	     ifcs_0_noRoute_inner_pendingReq ;
  assign ifcs_0_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp &&
	     ifcs_0_noRoute_inner_pendingReq$port1__read ;
  assign ifcs_1_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	     merged_1_flitLeft == 8'd0 ;
  assign ifcs_1_noRoute_inner_currentReq$port0__write_1 =
	     { soc_top$to_ddr4_awid,
	       soc_top$to_ddr4_awaddr,
	       soc_top$to_ddr4_awlen,
	       soc_top$to_ddr4_awsize,
	       soc_top$to_ddr4_awburst,
	       soc_top$to_ddr4_awlock,
	       soc_top$to_ddr4_awcache,
	       soc_top$to_ddr4_awprot,
	       soc_top$to_ddr4_awqos,
	       soc_top$to_ddr4_awregion } ;
  assign ifcs_1_noRoute_inner_currentReq$port1__read =
	     ifcs_1_noRoute_inner_currentReq$EN_port0__write ?
	       ifcs_1_noRoute_inner_currentReq$port0__write_1 :
	       ifcs_1_noRoute_inner_currentReq ;
  assign ifcs_1_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	     merged_1_flitLeft == 8'd0 ;
  assign ifcs_1_noRoute_inner_pendingReq$port1__read =
	     ifcs_1_noRoute_inner_pendingReq$EN_port0__write ||
	     ifcs_1_noRoute_inner_pendingReq ;
  assign ifcs_1_noRoute_inner_pendingReq$EN_port1__write =
	     IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1041 &&
	     ifcs_1_noRoute_inner_pendingReq$port1__read &&
	     ifcs_1_noRouteRsp$FULL_N &&
	     soc_top$to_ddr4_wvalid ;
  assign ifcs_1_noRoute_inner_pendingReq$port2__read =
	     !ifcs_1_noRoute_inner_pendingReq$EN_port1__write &&
	     ifcs_1_noRoute_inner_pendingReq$port1__read ;
  assign ifcs_0_1_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ?
	       inner_shim_tmp_arff$D_OUT :
	       ifcs_0_1_noRoute_currentReq ;
  assign ifcs_0_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, inner_shim_tmp_arff$D_OUT[28:21] } + 9'd1 ;
  assign ifcs_0_1_noRoute_flitCount$port1__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ?
	       ifcs_0_1_noRoute_flitCount$port0__write_1 :
	       ifcs_0_1_noRoute_flitCount ;
  assign ifcs_0_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h78845 - 9'd1 ;
  assign ifcs_0_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ?
	       ifcs_0_1_noRoute_flitCount$port1__write_1 :
	       ifcs_0_1_noRoute_flitCount$port1__read ;
  assign ifcs_1_1_noRoute_currentReq$EN_port0__write =
	     ifcs_1_1_noRoute_flitCount == 9'd0 && soc_top$to_ddr4_arvalid &&
	     ifcs_1_1_state == 2'd0 &&
	     IF_soc_top_to_ddr4_ar_araddr__860_ULT_0x400000_ETC___d1889 !=
	     3'd1 ;
  assign ifcs_1_1_noRoute_currentReq$port0__write_1 =
	     { soc_top$to_ddr4_arid,
	       soc_top$to_ddr4_araddr,
	       soc_top$to_ddr4_arlen,
	       soc_top$to_ddr4_arsize,
	       soc_top$to_ddr4_arburst,
	       soc_top$to_ddr4_arlock,
	       soc_top$to_ddr4_arcache,
	       soc_top$to_ddr4_arprot,
	       soc_top$to_ddr4_arqos,
	       soc_top$to_ddr4_arregion } ;
  assign ifcs_1_1_noRoute_currentReq$port1__read =
	     ifcs_1_1_noRoute_currentReq$EN_port0__write ?
	       ifcs_1_1_noRoute_currentReq$port0__write_1 :
	       ifcs_1_1_noRoute_currentReq ;
  assign ifcs_1_1_noRoute_flitCount$EN_port0__write =
	     ifcs_1_1_noRoute_flitCount == 9'd0 && soc_top$to_ddr4_arvalid &&
	     ifcs_1_1_state == 2'd0 &&
	     IF_soc_top_to_ddr4_ar_araddr__860_ULT_0x400000_ETC___d1889 !=
	     3'd1 ;
  assign ifcs_1_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, soc_top$to_ddr4_arlen } + 9'd1 ;
  assign ifcs_1_1_noRoute_flitCount$port1__read =
	     ifcs_1_1_noRoute_flitCount$EN_port0__write ?
	       ifcs_1_1_noRoute_flitCount$port0__write_1 :
	       ifcs_1_1_noRoute_flitCount ;
  assign ifcs_1_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h82166 - 9'd1 ;
  assign ifcs_1_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ?
	       ifcs_1_1_noRoute_flitCount$port1__write_1 :
	       ifcs_1_1_noRoute_flitCount$port1__read ;

  // register activeSource_0
  assign activeSource_0$D_IN =
	     MUX_activeSource_0$write_1__SEL_1 ?
	       MUX_activeSource_0$write_1__VAL_1 :
	       MUX_activeSource_0$write_1__VAL_1 ;
  assign activeSource_0$EN =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[0] ;

  // register activeSource_1
  assign activeSource_1$D_IN =
	     MUX_activeSource_0$write_1__SEL_1 ?
	       MUX_activeSource_1$write_1__VAL_1 :
	       MUX_activeSource_1$write_1__VAL_1 ;
  assign activeSource_1$EN =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[0] ;

  // register activeSource_1_0
  assign activeSource_1_0$D_IN = 1'b0 ;
  assign activeSource_1_0$EN = 1'b0 ;

  // register activeSource_1_0_1
  assign activeSource_1_0_1$D_IN = 1'b0 ;
  assign activeSource_1_0_1$EN = 1'b0 ;

  // register activeSource_1_1
  assign activeSource_1_1$D_IN = 1'b0 ;
  assign activeSource_1_1$EN = 1'b0 ;

  // register activeSource_1_1_0
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_0$write_1__VAL_1 or
	  MUX_activeSource_1_1_1_1$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3 or
	  MUX_activeSource_1_1_0$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_1_1$write_1__SEL_2:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_4:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      default: activeSource_1_1_0$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_0$EN =
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     !ifcs_3_1_rspBack$D_OUT[0] ;

  // register activeSource_1_1_1
  assign activeSource_1_1_1$D_IN = 1'b0 ;
  assign activeSource_1_1_1$EN = 1'b0 ;

  // register activeSource_1_1_1_1
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_1_1$write_1__VAL_1 or
	  MUX_activeSource_1_1_1_1$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3 or
	  MUX_activeSource_1_1_0$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_1_1$write_1__SEL_2:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_4:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      default: activeSource_1_1_1_1$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_1_1$EN =
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     !ifcs_3_1_rspBack$D_OUT[0] ;

  // register activeSource_1_1_2
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_2$write_1__VAL_1 or
	  MUX_activeSource_1_1_1_1$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3 or
	  MUX_activeSource_1_1_0$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      MUX_activeSource_1_1_1_1$write_1__SEL_2:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_4:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      default: activeSource_1_1_2$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_2$EN =
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     !ifcs_3_1_rspBack$D_OUT[0] ;

  // register activeSource_1_1_3
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_3$write_1__VAL_3 or
	  MUX_activeSource_1_1_1_1$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3 or
	  MUX_activeSource_1_1_0$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_3$D_IN = MUX_activeSource_1_1_3$write_1__VAL_3;
      MUX_activeSource_1_1_1_1$write_1__SEL_2:
	  activeSource_1_1_3$D_IN = MUX_activeSource_1_1_3$write_1__VAL_3;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_3$D_IN = MUX_activeSource_1_1_3$write_1__VAL_3;
      MUX_activeSource_1_1_0$write_1__SEL_4:
	  activeSource_1_1_3$D_IN = MUX_activeSource_1_1_3$write_1__VAL_3;
      default: activeSource_1_1_3$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_3$EN =
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     !ifcs_3_1_rspBack$D_OUT[0] ;

  // register activeSource_1_2
  assign activeSource_1_2$D_IN = 1'b0 ;
  assign activeSource_1_2$EN = 1'b0 ;

  // register activeSource_1_3
  assign activeSource_1_3$D_IN = 1'b0 ;
  assign activeSource_1_3$EN = 1'b0 ;

  // register arbiter_1_1_firstHot
  assign arbiter_1_1_firstHot$D_IN =
	     SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2380 ?
	       x__h106679 | y__h106680 :
	       arbiter_1_1_firstHot ;
  assign arbiter_1_1_firstHot$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect
  assign arbiter_1_1_lastSelect$D_IN =
	     SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2380 ?
	       x__h105994 | y__h105995 :
	       arbiter_1_1_lastSelect ;
  assign arbiter_1_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect_1
  assign arbiter_1_1_lastSelect_1$D_IN =
	     SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2380 ?
	       x__h106233 | y__h106234 :
	       arbiter_1_1_lastSelect_1 ;
  assign arbiter_1_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect_2
  assign arbiter_1_1_lastSelect_2$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_3_ETC___d2415 ;
  assign arbiter_1_1_lastSelect_2$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_firstHot
  assign arbiter_1_firstHot$D_IN =
	     SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1573 ?
	       x__h66697 | y__h66698 :
	       arbiter_1_firstHot ;
  assign arbiter_1_firstHot$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_firstHot_1
  assign arbiter_1_firstHot_1$D_IN =
	     (SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_120__ETC___d2126 ||
	      SEXT_arbiter_1_firstHot_1_122_123_BIT_0_124_AN_ETC___d2130) ?
	       x__h91490 | y__h91491 :
	       arbiter_1_firstHot_1 ;
  assign arbiter_1_firstHot_1$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_1_lastSelect
  assign arbiter_1_lastSelect$D_IN =
	     SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1573 ?
	       x__h66012 | y__h66013 :
	       arbiter_1_lastSelect ;
  assign arbiter_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_1
  assign arbiter_1_lastSelect_1$D_IN =
	     SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1573 ?
	       x__h66251 | y__h66252 :
	       arbiter_1_lastSelect_1 ;
  assign arbiter_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_2
  assign arbiter_1_lastSelect_2$D_IN =
	     SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1573 ?
	       x__h66471 | y__h66472 :
	       arbiter_1_lastSelect_2 ;
  assign arbiter_1_lastSelect_2$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_3
  assign arbiter_1_lastSelect_3$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_1_ETC___d2142 ;
  assign arbiter_1_lastSelect_3$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_firstHot
  assign arbiter_firstHot$D_IN =
	     (SEXT_arbiter_lastSelect_301_302_BIT_0_303_AND__ETC___d1309 ||
	      SEXT_arbiter_firstHot_305_306_BIT_0_307_AND_re_ETC___d1313) ?
	       x__h48364 | y__h48365 :
	       arbiter_firstHot ;
  assign arbiter_firstHot$EN = CAN_FIRE_RL_arbitrate ;

  // register arbiter_lastSelect
  assign arbiter_lastSelect$D_IN =
	     (SEXT_arbiter_lastSelect_301_302_BIT_0_303_AND__ETC___d1309 ||
	      SEXT_arbiter_firstHot_305_306_BIT_0_307_AND_re_ETC___d1313) ?
	       x__h48223 | y__h48224 :
	       arbiter_lastSelect ;
  assign arbiter_lastSelect$EN = CAN_FIRE_RL_arbitrate ;

  // register ifcs_0_1_noRoute_currentReq
  assign ifcs_0_1_noRoute_currentReq$D_IN =
	     ifcs_0_1_noRoute_currentReq$port1__read ;
  assign ifcs_0_1_noRoute_currentReq$EN = 1'b1 ;

  // register ifcs_0_1_noRoute_flitCount
  assign ifcs_0_1_noRoute_flitCount$D_IN =
	     ifcs_0_1_noRoute_flitCount$port2__read ;
  assign ifcs_0_1_noRoute_flitCount$EN = 1'b1 ;

  // register ifcs_0_1_state
  assign ifcs_0_1_state$D_IN = 2'd0 ;
  assign ifcs_0_1_state$EN =
	     WILL_FIRE_RL_ifcs_0_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits ;

  // register ifcs_0_1_state_1
  assign ifcs_0_1_state_1$D_IN = MUX_ifcs_0_1_state_1$write_1__SEL_1 ;
  assign ifcs_0_1_state_1$EN =
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	     !outer_shim_0_tmp_rff$D_OUT[0] ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 &&
	     outer_shim_0_tmp_rff$D_OUT[0] ;

  // register ifcs_0_noRoute_inner_currentReq
  assign ifcs_0_noRoute_inner_currentReq$D_IN =
	     ifcs_0_noRoute_inner_currentReq$port1__read ;
  assign ifcs_0_noRoute_inner_currentReq$EN = 1'b1 ;

  // register ifcs_0_noRoute_inner_pendingReq
  assign ifcs_0_noRoute_inner_pendingReq$D_IN =
	     ifcs_0_noRoute_inner_pendingReq$port2__read ;
  assign ifcs_0_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register ifcs_0_state
  always@(MUX_ifcs_0_state$write_1__SEL_1 or
	  MUX_ifcs_0_state$write_1__SEL_2 or MUX_ifcs_0_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ifcs_0_state$write_1__SEL_1: ifcs_0_state$D_IN = 2'd0;
      MUX_ifcs_0_state$write_1__SEL_2: ifcs_0_state$D_IN = 2'd1;
      MUX_ifcs_0_state$write_1__SEL_3: ifcs_0_state$D_IN = 2'd2;
      default: ifcs_0_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign ifcs_0_state$EN =
	     (WILL_FIRE_RL_ifcs_0_drainFlits ||
	      WILL_FIRE_RL_ifcs_0_followFlits) &&
	     inner_shim_tmp_wff$D_OUT[0] ||
	     WILL_FIRE_RL_ifcs_0_firstFlit && !inner_shim_tmp_wff$D_OUT[0] ||
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp &&
	     !inner_shim_tmp_wff$D_OUT[0] ;

  // register ifcs_0_state_1
  assign ifcs_0_state_1$D_IN = 1'd0 ;
  assign ifcs_0_state_1$EN = CAN_FIRE_RL_ifcs_0_followFlits_1 ;

  // register ifcs_1_1_noRoute_currentReq
  assign ifcs_1_1_noRoute_currentReq$D_IN =
	     ifcs_1_1_noRoute_currentReq$port1__read ;
  assign ifcs_1_1_noRoute_currentReq$EN = 1'b1 ;

  // register ifcs_1_1_noRoute_flitCount
  assign ifcs_1_1_noRoute_flitCount$D_IN =
	     ifcs_1_1_noRoute_flitCount$port2__read ;
  assign ifcs_1_1_noRoute_flitCount$EN = 1'b1 ;

  // register ifcs_1_1_state
  assign ifcs_1_1_state$D_IN = 2'd0 ;
  assign ifcs_1_1_state$EN =
	     WILL_FIRE_RL_ifcs_1_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_1_followFlits ;

  // register ifcs_1_1_state_1
  assign ifcs_1_1_state_1$D_IN = MUX_ifcs_1_1_state_1$write_1__SEL_1 ;
  assign ifcs_1_1_state_1$EN =
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 &&
	     !outer_shim_1_tmp_rff$D_OUT[0] ||
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 &&
	     outer_shim_1_tmp_rff$D_OUT[0] ;

  // register ifcs_1_noRoute_inner_currentReq
  assign ifcs_1_noRoute_inner_currentReq$D_IN =
	     ifcs_1_noRoute_inner_currentReq$port1__read ;
  assign ifcs_1_noRoute_inner_currentReq$EN = 1'b1 ;

  // register ifcs_1_noRoute_inner_pendingReq
  assign ifcs_1_noRoute_inner_pendingReq$D_IN =
	     ifcs_1_noRoute_inner_pendingReq$port2__read ;
  assign ifcs_1_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register ifcs_1_state
  always@(MUX_ifcs_1_state$write_1__SEL_1 or
	  MUX_ifcs_1_state$write_1__SEL_2 or MUX_ifcs_1_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ifcs_1_state$write_1__SEL_1: ifcs_1_state$D_IN = 2'd0;
      MUX_ifcs_1_state$write_1__SEL_2: ifcs_1_state$D_IN = 2'd1;
      MUX_ifcs_1_state$write_1__SEL_3: ifcs_1_state$D_IN = 2'd2;
      default: ifcs_1_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign ifcs_1_state$EN =
	     (WILL_FIRE_RL_ifcs_1_drainFlits ||
	      WILL_FIRE_RL_ifcs_1_followFlits) &&
	     soc_top$to_ddr4_wlast ||
	     WILL_FIRE_RL_ifcs_1_firstFlit && !soc_top$to_ddr4_wlast ||
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp && !soc_top$to_ddr4_wlast ;

  // register ifcs_1_state_1
  assign ifcs_1_state_1$D_IN = 1'd0 ;
  assign ifcs_1_state_1$EN = CAN_FIRE_RL_ifcs_1_followFlits_1 ;

  // register ifcs_2_1_state
  assign ifcs_2_1_state$D_IN = MUX_ifcs_2_1_state$write_1__SEL_1 ;
  assign ifcs_2_1_state$EN =
	     WILL_FIRE_RL_ifcs_2_1_firstFlit &&
	     !outer_shim_2_tmp_rff$D_OUT[0] ||
	     WILL_FIRE_RL_ifcs_2_1_followFlits &&
	     outer_shim_2_tmp_rff$D_OUT[0] ;

  // register ifcs_2_state
  assign ifcs_2_state$D_IN = 1'd0 ;
  assign ifcs_2_state$EN = CAN_FIRE_RL_ifcs_2_followFlits ;

  // register ifcs_3_1_state
  assign ifcs_3_1_state$D_IN = MUX_ifcs_3_1_state$write_1__SEL_1 ;
  assign ifcs_3_1_state$EN =
	     WILL_FIRE_RL_ifcs_3_1_firstFlit &&
	     !outer_shim_3_tmp_rff$D_OUT[0] ||
	     WILL_FIRE_RL_ifcs_3_1_followFlits &&
	     outer_shim_3_tmp_rff$D_OUT[0] ;

  // register ifcs_3_state
  assign ifcs_3_state$D_IN = 1'd0 ;
  assign ifcs_3_state$EN = CAN_FIRE_RL_ifcs_3_followFlits ;

  // register merged_0_flitLeft
  assign merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_0_genFirst ?
	       inner_shim_tmp_awff$D_OUT[28:21] :
	       MUX_merged_0_flitLeft$write_1__VAL_2 ;
  assign merged_0_flitLeft$EN =
	     WILL_FIRE_RL_merged_0_genFirst ||
	     WILL_FIRE_RL_merged_0_genOther ;

  // register merged_1_flitLeft
  assign merged_1_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_1_genOther ?
	       MUX_merged_1_flitLeft$write_1__VAL_1 :
	       soc_top$to_ddr4_awlen ;
  assign merged_1_flitLeft$EN = msNoSynth_1_w_dwReady$whas ;

  // register rg_ddr4_is_loaded
  assign rg_ddr4_is_loaded$D_IN = 1'd1 ;
  assign rg_ddr4_is_loaded$EN =
	     WILL_FIRE_RL_rl_host_to_hw_control &&
	     ocl_adapter$v_from_host_0_first[1:0] == 2'd0 ;

  // register rg_ddr4_ready
  assign rg_ddr4_ready$D_IN = m_ddr4_ready_ddr4_A_B_C_D_ready ;
  assign rg_ddr4_ready$EN = 1'd1 ;

  // register rg_initialized
  assign rg_initialized$D_IN = 1'd1 ;
  assign rg_initialized$EN = WILL_FIRE_RL_rl_initialize ;

  // register split_0_flitLeft
  assign split_0_flitLeft$D_IN =
	     MUX_split_0_flitLeft$write_1__SEL_1 ?
	       MUX_split_0_flitLeft$write_1__VAL_1 :
	       split_0_doPut$wget[605:598] ;
  assign split_0_flitLeft$EN = ssNoSynth_0_w_buffer_enqw$whas ;

  // register split_1_flitLeft
  assign split_1_flitLeft$D_IN =
	     MUX_split_1_flitLeft$write_1__SEL_1 ?
	       MUX_split_1_flitLeft$write_1__VAL_1 :
	       split_1_doPut$wget[605:598] ;
  assign split_1_flitLeft$EN = ssNoSynth_1_w_buffer_enqw$whas ;

  // register split_2_flitLeft
  assign split_2_flitLeft$D_IN =
	     MUX_split_2_flitLeft$write_1__SEL_1 ?
	       MUX_split_2_flitLeft$write_1__VAL_1 :
	       split_2_doPut$wget[605:598] ;
  assign split_2_flitLeft$EN = ssNoSynth_2_w_buffer_enqw$whas ;

  // register split_3_flitLeft
  assign split_3_flitLeft$D_IN =
	     MUX_split_3_flitLeft$write_1__SEL_1 ?
	       MUX_split_3_flitLeft$write_1__VAL_1 :
	       split_3_doPut$wget[605:598] ;
  assign split_3_flitLeft$EN = ssNoSynth_3_w_buffer_enqw$whas ;

  // register state
  assign state$D_IN = !MUX_state$write_1__SEL_1 && !MUX_state$write_1__SEL_2 ;
  assign state$EN =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[0] ;

  // register state_1
  assign state_1$D_IN = 1'd0 ;
  assign state_1$EN =
	     WILL_FIRE_RL_burst_5 || WILL_FIRE_RL_burst_4 ||
	     WILL_FIRE_RL_burst_3 ||
	     WILL_FIRE_RL_burst_2 ;

  // register state_1_1
  assign state_1_1$D_IN = 1'd0 ;
  assign state_1_1$EN = WILL_FIRE_RL_burst_7 || WILL_FIRE_RL_burst_6 ;

  // register state_1_1_1
  assign state_1_1_1$D_IN =
	     !MUX_state_1_1_1$write_1__SEL_1 &&
	     !MUX_state_1_1_1$write_1__SEL_2 &&
	     !MUX_state_1_1_1$write_1__SEL_3 &&
	     !MUX_state_1_1_1$write_1__SEL_4 ;
  assign state_1_1_1$EN =
	     WILL_FIRE_RL_burst_8 && ifcs_0_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_9 && ifcs_1_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_10 && ifcs_2_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_11 && ifcs_3_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     !ifcs_3_1_rspBack$D_OUT[0] ;

  // submodule ifcs_0_1_innerReq
  assign ifcs_0_1_innerReq$D_IN =
	     { fatReq_arid__h78194, inner_shim_tmp_arff$D_OUT[92:0] } ;
  assign ifcs_0_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_0_1_followFlits ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit ;
  assign ifcs_0_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_6 ;
  assign ifcs_0_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_0_1_innerRoute
  assign ifcs_0_1_innerRoute$D_IN =
	     { NOT_IF_inner_shim_shim_ug_master_u_ar_peekWire_ETC___d1792,
	       !IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1767 &&
	       !IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1770 &&
	       !IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1777 &&
	       IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1780,
	       IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1770 &&
	       !IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1767,
	       IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1767 } ;
  assign ifcs_0_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_0_1_firstFlit ;
  assign ifcs_0_1_innerRoute$DEQ =
	     WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_6 ;
  assign ifcs_0_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_0_1_noRouteRsp
  assign ifcs_0_1_noRouteRsp$D_IN =
	     { ifcs_0_1_noRoute_currentReq$port1__read[107:93],
	       514'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB,
	       x_port1__read__h78845 == 9'd1 } ;
  assign ifcs_0_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ;
  assign ifcs_0_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse ;
  assign ifcs_0_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_0_1_routeBack
  assign ifcs_0_1_routeBack$D_IN =
	     2'd1 << outer_shim_0_tmp_rffD_OUT_BITS_530_TO_515__q1[15] ;
  assign ifcs_0_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign ifcs_0_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_8 && ifcs_0_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_rspBack$D_OUT[0] ;
  assign ifcs_0_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_0_1_rspBack
  assign ifcs_0_1_rspBack$D_IN =
	     { outer_shim_0_tmp_rffD_OUT_BITS_530_TO_515__q1[14:0],
	       outer_shim_0_tmp_rff$D_OUT[514:0] } ;
  assign ifcs_0_1_rspBack$ENQ = ssNoSynth_0_r_dwReady$whas ;
  assign ifcs_0_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_8 ;
  assign ifcs_0_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_0_innerReq
  assign ifcs_0_innerReq$D_IN =
	     { merged_0_flitLeft != 8'd0,
	       a_awid__h34648,
	       inner_shim_tmp_awff$D_OUT[92:0],
	       inner_shim_tmp_wff$D_OUT } ;
  assign ifcs_0_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_0_followFlits ||
	     WILL_FIRE_RL_ifcs_0_firstFlit ;
  assign ifcs_0_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst ;
  assign ifcs_0_innerReq$CLR = 1'b0 ;

  // submodule ifcs_0_innerRoute
  assign ifcs_0_innerRoute$D_IN =
	     { NOT_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_in_ETC___d981,
	       !IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d956 &&
	       !IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d959 &&
	       !IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d966 &&
	       IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d969,
	       IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d959 &&
	       !IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d956,
	       IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d956 } ;
  assign ifcs_0_innerRoute$ENQ = CAN_FIRE_RL_ifcs_0_firstFlit ;
  assign ifcs_0_innerRoute$DEQ =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerReq$D_OUT[0] ;
  assign ifcs_0_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_0_noRouteRsp
  assign ifcs_0_noRouteRsp$D_IN =
	     { ifcs_0_noRoute_inner_currentReq$port1__read[107:93], 2'd3 } ;
  assign ifcs_0_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp ;
  assign ifcs_0_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_0_drainNoRouteResponse ;
  assign ifcs_0_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_0_routeBack
  assign ifcs_0_routeBack$D_IN =
	     2'd1 << outer_shim_0_tmp_bffD_OUT_BITS_17_TO_2__q2[15] ;
  assign ifcs_0_routeBack$ENQ = CAN_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign ifcs_0_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_2 ;
  assign ifcs_0_routeBack$CLR = 1'b0 ;

  // submodule ifcs_0_rspBack
  assign ifcs_0_rspBack$D_IN =
	     { outer_shim_0_tmp_bffD_OUT_BITS_17_TO_2__q2[14:0],
	       outer_shim_0_tmp_bff$D_OUT[1:0] } ;
  assign ifcs_0_rspBack$ENQ = ssNoSynth_0_b_dwReady$whas ;
  assign ifcs_0_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_2 ;
  assign ifcs_0_rspBack$CLR = 1'b0 ;

  // submodule ifcs_1_1_innerReq
  assign ifcs_1_1_innerReq$D_IN =
	     { fatReq_arid__h81518,
	       soc_top$to_ddr4_araddr,
	       soc_top$to_ddr4_arlen,
	       soc_top$to_ddr4_arsize,
	       soc_top$to_ddr4_arburst,
	       soc_top$to_ddr4_arlock,
	       soc_top$to_ddr4_arcache,
	       soc_top$to_ddr4_arprot,
	       soc_top$to_ddr4_arqos,
	       soc_top$to_ddr4_arregion } ;
  assign ifcs_1_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_1_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit ;
  assign ifcs_1_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_7 ;
  assign ifcs_1_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_1_1_innerRoute
  assign ifcs_1_1_innerRoute$D_IN =
	     { NOT_soc_top_to_ddr4_ar_araddr__860_ULT_0xC0000_ETC___d1886,
	       !soc_top_to_ddr4_ar_araddr__860_ULT_0x400000000___d1861 &&
	       !soc_top_to_ddr4_ar_araddr__860_MINUS_0x4000000_ETC___d1864 &&
	       !soc_top_to_ddr4_ar_araddr__860_ULT_0x800000000___d1871 &&
	       soc_top_to_ddr4_ar_araddr__860_MINUS_0x8000000_ETC___d1874,
	       soc_top_to_ddr4_ar_araddr__860_MINUS_0x4000000_ETC___d1864 &&
	       !soc_top_to_ddr4_ar_araddr__860_ULT_0x400000000___d1861,
	       soc_top_to_ddr4_ar_araddr__860_ULT_0x400000000___d1861 } ;
  assign ifcs_1_1_innerRoute$ENQ =
	     soc_top$to_ddr4_arvalid && ifcs_1_1_innerReq$FULL_N &&
	     ifcs_1_1_innerRoute$FULL_N &&
	     ifcs_1_1_state == 2'd0 &&
	     IF_soc_top_to_ddr4_ar_araddr__860_ULT_0x400000_ETC___d1889 ==
	     3'd1 ;
  assign ifcs_1_1_innerRoute$DEQ =
	     WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_7 ;
  assign ifcs_1_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_1_1_noRouteRsp
  assign ifcs_1_1_noRouteRsp$D_IN =
	     { ifcs_1_1_noRoute_currentReq$port1__read[107:93],
	       514'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB,
	       x_port1__read__h82166 == 9'd1 } ;
  assign ifcs_1_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ;
  assign ifcs_1_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse ;
  assign ifcs_1_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_1_1_routeBack
  assign ifcs_1_1_routeBack$D_IN =
	     2'd1 << outer_shim_1_tmp_rffD_OUT_BITS_530_TO_515__q3[15] ;
  assign ifcs_1_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign ifcs_1_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_9 && ifcs_1_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_rspBack$D_OUT[0] ;
  assign ifcs_1_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_1_1_rspBack
  assign ifcs_1_1_rspBack$D_IN =
	     { outer_shim_1_tmp_rffD_OUT_BITS_530_TO_515__q3[14:0],
	       outer_shim_1_tmp_rff$D_OUT[514:0] } ;
  assign ifcs_1_1_rspBack$ENQ = ssNoSynth_1_r_dwReady$whas ;
  assign ifcs_1_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_9 ;
  assign ifcs_1_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_1_innerReq
  assign ifcs_1_innerReq$D_IN =
	     { merged_1_flitLeft != 8'd0,
	       a_awid__h38953,
	       soc_top$to_ddr4_awaddr,
	       soc_top$to_ddr4_awlen,
	       soc_top$to_ddr4_awsize,
	       soc_top$to_ddr4_awburst,
	       soc_top$to_ddr4_awlock,
	       soc_top$to_ddr4_awcache,
	       soc_top$to_ddr4_awprot,
	       soc_top$to_ddr4_awqos,
	       soc_top$to_ddr4_awregion,
	       soc_top$to_ddr4_wdata,
	       soc_top$to_ddr4_wstrb,
	       soc_top$to_ddr4_wlast } ;
  assign ifcs_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_firstFlit ;
  assign ifcs_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_1 ;
  assign ifcs_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_1_innerRoute
  assign ifcs_1_innerRoute$D_IN =
	     { NOT_IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_t_ETC___d1083,
	       !IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1058 &&
	       !IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1061 &&
	       !IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1068 &&
	       IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1071,
	       IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1061 &&
	       !IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1058,
	       IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1058 } ;
  assign ifcs_1_innerRoute$ENQ =
	     soc_top$to_ddr4_wvalid &&
	     IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1041 &&
	     ifcs_1_innerReq_i_notFull__042_AND_ifcs_1_inne_ETC___d1051 &&
	     ifcs_1_state == 2'd0 &&
	     IF_IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_to_ETC___d1086 ==
	     3'd1 ;
  assign ifcs_1_innerRoute$DEQ =
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerReq$D_OUT[0] ;
  assign ifcs_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_1_noRouteRsp
  assign ifcs_1_noRouteRsp$D_IN =
	     { ifcs_1_noRoute_inner_currentReq$port1__read[107:93], 2'd3 } ;
  assign ifcs_1_noRouteRsp$ENQ =
	     IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1041 &&
	     ifcs_1_noRoute_inner_pendingReq$port1__read &&
	     ifcs_1_noRouteRsp$FULL_N &&
	     soc_top$to_ddr4_wvalid ;
  assign ifcs_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_1_drainNoRouteResponse ;
  assign ifcs_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_1_routeBack
  assign ifcs_1_routeBack$D_IN =
	     2'd1 << outer_shim_1_tmp_bffD_OUT_BITS_17_TO_2__q4[15] ;
  assign ifcs_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign ifcs_1_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_3 ;
  assign ifcs_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_1_rspBack
  assign ifcs_1_rspBack$D_IN =
	     { outer_shim_1_tmp_bffD_OUT_BITS_17_TO_2__q4[14:0],
	       outer_shim_1_tmp_bff$D_OUT[1:0] } ;
  assign ifcs_1_rspBack$ENQ = ssNoSynth_1_b_dwReady$whas ;
  assign ifcs_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_3 ;
  assign ifcs_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_2_1_routeBack
  assign ifcs_2_1_routeBack$D_IN =
	     2'd1 << outer_shim_2_tmp_rffD_OUT_BITS_530_TO_515__q5[15] ;
  assign ifcs_2_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_2_1_firstFlit ;
  assign ifcs_2_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_10 && ifcs_2_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_rspBack$D_OUT[0] ;
  assign ifcs_2_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_2_1_rspBack
  assign ifcs_2_1_rspBack$D_IN =
	     { outer_shim_2_tmp_rffD_OUT_BITS_530_TO_515__q5[14:0],
	       outer_shim_2_tmp_rff$D_OUT[514:0] } ;
  assign ifcs_2_1_rspBack$ENQ = ssNoSynth_2_r_dwReady$whas ;
  assign ifcs_2_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_10 ;
  assign ifcs_2_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_2_routeBack
  assign ifcs_2_routeBack$D_IN =
	     2'd1 << outer_shim_2_tmp_bffD_OUT_BITS_17_TO_2__q6[15] ;
  assign ifcs_2_routeBack$ENQ = CAN_FIRE_RL_ifcs_2_firstFlit ;
  assign ifcs_2_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_4 ;
  assign ifcs_2_routeBack$CLR = 1'b0 ;

  // submodule ifcs_2_rspBack
  assign ifcs_2_rspBack$D_IN =
	     { outer_shim_2_tmp_bffD_OUT_BITS_17_TO_2__q6[14:0],
	       outer_shim_2_tmp_bff$D_OUT[1:0] } ;
  assign ifcs_2_rspBack$ENQ = ssNoSynth_2_b_dwReady$whas ;
  assign ifcs_2_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_4 ;
  assign ifcs_2_rspBack$CLR = 1'b0 ;

  // submodule ifcs_3_1_routeBack
  assign ifcs_3_1_routeBack$D_IN =
	     2'd1 << outer_shim_3_tmp_rffD_OUT_BITS_530_TO_515__q31[15] ;
  assign ifcs_3_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_3_1_firstFlit ;
  assign ifcs_3_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_11 && ifcs_3_1_rspBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	     ifcs_3_1_rspBack$D_OUT[0] ;
  assign ifcs_3_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_3_1_rspBack
  assign ifcs_3_1_rspBack$D_IN =
	     { outer_shim_3_tmp_rffD_OUT_BITS_530_TO_515__q31[14:0],
	       outer_shim_3_tmp_rff$D_OUT[514:0] } ;
  assign ifcs_3_1_rspBack$ENQ = ssNoSynth_3_r_dwReady$whas ;
  assign ifcs_3_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_11 ;
  assign ifcs_3_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_3_routeBack
  assign ifcs_3_routeBack$D_IN =
	     2'd1 << outer_shim_3_tmp_bffD_OUT_BITS_17_TO_2__q32[15] ;
  assign ifcs_3_routeBack$ENQ = CAN_FIRE_RL_ifcs_3_firstFlit ;
  assign ifcs_3_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_5 ;
  assign ifcs_3_routeBack$CLR = 1'b0 ;

  // submodule ifcs_3_rspBack
  assign ifcs_3_rspBack$D_IN =
	     { outer_shim_3_tmp_bffD_OUT_BITS_17_TO_2__q32[14:0],
	       outer_shim_3_tmp_bff$D_OUT[1:0] } ;
  assign ifcs_3_rspBack$ENQ = ssNoSynth_3_b_dwReady$whas ;
  assign ifcs_3_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_5 ;
  assign ifcs_3_rspBack$CLR = 1'b0 ;

  // submodule inner_shim_tmp_arff
  assign inner_shim_tmp_arff$D_IN =
	     inner_shim_shim_ug_slave_u_ar_putWire$wget ;
  assign inner_shim_tmp_arff$ENQ =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_ar_doPut ;
  assign inner_shim_tmp_arff$DEQ =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_ar_doDrop ;
  assign inner_shim_tmp_arff$CLR = 1'b0 ;

  // submodule inner_shim_tmp_awff
  assign inner_shim_tmp_awff$D_IN =
	     inner_shim_shim_ug_slave_u_aw_putWire$wget ;
  assign inner_shim_tmp_awff$ENQ =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_aw_doPut ;
  assign inner_shim_tmp_awff$DEQ =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_aw_doDrop ;
  assign inner_shim_tmp_awff$CLR = 1'b0 ;

  // submodule inner_shim_tmp_bff
  assign inner_shim_tmp_bff$D_IN =
	     inner_shim_shim_ug_master_u_b_putWire$wget ;
  assign inner_shim_tmp_bff$ENQ =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_b_doPut ;
  assign inner_shim_tmp_bff$DEQ =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_b_doDrop ;
  assign inner_shim_tmp_bff$CLR = 1'b0 ;

  // submodule inner_shim_tmp_rff
  assign inner_shim_tmp_rff$D_IN =
	     inner_shim_shim_ug_master_u_r_putWire$wget ;
  assign inner_shim_tmp_rff$ENQ =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_r_doPut ;
  assign inner_shim_tmp_rff$DEQ =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_r_doDrop ;
  assign inner_shim_tmp_rff$CLR = 1'b0 ;

  // submodule inner_shim_tmp_wff
  assign inner_shim_tmp_wff$D_IN = inner_shim_shim_ug_slave_u_w_putWire$wget ;
  assign inner_shim_tmp_wff$ENQ =
	     CAN_FIRE_RL_inner_shim_shim_ug_slave_u_w_doPut ;
  assign inner_shim_tmp_wff$DEQ =
	     CAN_FIRE_RL_inner_shim_shim_ug_master_u_w_doDrop ;
  assign inner_shim_tmp_wff$CLR = 1'b0 ;

  // submodule msNoSynth_0_b_buffer_ff
  assign msNoSynth_0_b_buffer_ff$D_IN = msNoSynth_0_b_buffer_enqw$wget ;
  assign msNoSynth_0_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue ;
  assign msNoSynth_0_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue ;
  assign msNoSynth_0_b_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_0_b_buffer_firstValid
  assign msNoSynth_0_b_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_0_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit ;

  // submodule msNoSynth_0_r_buffer_ff
  assign msNoSynth_0_r_buffer_ff$D_IN = msNoSynth_0_r_buffer_enqw$wget ;
  assign msNoSynth_0_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue ;
  assign msNoSynth_0_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue ;
  assign msNoSynth_0_r_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_0_r_buffer_firstValid
  assign msNoSynth_0_r_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_0_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit ;

  // submodule msNoSynth_1_b_buffer_ff
  assign msNoSynth_1_b_buffer_ff$D_IN = msNoSynth_1_b_buffer_enqw$wget ;
  assign msNoSynth_1_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue ;
  assign msNoSynth_1_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue ;
  assign msNoSynth_1_b_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_1_b_buffer_firstValid
  assign msNoSynth_1_b_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_1_b_buffer_firstValid$EN =
	     msNoSynth_1_b_buffer_dequeueing$whas ;

  // submodule msNoSynth_1_r_buffer_ff
  assign msNoSynth_1_r_buffer_ff$D_IN = msNoSynth_1_r_buffer_enqw$wget ;
  assign msNoSynth_1_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue ;
  assign msNoSynth_1_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue ;
  assign msNoSynth_1_r_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_1_r_buffer_firstValid
  assign msNoSynth_1_r_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_1_r_buffer_firstValid$EN =
	     msNoSynth_1_r_buffer_dequeueing$whas ;

  // submodule ocl_adapter
  assign ocl_adapter$ocl_slave_ar_araddr = ocl_slave_ar_araddr ;
  assign ocl_adapter$ocl_slave_ar_arprot = ocl_slave_ar_arprot ;
  assign ocl_adapter$ocl_slave_aw_awaddr = ocl_slave_aw_awaddr ;
  assign ocl_adapter$ocl_slave_aw_awprot = ocl_slave_aw_awprot ;
  assign ocl_adapter$ocl_slave_b_bready = ocl_slave_b_bready ;
  assign ocl_adapter$ocl_slave_r_rready = ocl_slave_r_rready ;
  assign ocl_adapter$ocl_slave_w_wdata = ocl_slave_w_wdata ;
  assign ocl_adapter$ocl_slave_w_wstrb = ocl_slave_w_wstrb ;
  assign ocl_adapter$v_to_host_0_enq_x = x__h1641 | y__h1642 ;
  assign ocl_adapter$v_to_host_1_enq_x =
	     { 24'd0, soc_top$get_to_console_get } ;
  assign ocl_adapter$v_to_host_2_enq_x = soc_top$to_aws_host_get ;
  assign ocl_adapter$v_to_host_3_enq_x = 32'h0 ;
  assign ocl_adapter$ocl_slave_aw_awvalid = ocl_slave_aw_awvalid ;
  assign ocl_adapter$ocl_slave_w_wvalid = ocl_slave_w_wvalid ;
  assign ocl_adapter$ocl_slave_ar_arvalid = ocl_slave_ar_arvalid ;
  assign ocl_adapter$EN_v_from_host_0_deq =
	     CAN_FIRE_RL_rl_host_to_hw_control ;
  assign ocl_adapter$EN_v_from_host_1_deq = CAN_FIRE_RL_rl_console_to_UART ;
  assign ocl_adapter$EN_v_from_host_2_deq =
	     CAN_FIRE_RL_rl_aws_host_to_hw_mem_rsp ;
  assign ocl_adapter$EN_v_from_host_3_deq = 1'b0 ;
  assign ocl_adapter$EN_v_from_host_4_deq =
	     CAN_FIRE_RL_rl_aws_host_to_hw_interrupt ;
  assign ocl_adapter$EN_v_to_host_0_enq = ocl_adapter$RDY_v_to_host_0_enq ;
  assign ocl_adapter$EN_v_to_host_1_enq = CAN_FIRE_RL_rl_UART_to_console ;
  assign ocl_adapter$EN_v_to_host_2_enq =
	     CAN_FIRE_RL_rl_hw_to_aws_host_mem_req ;
  assign ocl_adapter$EN_v_to_host_3_enq = 1'b0 ;

  // submodule outer_shim_0_tmp_arff
  assign outer_shim_0_tmp_arff$D_IN =
	     outer_shim_0_shim_ug_slave_u_ar_putWire$wget ;
  assign outer_shim_0_tmp_arff$ENQ =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_doPut ;
  assign outer_shim_0_tmp_arff$DEQ =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_doDrop ;
  assign outer_shim_0_tmp_arff$CLR = 1'b0 ;

  // submodule outer_shim_0_tmp_awff
  assign outer_shim_0_tmp_awff$D_IN =
	     outer_shim_0_shim_ug_slave_u_aw_putWire$wget ;
  assign outer_shim_0_tmp_awff$ENQ =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_doPut ;
  assign outer_shim_0_tmp_awff$DEQ =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_doDrop ;
  assign outer_shim_0_tmp_awff$CLR = 1'b0 ;

  // submodule outer_shim_0_tmp_bff
  assign outer_shim_0_tmp_bff$D_IN =
	     outer_shim_0_shim_ug_master_u_b_putWire$wget ;
  assign outer_shim_0_tmp_bff$ENQ =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_b_doPut ;
  assign outer_shim_0_tmp_bff$DEQ =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_doDrop ;
  assign outer_shim_0_tmp_bff$CLR = 1'b0 ;

  // submodule outer_shim_0_tmp_rff
  assign outer_shim_0_tmp_rff$D_IN =
	     outer_shim_0_shim_ug_master_u_r_putWire$wget ;
  assign outer_shim_0_tmp_rff$ENQ =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_r_doPut ;
  assign outer_shim_0_tmp_rff$DEQ =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_doDrop ;
  assign outer_shim_0_tmp_rff$CLR = 1'b0 ;

  // submodule outer_shim_0_tmp_wff
  assign outer_shim_0_tmp_wff$D_IN =
	     outer_shim_0_shim_ug_slave_u_w_putWire$wget ;
  assign outer_shim_0_tmp_wff$ENQ =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_doPut ;
  assign outer_shim_0_tmp_wff$DEQ =
	     CAN_FIRE_RL_outer_shim_0_shim_ug_master_u_w_doDrop ;
  assign outer_shim_0_tmp_wff$CLR = 1'b0 ;

  // submodule outer_shim_1_tmp_arff
  assign outer_shim_1_tmp_arff$D_IN =
	     outer_shim_1_shim_ug_slave_u_ar_putWire$wget ;
  assign outer_shim_1_tmp_arff$ENQ =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_doPut ;
  assign outer_shim_1_tmp_arff$DEQ =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_doDrop ;
  assign outer_shim_1_tmp_arff$CLR = 1'b0 ;

  // submodule outer_shim_1_tmp_awff
  assign outer_shim_1_tmp_awff$D_IN =
	     outer_shim_1_shim_ug_slave_u_aw_putWire$wget ;
  assign outer_shim_1_tmp_awff$ENQ =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_doPut ;
  assign outer_shim_1_tmp_awff$DEQ =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_doDrop ;
  assign outer_shim_1_tmp_awff$CLR = 1'b0 ;

  // submodule outer_shim_1_tmp_bff
  assign outer_shim_1_tmp_bff$D_IN =
	     outer_shim_1_shim_ug_master_u_b_putWire$wget ;
  assign outer_shim_1_tmp_bff$ENQ =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_b_doPut ;
  assign outer_shim_1_tmp_bff$DEQ =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_doDrop ;
  assign outer_shim_1_tmp_bff$CLR = 1'b0 ;

  // submodule outer_shim_1_tmp_rff
  assign outer_shim_1_tmp_rff$D_IN =
	     outer_shim_1_shim_ug_master_u_r_putWire$wget ;
  assign outer_shim_1_tmp_rff$ENQ =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_r_doPut ;
  assign outer_shim_1_tmp_rff$DEQ =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_doDrop ;
  assign outer_shim_1_tmp_rff$CLR = 1'b0 ;

  // submodule outer_shim_1_tmp_wff
  assign outer_shim_1_tmp_wff$D_IN =
	     outer_shim_1_shim_ug_slave_u_w_putWire$wget ;
  assign outer_shim_1_tmp_wff$ENQ =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_doPut ;
  assign outer_shim_1_tmp_wff$DEQ =
	     CAN_FIRE_RL_outer_shim_1_shim_ug_master_u_w_doDrop ;
  assign outer_shim_1_tmp_wff$CLR = 1'b0 ;

  // submodule outer_shim_2_tmp_arff
  assign outer_shim_2_tmp_arff$D_IN =
	     outer_shim_2_shim_ug_slave_u_ar_putWire$wget ;
  assign outer_shim_2_tmp_arff$ENQ =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_doPut ;
  assign outer_shim_2_tmp_arff$DEQ =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_doDrop ;
  assign outer_shim_2_tmp_arff$CLR = 1'b0 ;

  // submodule outer_shim_2_tmp_awff
  assign outer_shim_2_tmp_awff$D_IN =
	     outer_shim_2_shim_ug_slave_u_aw_putWire$wget ;
  assign outer_shim_2_tmp_awff$ENQ =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_doPut ;
  assign outer_shim_2_tmp_awff$DEQ =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_doDrop ;
  assign outer_shim_2_tmp_awff$CLR = 1'b0 ;

  // submodule outer_shim_2_tmp_bff
  assign outer_shim_2_tmp_bff$D_IN =
	     outer_shim_2_shim_ug_master_u_b_putWire$wget ;
  assign outer_shim_2_tmp_bff$ENQ =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_b_doPut ;
  assign outer_shim_2_tmp_bff$DEQ =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_doDrop ;
  assign outer_shim_2_tmp_bff$CLR = 1'b0 ;

  // submodule outer_shim_2_tmp_rff
  assign outer_shim_2_tmp_rff$D_IN =
	     outer_shim_2_shim_ug_master_u_r_putWire$wget ;
  assign outer_shim_2_tmp_rff$ENQ =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_r_doPut ;
  assign outer_shim_2_tmp_rff$DEQ =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_doDrop ;
  assign outer_shim_2_tmp_rff$CLR = 1'b0 ;

  // submodule outer_shim_2_tmp_wff
  assign outer_shim_2_tmp_wff$D_IN =
	     outer_shim_2_shim_ug_slave_u_w_putWire$wget ;
  assign outer_shim_2_tmp_wff$ENQ =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_doPut ;
  assign outer_shim_2_tmp_wff$DEQ =
	     CAN_FIRE_RL_outer_shim_2_shim_ug_master_u_w_doDrop ;
  assign outer_shim_2_tmp_wff$CLR = 1'b0 ;

  // submodule outer_shim_3_tmp_arff
  assign outer_shim_3_tmp_arff$D_IN =
	     outer_shim_3_shim_ug_slave_u_ar_putWire$wget ;
  assign outer_shim_3_tmp_arff$ENQ =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_doPut ;
  assign outer_shim_3_tmp_arff$DEQ =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_doDrop ;
  assign outer_shim_3_tmp_arff$CLR = 1'b0 ;

  // submodule outer_shim_3_tmp_awff
  assign outer_shim_3_tmp_awff$D_IN =
	     outer_shim_3_shim_ug_slave_u_aw_putWire$wget ;
  assign outer_shim_3_tmp_awff$ENQ =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_doPut ;
  assign outer_shim_3_tmp_awff$DEQ =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_doDrop ;
  assign outer_shim_3_tmp_awff$CLR = 1'b0 ;

  // submodule outer_shim_3_tmp_bff
  assign outer_shim_3_tmp_bff$D_IN =
	     outer_shim_3_shim_ug_master_u_b_putWire$wget ;
  assign outer_shim_3_tmp_bff$ENQ =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_b_doPut ;
  assign outer_shim_3_tmp_bff$DEQ =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_doDrop ;
  assign outer_shim_3_tmp_bff$CLR = 1'b0 ;

  // submodule outer_shim_3_tmp_rff
  assign outer_shim_3_tmp_rff$D_IN =
	     outer_shim_3_shim_ug_master_u_r_putWire$wget ;
  assign outer_shim_3_tmp_rff$ENQ =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_r_doPut ;
  assign outer_shim_3_tmp_rff$DEQ =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_doDrop ;
  assign outer_shim_3_tmp_rff$CLR = 1'b0 ;

  // submodule outer_shim_3_tmp_wff
  assign outer_shim_3_tmp_wff$D_IN =
	     outer_shim_3_shim_ug_slave_u_w_putWire$wget ;
  assign outer_shim_3_tmp_wff$ENQ =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_doPut ;
  assign outer_shim_3_tmp_wff$DEQ =
	     CAN_FIRE_RL_outer_shim_3_shim_ug_master_u_w_doDrop ;
  assign outer_shim_3_tmp_wff$CLR = 1'b0 ;

  // submodule soc_top
  assign soc_top$from_aws_host_put = ocl_adapter$v_from_host_2_first ;
  assign soc_top$ma_aws_host_to_hw_interrupt_x =
	     ocl_adapter$v_from_host_4_first[0] ;
  assign soc_top$ma_set_verbosity_logdelay1 = logdelay__h1213 ;
  assign soc_top$ma_set_verbosity_verbosity1 =
	     ocl_adapter$v_from_host_0_first[5:2] ;
  assign soc_top$ma_set_watch_tohost_tohost_addr = { 32'd0, x__h1382 } ;
  assign soc_top$ma_set_watch_tohost_watch_tohost =
	     ocl_adapter$v_from_host_0_first[1:0] != 2'd2 ;
  assign soc_top$put_from_console_put = ocl_adapter$v_from_host_1_first[7:0] ;
  assign soc_top$to_ddr4_arready = msNoSynth_1_ar_dwReady$whas ;
  assign soc_top$to_ddr4_awready = msNoSynth_1_aw_dwReady$whas ;
  assign soc_top$to_ddr4_bid =
	     msNoSynth_1_b_buffer_ff$EMPTY_N ?
	       msNoSynth_1_b_buffer_ff$D_OUT[16:2] :
	       msNoSynth_1_b_buffer_enqw$wget[16:2] ;
  assign soc_top$to_ddr4_bresp =
	     msNoSynth_1_b_buffer_ff$EMPTY_N ?
	       msNoSynth_1_b_buffer_ff$D_OUT[1:0] :
	       msNoSynth_1_b_buffer_enqw$wget[1:0] ;
  assign soc_top$to_ddr4_rdata =
	     msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       msNoSynth_1_r_buffer_ff$D_OUT[514:3] :
	       msNoSynth_1_r_buffer_enqw$wget[514:3] ;
  assign soc_top$to_ddr4_rid =
	     msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       msNoSynth_1_r_buffer_ff$D_OUT[529:515] :
	       msNoSynth_1_r_buffer_enqw$wget[529:515] ;
  assign soc_top$to_ddr4_rlast =
	     msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       msNoSynth_1_r_buffer_ff$D_OUT[0] :
	       msNoSynth_1_r_buffer_enqw$wget[0] ;
  assign soc_top$to_ddr4_rresp =
	     msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       msNoSynth_1_r_buffer_ff$D_OUT[2:1] :
	       msNoSynth_1_r_buffer_enqw$wget[2:1] ;
  assign soc_top$to_ddr4_wready = msNoSynth_1_w_dwReady$whas ;
  assign soc_top$to_ddr4_bvalid = CAN_FIRE_RL_msNoSynth_1_b_forwardFlit ;
  assign soc_top$to_ddr4_rvalid = CAN_FIRE_RL_msNoSynth_1_r_forwardFlit ;
  assign soc_top$EN_get_to_console_get = CAN_FIRE_RL_rl_UART_to_console ;
  assign soc_top$EN_put_from_console_put = CAN_FIRE_RL_rl_console_to_UART ;
  assign soc_top$EN_to_aws_host_get = CAN_FIRE_RL_rl_hw_to_aws_host_mem_req ;
  assign soc_top$EN_from_aws_host_put =
	     CAN_FIRE_RL_rl_aws_host_to_hw_mem_rsp ;
  assign soc_top$EN_ma_aws_host_to_hw_interrupt =
	     CAN_FIRE_RL_rl_aws_host_to_hw_interrupt ;
  assign soc_top$EN_ma_set_verbosity =
	     WILL_FIRE_RL_rl_host_to_hw_control &&
	     ocl_adapter$v_from_host_0_first[1:0] == 2'd1 ;
  assign soc_top$EN_ma_set_watch_tohost =
	     WILL_FIRE_RL_rl_host_to_hw_control &&
	     (ocl_adapter$v_from_host_0_first[1:0] == 2'd2 ||
	      ocl_adapter$v_from_host_0_first[1:0] == 2'd3) ;
  assign soc_top$EN_ma_ddr4_ready = WILL_FIRE_RL_rl_initialize ;

  // submodule ssNoSynth_0_ar_buffer_ff
  assign ssNoSynth_0_ar_buffer_ff$D_IN = ssNoSynth_0_ar_buffer_enqw$wget ;
  assign ssNoSynth_0_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue ;
  assign ssNoSynth_0_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue ;
  assign ssNoSynth_0_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_ar_buffer_firstValid
  assign ssNoSynth_0_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ;

  // submodule ssNoSynth_0_aw_buffer_ff
  assign ssNoSynth_0_aw_buffer_ff$D_IN = split_0_doPut$wget[685:577] ;
  assign ssNoSynth_0_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue ;
  assign ssNoSynth_0_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue ;
  assign ssNoSynth_0_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_aw_buffer_firstValid
  assign ssNoSynth_0_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ;

  // submodule ssNoSynth_0_w_buffer_ff
  assign ssNoSynth_0_w_buffer_ff$D_IN = split_0_doPut$wget[576:0] ;
  assign ssNoSynth_0_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue ;
  assign ssNoSynth_0_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue ;
  assign ssNoSynth_0_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_w_buffer_firstValid
  assign ssNoSynth_0_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ;

  // submodule ssNoSynth_1_ar_buffer_ff
  assign ssNoSynth_1_ar_buffer_ff$D_IN = ssNoSynth_1_ar_buffer_enqw$wget ;
  assign ssNoSynth_1_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue ;
  assign ssNoSynth_1_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue ;
  assign ssNoSynth_1_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_ar_buffer_firstValid
  assign ssNoSynth_1_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ;

  // submodule ssNoSynth_1_aw_buffer_ff
  assign ssNoSynth_1_aw_buffer_ff$D_IN = split_1_doPut$wget[685:577] ;
  assign ssNoSynth_1_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue ;
  assign ssNoSynth_1_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue ;
  assign ssNoSynth_1_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_aw_buffer_firstValid
  assign ssNoSynth_1_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ;

  // submodule ssNoSynth_1_w_buffer_ff
  assign ssNoSynth_1_w_buffer_ff$D_IN = split_1_doPut$wget[576:0] ;
  assign ssNoSynth_1_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue ;
  assign ssNoSynth_1_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue ;
  assign ssNoSynth_1_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_w_buffer_firstValid
  assign ssNoSynth_1_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ;

  // submodule ssNoSynth_2_ar_buffer_ff
  assign ssNoSynth_2_ar_buffer_ff$D_IN = ssNoSynth_2_ar_buffer_enqw$wget ;
  assign ssNoSynth_2_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue ;
  assign ssNoSynth_2_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue ;
  assign ssNoSynth_2_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_ar_buffer_firstValid
  assign ssNoSynth_2_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ;

  // submodule ssNoSynth_2_aw_buffer_ff
  assign ssNoSynth_2_aw_buffer_ff$D_IN = split_2_doPut$wget[685:577] ;
  assign ssNoSynth_2_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue ;
  assign ssNoSynth_2_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue ;
  assign ssNoSynth_2_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_aw_buffer_firstValid
  assign ssNoSynth_2_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ;

  // submodule ssNoSynth_2_w_buffer_ff
  assign ssNoSynth_2_w_buffer_ff$D_IN = split_2_doPut$wget[576:0] ;
  assign ssNoSynth_2_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue ;
  assign ssNoSynth_2_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue ;
  assign ssNoSynth_2_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_w_buffer_firstValid
  assign ssNoSynth_2_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ;

  // submodule ssNoSynth_3_ar_buffer_ff
  assign ssNoSynth_3_ar_buffer_ff$D_IN = ssNoSynth_3_ar_buffer_enqw$wget ;
  assign ssNoSynth_3_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_3_ar_buffer_enqueue ;
  assign ssNoSynth_3_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_3_ar_buffer_dequeue ;
  assign ssNoSynth_3_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_3_ar_buffer_firstValid
  assign ssNoSynth_3_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_3_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_3_ar_dropFlit ;

  // submodule ssNoSynth_3_aw_buffer_ff
  assign ssNoSynth_3_aw_buffer_ff$D_IN = split_3_doPut$wget[685:577] ;
  assign ssNoSynth_3_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_3_aw_buffer_enqueue ;
  assign ssNoSynth_3_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_3_aw_buffer_dequeue ;
  assign ssNoSynth_3_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_3_aw_buffer_firstValid
  assign ssNoSynth_3_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_3_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_3_aw_dropFlit ;

  // submodule ssNoSynth_3_w_buffer_ff
  assign ssNoSynth_3_w_buffer_ff$D_IN = split_3_doPut$wget[576:0] ;
  assign ssNoSynth_3_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_3_w_buffer_enqueue ;
  assign ssNoSynth_3_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_3_w_buffer_dequeue ;
  assign ssNoSynth_3_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_3_w_buffer_firstValid
  assign ssNoSynth_3_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_3_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_3_w_dropFlit ;

  // remaining internal signals
  assign IF_IF_inner_shim_shim_ug_master_u_ar_peekWire__ETC___d1795 =
	     (IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1767 ?
		3'd1 :
		3'd0) +
	     ((IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1770 &&
	       !IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1767) ?
		3'd1 :
		3'd0) +
	     IF_NOT_IF_inner_shim_shim_ug_master_u_ar_peekW_ETC___d1783 +
	     (NOT_IF_inner_shim_shim_ug_master_u_ar_peekWire_ETC___d1792 ?
		3'd1 :
		3'd0) ;
  assign IF_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inn_ETC___d984 =
	     (IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d956 ?
		3'd1 :
		3'd0) +
	     ((IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d959 &&
	       !IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d956) ?
		3'd1 :
		3'd0) +
	     IF_NOT_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_ETC___d972 +
	     (NOT_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_in_ETC___d981 ?
		3'd1 :
		3'd0) ;
  assign IF_IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_to_ETC___d1086 =
	     (IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1058 ?
		3'd1 :
		3'd0) +
	     ((IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1061 &&
	       !IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1058) ?
		3'd1 :
		3'd0) +
	     IF_NOT_IF_merged_1_flitLeft_08_EQ_0_09_THEN_so_ETC___d1074 +
	     (NOT_IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_t_ETC___d1083 ?
		3'd1 :
		3'd0) ;
  assign IF_NOT_IF_inner_shim_shim_ug_master_u_ar_peekW_ETC___d1783 =
	     (!IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1767 &&
	      !IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1770 &&
	      !IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1777 &&
	      IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1780) ?
	       3'd1 :
	       3'd0 ;
  assign IF_NOT_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_ETC___d972 =
	     (!IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d956 &&
	      !IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d959 &&
	      !IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d966 &&
	      IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d969) ?
	       3'd1 :
	       3'd0 ;
  assign IF_NOT_IF_merged_1_flitLeft_08_EQ_0_09_THEN_so_ETC___d1074 =
	     (!IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1058 &&
	      !IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1061 &&
	      !IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1068 &&
	      IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1071) ?
	       3'd1 :
	       3'd0 ;
  assign IF_NOT_ifcs_0_1_innerRoute_first__055_BIT_1_06_ETC___d2086 =
	     (!ifcs_0_1_innerRoute$D_OUT[1] ||
	      !ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       ((!ifcs_0_1_innerRoute$D_OUT[2] ||
		 !ssNoSynth_2_ar_buffer_ff$FULL_N) ?
		  ifcs_0_1_innerRoute$D_OUT[3] &&
		  ssNoSynth_3_ar_buffer_ff$FULL_N :
		  ifcs_0_1_innerRoute$D_OUT[2]) :
	       ifcs_0_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_0_innerRoute_first__238_BIT_1_247__ETC___d1269 =
	     (!ifcs_0_innerRoute$D_OUT[1] || !isSinkReady_1$wget) ?
	       ((!ifcs_0_innerRoute$D_OUT[2] || !isSinkReady_2$wget) ?
		  ifcs_0_innerRoute$D_OUT[3] &&
		  IF_split_3_flitLeft_19_EQ_0_20_THEN_ssNoSynth__ETC___d1232 :
		  ifcs_0_innerRoute$D_OUT[2]) :
	       ifcs_0_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_1_1_innerRoute_first__093_BIT_1_09_ETC___d2106 =
	     (!ifcs_1_1_innerRoute$D_OUT[1] ||
	      !ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       ((!ifcs_1_1_innerRoute$D_OUT[2] ||
		 !ssNoSynth_2_ar_buffer_ff$FULL_N) ?
		  ifcs_1_1_innerRoute$D_OUT[3] &&
		  ssNoSynth_3_ar_buffer_ff$FULL_N :
		  ifcs_1_1_innerRoute$D_OUT[2]) :
	       ifcs_1_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_1_innerRoute_first__276_BIT_1_280__ETC___d1289 =
	     (!ifcs_1_innerRoute$D_OUT[1] || !isSinkReady_1$wget) ?
	       ((!ifcs_1_innerRoute$D_OUT[2] || !isSinkReady_2$wget) ?
		  ifcs_1_innerRoute$D_OUT[3] &&
		  IF_split_3_flitLeft_19_EQ_0_20_THEN_ssNoSynth__ETC___d1232 :
		  ifcs_1_innerRoute$D_OUT[2]) :
	       ifcs_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_soc_top_to_ddr4_ar_araddr__860_ULT_0x40_ETC___d1877 =
	     (!soc_top_to_ddr4_ar_araddr__860_ULT_0x400000000___d1861 &&
	      !soc_top_to_ddr4_ar_araddr__860_MINUS_0x4000000_ETC___d1864 &&
	      !soc_top_to_ddr4_ar_araddr__860_ULT_0x800000000___d1871 &&
	      soc_top_to_ddr4_ar_araddr__860_MINUS_0x8000000_ETC___d1874) ?
	       3'd1 :
	       3'd0 ;
  assign IF_SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_3_ETC___d2415 =
	     SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2380 ?
	       x__h106453 | y__h106454 :
	       arbiter_1_1_lastSelect_2 ;
  assign IF_SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_1_ETC___d2142 =
	     (SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_120__ETC___d2126 ||
	      SEXT_arbiter_1_firstHot_1_122_123_BIT_0_124_AN_ETC___d2130) ?
	       x__h91349 | y__h91350 :
	       arbiter_1_lastSelect_3 ;
  assign IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1767 =
	     inner_shim_tmp_arff$D_OUT[92:29] < 64'h0000000400000000 ;
  assign IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1770 =
	     x__h77260 < 64'h0000000400000000 ;
  assign IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1777 =
	     inner_shim_tmp_arff$D_OUT[92:29] < 64'h0000000800000000 ;
  assign IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1780 =
	     x__h77334 < 64'h0000000400000000 ;
  assign IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d956 =
	     inner_shim_tmp_awff$D_OUT[92:29] < 64'h0000000400000000 ;
  assign IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d959 =
	     x__h33681 < 64'h0000000400000000 ;
  assign IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d966 =
	     inner_shim_tmp_awff$D_OUT[92:29] < 64'h0000000800000000 ;
  assign IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d969 =
	     x__h33755 < 64'h0000000400000000 ;
  assign IF_merged_0_flitLeft_81_EQ_0_82_THEN_NOT_inner_ETC___d1013 =
	     (IF_merged_0_flitLeft_81_EQ_0_82_THEN_NOT_inner_ETC___d945 ||
	      inner_shim_tmp_awff$EMPTY_N) &&
	     (merged_0_flitLeft != 8'd0 ||
	      !ifcs_0_noRoute_inner_pendingReq &&
	      inner_shim_tmp_awff$EMPTY_N) ;
  assign IF_merged_0_flitLeft_81_EQ_0_82_THEN_NOT_inner_ETC___d945 =
	     ((merged_0_flitLeft == 8'd0) ?
		!inner_shim_tmp_awff$EMPTY_N || !inner_shim_tmp_wff$EMPTY_N :
		!inner_shim_tmp_wff$EMPTY_N) ||
	     merged_0_flitLeft != 8'd0 ;
  assign IF_merged_0_flitLeft_81_EQ_0_82_THEN_inner_shi_ETC___d940 =
	     (merged_0_flitLeft == 8'd0) ?
	       inner_shim_tmp_awff$EMPTY_N && inner_shim_tmp_wff$EMPTY_N :
	       inner_shim_tmp_wff$EMPTY_N ;
  assign IF_merged_1_flitLeft_08_EQ_0_09_THEN_NOT_soc_t_ETC___d1048 =
	     ((merged_1_flitLeft == 8'd0) ?
		!soc_top$to_ddr4_awvalid || !soc_top$to_ddr4_wvalid :
		!soc_top$to_ddr4_wvalid) ||
	     merged_1_flitLeft != 8'd0 ;
  assign IF_merged_1_flitLeft_08_EQ_0_09_THEN_NOT_soc_t_ETC___d1125 =
	     (IF_merged_1_flitLeft_08_EQ_0_09_THEN_NOT_soc_t_ETC___d1048 ||
	      soc_top$to_ddr4_awvalid) &&
	     (merged_1_flitLeft != 8'd0 ||
	      !ifcs_1_noRoute_inner_pendingReq && soc_top$to_ddr4_awvalid) ;
  assign IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1041 =
	     (merged_1_flitLeft == 8'd0) ?
	       soc_top$to_ddr4_awvalid && soc_top$to_ddr4_wvalid :
	       soc_top$to_ddr4_wvalid ;
  assign IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1058 =
	     soc_top$to_ddr4_awaddr < 64'h0000000400000000 ;
  assign IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1061 =
	     x__h37363 < 64'h0000000400000000 ;
  assign IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1068 =
	     soc_top$to_ddr4_awaddr < 64'h0000000800000000 ;
  assign IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1071 =
	     x__h37437 < 64'h0000000400000000 ;
  assign IF_rg_initialized_5_THEN_1_ELSE_0___d36 =
	     rg_initialized ? 24'd1 : 24'd0 ;
  assign IF_soc_top_to_ddr4_ar_araddr__860_ULT_0x400000_ETC___d1889 =
	     (soc_top_to_ddr4_ar_araddr__860_ULT_0x400000000___d1861 ?
		3'd1 :
		3'd0) +
	     ((soc_top_to_ddr4_ar_araddr__860_MINUS_0x4000000_ETC___d1864 &&
	       !soc_top_to_ddr4_ar_araddr__860_ULT_0x400000000___d1861) ?
		3'd1 :
		3'd0) +
	     IF_NOT_soc_top_to_ddr4_ar_araddr__860_ULT_0x40_ETC___d1877 +
	     (NOT_soc_top_to_ddr4_ar_araddr__860_ULT_0xC0000_ETC___d1886 ?
		3'd1 :
		3'd0) ;
  assign IF_split_3_flitLeft_19_EQ_0_20_THEN_ssNoSynth__ETC___d1232 =
	     (split_3_flitLeft == 8'd0) ?
	       ssNoSynth_3_aw_buffer_ff$FULL_N &&
	       ssNoSynth_3_w_buffer_ff$FULL_N :
	       ssNoSynth_3_w_buffer_ff$FULL_N ;
  assign NOT_IF_inner_shim_shim_ug_master_u_ar_peekWire_ETC___d1792 =
	     inner_shim_tmp_arff$D_OUT[92:29] >= 64'h0000000C00000000 &&
	     x__h77397 < 64'h0000000400000000 &&
	     !IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1767 &&
	     !IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1770 &&
	     (IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1777 ||
	      !IF_inner_shim_shim_ug_master_u_ar_peekWire_wha_ETC___d1780) ;
  assign NOT_IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_in_ETC___d981 =
	     inner_shim_tmp_awff$D_OUT[92:29] >= 64'h0000000C00000000 &&
	     x__h33818 < 64'h0000000400000000 &&
	     !IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d956 &&
	     !IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d959 &&
	     (IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d966 ||
	      !IF_merged_0_flitLeft_81_EQ_0_82_THEN_IF_inner__ETC___d969) ;
  assign NOT_IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_t_ETC___d1083 =
	     soc_top$to_ddr4_awaddr >= 64'h0000000C00000000 &&
	     x__h37500 < 64'h0000000400000000 &&
	     !IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1058 &&
	     !IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1061 &&
	     (IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1068 ||
	      !IF_merged_1_flitLeft_08_EQ_0_09_THEN_soc_top_t_ETC___d1071) ;
  assign NOT_SEXT_arbiter_1_1_lastSelect_331_332_BIT_0__ETC___d2377 =
	     !SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2349 &&
	     !SEXT_arbiter_1_1_lastSelect_1_335_336_BIT_0_33_ETC___d2357 &&
	     !SEXT_arbiter_1_1_lastSelect_2_340_341_BIT_0_34_ETC___d2365 &&
	     !SEXT_arbiter_1_1_firstHot_344_345_BIT_0_346_AN_ETC___d2373 ;
  assign NOT_SEXT_arbiter_1_lastSelect_524_525_BIT_0_52_ETC___d1570 =
	     !SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1542 &&
	     !SEXT_arbiter_1_lastSelect_1_528_529_BIT_0_530__ETC___d1550 &&
	     !SEXT_arbiter_1_lastSelect_2_533_534_BIT_0_535__ETC___d1558 &&
	     !SEXT_arbiter_1_firstHot_537_538_BIT_0_539_AND__ETC___d1566 ;
  assign NOT_soc_top_to_ddr4_ar_araddr__860_ULT_0xC0000_ETC___d1886 =
	     soc_top$to_ddr4_araddr >= 64'h0000000C00000000 &&
	     x__h80736 < 64'h0000000400000000 &&
	     !soc_top_to_ddr4_ar_araddr__860_ULT_0x400000000___d1861 &&
	     !soc_top_to_ddr4_ar_araddr__860_MINUS_0x4000000_ETC___d1864 &&
	     (soc_top_to_ddr4_ar_araddr__860_ULT_0x800000000___d1871 ||
	      !soc_top_to_ddr4_ar_araddr__860_MINUS_0x8000000_ETC___d1874) ;
  assign SEXT_SEXT_arbiter_1_1_firstHot_344_345_BIT_0_3_ETC__q27 =
	     {2{SEXT_arbiter_1_1_firstHot_344_345_BIT_0_346_AN_ETC___d2373}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_1_122_123_BIT_0_1_ETC__q19 =
	     {2{SEXT_arbiter_1_firstHot_1_122_123_BIT_0_124_AN_ETC___d2130}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_537_538_BIT_0_539_ETC__q23 =
	     {2{SEXT_arbiter_1_firstHot_537_538_BIT_0_539_AND__ETC___d1566}} ;
  assign SEXT_SEXT_arbiter_firstHot_305_306_BIT_0_307_A_ETC__q21 =
	     {2{SEXT_arbiter_firstHot_305_306_BIT_0_307_AND_re_ETC___d1313}} ;
  assign SEXT_arbiter_1_1_firstHot_344_345_BIT_0_346_AN_ETC___d2373 =
	     x__h105408 | y__h105409 ;
  assign SEXT_arbiter_1_1_firstHot__q11 = {2{arbiter_1_1_firstHot}} ;
  assign SEXT_arbiter_1_1_lastSelect_1_335_336_BIT_0_33_ETC___d2357 =
	     x__h105056 | y__h105057 ;
  assign SEXT_arbiter_1_1_lastSelect_1__q13 = {2{arbiter_1_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_1_lastSelect_2_340_341_BIT_0_34_ETC___d2365 =
	     x__h105232 | y__h105233 ;
  assign SEXT_arbiter_1_1_lastSelect_2__q14 = {2{arbiter_1_1_lastSelect_2}} ;
  assign SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2349 =
	     x__h104856 | y__h104857 ;
  assign SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2380 =
	     SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2349 ||
	     SEXT_arbiter_1_1_lastSelect_1_335_336_BIT_0_33_ETC___d2357 ||
	     SEXT_arbiter_1_1_lastSelect_2_340_341_BIT_0_34_ETC___d2365 ||
	     SEXT_arbiter_1_1_firstHot_344_345_BIT_0_346_AN_ETC___d2373 ;
  assign SEXT_arbiter_1_1_lastSelect__q12 = {2{arbiter_1_1_lastSelect}} ;
  assign SEXT_arbiter_1_firstHot_1_122_123_BIT_0_124_AN_ETC___d2130 =
	     x__h90984 | y__h90985 ;
  assign SEXT_arbiter_1_firstHot_1__q17 = {2{arbiter_1_firstHot_1}} ;
  assign SEXT_arbiter_1_firstHot_537_538_BIT_0_539_AND__ETC___d1566 =
	     x__h65426 | y__h65427 ;
  assign SEXT_arbiter_1_firstHot__q7 = {2{arbiter_1_firstHot}} ;
  assign SEXT_arbiter_1_lastSelect_1_528_529_BIT_0_530__ETC___d1550 =
	     x__h65074 | y__h65075 ;
  assign SEXT_arbiter_1_lastSelect_1__q9 = {2{arbiter_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_lastSelect_2_533_534_BIT_0_535__ETC___d1558 =
	     x__h65250 | y__h65251 ;
  assign SEXT_arbiter_1_lastSelect_2__q10 = {2{arbiter_1_lastSelect_2}} ;
  assign SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_120__ETC___d2126 =
	     x__h90881 | y__h90882 ;
  assign SEXT_arbiter_1_lastSelect_3__q18 = {2{arbiter_1_lastSelect_3}} ;
  assign SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1542 =
	     x__h64874 | y__h64875 ;
  assign SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1573 =
	     SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1542 ||
	     SEXT_arbiter_1_lastSelect_1_528_529_BIT_0_530__ETC___d1550 ||
	     SEXT_arbiter_1_lastSelect_2_533_534_BIT_0_535__ETC___d1558 ||
	     SEXT_arbiter_1_firstHot_537_538_BIT_0_539_AND__ETC___d1566 ;
  assign SEXT_arbiter_1_lastSelect__q8 = {2{arbiter_1_lastSelect}} ;
  assign SEXT_arbiter_firstHot_305_306_BIT_0_307_AND_re_ETC___d1313 =
	     x__h47858 | y__h47859 ;
  assign SEXT_arbiter_firstHot__q15 = {2{arbiter_firstHot}} ;
  assign SEXT_arbiter_lastSelect_301_302_BIT_0_303_AND__ETC___d1309 =
	     x__h47755 | y__h47756 ;
  assign SEXT_arbiter_lastSelect__q16 = {2{arbiter_lastSelect}} ;
  assign SEXT_x06057__q28 = {2{x__h106057}} ;
  assign SEXT_x06094__q29 = {2{x__h106094}} ;
  assign SEXT_x06129__q30 = {2{x__h106129}} ;
  assign SEXT_x1408__q20 = {2{x__h91408}} ;
  assign SEXT_x6075__q24 = {2{x__h66075}} ;
  assign SEXT_x6112__q25 = {2{x__h66112}} ;
  assign SEXT_x6147__q26 = {2{x__h66147}} ;
  assign SEXT_x8282__q22 = {2{x__h48282}} ;
  assign _theResult____h1457 =
	     { IF_rg_initialized_5_THEN_1_ELSE_0___d36, soc_top$mv_status } ;
  assign a_awid__h34648 = { 1'd0, inner_shim_tmp_awff$D_OUT[107:93] } ;
  assign a_awid__h38953 = { 1'd1, soc_top$to_ddr4_awid } ;
  assign fatReq_arid__h78194 = { 1'd0, inner_shim_tmp_arff$D_OUT[107:93] } ;
  assign fatReq_arid__h81518 = { 1'd1, soc_top$to_ddr4_arid } ;
  assign ifcs_1_innerReq_i_notFull__042_AND_ifcs_1_inne_ETC___d1051 =
	     ifcs_1_innerReq$FULL_N && ifcs_1_innerRoute$FULL_N &&
	     (IF_merged_1_flitLeft_08_EQ_0_09_THEN_NOT_soc_t_ETC___d1048 ||
	      soc_top$to_ddr4_awvalid) ;
  assign logdelay__h1213 = { 40'd0, ocl_adapter$v_from_host_0_first[31:8] } ;
  assign ocl_adapter_RDY_v_from_host_0_first_AND_ocl_ad_ETC___d15 =
	     ocl_adapter$RDY_v_from_host_0_first &&
	     ((ocl_adapter$v_from_host_0_first[1:0] == 2'd2) ?
		soc_top$RDY_ma_set_watch_tohost :
		ocl_adapter$v_from_host_0_first[1:0] != 2'd3 ||
		soc_top$RDY_ma_set_watch_tohost) ;
  assign outer_shim_0_tmp_bffD_OUT_BITS_17_TO_2__q2 =
	     outer_shim_0_tmp_bff$D_OUT[17:2] ;
  assign outer_shim_0_tmp_rffD_OUT_BITS_530_TO_515__q1 =
	     outer_shim_0_tmp_rff$D_OUT[530:515] ;
  assign outer_shim_1_tmp_bffD_OUT_BITS_17_TO_2__q4 =
	     outer_shim_1_tmp_bff$D_OUT[17:2] ;
  assign outer_shim_1_tmp_rffD_OUT_BITS_530_TO_515__q3 =
	     outer_shim_1_tmp_rff$D_OUT[530:515] ;
  assign outer_shim_2_tmp_bffD_OUT_BITS_17_TO_2__q6 =
	     outer_shim_2_tmp_bff$D_OUT[17:2] ;
  assign outer_shim_2_tmp_rffD_OUT_BITS_530_TO_515__q5 =
	     outer_shim_2_tmp_rff$D_OUT[530:515] ;
  assign outer_shim_3_tmp_bffD_OUT_BITS_17_TO_2__q32 =
	     outer_shim_3_tmp_bff$D_OUT[17:2] ;
  assign outer_shim_3_tmp_rffD_OUT_BITS_530_TO_515__q31 =
	     outer_shim_3_tmp_rff$D_OUT[530:515] ;
  assign reqWires_1_0_whas__506_AND_reqWires_1_0_wget___ETC___d1520 =
	     CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget ||
	     CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget ||
	     CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget ||
	     CAN_FIRE_RL_craftReq_5 && reqWires_1_3$wget ;
  assign reqWires_1_1_0_whas__313_AND_reqWires_1_1_0_wg_ETC___d2327 =
	     CAN_FIRE_RL_craftReq_8 && reqWires_1_1_0$wget ||
	     CAN_FIRE_RL_craftReq_9 && reqWires_1_1_1_1$wget ||
	     reqWires_1_1_2$whas && reqWires_1_1_2$wget ||
	     CAN_FIRE_RL_craftReq_11 && reqWires_1_1_3$wget ;
  assign soc_top_to_ddr4_ar_araddr__860_MINUS_0x4000000_ETC___d1864 =
	     x__h80599 < 64'h0000000400000000 ;
  assign soc_top_to_ddr4_ar_araddr__860_MINUS_0x8000000_ETC___d1874 =
	     x__h80673 < 64'h0000000400000000 ;
  assign soc_top_to_ddr4_ar_araddr__860_ULT_0x400000000___d1861 =
	     soc_top$to_ddr4_araddr < 64'h0000000400000000 ;
  assign soc_top_to_ddr4_ar_araddr__860_ULT_0x800000000___d1871 =
	     soc_top$to_ddr4_araddr < 64'h0000000800000000 ;
  assign split_0_doPut_whas__24_AND_split_0_doPut_wget__ETC___d831 =
	     CAN_FIRE_RL_sink_selected &&
	     (split_0_doPut$wget[686] ||
	      ssNoSynth_0_aw_buffer_ff$FULL_N &&
	      ssNoSynth_0_w_buffer_ff$FULL_N) ;
  assign split_1_doPut_whas__53_AND_split_1_doPut_wget__ETC___d860 =
	     CAN_FIRE_RL_sink_selected_1 &&
	     (split_1_doPut$wget[686] ||
	      ssNoSynth_1_aw_buffer_ff$FULL_N &&
	      ssNoSynth_1_w_buffer_ff$FULL_N) ;
  assign split_2_doPut_whas__82_AND_split_2_doPut_wget__ETC___d889 =
	     CAN_FIRE_RL_sink_selected_2 &&
	     (split_2_doPut$wget[686] ||
	      ssNoSynth_2_aw_buffer_ff$FULL_N &&
	      ssNoSynth_2_w_buffer_ff$FULL_N) ;
  assign split_3_doPut_whas__11_AND_split_3_doPut_wget__ETC___d918 =
	     CAN_FIRE_RL_sink_selected_3 &&
	     (split_3_doPut$wget[686] ||
	      ssNoSynth_3_aw_buffer_ff$FULL_N &&
	      ssNoSynth_3_w_buffer_ff$FULL_N) ;
  assign state_1_1_115_AND_activeSource_1_0_1_189_190_A_ETC___d2192 =
	     state_1_1 && activeSource_1_0_1 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ((!ifcs_0_1_innerRoute$D_OUT[0] ||
	       !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_ifcs_0_1_innerRoute_first__055_BIT_1_06_ETC___d2086 :
		ifcs_0_1_innerRoute$D_OUT[0]) ;
  assign state_1_1_115_AND_activeSource_1_1_1_236_237_A_ETC___d2239 =
	     state_1_1 && activeSource_1_1_1 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ((!ifcs_1_1_innerRoute$D_OUT[0] ||
	       !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_ifcs_1_1_innerRoute_first__093_BIT_1_09_ETC___d2106 :
		ifcs_1_1_innerRoute$D_OUT[0]) ;
  assign state_1_1_1_328_AND_activeSource_1_1_0_459_460_ETC___d2462 =
	     state_1_1_1 && activeSource_1_1_0 &&
	     ifcs_0_1_routeBack$EMPTY_N &&
	     ((!ifcs_0_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_0_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_0_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_328_AND_activeSource_1_1_1_1_495_4_ETC___d2498 =
	     state_1_1_1 && activeSource_1_1_1_1 &&
	     ifcs_1_1_routeBack$EMPTY_N &&
	     ((!ifcs_1_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_1_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_1_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_328_AND_activeSource_1_1_2_531_532_ETC___d2534 =
	     state_1_1_1 && activeSource_1_1_2 &&
	     ifcs_2_1_routeBack$EMPTY_N &&
	     ((!ifcs_2_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_2_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_2_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_328_AND_activeSource_1_1_3_567_568_ETC___d2570 =
	     state_1_1_1 && activeSource_1_1_3 &&
	     ifcs_3_1_routeBack$EMPTY_N &&
	     ((!ifcs_3_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_3_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_3_1_routeBack$D_OUT[0]) ;
  assign state_1_521_AND_activeSource_1_0_645_646_AND_i_ETC___d1648 =
	     state_1 && activeSource_1_0 && ifcs_0_routeBack$EMPTY_N &&
	     ((!ifcs_0_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_0_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_0_routeBack$D_OUT[0]) ;
  assign state_1_521_AND_activeSource_1_1_678_679_AND_i_ETC___d1681 =
	     state_1 && activeSource_1_1 && ifcs_1_routeBack$EMPTY_N &&
	     ((!ifcs_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_1_routeBack$D_OUT[0]) ;
  assign state_1_521_AND_activeSource_1_2_712_713_AND_i_ETC___d1715 =
	     state_1 && activeSource_1_2 && ifcs_2_routeBack$EMPTY_N &&
	     ((!ifcs_2_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_2_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_2_routeBack$D_OUT[0]) ;
  assign state_1_521_AND_activeSource_1_3_746_747_AND_i_ETC___d1749 =
	     state_1 && activeSource_1_3 && ifcs_3_routeBack$EMPTY_N &&
	     ((!ifcs_3_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_3_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_3_routeBack$D_OUT[0]) ;
  assign state_298_AND_activeSource_0_378_379_AND_ifcs__ETC___d1381 =
	     state && activeSource_0 && ifcs_0_innerRoute$EMPTY_N &&
	     ((!ifcs_0_innerRoute$D_OUT[0] || !isSinkReady_0$wget) ?
		IF_NOT_ifcs_0_innerRoute_first__238_BIT_1_247__ETC___d1269 :
		ifcs_0_innerRoute$D_OUT[0]) ;
  assign state_298_AND_activeSource_1_429_430_AND_ifcs__ETC___d1432 =
	     state && activeSource_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ((!ifcs_1_innerRoute$D_OUT[0] || !isSinkReady_0$wget) ?
		IF_NOT_ifcs_1_innerRoute_first__276_BIT_1_280__ETC___d1289 :
		ifcs_1_innerRoute$D_OUT[0]) ;
  assign status__h1645 =
	     { IF_rg_initialized_5_THEN_1_ELSE_0___d36[23:2],
	       1'd1,
	       IF_rg_initialized_5_THEN_1_ELSE_0___d36[0],
	       soc_top$mv_status } ;
  assign x__h104856 = x__h104858 | y__h104859 ;
  assign x__h104858 =
	     SEXT_arbiter_1_1_lastSelect__q12[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_0$wget) ;
  assign x__h104930 =
	     SEXT_arbiter_1_1_lastSelect_2__q14[0] &
	     (reqWires_1_1_2$whas && reqWires_1_1_2$wget) ;
  assign x__h105056 = x__h105058 | y__h105059 ;
  assign x__h105058 =
	     SEXT_arbiter_1_1_lastSelect_1__q13[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_0$wget) ;
  assign x__h105118 =
	     SEXT_arbiter_1_1_firstHot__q11[0] &
	     (reqWires_1_1_2$whas && reqWires_1_1_2$wget) ;
  assign x__h105232 = x__h105234 | y__h105235 ;
  assign x__h105234 =
	     SEXT_arbiter_1_1_lastSelect_2__q14[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_0$wget) ;
  assign x__h105294 =
	     SEXT_arbiter_1_1_lastSelect__q12[0] &
	     (reqWires_1_1_2$whas && reqWires_1_1_2$wget) ;
  assign x__h105408 = x__h105410 | y__h105411 ;
  assign x__h105410 =
	     SEXT_arbiter_1_1_firstHot__q11[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_0$wget) ;
  assign x__h105470 =
	     SEXT_arbiter_1_1_lastSelect_1__q13[0] &
	     (reqWires_1_1_2$whas && reqWires_1_1_2$wget) ;
  assign x__h105994 = x__h105996 | y__h105997 ;
  assign x__h105996 =
	     SEXT_SEXT_arbiter_1_1_firstHot_344_345_BIT_0_3_ETC__q27[0] &
	     arbiter_1_1_firstHot ;
  assign x__h106057 =
	     !SEXT_arbiter_1_1_firstHot_344_345_BIT_0_346_AN_ETC___d2373 &&
	     SEXT_arbiter_1_1_lastSelect_2_340_341_BIT_0_34_ETC___d2365 ;
  assign x__h106065 = SEXT_x06094__q29[0] & arbiter_1_1_lastSelect_1 ;
  assign x__h106094 =
	     !SEXT_arbiter_1_1_lastSelect_2_340_341_BIT_0_34_ETC___d2365 &&
	     !SEXT_arbiter_1_1_firstHot_344_345_BIT_0_346_AN_ETC___d2373 &&
	     SEXT_arbiter_1_1_lastSelect_1_335_336_BIT_0_33_ETC___d2357 ;
  assign x__h106129 =
	     !SEXT_arbiter_1_1_lastSelect_1_335_336_BIT_0_33_ETC___d2357 &&
	     !SEXT_arbiter_1_1_lastSelect_2_340_341_BIT_0_34_ETC___d2365 &&
	     !SEXT_arbiter_1_1_firstHot_344_345_BIT_0_346_AN_ETC___d2373 &&
	     SEXT_arbiter_1_1_lastSelect_331_332_BIT_0_333__ETC___d2349 ;
  assign x__h106233 = x__h106235 | y__h106236 ;
  assign x__h106235 = SEXT_x06057__q28[0] & arbiter_1_1_firstHot ;
  assign x__h106295 = SEXT_x06129__q30[0] & arbiter_1_1_lastSelect_1 ;
  assign x__h106453 = x__h106455 | y__h106456 ;
  assign x__h106455 = SEXT_x06094__q29[0] & arbiter_1_1_firstHot ;
  assign x__h106515 =
	     SEXT_SEXT_arbiter_1_1_firstHot_344_345_BIT_0_3_ETC__q27[0] &
	     arbiter_1_1_lastSelect_1 ;
  assign x__h106679 = x__h106681 | y__h106682 ;
  assign x__h106681 = SEXT_x06129__q30[0] & arbiter_1_1_firstHot ;
  assign x__h106741 = SEXT_x06057__q28[0] & arbiter_1_1_lastSelect_1 ;
  assign x__h1382 = { ocl_adapter$v_from_host_0_first[31:2], 2'b0 } ;
  assign x__h1641 = rg_ddr4_is_loaded ? status__h1645 : _theResult____h1457 ;
  assign x__h33681 = inner_shim_tmp_awff$D_OUT[92:29] - 64'h0000000400000000 ;
  assign x__h33755 = inner_shim_tmp_awff$D_OUT[92:29] - 64'h0000000800000000 ;
  assign x__h33818 = inner_shim_tmp_awff$D_OUT[92:29] - 64'h0000000C00000000 ;
  assign x__h37363 = soc_top$to_ddr4_awaddr - 64'h0000000400000000 ;
  assign x__h37437 = soc_top$to_ddr4_awaddr - 64'h0000000800000000 ;
  assign x__h37500 = soc_top$to_ddr4_awaddr - 64'h0000000C00000000 ;
  assign x__h47755 =
	     SEXT_arbiter_lastSelect__q16[0] &
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget) ;
  assign x__h47858 =
	     SEXT_arbiter_firstHot__q15[0] &
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget) ;
  assign x__h48223 =
	     SEXT_SEXT_arbiter_firstHot_305_306_BIT_0_307_A_ETC__q21[0] &
	     arbiter_firstHot ;
  assign x__h48282 =
	     !SEXT_arbiter_firstHot_305_306_BIT_0_307_AND_re_ETC___d1313 &&
	     SEXT_arbiter_lastSelect_301_302_BIT_0_303_AND__ETC___d1309 ;
  assign x__h48364 = SEXT_x8282__q22[0] & arbiter_firstHot ;
  assign x__h64874 = x__h64876 | y__h64877 ;
  assign x__h64876 =
	     SEXT_arbiter_1_lastSelect__q8[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h64948 =
	     SEXT_arbiter_1_lastSelect_2__q10[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign x__h65074 = x__h65076 | y__h65077 ;
  assign x__h65076 =
	     SEXT_arbiter_1_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h65136 =
	     SEXT_arbiter_1_firstHot__q7[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign x__h65250 = x__h65252 | y__h65253 ;
  assign x__h65252 =
	     SEXT_arbiter_1_lastSelect_2__q10[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h65312 =
	     SEXT_arbiter_1_lastSelect__q8[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign x__h65426 = x__h65428 | y__h65429 ;
  assign x__h65428 =
	     SEXT_arbiter_1_firstHot__q7[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h65488 =
	     SEXT_arbiter_1_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign x__h66012 = x__h66014 | y__h66015 ;
  assign x__h66014 =
	     SEXT_SEXT_arbiter_1_firstHot_537_538_BIT_0_539_ETC__q23[0] &
	     arbiter_1_firstHot ;
  assign x__h66075 =
	     !SEXT_arbiter_1_firstHot_537_538_BIT_0_539_AND__ETC___d1566 &&
	     SEXT_arbiter_1_lastSelect_2_533_534_BIT_0_535__ETC___d1558 ;
  assign x__h66083 = SEXT_x6112__q25[0] & arbiter_1_lastSelect_1 ;
  assign x__h66112 =
	     !SEXT_arbiter_1_lastSelect_2_533_534_BIT_0_535__ETC___d1558 &&
	     !SEXT_arbiter_1_firstHot_537_538_BIT_0_539_AND__ETC___d1566 &&
	     SEXT_arbiter_1_lastSelect_1_528_529_BIT_0_530__ETC___d1550 ;
  assign x__h66147 =
	     !SEXT_arbiter_1_lastSelect_1_528_529_BIT_0_530__ETC___d1550 &&
	     !SEXT_arbiter_1_lastSelect_2_533_534_BIT_0_535__ETC___d1558 &&
	     !SEXT_arbiter_1_firstHot_537_538_BIT_0_539_AND__ETC___d1566 &&
	     SEXT_arbiter_1_lastSelect_524_525_BIT_0_526_AN_ETC___d1542 ;
  assign x__h66251 = x__h66253 | y__h66254 ;
  assign x__h66253 = SEXT_x6075__q24[0] & arbiter_1_firstHot ;
  assign x__h66313 = SEXT_x6147__q26[0] & arbiter_1_lastSelect_1 ;
  assign x__h66471 = x__h66473 | y__h66474 ;
  assign x__h66473 = SEXT_x6112__q25[0] & arbiter_1_firstHot ;
  assign x__h66533 =
	     SEXT_SEXT_arbiter_1_firstHot_537_538_BIT_0_539_ETC__q23[0] &
	     arbiter_1_lastSelect_1 ;
  assign x__h66697 = x__h66699 | y__h66700 ;
  assign x__h66699 = SEXT_x6147__q26[0] & arbiter_1_firstHot ;
  assign x__h66759 = SEXT_x6075__q24[0] & arbiter_1_lastSelect_1 ;
  assign x__h77260 = inner_shim_tmp_arff$D_OUT[92:29] - 64'h0000000400000000 ;
  assign x__h77334 = inner_shim_tmp_arff$D_OUT[92:29] - 64'h0000000800000000 ;
  assign x__h77397 = inner_shim_tmp_arff$D_OUT[92:29] - 64'h0000000C00000000 ;
  assign x__h80599 = soc_top$to_ddr4_araddr - 64'h0000000400000000 ;
  assign x__h80673 = soc_top$to_ddr4_araddr - 64'h0000000800000000 ;
  assign x__h80736 = soc_top$to_ddr4_araddr - 64'h0000000C00000000 ;
  assign x__h90881 =
	     SEXT_arbiter_1_lastSelect_3__q18[0] &
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_0_1$wget) ;
  assign x__h90984 =
	     SEXT_arbiter_1_firstHot_1__q17[0] &
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_0_1$wget) ;
  assign x__h91349 =
	     SEXT_SEXT_arbiter_1_firstHot_1_122_123_BIT_0_1_ETC__q19[0] &
	     arbiter_1_firstHot_1 ;
  assign x__h91408 =
	     !SEXT_arbiter_1_firstHot_1_122_123_BIT_0_124_AN_ETC___d2130 &&
	     SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_120__ETC___d2126 ;
  assign x__h91490 = SEXT_x1408__q20[0] & arbiter_1_firstHot_1 ;
  assign x_port1__read__h78845 = ifcs_0_1_noRoute_flitCount$port1__read ;
  assign x_port1__read__h82166 = ifcs_1_1_noRoute_flitCount$port1__read ;
  assign y__h104857 = x__h104930 | y__h104931 ;
  assign y__h104859 =
	     SEXT_arbiter_1_1_lastSelect_1__q13[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_1_1$wget) ;
  assign y__h104931 =
	     SEXT_arbiter_1_1_firstHot__q11[0] &
	     (CAN_FIRE_RL_craftReq_11 && reqWires_1_1_3$wget) ;
  assign y__h105057 = x__h105118 | y__h105119 ;
  assign y__h105059 =
	     SEXT_arbiter_1_1_lastSelect_2__q14[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_1_1$wget) ;
  assign y__h105119 =
	     SEXT_arbiter_1_1_lastSelect__q12[0] &
	     (CAN_FIRE_RL_craftReq_11 && reqWires_1_1_3$wget) ;
  assign y__h105233 = x__h105294 | y__h105295 ;
  assign y__h105235 =
	     SEXT_arbiter_1_1_firstHot__q11[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_1_1$wget) ;
  assign y__h105295 =
	     SEXT_arbiter_1_1_lastSelect_1__q13[0] &
	     (CAN_FIRE_RL_craftReq_11 && reqWires_1_1_3$wget) ;
  assign y__h105409 = x__h105470 | y__h105471 ;
  assign y__h105411 =
	     SEXT_arbiter_1_1_lastSelect__q12[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_1_1$wget) ;
  assign y__h105471 =
	     SEXT_arbiter_1_1_lastSelect_2__q14[0] &
	     (CAN_FIRE_RL_craftReq_11 && reqWires_1_1_3$wget) ;
  assign y__h105995 = x__h106065 | y__h106066 ;
  assign y__h105997 = SEXT_x06057__q28[0] & arbiter_1_1_lastSelect_2 ;
  assign y__h106066 = SEXT_x06129__q30[0] & arbiter_1_1_lastSelect ;
  assign y__h106234 = x__h106295 | y__h106296 ;
  assign y__h106236 = SEXT_x06094__q29[0] & arbiter_1_1_lastSelect_2 ;
  assign y__h106296 =
	     SEXT_SEXT_arbiter_1_1_firstHot_344_345_BIT_0_3_ETC__q27[0] &
	     arbiter_1_1_lastSelect ;
  assign y__h106454 = x__h106515 | y__h106516 ;
  assign y__h106456 = SEXT_x06129__q30[0] & arbiter_1_1_lastSelect_2 ;
  assign y__h106516 = SEXT_x06057__q28[0] & arbiter_1_1_lastSelect ;
  assign y__h106680 = x__h106741 | y__h106742 ;
  assign y__h106682 =
	     SEXT_SEXT_arbiter_1_1_firstHot_344_345_BIT_0_3_ETC__q27[0] &
	     arbiter_1_1_lastSelect_2 ;
  assign y__h106742 = SEXT_x06094__q29[0] & arbiter_1_1_lastSelect ;
  assign y__h1642 = { 16'd0, rg_ddr4_ready, 12'd0 } ;
  assign y__h47756 =
	     SEXT_arbiter_firstHot__q15[0] &
	     (CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) ;
  assign y__h47859 =
	     SEXT_arbiter_lastSelect__q16[0] &
	     (CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) ;
  assign y__h48224 = SEXT_x8282__q22[0] & arbiter_lastSelect ;
  assign y__h48365 =
	     SEXT_SEXT_arbiter_firstHot_305_306_BIT_0_307_A_ETC__q21[0] &
	     arbiter_lastSelect ;
  assign y__h64875 = x__h64948 | y__h64949 ;
  assign y__h64877 =
	     SEXT_arbiter_1_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h64949 =
	     SEXT_arbiter_1_firstHot__q7[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_3$wget) ;
  assign y__h65075 = x__h65136 | y__h65137 ;
  assign y__h65077 =
	     SEXT_arbiter_1_lastSelect_2__q10[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h65137 =
	     SEXT_arbiter_1_lastSelect__q8[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_3$wget) ;
  assign y__h65251 = x__h65312 | y__h65313 ;
  assign y__h65253 =
	     SEXT_arbiter_1_firstHot__q7[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h65313 =
	     SEXT_arbiter_1_lastSelect_1__q9[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_3$wget) ;
  assign y__h65427 = x__h65488 | y__h65489 ;
  assign y__h65429 =
	     SEXT_arbiter_1_lastSelect__q8[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h65489 =
	     SEXT_arbiter_1_lastSelect_2__q10[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_3$wget) ;
  assign y__h66013 = x__h66083 | y__h66084 ;
  assign y__h66015 = SEXT_x6075__q24[0] & arbiter_1_lastSelect_2 ;
  assign y__h66084 = SEXT_x6147__q26[0] & arbiter_1_lastSelect ;
  assign y__h66252 = x__h66313 | y__h66314 ;
  assign y__h66254 = SEXT_x6112__q25[0] & arbiter_1_lastSelect_2 ;
  assign y__h66314 =
	     SEXT_SEXT_arbiter_1_firstHot_537_538_BIT_0_539_ETC__q23[0] &
	     arbiter_1_lastSelect ;
  assign y__h66472 = x__h66533 | y__h66534 ;
  assign y__h66474 = SEXT_x6147__q26[0] & arbiter_1_lastSelect_2 ;
  assign y__h66534 = SEXT_x6075__q24[0] & arbiter_1_lastSelect ;
  assign y__h66698 = x__h66759 | y__h66760 ;
  assign y__h66700 =
	     SEXT_SEXT_arbiter_1_firstHot_537_538_BIT_0_539_ETC__q23[0] &
	     arbiter_1_lastSelect_2 ;
  assign y__h66760 = SEXT_x6112__q25[0] & arbiter_1_lastSelect ;
  assign y__h90882 =
	     SEXT_arbiter_1_firstHot_1__q17[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_1$wget) ;
  assign y__h90985 =
	     SEXT_arbiter_1_lastSelect_3__q18[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_1$wget) ;
  assign y__h91350 = SEXT_x1408__q20[0] & arbiter_1_lastSelect_3 ;
  assign y__h91491 =
	     SEXT_SEXT_arbiter_1_firstHot_1_122_123_BIT_0_1_ETC__q19[0] &
	     arbiter_1_lastSelect_3 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_0_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	ifcs_0_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_0_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_1_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	ifcs_1_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_1_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_2_1_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_2_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_3_1_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_3_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_ddr4_is_loaded <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_3_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (activeSource_0$EN)
	  activeSource_0 <= `BSV_ASSIGNMENT_DELAY activeSource_0$D_IN;
	if (activeSource_1$EN)
	  activeSource_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1$D_IN;
	if (activeSource_1_0$EN)
	  activeSource_1_0 <= `BSV_ASSIGNMENT_DELAY activeSource_1_0$D_IN;
	if (activeSource_1_0_1$EN)
	  activeSource_1_0_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_0_1$D_IN;
	if (activeSource_1_1$EN)
	  activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1$D_IN;
	if (activeSource_1_1_0$EN)
	  activeSource_1_1_0 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_0$D_IN;
	if (activeSource_1_1_1$EN)
	  activeSource_1_1_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_1$D_IN;
	if (activeSource_1_1_1_1$EN)
	  activeSource_1_1_1_1 <= `BSV_ASSIGNMENT_DELAY
	      activeSource_1_1_1_1$D_IN;
	if (activeSource_1_1_2$EN)
	  activeSource_1_1_2 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_2$D_IN;
	if (activeSource_1_1_3$EN)
	  activeSource_1_1_3 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_3$D_IN;
	if (activeSource_1_2$EN)
	  activeSource_1_2 <= `BSV_ASSIGNMENT_DELAY activeSource_1_2$D_IN;
	if (activeSource_1_3$EN)
	  activeSource_1_3 <= `BSV_ASSIGNMENT_DELAY activeSource_1_3$D_IN;
	if (arbiter_1_1_firstHot$EN)
	  arbiter_1_1_firstHot <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_firstHot$D_IN;
	if (arbiter_1_1_lastSelect$EN)
	  arbiter_1_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect$D_IN;
	if (arbiter_1_1_lastSelect_1$EN)
	  arbiter_1_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect_1$D_IN;
	if (arbiter_1_1_lastSelect_2$EN)
	  arbiter_1_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect_2$D_IN;
	if (arbiter_1_firstHot$EN)
	  arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_1_firstHot$D_IN;
	if (arbiter_1_firstHot_1$EN)
	  arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_firstHot_1$D_IN;
	if (arbiter_1_lastSelect$EN)
	  arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect$D_IN;
	if (arbiter_1_lastSelect_1$EN)
	  arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_1$D_IN;
	if (arbiter_1_lastSelect_2$EN)
	  arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_2$D_IN;
	if (arbiter_1_lastSelect_3$EN)
	  arbiter_1_lastSelect_3 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_3$D_IN;
	if (arbiter_firstHot$EN)
	  arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_firstHot$D_IN;
	if (arbiter_lastSelect$EN)
	  arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY arbiter_lastSelect$D_IN;
	if (ifcs_0_1_noRoute_currentReq$EN)
	  ifcs_0_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_1_noRoute_currentReq$D_IN;
	if (ifcs_0_1_noRoute_flitCount$EN)
	  ifcs_0_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_1_noRoute_flitCount$D_IN;
	if (ifcs_0_1_state$EN)
	  ifcs_0_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_0_1_state$D_IN;
	if (ifcs_0_1_state_1$EN)
	  ifcs_0_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_0_1_state_1$D_IN;
	if (ifcs_0_noRoute_inner_currentReq$EN)
	  ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_noRoute_inner_currentReq$D_IN;
	if (ifcs_0_noRoute_inner_pendingReq$EN)
	  ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_noRoute_inner_pendingReq$D_IN;
	if (ifcs_0_state$EN)
	  ifcs_0_state <= `BSV_ASSIGNMENT_DELAY ifcs_0_state$D_IN;
	if (ifcs_0_state_1$EN)
	  ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_0_state_1$D_IN;
	if (ifcs_1_1_noRoute_currentReq$EN)
	  ifcs_1_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_1_noRoute_currentReq$D_IN;
	if (ifcs_1_1_noRoute_flitCount$EN)
	  ifcs_1_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_1_noRoute_flitCount$D_IN;
	if (ifcs_1_1_state$EN)
	  ifcs_1_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_1_1_state$D_IN;
	if (ifcs_1_1_state_1$EN)
	  ifcs_1_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_1_1_state_1$D_IN;
	if (ifcs_1_noRoute_inner_currentReq$EN)
	  ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_noRoute_inner_currentReq$D_IN;
	if (ifcs_1_noRoute_inner_pendingReq$EN)
	  ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_noRoute_inner_pendingReq$D_IN;
	if (ifcs_1_state$EN)
	  ifcs_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_1_state$D_IN;
	if (ifcs_1_state_1$EN)
	  ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_1_state_1$D_IN;
	if (ifcs_2_1_state$EN)
	  ifcs_2_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_2_1_state$D_IN;
	if (ifcs_2_state$EN)
	  ifcs_2_state <= `BSV_ASSIGNMENT_DELAY ifcs_2_state$D_IN;
	if (ifcs_3_1_state$EN)
	  ifcs_3_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_3_1_state$D_IN;
	if (ifcs_3_state$EN)
	  ifcs_3_state <= `BSV_ASSIGNMENT_DELAY ifcs_3_state$D_IN;
	if (merged_0_flitLeft$EN)
	  merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_0_flitLeft$D_IN;
	if (merged_1_flitLeft$EN)
	  merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_1_flitLeft$D_IN;
	if (rg_ddr4_is_loaded$EN)
	  rg_ddr4_is_loaded <= `BSV_ASSIGNMENT_DELAY rg_ddr4_is_loaded$D_IN;
	if (rg_ddr4_ready$EN)
	  rg_ddr4_ready <= `BSV_ASSIGNMENT_DELAY rg_ddr4_ready$D_IN;
	if (rg_initialized$EN)
	  rg_initialized <= `BSV_ASSIGNMENT_DELAY rg_initialized$D_IN;
	if (split_0_flitLeft$EN)
	  split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY split_0_flitLeft$D_IN;
	if (split_1_flitLeft$EN)
	  split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY split_1_flitLeft$D_IN;
	if (split_2_flitLeft$EN)
	  split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY split_2_flitLeft$D_IN;
	if (split_3_flitLeft$EN)
	  split_3_flitLeft <= `BSV_ASSIGNMENT_DELAY split_3_flitLeft$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
	if (state_1$EN) state_1 <= `BSV_ASSIGNMENT_DELAY state_1$D_IN;
	if (state_1_1$EN) state_1_1 <= `BSV_ASSIGNMENT_DELAY state_1_1$D_IN;
	if (state_1_1_1$EN)
	  state_1_1_1 <= `BSV_ASSIGNMENT_DELAY state_1_1_1$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    activeSource_0 = 1'h0;
    activeSource_1 = 1'h0;
    activeSource_1_0 = 1'h0;
    activeSource_1_0_1 = 1'h0;
    activeSource_1_1 = 1'h0;
    activeSource_1_1_0 = 1'h0;
    activeSource_1_1_1 = 1'h0;
    activeSource_1_1_1_1 = 1'h0;
    activeSource_1_1_2 = 1'h0;
    activeSource_1_1_3 = 1'h0;
    activeSource_1_2 = 1'h0;
    activeSource_1_3 = 1'h0;
    arbiter_1_1_firstHot = 1'h0;
    arbiter_1_1_lastSelect = 1'h0;
    arbiter_1_1_lastSelect_1 = 1'h0;
    arbiter_1_1_lastSelect_2 = 1'h0;
    arbiter_1_firstHot = 1'h0;
    arbiter_1_firstHot_1 = 1'h0;
    arbiter_1_lastSelect = 1'h0;
    arbiter_1_lastSelect_1 = 1'h0;
    arbiter_1_lastSelect_2 = 1'h0;
    arbiter_1_lastSelect_3 = 1'h0;
    arbiter_firstHot = 1'h0;
    arbiter_lastSelect = 1'h0;
    ifcs_0_1_noRoute_currentReq = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_0_1_noRoute_flitCount = 9'h0AA;
    ifcs_0_1_state = 2'h2;
    ifcs_0_1_state_1 = 1'h0;
    ifcs_0_noRoute_inner_currentReq = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_0_noRoute_inner_pendingReq = 1'h0;
    ifcs_0_state = 2'h2;
    ifcs_0_state_1 = 1'h0;
    ifcs_1_1_noRoute_currentReq = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_1_1_noRoute_flitCount = 9'h0AA;
    ifcs_1_1_state = 2'h2;
    ifcs_1_1_state_1 = 1'h0;
    ifcs_1_noRoute_inner_currentReq = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_1_noRoute_inner_pendingReq = 1'h0;
    ifcs_1_state = 2'h2;
    ifcs_1_state_1 = 1'h0;
    ifcs_2_1_state = 1'h0;
    ifcs_2_state = 1'h0;
    ifcs_3_1_state = 1'h0;
    ifcs_3_state = 1'h0;
    merged_0_flitLeft = 8'hAA;
    merged_1_flitLeft = 8'hAA;
    rg_ddr4_is_loaded = 1'h0;
    rg_ddr4_ready = 4'hA;
    rg_initialized = 1'h0;
    split_0_flitLeft = 8'hAA;
    split_1_flitLeft = 8'hAA;
    split_2_flitLeft = 8'hAA;
    split_3_flitLeft = 8'hAA;
    state = 1'h0;
    state_1 = 1'h0;
    state_1_1 = 1'h0;
    state_1_1_1 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_to_hw_control &&
	  ocl_adapter$v_from_host_0_first[1:0] == 2'd1 &&
	  ocl_adapter$v_from_host_0_first[5:2] != 4'd0)
	$display("    Control: verbosity %0d, logdelay %0h",
		 ocl_adapter$v_from_host_0_first[5:2],
		 logdelay__h1213);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_301_302_BIT_0_303_AND__ETC___d1309 &&
	  !SEXT_arbiter_firstHot_305_306_BIT_0_307_AND_re_ETC___d1313)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_301_302_BIT_0_303_AND__ETC___d1309 &&
	  !SEXT_arbiter_firstHot_305_306_BIT_0_307_AND_re_ETC___d1313)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	begin
	  v__h49852 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h49852,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_0_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_0_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_0_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_0_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_0_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_0_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_0_innerRoute$D_OUT[3])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_0_innerRoute$D_OUT[3])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	begin
	  v__h49152 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h49152,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	begin
	  v__h54714 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h54714,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_1_innerRoute$D_OUT[3])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_1_innerRoute$D_OUT[3])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	begin
	  v__h54014 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h54014,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && WILL_FIRE_RL_burst)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected] and\n  [RL_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected || WILL_FIRE_RL_burst) &&
	  (WILL_FIRE_RL_source_selected_1 || WILL_FIRE_RL_burst_1))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected, RL_burst]\n  and [RL_source_selected_1, RL_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && WILL_FIRE_RL_burst_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_1] and\n  [RL_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected && WILL_FIRE_RL_sink_selected_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected] and\n  [RL_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected || WILL_FIRE_RL_sink_selected_1) &&
	  WILL_FIRE_RL_sink_selected_2)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected,\n  RL_sink_selected_1] and [RL_sink_selected_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected || WILL_FIRE_RL_sink_selected_1 ||
	   WILL_FIRE_RL_sink_selected_2) &&
	  WILL_FIRE_RL_sink_selected_3)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected,\n  RL_sink_selected_1, RL_sink_selected_2] and [RL_sink_selected_3] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_120__ETC___d2126 &&
	  !SEXT_arbiter_1_firstHot_1_122_123_BIT_0_124_AN_ETC___d2130)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_3_118_119_BIT_0_120__ETC___d2126 &&
	  !SEXT_arbiter_1_firstHot_1_122_123_BIT_0_124_AN_ETC___d2130)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	begin
	  v__h92972 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h92972,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[3])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[3])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_0_1_innerRoute$EMPTY_N)
	begin
	  v__h92272 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_0_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h92272,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_0_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	begin
	  v__h96468 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h96468,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[3])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[3])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 3'd1 : 3'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[3] ? 3'd1 : 3'd0) !=
	  3'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_1_1_innerRoute$EMPTY_N)
	begin
	  v__h95768 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_1_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h95768,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_1_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && WILL_FIRE_RL_burst_6)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_6] and\n  [RL_burst_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_6 || WILL_FIRE_RL_burst_6) &&
	  (WILL_FIRE_RL_source_selected_7 || WILL_FIRE_RL_burst_7))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_6,\n  RL_burst_6] and [RL_source_selected_7, RL_burst_7] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && WILL_FIRE_RL_burst_7)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7] and\n  [RL_burst_7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_6 && WILL_FIRE_RL_sink_selected_7)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_6] and\n  [RL_sink_selected_7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected_6 || WILL_FIRE_RL_sink_selected_7) &&
	  WILL_FIRE_RL_sink_selected_8)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_6,\n  RL_sink_selected_7] and [RL_sink_selected_8] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected_6 || WILL_FIRE_RL_sink_selected_7 ||
	   WILL_FIRE_RL_sink_selected_8) &&
	  WILL_FIRE_RL_sink_selected_9)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_6,\n  RL_sink_selected_7, RL_sink_selected_8] and [RL_sink_selected_9] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initialize)
	begin
	  v__h118001 = $stime;
	  #0;
	end
    v__h117995 = v__h118001 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_initialize)
	$display("%0d: AWS_BSV_Top.rl_initialize: DDRs ready, DDRs loaded; start DUT",
		 v__h117995);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inner_shim_shim_ug_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inner_shim_shim_ug_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inner_shim_shim_ug_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inner_shim_shim_ug_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inner_shim_shim_ug_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_0_shim_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_1_shim_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_2_shim_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_3_shim_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[686])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[686])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[686] &&
	  split_0_doPut$wget[0] &&
	  split_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[686] &&
	  split_0_doPut$wget[0] &&
	  split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[686] &&
	  !split_0_doPut$wget[0] &&
	  split_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[686] &&
	  !split_0_doPut$wget[0] &&
	  split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[686])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[686])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[686])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[686])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[686] &&
	  split_1_doPut$wget[0] &&
	  split_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[686] &&
	  split_1_doPut$wget[0] &&
	  split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[686] &&
	  !split_1_doPut$wget[0] &&
	  split_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[686] &&
	  !split_1_doPut$wget[0] &&
	  split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[686])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[686])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[686])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[686])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[686] &&
	  split_2_doPut$wget[0] &&
	  split_2_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[686] &&
	  split_2_doPut$wget[0] &&
	  split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[686] &&
	  !split_2_doPut$wget[0] &&
	  split_2_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[686] &&
	  !split_2_doPut$wget[0] &&
	  split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[686])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[686])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_3_putFirst && split_3_doPut$wget[686])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_3_putFirst && split_3_doPut$wget[686])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_3_putOther && split_3_doPut$wget[686] &&
	  split_3_doPut$wget[0] &&
	  split_3_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_3_putOther && split_3_doPut$wget[686] &&
	  split_3_doPut$wget[0] &&
	  split_3_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_3_putOther && split_3_doPut$wget[686] &&
	  !split_3_doPut$wget[0] &&
	  split_3_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_3_putOther && split_3_doPut$wget[686] &&
	  !split_3_doPut$wget[0] &&
	  split_3_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_3_putOther && !split_3_doPut$wget[686])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_3_putOther && !split_3_doPut$wget[686])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_nonRoutableFlit] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_nonRoutableFlit] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  NOT_SEXT_arbiter_1_lastSelect_524_525_BIT_0_52_ETC___d1570)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  NOT_SEXT_arbiter_1_lastSelect_524_525_BIT_0_52_ETC___d1570)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h68334 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h68334,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	begin
	  v__h67953 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h67953,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h70431 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h70431,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	begin
	  v__h70050 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h70050,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && WILL_FIRE_RL_burst_3)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_3] and\n  [RL_burst_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h72330 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h72330,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	begin
	  v__h71949 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h71949,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && WILL_FIRE_RL_burst_4)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_4] and\n  [RL_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h74229 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h74229,
	       $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_3_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_3_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_3_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_3_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_3_routeBack$EMPTY_N &&
	  (ifcs_3_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_3_routeBack$EMPTY_N)
	begin
	  v__h73848 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_3_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h73848,
		 $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_3_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && WILL_FIRE_RL_burst_2)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2] and\n  [RL_burst_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2) &&
	  (WILL_FIRE_RL_source_selected_3 || WILL_FIRE_RL_burst_3))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2] and [RL_source_selected_3, RL_burst_3] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2 ||
	   WILL_FIRE_RL_source_selected_3 ||
	   WILL_FIRE_RL_burst_3) &&
	  (WILL_FIRE_RL_source_selected_4 || WILL_FIRE_RL_burst_4))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2, RL_source_selected_3, RL_burst_3] and [RL_source_selected_4,\n  RL_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2 ||
	   WILL_FIRE_RL_source_selected_3 ||
	   WILL_FIRE_RL_burst_3 ||
	   WILL_FIRE_RL_source_selected_4 ||
	   WILL_FIRE_RL_burst_4) &&
	  (WILL_FIRE_RL_source_selected_5 || WILL_FIRE_RL_burst_5))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2, RL_source_selected_3, RL_burst_3, RL_source_selected_4,\n  RL_burst_4] and [RL_source_selected_5, RL_burst_5] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && WILL_FIRE_RL_burst_5)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_5] and\n  [RL_burst_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_4 && WILL_FIRE_RL_sink_selected_5)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_4] and\n  [RL_sink_selected_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inner_shim_shim_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit && WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit && WILL_FIRE_RL_ifcs_0_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits && WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_drainFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_drainFlits] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inner_shim_shim_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && inner_shim_tmp_wff$D_OUT[0] &&
	  merged_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && inner_shim_tmp_wff$D_OUT[0] &&
	  merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !inner_shim_tmp_wff$D_OUT[0] &&
	  merged_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !inner_shim_tmp_wff$D_OUT[0] &&
	  merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inner_shim_shim_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit && WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit && WILL_FIRE_RL_ifcs_1_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits && WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_drainFlits] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && soc_top$to_ddr4_wlast &&
	  merged_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && soc_top$to_ddr4_wlast &&
	  merged_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && !soc_top$to_ddr4_wlast &&
	  merged_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && !soc_top$to_ddr4_wlast &&
	  merged_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_0_followFlits_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit_1] and\n  [RL_ifcs_0_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_1_followFlits_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit_1] and\n  [RL_ifcs_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_2_firstFlit && WILL_FIRE_RL_ifcs_2_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_2_firstFlit] and\n  [RL_ifcs_2_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_3_firstFlit && WILL_FIRE_RL_ifcs_3_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_3_firstFlit] and\n  [RL_ifcs_3_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_nonRoutableFlit] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_nonRoutableFlit] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  NOT_SEXT_arbiter_1_1_lastSelect_331_332_BIT_0__ETC___d2377)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  NOT_SEXT_arbiter_1_1_lastSelect_331_332_BIT_0__ETC___d2377)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h108320 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h108320,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_0_1_routeBack$EMPTY_N)
	begin
	  v__h107939 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_0_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h107939,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_0_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h110949 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h110949,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_1_1_routeBack$EMPTY_N)
	begin
	  v__h110568 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_1_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h110568,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_1_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && WILL_FIRE_RL_burst_9)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_9] and\n  [RL_burst_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h113366 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h113366,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && !ifcs_2_1_routeBack$EMPTY_N)
	begin
	  v__h112985 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && !ifcs_2_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h112985,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && !ifcs_2_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_10 && WILL_FIRE_RL_burst_10)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_10] and\n  [RL_burst_10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h115783 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the requested path ",
	       v__h115783,
	       $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_3_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_3_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_3_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_3_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && ifcs_3_1_routeBack$EMPTY_N &&
	  (ifcs_3_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_3_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && !ifcs_3_1_routeBack$EMPTY_N)
	begin
	  v__h115402 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && !ifcs_3_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there was no requested path.",
		 v__h115402,
		 $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && !ifcs_3_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && WILL_FIRE_RL_burst_8)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_8] and\n  [RL_burst_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_8 || WILL_FIRE_RL_burst_8) &&
	  (WILL_FIRE_RL_source_selected_9 || WILL_FIRE_RL_burst_9))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_8,\n  RL_burst_8] and [RL_source_selected_9, RL_burst_9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_8 || WILL_FIRE_RL_burst_8 ||
	   WILL_FIRE_RL_source_selected_9 ||
	   WILL_FIRE_RL_burst_9) &&
	  (WILL_FIRE_RL_source_selected_10 || WILL_FIRE_RL_burst_10))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_8,\n  RL_burst_8, RL_source_selected_9, RL_burst_9] and [RL_source_selected_10,\n  RL_burst_10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_8 || WILL_FIRE_RL_burst_8 ||
	   WILL_FIRE_RL_source_selected_9 ||
	   WILL_FIRE_RL_burst_9 ||
	   WILL_FIRE_RL_source_selected_10 ||
	   WILL_FIRE_RL_burst_10) &&
	  (WILL_FIRE_RL_source_selected_11 || WILL_FIRE_RL_burst_11))
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_8,\n  RL_burst_8, RL_source_selected_9, RL_burst_9, RL_source_selected_10,\n  RL_burst_10] and [RL_source_selected_11, RL_burst_11] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_11 && WILL_FIRE_RL_burst_11)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_11] and\n  [RL_burst_11] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_10 && WILL_FIRE_RL_sink_selected_11)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 154, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_10] and\n  [RL_sink_selected_11] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inner_shim_shim_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit && WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_drainFlits] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inner_shim_shim_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit && WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 215, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 216, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_drainFlits] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_0_1_followFlits_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit_1] and\n  [RL_ifcs_0_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_0_shim_ug_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_1_1_followFlits_1)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 283, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit_1] and\n  [RL_ifcs_1_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_1_shim_ug_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_2_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_2_1_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_2_1_firstFlit] and\n  [RL_ifcs_2_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_2_shim_ug_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_3_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_3_1_followFlits)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/Interconnect.bsv\", line 282, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_3_1_firstFlit] and\n  [RL_ifcs_3_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_outer_shim_3_shim_ug_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkAWS_BSV_Top

