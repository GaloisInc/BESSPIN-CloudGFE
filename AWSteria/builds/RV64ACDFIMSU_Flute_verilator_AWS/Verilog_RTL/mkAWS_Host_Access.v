//
// Generated by Bluespec Compiler, version 2017.07.A (build e1df8052c, 2017-07-21)
//
//
//
//
// Ports:
// Name                         I/O  size props
// slave_awready                  O     1 reg
// slave_wready                   O     1 reg
// slave_bvalid                   O     1 reg
// slave_bid                      O     4 reg
// slave_bresp                    O     2 reg
// slave_arready                  O     1 reg
// slave_rvalid                   O     1 reg
// slave_rid                      O     4 reg
// slave_rdata                    O    64 reg
// slave_rresp                    O     2 reg
// slave_rlast                    O     1 reg
// to_aws_host_get                O    32 reg
// RDY_to_aws_host_get            O     1 reg
// RDY_from_aws_host_put          O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_awvalid                  I     1
// slave_awid                     I     4 reg
// slave_awaddr                   I    64 reg
// slave_awlen                    I     8 reg
// slave_awsize                   I     3 reg
// slave_awburst                  I     2 reg
// slave_awlock                   I     1 reg
// slave_awcache                  I     4 reg
// slave_awprot                   I     3 reg
// slave_awqos                    I     4 reg
// slave_awregion                 I     4 reg
// slave_wvalid                   I     1
// slave_wdata                    I    64 reg
// slave_wstrb                    I     8 reg
// slave_wlast                    I     1 reg
// slave_bready                   I     1
// slave_arvalid                  I     1
// slave_arid                     I     4 reg
// slave_araddr                   I    64 reg
// slave_arlen                    I     8 reg
// slave_arsize                   I     3 reg
// slave_arburst                  I     2 reg
// slave_arlock                   I     1 reg
// slave_arcache                  I     4 reg
// slave_arprot                   I     3 reg
// slave_arqos                    I     4 reg
// slave_arregion                 I     4 reg
// slave_rready                   I     1
// from_aws_host_put              I    32 reg
// EN_from_aws_host_put           I     1
// EN_to_aws_host_get             I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAWS_Host_Access(CLK,
			 RST_N,

			 slave_awvalid,
			 slave_awid,
			 slave_awaddr,
			 slave_awlen,
			 slave_awsize,
			 slave_awburst,
			 slave_awlock,
			 slave_awcache,
			 slave_awprot,
			 slave_awqos,
			 slave_awregion,

			 slave_awready,

			 slave_wvalid,
			 slave_wdata,
			 slave_wstrb,
			 slave_wlast,

			 slave_wready,

			 slave_bvalid,

			 slave_bid,

			 slave_bresp,

			 slave_bready,

			 slave_arvalid,
			 slave_arid,
			 slave_araddr,
			 slave_arlen,
			 slave_arsize,
			 slave_arburst,
			 slave_arlock,
			 slave_arcache,
			 slave_arprot,
			 slave_arqos,
			 slave_arregion,

			 slave_arready,

			 slave_rvalid,

			 slave_rid,

			 slave_rdata,

			 slave_rresp,

			 slave_rlast,

			 slave_rready,

			 EN_to_aws_host_get,
			 to_aws_host_get,
			 RDY_to_aws_host_get,

			 from_aws_host_put,
			 EN_from_aws_host_put,
			 RDY_from_aws_host_put);
  input  CLK;
  input  RST_N;

  // action method slave_m_awvalid
  input  slave_awvalid;
  input  [3 : 0] slave_awid;
  input  [63 : 0] slave_awaddr;
  input  [7 : 0] slave_awlen;
  input  [2 : 0] slave_awsize;
  input  [1 : 0] slave_awburst;
  input  slave_awlock;
  input  [3 : 0] slave_awcache;
  input  [2 : 0] slave_awprot;
  input  [3 : 0] slave_awqos;
  input  [3 : 0] slave_awregion;

  // value method slave_m_awready
  output slave_awready;

  // action method slave_m_wvalid
  input  slave_wvalid;
  input  [63 : 0] slave_wdata;
  input  [7 : 0] slave_wstrb;
  input  slave_wlast;

  // value method slave_m_wready
  output slave_wready;

  // value method slave_m_bvalid
  output slave_bvalid;

  // value method slave_m_bid
  output [3 : 0] slave_bid;

  // value method slave_m_bresp
  output [1 : 0] slave_bresp;

  // value method slave_m_buser

  // action method slave_m_bready
  input  slave_bready;

  // action method slave_m_arvalid
  input  slave_arvalid;
  input  [3 : 0] slave_arid;
  input  [63 : 0] slave_araddr;
  input  [7 : 0] slave_arlen;
  input  [2 : 0] slave_arsize;
  input  [1 : 0] slave_arburst;
  input  slave_arlock;
  input  [3 : 0] slave_arcache;
  input  [2 : 0] slave_arprot;
  input  [3 : 0] slave_arqos;
  input  [3 : 0] slave_arregion;

  // value method slave_m_arready
  output slave_arready;

  // value method slave_m_rvalid
  output slave_rvalid;

  // value method slave_m_rid
  output [3 : 0] slave_rid;

  // value method slave_m_rdata
  output [63 : 0] slave_rdata;

  // value method slave_m_rresp
  output [1 : 0] slave_rresp;

  // value method slave_m_rlast
  output slave_rlast;

  // value method slave_m_ruser

  // action method slave_m_rready
  input  slave_rready;

  // actionvalue method to_aws_host_get
  input  EN_to_aws_host_get;
  output [31 : 0] to_aws_host_get;
  output RDY_to_aws_host_get;

  // action method from_aws_host_put
  input  [31 : 0] from_aws_host_put;
  input  EN_from_aws_host_put;
  output RDY_from_aws_host_put;

  // signals for module outputs
  wire [63 : 0] slave_rdata;
  wire [31 : 0] to_aws_host_get;
  wire [3 : 0] slave_bid, slave_rid;
  wire [1 : 0] slave_bresp, slave_rresp;
  wire RDY_from_aws_host_put,
       RDY_to_aws_host_get,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rlast,
       slave_rvalid,
       slave_wready;

  // register rg_received
  reg [7 : 0] rg_received;
  wire [7 : 0] rg_received$D_IN;
  wire rg_received$EN;

  // register rg_rsp_buf
  reg [127 : 0] rg_rsp_buf;
  wire [127 : 0] rg_rsp_buf$D_IN;
  wire rg_rsp_buf$EN;

  // register rg_sent
  reg [7 : 0] rg_sent;
  wire [7 : 0] rg_sent$D_IN;
  wire rg_sent$EN;

  // ports of submodule f_from_aws_host
  wire [31 : 0] f_from_aws_host$D_IN, f_from_aws_host$D_OUT;
  wire f_from_aws_host$CLR,
       f_from_aws_host$DEQ,
       f_from_aws_host$EMPTY_N,
       f_from_aws_host$ENQ,
       f_from_aws_host$FULL_N;

  // ports of submodule f_req_bufs_to_aws_host
  reg [135 : 0] f_req_bufs_to_aws_host$D_IN;
  wire [135 : 0] f_req_bufs_to_aws_host$D_OUT;
  wire f_req_bufs_to_aws_host$CLR,
       f_req_bufs_to_aws_host$DEQ,
       f_req_bufs_to_aws_host$EMPTY_N,
       f_req_bufs_to_aws_host$ENQ,
       f_req_bufs_to_aws_host$FULL_N;

  // ports of submodule f_rsp_bufs_from_aws_host
  wire [127 : 0] f_rsp_bufs_from_aws_host$D_IN,
		 f_rsp_bufs_from_aws_host$D_OUT;
  wire f_rsp_bufs_from_aws_host$CLR,
       f_rsp_bufs_from_aws_host$DEQ,
       f_rsp_bufs_from_aws_host$EMPTY_N,
       f_rsp_bufs_from_aws_host$ENQ,
       f_rsp_bufs_from_aws_host$FULL_N;

  // ports of submodule f_to_aws_host
  reg [31 : 0] f_to_aws_host$D_IN;
  wire [31 : 0] f_to_aws_host$D_OUT;
  wire f_to_aws_host$CLR,
       f_to_aws_host$DEQ,
       f_to_aws_host$EMPTY_N,
       f_to_aws_host$ENQ,
       f_to_aws_host$FULL_N;

  // ports of submodule slave_xactor_f_rd_addr
  wire [96 : 0] slave_xactor_f_rd_addr$D_IN, slave_xactor_f_rd_addr$D_OUT;
  wire slave_xactor_f_rd_addr$CLR,
       slave_xactor_f_rd_addr$DEQ,
       slave_xactor_f_rd_addr$EMPTY_N,
       slave_xactor_f_rd_addr$ENQ,
       slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_f_rd_data
  wire [70 : 0] slave_xactor_f_rd_data$D_IN, slave_xactor_f_rd_data$D_OUT;
  wire slave_xactor_f_rd_data$CLR,
       slave_xactor_f_rd_data$DEQ,
       slave_xactor_f_rd_data$EMPTY_N,
       slave_xactor_f_rd_data$ENQ,
       slave_xactor_f_rd_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_addr
  wire [96 : 0] slave_xactor_f_wr_addr$D_IN, slave_xactor_f_wr_addr$D_OUT;
  wire slave_xactor_f_wr_addr$CLR,
       slave_xactor_f_wr_addr$DEQ,
       slave_xactor_f_wr_addr$EMPTY_N,
       slave_xactor_f_wr_addr$ENQ,
       slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_f_wr_data
  wire [72 : 0] slave_xactor_f_wr_data$D_IN, slave_xactor_f_wr_data$D_OUT;
  wire slave_xactor_f_wr_data$CLR,
       slave_xactor_f_wr_data$DEQ,
       slave_xactor_f_wr_data$EMPTY_N,
       slave_xactor_f_wr_data$ENQ,
       slave_xactor_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_resp
  wire [5 : 0] slave_xactor_f_wr_resp$D_IN, slave_xactor_f_wr_resp$D_OUT;
  wire slave_xactor_f_wr_resp$CLR,
       slave_xactor_f_wr_resp$DEQ,
       slave_xactor_f_wr_resp$EMPTY_N,
       slave_xactor_f_wr_resp$ENQ,
       slave_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_distribute_from_aws_host,
       CAN_FIRE_RL_rl_forward_rd_addr,
       CAN_FIRE_RL_rl_forward_to_aws_host,
       CAN_FIRE_RL_rl_forward_wr_addr,
       CAN_FIRE_RL_rl_forward_wr_data,
       CAN_FIRE_RL_rl_unserialize_from_aws_host,
       CAN_FIRE_from_aws_host_put,
       CAN_FIRE_slave_m_arvalid,
       CAN_FIRE_slave_m_awvalid,
       CAN_FIRE_slave_m_bready,
       CAN_FIRE_slave_m_rready,
       CAN_FIRE_slave_m_wvalid,
       CAN_FIRE_to_aws_host_get,
       WILL_FIRE_RL_rl_distribute_from_aws_host,
       WILL_FIRE_RL_rl_forward_rd_addr,
       WILL_FIRE_RL_rl_forward_to_aws_host,
       WILL_FIRE_RL_rl_forward_wr_addr,
       WILL_FIRE_RL_rl_forward_wr_data,
       WILL_FIRE_RL_rl_unserialize_from_aws_host,
       WILL_FIRE_from_aws_host_put,
       WILL_FIRE_slave_m_arvalid,
       WILL_FIRE_slave_m_awvalid,
       WILL_FIRE_slave_m_bready,
       WILL_FIRE_slave_m_rready,
       WILL_FIRE_slave_m_wvalid,
       WILL_FIRE_to_aws_host_get;

  // inputs to muxes for submodule ports
  wire [135 : 0] MUX_f_req_bufs_to_aws_host$enq_1__VAL_1,
		 MUX_f_req_bufs_to_aws_host$enq_1__VAL_2,
		 MUX_f_req_bufs_to_aws_host$enq_1__VAL_3;

  // remaining internal signals
  wire [7 : 0] x__h3229, x__h3970;
  wire rg_sent_6_PLUS_1_8_EQ_f_req_bufs_to_aws_host_f_ETC___d30;

  // action method slave_m_awvalid
  assign CAN_FIRE_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_awvalid = 1'd1 ;

  // value method slave_m_awready
  assign slave_awready = slave_xactor_f_wr_addr$FULL_N ;

  // action method slave_m_wvalid
  assign CAN_FIRE_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_wvalid = 1'd1 ;

  // value method slave_m_wready
  assign slave_wready = slave_xactor_f_wr_data$FULL_N ;

  // value method slave_m_bvalid
  assign slave_bvalid = slave_xactor_f_wr_resp$EMPTY_N ;

  // value method slave_m_bid
  assign slave_bid = slave_xactor_f_wr_resp$D_OUT[5:2] ;

  // value method slave_m_bresp
  assign slave_bresp = slave_xactor_f_wr_resp$D_OUT[1:0] ;

  // action method slave_m_bready
  assign CAN_FIRE_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_slave_m_bready = 1'd1 ;

  // action method slave_m_arvalid
  assign CAN_FIRE_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_arvalid = 1'd1 ;

  // value method slave_m_arready
  assign slave_arready = slave_xactor_f_rd_addr$FULL_N ;

  // value method slave_m_rvalid
  assign slave_rvalid = slave_xactor_f_rd_data$EMPTY_N ;

  // value method slave_m_rid
  assign slave_rid = slave_xactor_f_rd_data$D_OUT[70:67] ;

  // value method slave_m_rdata
  assign slave_rdata = slave_xactor_f_rd_data$D_OUT[66:3] ;

  // value method slave_m_rresp
  assign slave_rresp = slave_xactor_f_rd_data$D_OUT[2:1] ;

  // value method slave_m_rlast
  assign slave_rlast = slave_xactor_f_rd_data$D_OUT[0] ;

  // action method slave_m_rready
  assign CAN_FIRE_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_slave_m_rready = 1'd1 ;

  // actionvalue method to_aws_host_get
  assign to_aws_host_get = f_to_aws_host$D_OUT ;
  assign RDY_to_aws_host_get = f_to_aws_host$EMPTY_N ;
  assign CAN_FIRE_to_aws_host_get = f_to_aws_host$EMPTY_N ;
  assign WILL_FIRE_to_aws_host_get = EN_to_aws_host_get ;

  // action method from_aws_host_put
  assign RDY_from_aws_host_put = f_from_aws_host$FULL_N ;
  assign CAN_FIRE_from_aws_host_put = f_from_aws_host$FULL_N ;
  assign WILL_FIRE_from_aws_host_put = EN_from_aws_host_put ;

  // submodule f_from_aws_host
  FIFO2 #(.width(32'd32), .guarded(32'd1)) f_from_aws_host(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(f_from_aws_host$D_IN),
							   .ENQ(f_from_aws_host$ENQ),
							   .DEQ(f_from_aws_host$DEQ),
							   .CLR(f_from_aws_host$CLR),
							   .D_OUT(f_from_aws_host$D_OUT),
							   .FULL_N(f_from_aws_host$FULL_N),
							   .EMPTY_N(f_from_aws_host$EMPTY_N));

  // submodule f_req_bufs_to_aws_host
  FIFO2 #(.width(32'd136),
	  .guarded(32'd1)) f_req_bufs_to_aws_host(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(f_req_bufs_to_aws_host$D_IN),
						  .ENQ(f_req_bufs_to_aws_host$ENQ),
						  .DEQ(f_req_bufs_to_aws_host$DEQ),
						  .CLR(f_req_bufs_to_aws_host$CLR),
						  .D_OUT(f_req_bufs_to_aws_host$D_OUT),
						  .FULL_N(f_req_bufs_to_aws_host$FULL_N),
						  .EMPTY_N(f_req_bufs_to_aws_host$EMPTY_N));

  // submodule f_rsp_bufs_from_aws_host
  FIFO2 #(.width(32'd128),
	  .guarded(32'd1)) f_rsp_bufs_from_aws_host(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(f_rsp_bufs_from_aws_host$D_IN),
						    .ENQ(f_rsp_bufs_from_aws_host$ENQ),
						    .DEQ(f_rsp_bufs_from_aws_host$DEQ),
						    .CLR(f_rsp_bufs_from_aws_host$CLR),
						    .D_OUT(f_rsp_bufs_from_aws_host$D_OUT),
						    .FULL_N(f_rsp_bufs_from_aws_host$FULL_N),
						    .EMPTY_N(f_rsp_bufs_from_aws_host$EMPTY_N));

  // submodule f_to_aws_host
  FIFO2 #(.width(32'd32), .guarded(32'd1)) f_to_aws_host(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_to_aws_host$D_IN),
							 .ENQ(f_to_aws_host$ENQ),
							 .DEQ(f_to_aws_host$DEQ),
							 .CLR(f_to_aws_host$CLR),
							 .D_OUT(f_to_aws_host$D_OUT),
							 .FULL_N(f_to_aws_host$FULL_N),
							 .EMPTY_N(f_to_aws_host$EMPTY_N));

  // submodule slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd97), .guarded(32'd1)) slave_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_addr$D_IN),
								  .ENQ(slave_xactor_f_rd_addr$ENQ),
								  .DEQ(slave_xactor_f_rd_addr$DEQ),
								  .CLR(slave_xactor_f_rd_addr$CLR),
								  .D_OUT(slave_xactor_f_rd_addr$D_OUT),
								  .FULL_N(slave_xactor_f_rd_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_addr$EMPTY_N));

  // submodule slave_xactor_f_rd_data
  FIFO2 #(.width(32'd71), .guarded(32'd1)) slave_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_data$D_IN),
								  .ENQ(slave_xactor_f_rd_data$ENQ),
								  .DEQ(slave_xactor_f_rd_data$DEQ),
								  .CLR(slave_xactor_f_rd_data$CLR),
								  .D_OUT(slave_xactor_f_rd_data$D_OUT),
								  .FULL_N(slave_xactor_f_rd_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_data$EMPTY_N));

  // submodule slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd97), .guarded(32'd1)) slave_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_addr$D_IN),
								  .ENQ(slave_xactor_f_wr_addr$ENQ),
								  .DEQ(slave_xactor_f_wr_addr$DEQ),
								  .CLR(slave_xactor_f_wr_addr$CLR),
								  .D_OUT(slave_xactor_f_wr_addr$D_OUT),
								  .FULL_N(slave_xactor_f_wr_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_addr$EMPTY_N));

  // submodule slave_xactor_f_wr_data
  FIFO2 #(.width(32'd73), .guarded(32'd1)) slave_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_data$D_IN),
								  .ENQ(slave_xactor_f_wr_data$ENQ),
								  .DEQ(slave_xactor_f_wr_data$DEQ),
								  .CLR(slave_xactor_f_wr_data$CLR),
								  .D_OUT(slave_xactor_f_wr_data$D_OUT),
								  .FULL_N(slave_xactor_f_wr_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_data$EMPTY_N));

  // submodule slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) slave_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_resp$D_IN),
								 .ENQ(slave_xactor_f_wr_resp$ENQ),
								 .DEQ(slave_xactor_f_wr_resp$DEQ),
								 .CLR(slave_xactor_f_wr_resp$CLR),
								 .D_OUT(slave_xactor_f_wr_resp$D_OUT),
								 .FULL_N(slave_xactor_f_wr_resp$FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_forward_rd_addr
  assign CAN_FIRE_RL_rl_forward_rd_addr =
	     slave_xactor_f_rd_addr$EMPTY_N && f_req_bufs_to_aws_host$FULL_N ;
  assign WILL_FIRE_RL_rl_forward_rd_addr = CAN_FIRE_RL_rl_forward_rd_addr ;

  // rule RL_rl_forward_wr_addr
  assign CAN_FIRE_RL_rl_forward_wr_addr =
	     f_req_bufs_to_aws_host$FULL_N && slave_xactor_f_wr_addr$EMPTY_N ;
  assign WILL_FIRE_RL_rl_forward_wr_addr =
	     CAN_FIRE_RL_rl_forward_wr_addr &&
	     !WILL_FIRE_RL_rl_forward_rd_addr ;

  // rule RL_rl_forward_wr_data
  assign CAN_FIRE_RL_rl_forward_wr_data =
	     f_req_bufs_to_aws_host$FULL_N && slave_xactor_f_wr_data$EMPTY_N ;
  assign WILL_FIRE_RL_rl_forward_wr_data =
	     CAN_FIRE_RL_rl_forward_wr_data &&
	     !WILL_FIRE_RL_rl_forward_wr_addr &&
	     !WILL_FIRE_RL_rl_forward_rd_addr ;

  // rule RL_rl_forward_to_aws_host
  assign CAN_FIRE_RL_rl_forward_to_aws_host =
	     f_to_aws_host$FULL_N && f_req_bufs_to_aws_host$EMPTY_N ;
  assign WILL_FIRE_RL_rl_forward_to_aws_host =
	     CAN_FIRE_RL_rl_forward_to_aws_host ;

  // rule RL_rl_unserialize_from_aws_host
  assign CAN_FIRE_RL_rl_unserialize_from_aws_host =
	     f_from_aws_host$EMPTY_N &&
	     (rg_received != 8'd3 || f_rsp_bufs_from_aws_host$FULL_N) ;
  assign WILL_FIRE_RL_rl_unserialize_from_aws_host =
	     CAN_FIRE_RL_rl_unserialize_from_aws_host ;

  // rule RL_rl_distribute_from_aws_host
  assign CAN_FIRE_RL_rl_distribute_from_aws_host =
	     f_rsp_bufs_from_aws_host$EMPTY_N &&
	     (f_rsp_bufs_from_aws_host$D_OUT[71] ?
		slave_xactor_f_rd_data$FULL_N :
		slave_xactor_f_wr_resp$FULL_N) ;
  assign WILL_FIRE_RL_rl_distribute_from_aws_host =
	     CAN_FIRE_RL_rl_distribute_from_aws_host ;

  // inputs to muxes for submodule ports
  assign MUX_f_req_bufs_to_aws_host$enq_1__VAL_1 =
	     { 39'h0200000002, slave_xactor_f_rd_addr$D_OUT } ;
  assign MUX_f_req_bufs_to_aws_host$enq_1__VAL_2 =
	     { 39'h0200000000, slave_xactor_f_wr_addr$D_OUT } ;
  assign MUX_f_req_bufs_to_aws_host$enq_1__VAL_3 =
	     { 63'h02000000012AAAAA, slave_xactor_f_wr_data$D_OUT } ;

  // register rg_received
  assign rg_received$D_IN = (rg_received == 8'd3) ? 8'd0 : x__h3970 ;
  assign rg_received$EN = CAN_FIRE_RL_rl_unserialize_from_aws_host ;

  // register rg_rsp_buf
  assign rg_rsp_buf$D_IN =
	     { (rg_received == 8'd3) ?
		 f_from_aws_host$D_OUT :
		 rg_rsp_buf[127:96],
	       (rg_received == 8'd2) ?
		 f_from_aws_host$D_OUT :
		 rg_rsp_buf[95:64],
	       (rg_received == 8'd1) ?
		 f_from_aws_host$D_OUT :
		 rg_rsp_buf[63:32],
	       (rg_received == 8'd0) ?
		 f_from_aws_host$D_OUT :
		 rg_rsp_buf[31:0] } ;
  assign rg_rsp_buf$EN = CAN_FIRE_RL_rl_unserialize_from_aws_host ;

  // register rg_sent
  assign rg_sent$D_IN =
	     rg_sent_6_PLUS_1_8_EQ_f_req_bufs_to_aws_host_f_ETC___d30 ?
	       8'd0 :
	       x__h3229 ;
  assign rg_sent$EN = CAN_FIRE_RL_rl_forward_to_aws_host ;

  // submodule f_from_aws_host
  assign f_from_aws_host$D_IN = from_aws_host_put ;
  assign f_from_aws_host$ENQ = EN_from_aws_host_put ;
  assign f_from_aws_host$DEQ = CAN_FIRE_RL_rl_unserialize_from_aws_host ;
  assign f_from_aws_host$CLR = 1'b0 ;

  // submodule f_req_bufs_to_aws_host
  always@(WILL_FIRE_RL_rl_forward_rd_addr or
	  MUX_f_req_bufs_to_aws_host$enq_1__VAL_1 or
	  WILL_FIRE_RL_rl_forward_wr_addr or
	  MUX_f_req_bufs_to_aws_host$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_forward_wr_data or
	  MUX_f_req_bufs_to_aws_host$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_forward_rd_addr:
	  f_req_bufs_to_aws_host$D_IN =
	      MUX_f_req_bufs_to_aws_host$enq_1__VAL_1;
      WILL_FIRE_RL_rl_forward_wr_addr:
	  f_req_bufs_to_aws_host$D_IN =
	      MUX_f_req_bufs_to_aws_host$enq_1__VAL_2;
      WILL_FIRE_RL_rl_forward_wr_data:
	  f_req_bufs_to_aws_host$D_IN =
	      MUX_f_req_bufs_to_aws_host$enq_1__VAL_3;
      default: f_req_bufs_to_aws_host$D_IN =
		   136'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_req_bufs_to_aws_host$ENQ =
	     WILL_FIRE_RL_rl_forward_rd_addr ||
	     WILL_FIRE_RL_rl_forward_wr_addr ||
	     WILL_FIRE_RL_rl_forward_wr_data ;
  assign f_req_bufs_to_aws_host$DEQ =
	     WILL_FIRE_RL_rl_forward_to_aws_host &&
	     rg_sent_6_PLUS_1_8_EQ_f_req_bufs_to_aws_host_f_ETC___d30 ;
  assign f_req_bufs_to_aws_host$CLR = 1'b0 ;

  // submodule f_rsp_bufs_from_aws_host
  assign f_rsp_bufs_from_aws_host$D_IN = rg_rsp_buf ;
  assign f_rsp_bufs_from_aws_host$ENQ =
	     WILL_FIRE_RL_rl_unserialize_from_aws_host &&
	     rg_received == 8'd3 ;
  assign f_rsp_bufs_from_aws_host$DEQ =
	     CAN_FIRE_RL_rl_distribute_from_aws_host ;
  assign f_rsp_bufs_from_aws_host$CLR = 1'b0 ;

  // submodule f_to_aws_host
  always@(rg_sent or f_req_bufs_to_aws_host$D_OUT)
  begin
    case (rg_sent)
      8'd0: f_to_aws_host$D_IN = f_req_bufs_to_aws_host$D_OUT[31:0];
      8'd1: f_to_aws_host$D_IN = f_req_bufs_to_aws_host$D_OUT[63:32];
      8'd2: f_to_aws_host$D_IN = f_req_bufs_to_aws_host$D_OUT[95:64];
      8'd3: f_to_aws_host$D_IN = f_req_bufs_to_aws_host$D_OUT[127:96];
      default: f_to_aws_host$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_to_aws_host$ENQ = CAN_FIRE_RL_rl_forward_to_aws_host ;
  assign f_to_aws_host$DEQ = EN_to_aws_host_get ;
  assign f_to_aws_host$CLR = 1'b0 ;

  // submodule slave_xactor_f_rd_addr
  assign slave_xactor_f_rd_addr$D_IN =
	     { slave_arid,
	       slave_araddr,
	       slave_arlen,
	       slave_arsize,
	       slave_arburst,
	       slave_arlock,
	       slave_arcache,
	       slave_arprot,
	       slave_arqos,
	       slave_arregion } ;
  assign slave_xactor_f_rd_addr$ENQ =
	     slave_arvalid && slave_xactor_f_rd_addr$FULL_N ;
  assign slave_xactor_f_rd_addr$DEQ =
	     slave_xactor_f_rd_addr$EMPTY_N && f_req_bufs_to_aws_host$FULL_N ;
  assign slave_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule slave_xactor_f_rd_data
  assign slave_xactor_f_rd_data$D_IN = f_rsp_bufs_from_aws_host$D_OUT[70:0] ;
  assign slave_xactor_f_rd_data$ENQ =
	     WILL_FIRE_RL_rl_distribute_from_aws_host &&
	     f_rsp_bufs_from_aws_host$D_OUT[71] ;
  assign slave_xactor_f_rd_data$DEQ =
	     slave_rready && slave_xactor_f_rd_data$EMPTY_N ;
  assign slave_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_addr
  assign slave_xactor_f_wr_addr$D_IN =
	     { slave_awid,
	       slave_awaddr,
	       slave_awlen,
	       slave_awsize,
	       slave_awburst,
	       slave_awlock,
	       slave_awcache,
	       slave_awprot,
	       slave_awqos,
	       slave_awregion } ;
  assign slave_xactor_f_wr_addr$ENQ =
	     slave_awvalid && slave_xactor_f_wr_addr$FULL_N ;
  assign slave_xactor_f_wr_addr$DEQ =
	     CAN_FIRE_RL_rl_forward_wr_addr &&
	     !WILL_FIRE_RL_rl_forward_rd_addr ;
  assign slave_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_data
  assign slave_xactor_f_wr_data$D_IN =
	     { slave_wdata, slave_wstrb, slave_wlast } ;
  assign slave_xactor_f_wr_data$ENQ =
	     slave_wvalid && slave_xactor_f_wr_data$FULL_N ;
  assign slave_xactor_f_wr_data$DEQ =
	     CAN_FIRE_RL_rl_forward_wr_data &&
	     !WILL_FIRE_RL_rl_forward_wr_addr &&
	     !WILL_FIRE_RL_rl_forward_rd_addr ;
  assign slave_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_resp
  assign slave_xactor_f_wr_resp$D_IN = f_rsp_bufs_from_aws_host$D_OUT[5:0] ;
  assign slave_xactor_f_wr_resp$ENQ =
	     WILL_FIRE_RL_rl_distribute_from_aws_host &&
	     !f_rsp_bufs_from_aws_host$D_OUT[71] ;
  assign slave_xactor_f_wr_resp$DEQ =
	     slave_bready && slave_xactor_f_wr_resp$EMPTY_N ;
  assign slave_xactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign rg_sent_6_PLUS_1_8_EQ_f_req_bufs_to_aws_host_f_ETC___d30 =
	     x__h3229 == f_req_bufs_to_aws_host$D_OUT[135:128] ;
  assign x__h3229 = rg_sent + 8'd1 ;
  assign x__h3970 = rg_received + 8'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_received <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_sent <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (rg_received$EN)
	  rg_received <= `BSV_ASSIGNMENT_DELAY rg_received$D_IN;
	if (rg_sent$EN) rg_sent <= `BSV_ASSIGNMENT_DELAY rg_sent$D_IN;
      end
    if (rg_rsp_buf$EN) rg_rsp_buf <= `BSV_ASSIGNMENT_DELAY rg_rsp_buf$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_received = 8'hAA;
    rg_rsp_buf = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_sent = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkAWS_Host_Access

