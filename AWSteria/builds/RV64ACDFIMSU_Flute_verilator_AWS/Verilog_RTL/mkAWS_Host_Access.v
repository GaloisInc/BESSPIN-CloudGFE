//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// slave_awready                  O     1
// slave_wready                   O     1
// slave_bid                      O     7
// slave_bresp                    O     2
// slave_bvalid                   O     1
// slave_arready                  O     1
// slave_rid                      O     7
// slave_rdata                    O    64
// slave_rresp                    O     2
// slave_rlast                    O     1
// slave_ruser                    O     1
// slave_rvalid                   O     1
// to_aws_host_get                O    32 reg
// RDY_to_aws_host_get            O     1 reg
// RDY_from_aws_host_put          O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_awid                     I     7
// slave_awaddr                   I    64
// slave_awlen                    I     8
// slave_awsize                   I     3
// slave_awburst                  I     2
// slave_awlock                   I     1
// slave_awcache                  I     4
// slave_awprot                   I     3
// slave_awqos                    I     4
// slave_awregion                 I     4
// slave_wdata                    I    64
// slave_wstrb                    I     8
// slave_wlast                    I     1
// slave_wuser                    I     1
// slave_bready                   I     1
// slave_arid                     I     7
// slave_araddr                   I    64
// slave_arlen                    I     8
// slave_arsize                   I     3
// slave_arburst                  I     2
// slave_arlock                   I     1
// slave_arcache                  I     4
// slave_arprot                   I     3
// slave_arqos                    I     4
// slave_arregion                 I     4
// slave_rready                   I     1
// from_aws_host_put              I    32 reg
// slave_awvalid                  I     1
// slave_wvalid                   I     1
// slave_arvalid                  I     1
// EN_from_aws_host_put           I     1
// EN_to_aws_host_get             I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAWS_Host_Access(CLK,
			 RST_N,

			 slave_awid,
			 slave_awaddr,
			 slave_awlen,
			 slave_awsize,
			 slave_awburst,
			 slave_awlock,
			 slave_awcache,
			 slave_awprot,
			 slave_awqos,
			 slave_awregion,
			 slave_awvalid,

			 slave_awready,

			 slave_wdata,
			 slave_wstrb,
			 slave_wlast,
			 slave_wuser,
			 slave_wvalid,

			 slave_wready,

			 slave_bid,

			 slave_bresp,

			 slave_bvalid,

			 slave_bready,

			 slave_arid,
			 slave_araddr,
			 slave_arlen,
			 slave_arsize,
			 slave_arburst,
			 slave_arlock,
			 slave_arcache,
			 slave_arprot,
			 slave_arqos,
			 slave_arregion,
			 slave_arvalid,

			 slave_arready,

			 slave_rid,

			 slave_rdata,

			 slave_rresp,

			 slave_rlast,

			 slave_ruser,

			 slave_rvalid,

			 slave_rready,

			 EN_to_aws_host_get,
			 to_aws_host_get,
			 RDY_to_aws_host_get,

			 from_aws_host_put,
			 EN_from_aws_host_put,
			 RDY_from_aws_host_put);
  input  CLK;
  input  RST_N;

  // action method slave_aw_awflit
  input  [6 : 0] slave_awid;
  input  [63 : 0] slave_awaddr;
  input  [7 : 0] slave_awlen;
  input  [2 : 0] slave_awsize;
  input  [1 : 0] slave_awburst;
  input  slave_awlock;
  input  [3 : 0] slave_awcache;
  input  [2 : 0] slave_awprot;
  input  [3 : 0] slave_awqos;
  input  [3 : 0] slave_awregion;
  input  slave_awvalid;

  // value method slave_aw_awready
  output slave_awready;

  // action method slave_w_wflit
  input  [63 : 0] slave_wdata;
  input  [7 : 0] slave_wstrb;
  input  slave_wlast;
  input  slave_wuser;
  input  slave_wvalid;

  // value method slave_w_wready
  output slave_wready;

  // value method slave_b_bid
  output [6 : 0] slave_bid;

  // value method slave_b_bresp
  output [1 : 0] slave_bresp;

  // value method slave_b_buser

  // value method slave_b_bvalid
  output slave_bvalid;

  // action method slave_b_bready
  input  slave_bready;

  // action method slave_ar_arflit
  input  [6 : 0] slave_arid;
  input  [63 : 0] slave_araddr;
  input  [7 : 0] slave_arlen;
  input  [2 : 0] slave_arsize;
  input  [1 : 0] slave_arburst;
  input  slave_arlock;
  input  [3 : 0] slave_arcache;
  input  [2 : 0] slave_arprot;
  input  [3 : 0] slave_arqos;
  input  [3 : 0] slave_arregion;
  input  slave_arvalid;

  // value method slave_ar_arready
  output slave_arready;

  // value method slave_r_rid
  output [6 : 0] slave_rid;

  // value method slave_r_rdata
  output [63 : 0] slave_rdata;

  // value method slave_r_rresp
  output [1 : 0] slave_rresp;

  // value method slave_r_rlast
  output slave_rlast;

  // value method slave_r_ruser
  output slave_ruser;

  // value method slave_r_rvalid
  output slave_rvalid;

  // action method slave_r_rready
  input  slave_rready;

  // actionvalue method to_aws_host_get
  input  EN_to_aws_host_get;
  output [31 : 0] to_aws_host_get;
  output RDY_to_aws_host_get;

  // action method from_aws_host_put
  input  [31 : 0] from_aws_host_put;
  input  EN_from_aws_host_put;
  output RDY_from_aws_host_put;

  // signals for module outputs
  wire [63 : 0] slave_rdata;
  wire [31 : 0] to_aws_host_get;
  wire [6 : 0] slave_bid, slave_rid;
  wire [1 : 0] slave_bresp, slave_rresp;
  wire RDY_from_aws_host_put,
       RDY_to_aws_host_get,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rlast,
       slave_ruser,
       slave_rvalid,
       slave_wready;

  // inlined wires
  wire [100 : 0] slave_xactor_shim_arff_rv$port0__write_1,
		 slave_xactor_shim_arff_rv$port1__read,
		 slave_xactor_shim_arff_rv$port2__read,
		 slave_xactor_shim_arff_rv$port3__read,
		 slave_xactor_shim_awff_rv$port0__write_1,
		 slave_xactor_shim_awff_rv$port1__read,
		 slave_xactor_shim_awff_rv$port2__read,
		 slave_xactor_shim_awff_rv$port3__read;
  wire [99 : 0] slave_xactor_ug_slave_u_ar_putWire$wget,
		slave_xactor_ug_slave_u_aw_putWire$wget;
  wire [75 : 0] slave_xactor_shim_rff_rv$port0__write_1,
		slave_xactor_shim_rff_rv$port1__read,
		slave_xactor_shim_rff_rv$port2__read,
		slave_xactor_shim_rff_rv$port3__read;
  wire [74 : 0] slave_xactor_shim_wff_rv$port0__write_1,
		slave_xactor_shim_wff_rv$port1__read,
		slave_xactor_shim_wff_rv$port2__read,
		slave_xactor_shim_wff_rv$port3__read;
  wire [73 : 0] slave_xactor_ug_slave_u_w_putWire$wget;
  wire [9 : 0] slave_xactor_shim_bff_rv$port0__write_1,
	       slave_xactor_shim_bff_rv$port1__read,
	       slave_xactor_shim_bff_rv$port2__read,
	       slave_xactor_shim_bff_rv$port3__read;
  wire slave_xactor_shim_arff_rv$EN_port1__write,
       slave_xactor_shim_awff_rv$EN_port1__write,
       slave_xactor_shim_bff_rv$EN_port0__write,
       slave_xactor_shim_rff_rv$EN_port0__write,
       slave_xactor_shim_wff_rv$EN_port1__write,
       slave_xactor_ug_slave_u_ar_putWire$whas,
       slave_xactor_ug_slave_u_aw_putWire$whas,
       slave_xactor_ug_slave_u_b_dropWire$whas,
       slave_xactor_ug_slave_u_r_dropWire$whas,
       slave_xactor_ug_slave_u_w_putWire$whas;

  // register rg_received
  reg [7 : 0] rg_received;
  wire [7 : 0] rg_received$D_IN;
  wire rg_received$EN;

  // register rg_rsp_buf
  reg [127 : 0] rg_rsp_buf;
  wire [127 : 0] rg_rsp_buf$D_IN;
  wire rg_rsp_buf$EN;

  // register rg_sent
  reg [7 : 0] rg_sent;
  wire [7 : 0] rg_sent$D_IN;
  wire rg_sent$EN;

  // register slave_xactor_clearing
  reg slave_xactor_clearing;
  wire slave_xactor_clearing$D_IN, slave_xactor_clearing$EN;

  // register slave_xactor_shim_arff_rv
  reg [100 : 0] slave_xactor_shim_arff_rv;
  wire [100 : 0] slave_xactor_shim_arff_rv$D_IN;
  wire slave_xactor_shim_arff_rv$EN;

  // register slave_xactor_shim_awff_rv
  reg [100 : 0] slave_xactor_shim_awff_rv;
  wire [100 : 0] slave_xactor_shim_awff_rv$D_IN;
  wire slave_xactor_shim_awff_rv$EN;

  // register slave_xactor_shim_bff_rv
  reg [9 : 0] slave_xactor_shim_bff_rv;
  wire [9 : 0] slave_xactor_shim_bff_rv$D_IN;
  wire slave_xactor_shim_bff_rv$EN;

  // register slave_xactor_shim_rff_rv
  reg [75 : 0] slave_xactor_shim_rff_rv;
  wire [75 : 0] slave_xactor_shim_rff_rv$D_IN;
  wire slave_xactor_shim_rff_rv$EN;

  // register slave_xactor_shim_wff_rv
  reg [74 : 0] slave_xactor_shim_wff_rv;
  wire [74 : 0] slave_xactor_shim_wff_rv$D_IN;
  wire slave_xactor_shim_wff_rv$EN;

  // ports of submodule f_from_aws_host
  wire [31 : 0] f_from_aws_host$D_IN, f_from_aws_host$D_OUT;
  wire f_from_aws_host$CLR,
       f_from_aws_host$DEQ,
       f_from_aws_host$EMPTY_N,
       f_from_aws_host$ENQ,
       f_from_aws_host$FULL_N;

  // ports of submodule f_req_bufs_to_aws_host
  reg [135 : 0] f_req_bufs_to_aws_host$D_IN;
  wire [135 : 0] f_req_bufs_to_aws_host$D_OUT;
  wire f_req_bufs_to_aws_host$CLR,
       f_req_bufs_to_aws_host$DEQ,
       f_req_bufs_to_aws_host$EMPTY_N,
       f_req_bufs_to_aws_host$ENQ,
       f_req_bufs_to_aws_host$FULL_N;

  // ports of submodule f_rsp_bufs_from_aws_host
  wire [127 : 0] f_rsp_bufs_from_aws_host$D_IN,
		 f_rsp_bufs_from_aws_host$D_OUT;
  wire f_rsp_bufs_from_aws_host$CLR,
       f_rsp_bufs_from_aws_host$DEQ,
       f_rsp_bufs_from_aws_host$EMPTY_N,
       f_rsp_bufs_from_aws_host$ENQ,
       f_rsp_bufs_from_aws_host$FULL_N;

  // ports of submodule f_to_aws_host
  reg [31 : 0] f_to_aws_host$D_IN;
  wire [31 : 0] f_to_aws_host$D_OUT;
  wire f_to_aws_host$CLR,
       f_to_aws_host$DEQ,
       f_to_aws_host$EMPTY_N,
       f_to_aws_host$ENQ,
       f_to_aws_host$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_distribute_from_aws_host,
       CAN_FIRE_RL_rl_forward_rd_addr,
       CAN_FIRE_RL_rl_forward_to_aws_host,
       CAN_FIRE_RL_rl_forward_wr_addr,
       CAN_FIRE_RL_rl_forward_wr_data,
       CAN_FIRE_RL_rl_unserialize_from_aws_host,
       CAN_FIRE_RL_slave_xactor_do_clear,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut,
       CAN_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut,
       CAN_FIRE_from_aws_host_put,
       CAN_FIRE_slave_ar_arflit,
       CAN_FIRE_slave_aw_awflit,
       CAN_FIRE_slave_b_bready,
       CAN_FIRE_slave_r_rready,
       CAN_FIRE_slave_w_wflit,
       CAN_FIRE_to_aws_host_get,
       WILL_FIRE_RL_rl_distribute_from_aws_host,
       WILL_FIRE_RL_rl_forward_rd_addr,
       WILL_FIRE_RL_rl_forward_to_aws_host,
       WILL_FIRE_RL_rl_forward_wr_addr,
       WILL_FIRE_RL_rl_forward_wr_data,
       WILL_FIRE_RL_rl_unserialize_from_aws_host,
       WILL_FIRE_RL_slave_xactor_do_clear,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_w_doPut,
       WILL_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut,
       WILL_FIRE_from_aws_host_put,
       WILL_FIRE_slave_ar_arflit,
       WILL_FIRE_slave_aw_awflit,
       WILL_FIRE_slave_b_bready,
       WILL_FIRE_slave_r_rready,
       WILL_FIRE_slave_w_wflit,
       WILL_FIRE_to_aws_host_get;

  // inputs to muxes for submodule ports
  wire [135 : 0] MUX_f_req_bufs_to_aws_host$enq_1__VAL_1,
		 MUX_f_req_bufs_to_aws_host$enq_1__VAL_2,
		 MUX_f_req_bufs_to_aws_host$enq_1__VAL_3;

  // remaining internal signals
  wire [74 : 0] slave_xactor_shim_rff_rvport1__read_BITS_74_TO_0__q2;
  wire [8 : 0] slave_xactor_shim_bff_rvport1__read_BITS_8_TO_0__q1;
  wire [7 : 0] x__h5912, x__h6653;
  wire IF_f_rsp_bufs_from_aws_host_first__06_BIT_75_0_ETC___d116,
       rg_sent_5_PLUS_1_7_EQ_f_req_bufs_to_aws_host_f_ETC___d79;

  // action method slave_aw_awflit
  assign CAN_FIRE_slave_aw_awflit = 1'd1 ;
  assign WILL_FIRE_slave_aw_awflit = slave_awvalid ;

  // value method slave_aw_awready
  assign slave_awready = !slave_xactor_shim_awff_rv[100] ;

  // action method slave_w_wflit
  assign CAN_FIRE_slave_w_wflit = 1'd1 ;
  assign WILL_FIRE_slave_w_wflit = slave_wvalid ;

  // value method slave_w_wready
  assign slave_wready = !slave_xactor_shim_wff_rv[74] ;

  // value method slave_b_bid
  assign slave_bid =
	     slave_xactor_shim_bff_rvport1__read_BITS_8_TO_0__q1[8:2] ;

  // value method slave_b_bresp
  assign slave_bresp =
	     slave_xactor_shim_bff_rvport1__read_BITS_8_TO_0__q1[1:0] ;

  // value method slave_b_bvalid
  assign slave_bvalid = CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek ;

  // action method slave_b_bready
  assign CAN_FIRE_slave_b_bready = 1'd1 ;
  assign WILL_FIRE_slave_b_bready = 1'd1 ;

  // action method slave_ar_arflit
  assign CAN_FIRE_slave_ar_arflit = 1'd1 ;
  assign WILL_FIRE_slave_ar_arflit = slave_arvalid ;

  // value method slave_ar_arready
  assign slave_arready = !slave_xactor_shim_arff_rv[100] ;

  // value method slave_r_rid
  assign slave_rid =
	     slave_xactor_shim_rff_rvport1__read_BITS_74_TO_0__q2[74:68] ;

  // value method slave_r_rdata
  assign slave_rdata =
	     slave_xactor_shim_rff_rvport1__read_BITS_74_TO_0__q2[67:4] ;

  // value method slave_r_rresp
  assign slave_rresp =
	     slave_xactor_shim_rff_rvport1__read_BITS_74_TO_0__q2[3:2] ;

  // value method slave_r_rlast
  assign slave_rlast =
	     slave_xactor_shim_rff_rvport1__read_BITS_74_TO_0__q2[1] ;

  // value method slave_r_ruser
  assign slave_ruser =
	     slave_xactor_shim_rff_rvport1__read_BITS_74_TO_0__q2[0] ;

  // value method slave_r_rvalid
  assign slave_rvalid = CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek ;

  // action method slave_r_rready
  assign CAN_FIRE_slave_r_rready = 1'd1 ;
  assign WILL_FIRE_slave_r_rready = 1'd1 ;

  // actionvalue method to_aws_host_get
  assign to_aws_host_get = f_to_aws_host$D_OUT ;
  assign RDY_to_aws_host_get = f_to_aws_host$EMPTY_N ;
  assign CAN_FIRE_to_aws_host_get = f_to_aws_host$EMPTY_N ;
  assign WILL_FIRE_to_aws_host_get = EN_to_aws_host_get ;

  // action method from_aws_host_put
  assign RDY_from_aws_host_put = f_from_aws_host$FULL_N ;
  assign CAN_FIRE_from_aws_host_put = f_from_aws_host$FULL_N ;
  assign WILL_FIRE_from_aws_host_put = EN_from_aws_host_put ;

  // submodule f_from_aws_host
  FIFO2 #(.width(32'd32), .guarded(32'd1)) f_from_aws_host(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(f_from_aws_host$D_IN),
							   .ENQ(f_from_aws_host$ENQ),
							   .DEQ(f_from_aws_host$DEQ),
							   .CLR(f_from_aws_host$CLR),
							   .D_OUT(f_from_aws_host$D_OUT),
							   .FULL_N(f_from_aws_host$FULL_N),
							   .EMPTY_N(f_from_aws_host$EMPTY_N));

  // submodule f_req_bufs_to_aws_host
  FIFO2 #(.width(32'd136),
	  .guarded(32'd1)) f_req_bufs_to_aws_host(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(f_req_bufs_to_aws_host$D_IN),
						  .ENQ(f_req_bufs_to_aws_host$ENQ),
						  .DEQ(f_req_bufs_to_aws_host$DEQ),
						  .CLR(f_req_bufs_to_aws_host$CLR),
						  .D_OUT(f_req_bufs_to_aws_host$D_OUT),
						  .FULL_N(f_req_bufs_to_aws_host$FULL_N),
						  .EMPTY_N(f_req_bufs_to_aws_host$EMPTY_N));

  // submodule f_rsp_bufs_from_aws_host
  FIFO2 #(.width(32'd128),
	  .guarded(32'd1)) f_rsp_bufs_from_aws_host(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(f_rsp_bufs_from_aws_host$D_IN),
						    .ENQ(f_rsp_bufs_from_aws_host$ENQ),
						    .DEQ(f_rsp_bufs_from_aws_host$DEQ),
						    .CLR(f_rsp_bufs_from_aws_host$CLR),
						    .D_OUT(f_rsp_bufs_from_aws_host$D_OUT),
						    .FULL_N(f_rsp_bufs_from_aws_host$FULL_N),
						    .EMPTY_N(f_rsp_bufs_from_aws_host$EMPTY_N));

  // submodule f_to_aws_host
  FIFO2 #(.width(32'd32), .guarded(32'd1)) f_to_aws_host(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_to_aws_host$D_IN),
							 .ENQ(f_to_aws_host$ENQ),
							 .DEQ(f_to_aws_host$DEQ),
							 .CLR(f_to_aws_host$CLR),
							 .D_OUT(f_to_aws_host$D_OUT),
							 .FULL_N(f_to_aws_host$FULL_N),
							 .EMPTY_N(f_to_aws_host$EMPTY_N));

  // rule RL_rl_forward_to_aws_host
  assign CAN_FIRE_RL_rl_forward_to_aws_host =
	     f_to_aws_host$FULL_N && f_req_bufs_to_aws_host$EMPTY_N ;
  assign WILL_FIRE_RL_rl_forward_to_aws_host =
	     CAN_FIRE_RL_rl_forward_to_aws_host ;

  // rule RL_rl_unserialize_from_aws_host
  assign CAN_FIRE_RL_rl_unserialize_from_aws_host =
	     f_from_aws_host$EMPTY_N &&
	     (rg_received != 8'd3 || f_rsp_bufs_from_aws_host$FULL_N) ;
  assign WILL_FIRE_RL_rl_unserialize_from_aws_host =
	     CAN_FIRE_RL_rl_unserialize_from_aws_host ;

  // rule RL_rl_distribute_from_aws_host
  assign CAN_FIRE_RL_rl_distribute_from_aws_host =
	     f_rsp_bufs_from_aws_host$EMPTY_N &&
	     IF_f_rsp_bufs_from_aws_host_first__06_BIT_75_0_ETC___d116 ;
  assign WILL_FIRE_RL_rl_distribute_from_aws_host =
	     CAN_FIRE_RL_rl_distribute_from_aws_host ;

  // rule RL_slave_xactor_ug_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut =
	     slave_xactor_ug_slave_u_aw_putWire$whas &&
	     slave_xactor_shim_awff_rv[100] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut ;

  // rule RL_slave_xactor_ug_slave_u_aw_doPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut =
	     !slave_xactor_shim_awff_rv[100] &&
	     slave_xactor_ug_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut ;

  // rule RL_rl_forward_wr_addr
  assign CAN_FIRE_RL_rl_forward_wr_addr =
	     !slave_xactor_clearing &&
	     slave_xactor_shim_awff_rv$port1__read[100] &&
	     f_req_bufs_to_aws_host$FULL_N ;
  assign WILL_FIRE_RL_rl_forward_wr_addr = CAN_FIRE_RL_rl_forward_wr_addr ;

  // rule RL_slave_xactor_ug_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut =
	     slave_xactor_ug_slave_u_w_putWire$whas &&
	     slave_xactor_shim_wff_rv[74] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut ;

  // rule RL_slave_xactor_ug_slave_u_w_doPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut =
	     !slave_xactor_shim_wff_rv[74] &&
	     slave_xactor_ug_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_w_doPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut ;

  // rule RL_rl_forward_wr_data
  assign CAN_FIRE_RL_rl_forward_wr_data =
	     !slave_xactor_clearing &&
	     slave_xactor_shim_wff_rv$port1__read[74] &&
	     f_req_bufs_to_aws_host$FULL_N ;
  assign WILL_FIRE_RL_rl_forward_wr_data =
	     CAN_FIRE_RL_rl_forward_wr_data &&
	     !WILL_FIRE_RL_rl_forward_wr_addr ;

  // rule RL_slave_xactor_ug_slave_u_b_setPeek
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek =
	     slave_xactor_shim_bff_rv$port1__read[9] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_setPeek ;

  // rule RL_slave_xactor_ug_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop =
	     slave_xactor_ug_slave_u_b_dropWire$whas &&
	     !slave_xactor_shim_bff_rv$port1__read[9] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop ;

  // rule RL_slave_xactor_ug_slave_u_b_doDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop =
	     slave_xactor_shim_bff_rv$port1__read[9] &&
	     slave_xactor_ug_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop ;

  // rule RL_slave_xactor_ug_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut =
	     slave_xactor_ug_slave_u_ar_putWire$whas &&
	     slave_xactor_shim_arff_rv[100] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut ;

  // rule RL_slave_xactor_ug_slave_u_ar_doPut
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut =
	     !slave_xactor_shim_arff_rv[100] &&
	     slave_xactor_ug_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut ;

  // rule RL_rl_forward_rd_addr
  assign CAN_FIRE_RL_rl_forward_rd_addr =
	     !slave_xactor_clearing &&
	     slave_xactor_shim_arff_rv$port1__read[100] &&
	     f_req_bufs_to_aws_host$FULL_N ;
  assign WILL_FIRE_RL_rl_forward_rd_addr =
	     CAN_FIRE_RL_rl_forward_rd_addr &&
	     !WILL_FIRE_RL_rl_forward_wr_data &&
	     !WILL_FIRE_RL_rl_forward_wr_addr ;

  // rule RL_slave_xactor_ug_slave_u_r_setPeek
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek =
	     slave_xactor_shim_rff_rv$port1__read[75] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_setPeek ;

  // rule RL_slave_xactor_ug_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop =
	     slave_xactor_ug_slave_u_r_dropWire$whas &&
	     !slave_xactor_shim_rff_rv$port1__read[75] ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop ;

  // rule RL_slave_xactor_ug_slave_u_r_doDrop
  assign CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop =
	     slave_xactor_shim_rff_rv$port1__read[75] &&
	     slave_xactor_ug_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop ;

  // rule RL_slave_xactor_do_clear
  assign CAN_FIRE_RL_slave_xactor_do_clear = slave_xactor_clearing ;
  assign WILL_FIRE_RL_slave_xactor_do_clear = slave_xactor_clearing ;

  // inputs to muxes for submodule ports
  assign MUX_f_req_bufs_to_aws_host$enq_1__VAL_1 =
	     { 36'd1073741826, slave_xactor_shim_arff_rv$port1__read[99:0] } ;
  assign MUX_f_req_bufs_to_aws_host$enq_1__VAL_2 =
	     { 36'd1073741824, slave_xactor_shim_awff_rv$port1__read[99:0] } ;
  assign MUX_f_req_bufs_to_aws_host$enq_1__VAL_3 =
	     { 61'h00800000034AAAAA, slave_xactor_shim_wff_rv$port1__read } ;

  // inlined wires
  assign slave_xactor_ug_slave_u_aw_putWire$wget =
	     { slave_awid,
	       slave_awaddr,
	       slave_awlen,
	       slave_awsize,
	       slave_awburst,
	       slave_awlock,
	       slave_awcache,
	       slave_awprot,
	       slave_awqos,
	       slave_awregion } ;
  assign slave_xactor_ug_slave_u_aw_putWire$whas =
	     slave_awvalid && !slave_xactor_shim_awff_rv[100] ;
  assign slave_xactor_ug_slave_u_w_putWire$wget =
	     { slave_wdata, slave_wstrb, slave_wlast, slave_wuser } ;
  assign slave_xactor_ug_slave_u_w_putWire$whas =
	     slave_wvalid && !slave_xactor_shim_wff_rv[74] ;
  assign slave_xactor_ug_slave_u_ar_putWire$wget =
	     { slave_arid,
	       slave_araddr,
	       slave_arlen,
	       slave_arsize,
	       slave_arburst,
	       slave_arlock,
	       slave_arcache,
	       slave_arprot,
	       slave_arqos,
	       slave_arregion } ;
  assign slave_xactor_ug_slave_u_ar_putWire$whas =
	     slave_arvalid && !slave_xactor_shim_arff_rv[100] ;
  assign slave_xactor_ug_slave_u_b_dropWire$whas =
	     slave_xactor_shim_bff_rv$port1__read[9] && slave_bready ;
  assign slave_xactor_ug_slave_u_r_dropWire$whas =
	     slave_xactor_shim_rff_rv$port1__read[75] && slave_rready ;
  assign slave_xactor_shim_awff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_ug_slave_u_aw_putWire$wget } ;
  assign slave_xactor_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_aw_doPut ?
	       slave_xactor_shim_awff_rv$port0__write_1 :
	       slave_xactor_shim_awff_rv ;
  assign slave_xactor_shim_awff_rv$EN_port1__write =
	     !slave_xactor_clearing &&
	     slave_xactor_shim_awff_rv$port1__read[100] &&
	     f_req_bufs_to_aws_host$FULL_N ;
  assign slave_xactor_shim_awff_rv$port2__read =
	     slave_xactor_shim_awff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_awff_rv$port1__read ;
  assign slave_xactor_shim_awff_rv$port3__read =
	     slave_xactor_clearing ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_awff_rv$port2__read ;
  assign slave_xactor_shim_wff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_ug_slave_u_w_putWire$wget } ;
  assign slave_xactor_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_w_doPut ?
	       slave_xactor_shim_wff_rv$port0__write_1 :
	       slave_xactor_shim_wff_rv ;
  assign slave_xactor_shim_wff_rv$EN_port1__write =
	     CAN_FIRE_RL_rl_forward_wr_data &&
	     !WILL_FIRE_RL_rl_forward_wr_addr ;
  assign slave_xactor_shim_wff_rv$port2__read =
	     slave_xactor_shim_wff_rv$EN_port1__write ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_wff_rv$port1__read ;
  assign slave_xactor_shim_wff_rv$port3__read =
	     slave_xactor_clearing ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_wff_rv$port2__read ;
  assign slave_xactor_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_distribute_from_aws_host &&
	     !f_rsp_bufs_from_aws_host$D_OUT[75] ;
  assign slave_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, f_rsp_bufs_from_aws_host$D_OUT[8:0] } ;
  assign slave_xactor_shim_bff_rv$port1__read =
	     slave_xactor_shim_bff_rv$EN_port0__write ?
	       slave_xactor_shim_bff_rv$port0__write_1 :
	       slave_xactor_shim_bff_rv ;
  assign slave_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_b_doDrop ?
	       10'd170 :
	       slave_xactor_shim_bff_rv$port1__read ;
  assign slave_xactor_shim_bff_rv$port3__read =
	     slave_xactor_clearing ?
	       10'd170 :
	       slave_xactor_shim_bff_rv$port2__read ;
  assign slave_xactor_shim_arff_rv$port0__write_1 =
	     { 1'd1, slave_xactor_ug_slave_u_ar_putWire$wget } ;
  assign slave_xactor_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_ar_doPut ?
	       slave_xactor_shim_arff_rv$port0__write_1 :
	       slave_xactor_shim_arff_rv ;
  assign slave_xactor_shim_arff_rv$EN_port1__write =
	     CAN_FIRE_RL_rl_forward_rd_addr &&
	     !WILL_FIRE_RL_rl_forward_wr_data &&
	     !WILL_FIRE_RL_rl_forward_wr_addr ;
  assign slave_xactor_shim_arff_rv$port2__read =
	     slave_xactor_shim_arff_rv$EN_port1__write ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_arff_rv$port1__read ;
  assign slave_xactor_shim_arff_rv$port3__read =
	     slave_xactor_clearing ?
	       101'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_arff_rv$port2__read ;
  assign slave_xactor_shim_rff_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_distribute_from_aws_host &&
	     f_rsp_bufs_from_aws_host$D_OUT[75] ;
  assign slave_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, f_rsp_bufs_from_aws_host$D_OUT[74:0] } ;
  assign slave_xactor_shim_rff_rv$port1__read =
	     slave_xactor_shim_rff_rv$EN_port0__write ?
	       slave_xactor_shim_rff_rv$port0__write_1 :
	       slave_xactor_shim_rff_rv ;
  assign slave_xactor_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_slave_xactor_ug_slave_u_r_doDrop ?
	       76'h2AAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_rff_rv$port1__read ;
  assign slave_xactor_shim_rff_rv$port3__read =
	     slave_xactor_clearing ?
	       76'h2AAAAAAAAAAAAAAAAAA :
	       slave_xactor_shim_rff_rv$port2__read ;

  // register rg_received
  assign rg_received$D_IN = (rg_received == 8'd3) ? 8'd0 : x__h6653 ;
  assign rg_received$EN = CAN_FIRE_RL_rl_unserialize_from_aws_host ;

  // register rg_rsp_buf
  assign rg_rsp_buf$D_IN =
	     { (rg_received == 8'd3) ?
		 f_from_aws_host$D_OUT :
		 rg_rsp_buf[127:96],
	       (rg_received == 8'd2) ?
		 f_from_aws_host$D_OUT :
		 rg_rsp_buf[95:64],
	       (rg_received == 8'd1) ?
		 f_from_aws_host$D_OUT :
		 rg_rsp_buf[63:32],
	       (rg_received == 8'd0) ?
		 f_from_aws_host$D_OUT :
		 rg_rsp_buf[31:0] } ;
  assign rg_rsp_buf$EN = CAN_FIRE_RL_rl_unserialize_from_aws_host ;

  // register rg_sent
  assign rg_sent$D_IN =
	     rg_sent_5_PLUS_1_7_EQ_f_req_bufs_to_aws_host_f_ETC___d79 ?
	       8'd0 :
	       x__h5912 ;
  assign rg_sent$EN = CAN_FIRE_RL_rl_forward_to_aws_host ;

  // register slave_xactor_clearing
  assign slave_xactor_clearing$D_IN = 1'd0 ;
  assign slave_xactor_clearing$EN = slave_xactor_clearing ;

  // register slave_xactor_shim_arff_rv
  assign slave_xactor_shim_arff_rv$D_IN =
	     slave_xactor_shim_arff_rv$port3__read ;
  assign slave_xactor_shim_arff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_awff_rv
  assign slave_xactor_shim_awff_rv$D_IN =
	     slave_xactor_shim_awff_rv$port3__read ;
  assign slave_xactor_shim_awff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_bff_rv
  assign slave_xactor_shim_bff_rv$D_IN =
	     slave_xactor_shim_bff_rv$port3__read ;
  assign slave_xactor_shim_bff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_rff_rv
  assign slave_xactor_shim_rff_rv$D_IN =
	     slave_xactor_shim_rff_rv$port3__read ;
  assign slave_xactor_shim_rff_rv$EN = 1'b1 ;

  // register slave_xactor_shim_wff_rv
  assign slave_xactor_shim_wff_rv$D_IN =
	     slave_xactor_shim_wff_rv$port3__read ;
  assign slave_xactor_shim_wff_rv$EN = 1'b1 ;

  // submodule f_from_aws_host
  assign f_from_aws_host$D_IN = from_aws_host_put ;
  assign f_from_aws_host$ENQ = EN_from_aws_host_put ;
  assign f_from_aws_host$DEQ = CAN_FIRE_RL_rl_unserialize_from_aws_host ;
  assign f_from_aws_host$CLR = 1'b0 ;

  // submodule f_req_bufs_to_aws_host
  always@(WILL_FIRE_RL_rl_forward_rd_addr or
	  MUX_f_req_bufs_to_aws_host$enq_1__VAL_1 or
	  WILL_FIRE_RL_rl_forward_wr_addr or
	  MUX_f_req_bufs_to_aws_host$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_forward_wr_data or
	  MUX_f_req_bufs_to_aws_host$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_forward_rd_addr:
	  f_req_bufs_to_aws_host$D_IN =
	      MUX_f_req_bufs_to_aws_host$enq_1__VAL_1;
      WILL_FIRE_RL_rl_forward_wr_addr:
	  f_req_bufs_to_aws_host$D_IN =
	      MUX_f_req_bufs_to_aws_host$enq_1__VAL_2;
      WILL_FIRE_RL_rl_forward_wr_data:
	  f_req_bufs_to_aws_host$D_IN =
	      MUX_f_req_bufs_to_aws_host$enq_1__VAL_3;
      default: f_req_bufs_to_aws_host$D_IN =
		   136'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_req_bufs_to_aws_host$ENQ =
	     WILL_FIRE_RL_rl_forward_rd_addr ||
	     WILL_FIRE_RL_rl_forward_wr_addr ||
	     WILL_FIRE_RL_rl_forward_wr_data ;
  assign f_req_bufs_to_aws_host$DEQ =
	     WILL_FIRE_RL_rl_forward_to_aws_host &&
	     rg_sent_5_PLUS_1_7_EQ_f_req_bufs_to_aws_host_f_ETC___d79 ;
  assign f_req_bufs_to_aws_host$CLR = 1'b0 ;

  // submodule f_rsp_bufs_from_aws_host
  assign f_rsp_bufs_from_aws_host$D_IN = rg_rsp_buf ;
  assign f_rsp_bufs_from_aws_host$ENQ =
	     WILL_FIRE_RL_rl_unserialize_from_aws_host &&
	     rg_received == 8'd3 ;
  assign f_rsp_bufs_from_aws_host$DEQ =
	     CAN_FIRE_RL_rl_distribute_from_aws_host ;
  assign f_rsp_bufs_from_aws_host$CLR = 1'b0 ;

  // submodule f_to_aws_host
  always@(rg_sent or f_req_bufs_to_aws_host$D_OUT)
  begin
    case (rg_sent)
      8'd0: f_to_aws_host$D_IN = f_req_bufs_to_aws_host$D_OUT[31:0];
      8'd1: f_to_aws_host$D_IN = f_req_bufs_to_aws_host$D_OUT[63:32];
      8'd2: f_to_aws_host$D_IN = f_req_bufs_to_aws_host$D_OUT[95:64];
      8'd3: f_to_aws_host$D_IN = f_req_bufs_to_aws_host$D_OUT[127:96];
      default: f_to_aws_host$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_to_aws_host$ENQ = CAN_FIRE_RL_rl_forward_to_aws_host ;
  assign f_to_aws_host$DEQ = EN_to_aws_host_get ;
  assign f_to_aws_host$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_f_rsp_bufs_from_aws_host_first__06_BIT_75_0_ETC___d116 =
	     f_rsp_bufs_from_aws_host$D_OUT[75] ?
	       !slave_xactor_clearing && !slave_xactor_shim_rff_rv[75] :
	       !slave_xactor_clearing && !slave_xactor_shim_bff_rv[9] ;
  assign rg_sent_5_PLUS_1_7_EQ_f_req_bufs_to_aws_host_f_ETC___d79 =
	     x__h5912 == f_req_bufs_to_aws_host$D_OUT[135:128] ;
  assign slave_xactor_shim_bff_rvport1__read_BITS_8_TO_0__q1 =
	     slave_xactor_shim_bff_rv$port1__read[8:0] ;
  assign slave_xactor_shim_rff_rvport1__read_BITS_74_TO_0__q2 =
	     slave_xactor_shim_rff_rv$port1__read[74:0] ;
  assign x__h5912 = rg_sent + 8'd1 ;
  assign x__h6653 = rg_received + 8'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_received <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_sent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	slave_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	slave_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	slave_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 10'd170;
	slave_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    76'h2AAAAAAAAAAAAAAAAAA;
	slave_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (rg_received$EN)
	  rg_received <= `BSV_ASSIGNMENT_DELAY rg_received$D_IN;
	if (rg_sent$EN) rg_sent <= `BSV_ASSIGNMENT_DELAY rg_sent$D_IN;
	if (slave_xactor_clearing$EN)
	  slave_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_clearing$D_IN;
	if (slave_xactor_shim_arff_rv$EN)
	  slave_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_arff_rv$D_IN;
	if (slave_xactor_shim_awff_rv$EN)
	  slave_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_awff_rv$D_IN;
	if (slave_xactor_shim_bff_rv$EN)
	  slave_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_bff_rv$D_IN;
	if (slave_xactor_shim_rff_rv$EN)
	  slave_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_rff_rv$D_IN;
	if (slave_xactor_shim_wff_rv$EN)
	  slave_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_xactor_shim_wff_rv$D_IN;
      end
    if (rg_rsp_buf$EN) rg_rsp_buf <= `BSV_ASSIGNMENT_DELAY rg_rsp_buf$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_received = 8'hAA;
    rg_rsp_buf = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_sent = 8'hAA;
    slave_xactor_clearing = 1'h0;
    slave_xactor_shim_arff_rv = 101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    slave_xactor_shim_awff_rv = 101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    slave_xactor_shim_bff_rv = 10'h2AA;
    slave_xactor_shim_rff_rv = 76'hAAAAAAAAAAAAAAAAAAA;
    slave_xactor_shim_wff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_slave_xactor_ug_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkAWS_Host_Access

