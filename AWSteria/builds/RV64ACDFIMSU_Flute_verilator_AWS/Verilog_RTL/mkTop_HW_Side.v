//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTop_HW_Side(CLK,
		     RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire fsm_start_wire$whas, fsm_state_set_pw$whas;

  // register fsm_jj_delay_count
  reg [13 : 0] fsm_jj_delay_count;
  wire [13 : 0] fsm_jj_delay_count$D_IN;
  wire fsm_jj_delay_count$EN;

  // register fsm_start_reg
  reg fsm_start_reg;
  wire fsm_start_reg$D_IN, fsm_start_reg$EN;

  // register fsm_start_reg_1
  reg fsm_start_reg_1;
  wire fsm_start_reg_1$D_IN, fsm_start_reg_1$EN;

  // register fsm_state_can_overlap
  reg fsm_state_can_overlap;
  wire fsm_state_can_overlap$D_IN, fsm_state_can_overlap$EN;

  // register fsm_state_fired
  reg fsm_state_fired;
  wire fsm_state_fired$D_IN, fsm_state_fired$EN;

  // register fsm_state_mkFSMstate
  reg [4 : 0] fsm_state_mkFSMstate;
  reg [4 : 0] fsm_state_mkFSMstate$D_IN;
  wire fsm_state_mkFSMstate$EN;

  // register rg_counter_4ns
  reg [63 : 0] rg_counter_4ns;
  wire [63 : 0] rg_counter_4ns$D_IN;
  wire rg_counter_4ns$EN;

  // register rg_done_once
  reg rg_done_once;
  wire rg_done_once$D_IN, rg_done_once$EN;

  // register rg_last_vled
  reg [15 : 0] rg_last_vled;
  wire [15 : 0] rg_last_vled$D_IN;
  wire rg_last_vled$EN;

  // register rg_running
  reg rg_running;
  wire rg_running$D_IN, rg_running$EN;

  // register rg_vdip
  reg [15 : 0] rg_vdip;
  wire [15 : 0] rg_vdip$D_IN;
  wire rg_vdip$EN;

  // ports of submodule aws_BSV_top
  wire [511 : 0] aws_BSV_top$ddr4_A_master_rdata,
		 aws_BSV_top$ddr4_A_master_wdata,
		 aws_BSV_top$ddr4_B_master_rdata,
		 aws_BSV_top$ddr4_B_master_wdata,
		 aws_BSV_top$ddr4_C_master_rdata,
		 aws_BSV_top$ddr4_C_master_wdata,
		 aws_BSV_top$ddr4_D_master_rdata,
		 aws_BSV_top$ddr4_D_master_wdata,
		 aws_BSV_top$dma_pcis_slave_rdata,
		 aws_BSV_top$dma_pcis_slave_wdata;
  wire [63 : 0] aws_BSV_top$ddr4_A_master_araddr,
		aws_BSV_top$ddr4_A_master_awaddr,
		aws_BSV_top$ddr4_A_master_wstrb,
		aws_BSV_top$ddr4_B_master_araddr,
		aws_BSV_top$ddr4_B_master_awaddr,
		aws_BSV_top$ddr4_B_master_wstrb,
		aws_BSV_top$ddr4_C_master_araddr,
		aws_BSV_top$ddr4_C_master_awaddr,
		aws_BSV_top$ddr4_C_master_wstrb,
		aws_BSV_top$ddr4_D_master_araddr,
		aws_BSV_top$ddr4_D_master_awaddr,
		aws_BSV_top$ddr4_D_master_wstrb,
		aws_BSV_top$dma_pcis_slave_araddr,
		aws_BSV_top$dma_pcis_slave_awaddr,
		aws_BSV_top$dma_pcis_slave_wstrb,
		aws_BSV_top$m_glcount0_glcount0,
		aws_BSV_top$m_glcount1_glcount1;
  wire [31 : 0] aws_BSV_top$ocl_slave_araddr,
		aws_BSV_top$ocl_slave_awaddr,
		aws_BSV_top$ocl_slave_rdata,
		aws_BSV_top$ocl_slave_wdata;
  wire [15 : 0] aws_BSV_top$ddr4_A_master_arid,
		aws_BSV_top$ddr4_A_master_awid,
		aws_BSV_top$ddr4_A_master_bid,
		aws_BSV_top$ddr4_A_master_rid,
		aws_BSV_top$ddr4_B_master_arid,
		aws_BSV_top$ddr4_B_master_awid,
		aws_BSV_top$ddr4_B_master_bid,
		aws_BSV_top$ddr4_B_master_rid,
		aws_BSV_top$ddr4_C_master_arid,
		aws_BSV_top$ddr4_C_master_awid,
		aws_BSV_top$ddr4_C_master_bid,
		aws_BSV_top$ddr4_C_master_rid,
		aws_BSV_top$ddr4_D_master_arid,
		aws_BSV_top$ddr4_D_master_awid,
		aws_BSV_top$ddr4_D_master_bid,
		aws_BSV_top$ddr4_D_master_rid,
		aws_BSV_top$dma_pcis_slave_arid,
		aws_BSV_top$dma_pcis_slave_awid,
		aws_BSV_top$dma_pcis_slave_bid,
		aws_BSV_top$dma_pcis_slave_rid,
		aws_BSV_top$m_vdip_vdip,
		aws_BSV_top$m_vled;
  wire [7 : 0] aws_BSV_top$ddr4_A_master_arlen,
	       aws_BSV_top$ddr4_A_master_awlen,
	       aws_BSV_top$ddr4_B_master_arlen,
	       aws_BSV_top$ddr4_B_master_awlen,
	       aws_BSV_top$ddr4_C_master_arlen,
	       aws_BSV_top$ddr4_C_master_awlen,
	       aws_BSV_top$ddr4_D_master_arlen,
	       aws_BSV_top$ddr4_D_master_awlen,
	       aws_BSV_top$dma_pcis_slave_arlen,
	       aws_BSV_top$dma_pcis_slave_awlen;
  wire [3 : 0] aws_BSV_top$ddr4_A_master_arcache,
	       aws_BSV_top$ddr4_A_master_arqos,
	       aws_BSV_top$ddr4_A_master_arregion,
	       aws_BSV_top$ddr4_A_master_awcache,
	       aws_BSV_top$ddr4_A_master_awqos,
	       aws_BSV_top$ddr4_A_master_awregion,
	       aws_BSV_top$ddr4_B_master_arcache,
	       aws_BSV_top$ddr4_B_master_arqos,
	       aws_BSV_top$ddr4_B_master_arregion,
	       aws_BSV_top$ddr4_B_master_awcache,
	       aws_BSV_top$ddr4_B_master_awqos,
	       aws_BSV_top$ddr4_B_master_awregion,
	       aws_BSV_top$ddr4_C_master_arcache,
	       aws_BSV_top$ddr4_C_master_arqos,
	       aws_BSV_top$ddr4_C_master_arregion,
	       aws_BSV_top$ddr4_C_master_awcache,
	       aws_BSV_top$ddr4_C_master_awqos,
	       aws_BSV_top$ddr4_C_master_awregion,
	       aws_BSV_top$ddr4_D_master_arcache,
	       aws_BSV_top$ddr4_D_master_arqos,
	       aws_BSV_top$ddr4_D_master_arregion,
	       aws_BSV_top$ddr4_D_master_awcache,
	       aws_BSV_top$ddr4_D_master_awqos,
	       aws_BSV_top$ddr4_D_master_awregion,
	       aws_BSV_top$dma_pcis_slave_arcache,
	       aws_BSV_top$dma_pcis_slave_arqos,
	       aws_BSV_top$dma_pcis_slave_arregion,
	       aws_BSV_top$dma_pcis_slave_awcache,
	       aws_BSV_top$dma_pcis_slave_awqos,
	       aws_BSV_top$dma_pcis_slave_awregion,
	       aws_BSV_top$m_ddr4_ready_ddr4_A_B_C_D_ready,
	       aws_BSV_top$ocl_slave_wstrb;
  wire [2 : 0] aws_BSV_top$ddr4_A_master_arprot,
	       aws_BSV_top$ddr4_A_master_arsize,
	       aws_BSV_top$ddr4_A_master_awprot,
	       aws_BSV_top$ddr4_A_master_awsize,
	       aws_BSV_top$ddr4_B_master_arprot,
	       aws_BSV_top$ddr4_B_master_arsize,
	       aws_BSV_top$ddr4_B_master_awprot,
	       aws_BSV_top$ddr4_B_master_awsize,
	       aws_BSV_top$ddr4_C_master_arprot,
	       aws_BSV_top$ddr4_C_master_arsize,
	       aws_BSV_top$ddr4_C_master_awprot,
	       aws_BSV_top$ddr4_C_master_awsize,
	       aws_BSV_top$ddr4_D_master_arprot,
	       aws_BSV_top$ddr4_D_master_arsize,
	       aws_BSV_top$ddr4_D_master_awprot,
	       aws_BSV_top$ddr4_D_master_awsize,
	       aws_BSV_top$dma_pcis_slave_arprot,
	       aws_BSV_top$dma_pcis_slave_arsize,
	       aws_BSV_top$dma_pcis_slave_awprot,
	       aws_BSV_top$dma_pcis_slave_awsize,
	       aws_BSV_top$ocl_slave_arprot,
	       aws_BSV_top$ocl_slave_awprot;
  wire [1 : 0] aws_BSV_top$ddr4_A_master_arburst,
	       aws_BSV_top$ddr4_A_master_awburst,
	       aws_BSV_top$ddr4_A_master_bresp,
	       aws_BSV_top$ddr4_A_master_rresp,
	       aws_BSV_top$ddr4_B_master_arburst,
	       aws_BSV_top$ddr4_B_master_awburst,
	       aws_BSV_top$ddr4_B_master_bresp,
	       aws_BSV_top$ddr4_B_master_rresp,
	       aws_BSV_top$ddr4_C_master_arburst,
	       aws_BSV_top$ddr4_C_master_awburst,
	       aws_BSV_top$ddr4_C_master_bresp,
	       aws_BSV_top$ddr4_C_master_rresp,
	       aws_BSV_top$ddr4_D_master_arburst,
	       aws_BSV_top$ddr4_D_master_awburst,
	       aws_BSV_top$ddr4_D_master_bresp,
	       aws_BSV_top$ddr4_D_master_rresp,
	       aws_BSV_top$dma_pcis_slave_arburst,
	       aws_BSV_top$dma_pcis_slave_awburst,
	       aws_BSV_top$dma_pcis_slave_bresp,
	       aws_BSV_top$dma_pcis_slave_rresp,
	       aws_BSV_top$ocl_slave_bresp,
	       aws_BSV_top$ocl_slave_rresp;
  wire aws_BSV_top$ddr4_A_master_arlock,
       aws_BSV_top$ddr4_A_master_arready,
       aws_BSV_top$ddr4_A_master_arvalid,
       aws_BSV_top$ddr4_A_master_awlock,
       aws_BSV_top$ddr4_A_master_awready,
       aws_BSV_top$ddr4_A_master_awvalid,
       aws_BSV_top$ddr4_A_master_bready,
       aws_BSV_top$ddr4_A_master_bvalid,
       aws_BSV_top$ddr4_A_master_rlast,
       aws_BSV_top$ddr4_A_master_rready,
       aws_BSV_top$ddr4_A_master_rvalid,
       aws_BSV_top$ddr4_A_master_wlast,
       aws_BSV_top$ddr4_A_master_wready,
       aws_BSV_top$ddr4_A_master_wvalid,
       aws_BSV_top$ddr4_B_master_arlock,
       aws_BSV_top$ddr4_B_master_arready,
       aws_BSV_top$ddr4_B_master_arvalid,
       aws_BSV_top$ddr4_B_master_awlock,
       aws_BSV_top$ddr4_B_master_awready,
       aws_BSV_top$ddr4_B_master_awvalid,
       aws_BSV_top$ddr4_B_master_bready,
       aws_BSV_top$ddr4_B_master_bvalid,
       aws_BSV_top$ddr4_B_master_rlast,
       aws_BSV_top$ddr4_B_master_rready,
       aws_BSV_top$ddr4_B_master_rvalid,
       aws_BSV_top$ddr4_B_master_wlast,
       aws_BSV_top$ddr4_B_master_wready,
       aws_BSV_top$ddr4_B_master_wvalid,
       aws_BSV_top$ddr4_C_master_arlock,
       aws_BSV_top$ddr4_C_master_arready,
       aws_BSV_top$ddr4_C_master_arvalid,
       aws_BSV_top$ddr4_C_master_awlock,
       aws_BSV_top$ddr4_C_master_awready,
       aws_BSV_top$ddr4_C_master_awvalid,
       aws_BSV_top$ddr4_C_master_bready,
       aws_BSV_top$ddr4_C_master_bvalid,
       aws_BSV_top$ddr4_C_master_rlast,
       aws_BSV_top$ddr4_C_master_rready,
       aws_BSV_top$ddr4_C_master_rvalid,
       aws_BSV_top$ddr4_C_master_wlast,
       aws_BSV_top$ddr4_C_master_wready,
       aws_BSV_top$ddr4_C_master_wvalid,
       aws_BSV_top$ddr4_D_master_arlock,
       aws_BSV_top$ddr4_D_master_arready,
       aws_BSV_top$ddr4_D_master_arvalid,
       aws_BSV_top$ddr4_D_master_awlock,
       aws_BSV_top$ddr4_D_master_awready,
       aws_BSV_top$ddr4_D_master_awvalid,
       aws_BSV_top$ddr4_D_master_bready,
       aws_BSV_top$ddr4_D_master_bvalid,
       aws_BSV_top$ddr4_D_master_rlast,
       aws_BSV_top$ddr4_D_master_rready,
       aws_BSV_top$ddr4_D_master_rvalid,
       aws_BSV_top$ddr4_D_master_wlast,
       aws_BSV_top$ddr4_D_master_wready,
       aws_BSV_top$ddr4_D_master_wvalid,
       aws_BSV_top$dma_pcis_slave_arlock,
       aws_BSV_top$dma_pcis_slave_arready,
       aws_BSV_top$dma_pcis_slave_arvalid,
       aws_BSV_top$dma_pcis_slave_awlock,
       aws_BSV_top$dma_pcis_slave_awready,
       aws_BSV_top$dma_pcis_slave_awvalid,
       aws_BSV_top$dma_pcis_slave_bready,
       aws_BSV_top$dma_pcis_slave_bvalid,
       aws_BSV_top$dma_pcis_slave_rlast,
       aws_BSV_top$dma_pcis_slave_rready,
       aws_BSV_top$dma_pcis_slave_rvalid,
       aws_BSV_top$dma_pcis_slave_wlast,
       aws_BSV_top$dma_pcis_slave_wready,
       aws_BSV_top$dma_pcis_slave_wvalid,
       aws_BSV_top$ocl_slave_arready,
       aws_BSV_top$ocl_slave_arvalid,
       aws_BSV_top$ocl_slave_awready,
       aws_BSV_top$ocl_slave_awvalid,
       aws_BSV_top$ocl_slave_bready,
       aws_BSV_top$ocl_slave_bvalid,
       aws_BSV_top$ocl_slave_rready,
       aws_BSV_top$ocl_slave_rvalid,
       aws_BSV_top$ocl_slave_wready,
       aws_BSV_top$ocl_slave_wvalid;

  // ports of submodule ddr4_A
  wire [511 : 0] ddr4_A$rdata, ddr4_A$wdata;
  wire [63 : 0] ddr4_A$araddr, ddr4_A$awaddr, ddr4_A$wstrb;
  wire [15 : 0] ddr4_A$arid, ddr4_A$awid, ddr4_A$bid, ddr4_A$rid;
  wire [7 : 0] ddr4_A$arlen, ddr4_A$awlen;
  wire [3 : 0] ddr4_A$arcache,
	       ddr4_A$arqos,
	       ddr4_A$arregion,
	       ddr4_A$awcache,
	       ddr4_A$awqos,
	       ddr4_A$awregion;
  wire [2 : 0] ddr4_A$arprot, ddr4_A$arsize, ddr4_A$awprot, ddr4_A$awsize;
  wire [1 : 0] ddr4_A$arburst, ddr4_A$awburst, ddr4_A$bresp, ddr4_A$rresp;
  wire ddr4_A$arlock,
       ddr4_A$arready,
       ddr4_A$arvalid,
       ddr4_A$awlock,
       ddr4_A$awready,
       ddr4_A$awvalid,
       ddr4_A$bready,
       ddr4_A$bvalid,
       ddr4_A$rlast,
       ddr4_A$rready,
       ddr4_A$rvalid,
       ddr4_A$wlast,
       ddr4_A$wready,
       ddr4_A$wvalid;

  // ports of submodule ddr4_B
  wire [511 : 0] ddr4_B$rdata, ddr4_B$wdata;
  wire [63 : 0] ddr4_B$araddr, ddr4_B$awaddr, ddr4_B$wstrb;
  wire [15 : 0] ddr4_B$arid, ddr4_B$awid, ddr4_B$bid, ddr4_B$rid;
  wire [7 : 0] ddr4_B$arlen, ddr4_B$awlen;
  wire [3 : 0] ddr4_B$arcache,
	       ddr4_B$arqos,
	       ddr4_B$arregion,
	       ddr4_B$awcache,
	       ddr4_B$awqos,
	       ddr4_B$awregion;
  wire [2 : 0] ddr4_B$arprot, ddr4_B$arsize, ddr4_B$awprot, ddr4_B$awsize;
  wire [1 : 0] ddr4_B$arburst, ddr4_B$awburst, ddr4_B$bresp, ddr4_B$rresp;
  wire ddr4_B$arlock,
       ddr4_B$arready,
       ddr4_B$arvalid,
       ddr4_B$awlock,
       ddr4_B$awready,
       ddr4_B$awvalid,
       ddr4_B$bready,
       ddr4_B$bvalid,
       ddr4_B$rlast,
       ddr4_B$rready,
       ddr4_B$rvalid,
       ddr4_B$wlast,
       ddr4_B$wready,
       ddr4_B$wvalid;

  // ports of submodule ddr4_C
  wire [511 : 0] ddr4_C$rdata, ddr4_C$wdata;
  wire [63 : 0] ddr4_C$araddr, ddr4_C$awaddr, ddr4_C$wstrb;
  wire [15 : 0] ddr4_C$arid, ddr4_C$awid, ddr4_C$bid, ddr4_C$rid;
  wire [7 : 0] ddr4_C$arlen, ddr4_C$awlen;
  wire [3 : 0] ddr4_C$arcache,
	       ddr4_C$arqos,
	       ddr4_C$arregion,
	       ddr4_C$awcache,
	       ddr4_C$awqos,
	       ddr4_C$awregion;
  wire [2 : 0] ddr4_C$arprot, ddr4_C$arsize, ddr4_C$awprot, ddr4_C$awsize;
  wire [1 : 0] ddr4_C$arburst, ddr4_C$awburst, ddr4_C$bresp, ddr4_C$rresp;
  wire ddr4_C$arlock,
       ddr4_C$arready,
       ddr4_C$arvalid,
       ddr4_C$awlock,
       ddr4_C$awready,
       ddr4_C$awvalid,
       ddr4_C$bready,
       ddr4_C$bvalid,
       ddr4_C$rlast,
       ddr4_C$rready,
       ddr4_C$rvalid,
       ddr4_C$wlast,
       ddr4_C$wready,
       ddr4_C$wvalid;

  // ports of submodule ddr4_D
  wire [511 : 0] ddr4_D$rdata, ddr4_D$wdata;
  wire [63 : 0] ddr4_D$araddr, ddr4_D$awaddr, ddr4_D$wstrb;
  wire [15 : 0] ddr4_D$arid, ddr4_D$awid, ddr4_D$bid, ddr4_D$rid;
  wire [7 : 0] ddr4_D$arlen, ddr4_D$awlen;
  wire [3 : 0] ddr4_D$arcache,
	       ddr4_D$arqos,
	       ddr4_D$arregion,
	       ddr4_D$awcache,
	       ddr4_D$awqos,
	       ddr4_D$awregion;
  wire [2 : 0] ddr4_D$arprot, ddr4_D$arsize, ddr4_D$awprot, ddr4_D$awsize;
  wire [1 : 0] ddr4_D$arburst, ddr4_D$awburst, ddr4_D$bresp, ddr4_D$rresp;
  wire ddr4_D$arlock,
       ddr4_D$arready,
       ddr4_D$arvalid,
       ddr4_D$awlock,
       ddr4_D$awready,
       ddr4_D$awvalid,
       ddr4_D$bready,
       ddr4_D$bvalid,
       ddr4_D$rlast,
       ddr4_D$rready,
       ddr4_D$rvalid,
       ddr4_D$wlast,
       ddr4_D$wready,
       ddr4_D$wvalid;

  // ports of submodule dma_pcis_xactor_f_rd_addr
  wire [108 : 0] dma_pcis_xactor_f_rd_addr$D_IN,
		 dma_pcis_xactor_f_rd_addr$D_OUT;
  wire dma_pcis_xactor_f_rd_addr$CLR,
       dma_pcis_xactor_f_rd_addr$DEQ,
       dma_pcis_xactor_f_rd_addr$EMPTY_N,
       dma_pcis_xactor_f_rd_addr$ENQ;

  // ports of submodule dma_pcis_xactor_f_rd_data
  wire [530 : 0] dma_pcis_xactor_f_rd_data$D_IN;
  wire dma_pcis_xactor_f_rd_data$CLR,
       dma_pcis_xactor_f_rd_data$DEQ,
       dma_pcis_xactor_f_rd_data$ENQ,
       dma_pcis_xactor_f_rd_data$FULL_N;

  // ports of submodule dma_pcis_xactor_f_wr_addr
  wire [108 : 0] dma_pcis_xactor_f_wr_addr$D_IN,
		 dma_pcis_xactor_f_wr_addr$D_OUT;
  wire dma_pcis_xactor_f_wr_addr$CLR,
       dma_pcis_xactor_f_wr_addr$DEQ,
       dma_pcis_xactor_f_wr_addr$EMPTY_N,
       dma_pcis_xactor_f_wr_addr$ENQ;

  // ports of submodule dma_pcis_xactor_f_wr_data
  wire [576 : 0] dma_pcis_xactor_f_wr_data$D_IN,
		 dma_pcis_xactor_f_wr_data$D_OUT;
  wire dma_pcis_xactor_f_wr_data$CLR,
       dma_pcis_xactor_f_wr_data$DEQ,
       dma_pcis_xactor_f_wr_data$EMPTY_N,
       dma_pcis_xactor_f_wr_data$ENQ;

  // ports of submodule dma_pcis_xactor_f_wr_resp
  wire [17 : 0] dma_pcis_xactor_f_wr_resp$D_IN;
  wire dma_pcis_xactor_f_wr_resp$CLR,
       dma_pcis_xactor_f_wr_resp$DEQ,
       dma_pcis_xactor_f_wr_resp$ENQ,
       dma_pcis_xactor_f_wr_resp$FULL_N;

  // ports of submodule ocl_xactor_f_rd_addr
  wire [34 : 0] ocl_xactor_f_rd_addr$D_IN, ocl_xactor_f_rd_addr$D_OUT;
  wire ocl_xactor_f_rd_addr$CLR,
       ocl_xactor_f_rd_addr$DEQ,
       ocl_xactor_f_rd_addr$EMPTY_N,
       ocl_xactor_f_rd_addr$ENQ,
       ocl_xactor_f_rd_addr$FULL_N;

  // ports of submodule ocl_xactor_f_rd_data
  wire [33 : 0] ocl_xactor_f_rd_data$D_IN, ocl_xactor_f_rd_data$D_OUT;
  wire ocl_xactor_f_rd_data$CLR,
       ocl_xactor_f_rd_data$DEQ,
       ocl_xactor_f_rd_data$EMPTY_N,
       ocl_xactor_f_rd_data$ENQ,
       ocl_xactor_f_rd_data$FULL_N;

  // ports of submodule ocl_xactor_f_wr_addr
  reg [34 : 0] ocl_xactor_f_wr_addr$D_IN;
  wire [34 : 0] ocl_xactor_f_wr_addr$D_OUT;
  wire ocl_xactor_f_wr_addr$CLR,
       ocl_xactor_f_wr_addr$DEQ,
       ocl_xactor_f_wr_addr$EMPTY_N,
       ocl_xactor_f_wr_addr$ENQ,
       ocl_xactor_f_wr_addr$FULL_N;

  // ports of submodule ocl_xactor_f_wr_data
  reg [35 : 0] ocl_xactor_f_wr_data$D_IN;
  wire [35 : 0] ocl_xactor_f_wr_data$D_OUT;
  wire ocl_xactor_f_wr_data$CLR,
       ocl_xactor_f_wr_data$DEQ,
       ocl_xactor_f_wr_data$EMPTY_N,
       ocl_xactor_f_wr_data$ENQ,
       ocl_xactor_f_wr_data$FULL_N;

  // ports of submodule ocl_xactor_f_wr_resp
  wire [1 : 0] ocl_xactor_f_wr_resp$D_IN, ocl_xactor_f_wr_resp$D_OUT;
  wire ocl_xactor_f_wr_resp$CLR,
       ocl_xactor_f_wr_resp$DEQ,
       ocl_xactor_f_wr_resp$EMPTY_N,
       ocl_xactor_f_wr_resp$ENQ,
       ocl_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_fsm_action_d_init_np,
       CAN_FIRE_RL_fsm_action_l161c10,
       CAN_FIRE_RL_fsm_action_l169c10,
       CAN_FIRE_RL_fsm_action_l180c10,
       CAN_FIRE_RL_fsm_action_l194c10,
       CAN_FIRE_RL_fsm_action_l198c10,
       CAN_FIRE_RL_fsm_action_l201c10,
       CAN_FIRE_RL_fsm_action_l211c10,
       CAN_FIRE_RL_fsm_action_l212c21,
       CAN_FIRE_RL_fsm_action_l214c37,
       CAN_FIRE_RL_fsm_action_l215c13,
       CAN_FIRE_RL_fsm_action_l220c10,
       CAN_FIRE_RL_fsm_action_l221c10,
       CAN_FIRE_RL_fsm_action_np,
       CAN_FIRE_RL_fsm_fsm_start,
       CAN_FIRE_RL_fsm_idle_l160c7,
       CAN_FIRE_RL_fsm_restart,
       CAN_FIRE_RL_fsm_start_reg__dreg_update,
       CAN_FIRE_RL_fsm_state_every,
       CAN_FIRE_RL_fsm_state_fired__dreg_update,
       CAN_FIRE_RL_fsm_state_handle_abort,
       CAN_FIRE_RL_rl_ocl_wr_response_drain,
       CAN_FIRE_RL_rl_once,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_addr_channel_1,
       CAN_FIRE_RL_rl_rd_addr_channel_2,
       CAN_FIRE_RL_rl_rd_addr_channel_3,
       CAN_FIRE_RL_rl_rd_addr_channel_4,
       CAN_FIRE_RL_rl_rd_addr_channel_5,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_rd_data_channel_1,
       CAN_FIRE_RL_rl_rd_data_channel_2,
       CAN_FIRE_RL_rl_rd_data_channel_3,
       CAN_FIRE_RL_rl_rd_data_channel_4,
       CAN_FIRE_RL_rl_rd_data_channel_5,
       CAN_FIRE_RL_rl_status_signals,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_addr_channel_1,
       CAN_FIRE_RL_rl_wr_addr_channel_2,
       CAN_FIRE_RL_rl_wr_addr_channel_3,
       CAN_FIRE_RL_rl_wr_addr_channel_4,
       CAN_FIRE_RL_rl_wr_addr_channel_5,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_data_channel_1,
       CAN_FIRE_RL_rl_wr_data_channel_2,
       CAN_FIRE_RL_rl_wr_data_channel_3,
       CAN_FIRE_RL_rl_wr_data_channel_4,
       CAN_FIRE_RL_rl_wr_data_channel_5,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_RL_rl_wr_response_channel_1,
       CAN_FIRE_RL_rl_wr_response_channel_2,
       CAN_FIRE_RL_rl_wr_response_channel_3,
       CAN_FIRE_RL_rl_wr_response_channel_4,
       CAN_FIRE_RL_rl_wr_response_channel_5,
       CAN_FIRE___me_check_36,
       CAN_FIRE___me_check_37,
       CAN_FIRE___me_check_38,
       CAN_FIRE___me_check_39,
       CAN_FIRE___me_check_40,
       CAN_FIRE___me_check_41,
       CAN_FIRE___me_check_42,
       CAN_FIRE___me_check_43,
       CAN_FIRE___me_check_44,
       CAN_FIRE___me_check_45,
       CAN_FIRE___me_check_46,
       CAN_FIRE___me_check_47,
       CAN_FIRE___me_check_48,
       WILL_FIRE_RL_fsm_action_d_init_np,
       WILL_FIRE_RL_fsm_action_l161c10,
       WILL_FIRE_RL_fsm_action_l169c10,
       WILL_FIRE_RL_fsm_action_l180c10,
       WILL_FIRE_RL_fsm_action_l194c10,
       WILL_FIRE_RL_fsm_action_l198c10,
       WILL_FIRE_RL_fsm_action_l201c10,
       WILL_FIRE_RL_fsm_action_l211c10,
       WILL_FIRE_RL_fsm_action_l212c21,
       WILL_FIRE_RL_fsm_action_l214c37,
       WILL_FIRE_RL_fsm_action_l215c13,
       WILL_FIRE_RL_fsm_action_l220c10,
       WILL_FIRE_RL_fsm_action_l221c10,
       WILL_FIRE_RL_fsm_action_np,
       WILL_FIRE_RL_fsm_fsm_start,
       WILL_FIRE_RL_fsm_idle_l160c7,
       WILL_FIRE_RL_fsm_restart,
       WILL_FIRE_RL_fsm_start_reg__dreg_update,
       WILL_FIRE_RL_fsm_state_every,
       WILL_FIRE_RL_fsm_state_fired__dreg_update,
       WILL_FIRE_RL_fsm_state_handle_abort,
       WILL_FIRE_RL_rl_ocl_wr_response_drain,
       WILL_FIRE_RL_rl_once,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_addr_channel_1,
       WILL_FIRE_RL_rl_rd_addr_channel_2,
       WILL_FIRE_RL_rl_rd_addr_channel_3,
       WILL_FIRE_RL_rl_rd_addr_channel_4,
       WILL_FIRE_RL_rl_rd_addr_channel_5,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_rd_data_channel_1,
       WILL_FIRE_RL_rl_rd_data_channel_2,
       WILL_FIRE_RL_rl_rd_data_channel_3,
       WILL_FIRE_RL_rl_rd_data_channel_4,
       WILL_FIRE_RL_rl_rd_data_channel_5,
       WILL_FIRE_RL_rl_status_signals,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_addr_channel_1,
       WILL_FIRE_RL_rl_wr_addr_channel_2,
       WILL_FIRE_RL_rl_wr_addr_channel_3,
       WILL_FIRE_RL_rl_wr_addr_channel_4,
       WILL_FIRE_RL_rl_wr_addr_channel_5,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_data_channel_1,
       WILL_FIRE_RL_rl_wr_data_channel_2,
       WILL_FIRE_RL_rl_wr_data_channel_3,
       WILL_FIRE_RL_rl_wr_data_channel_4,
       WILL_FIRE_RL_rl_wr_data_channel_5,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_RL_rl_wr_response_channel_1,
       WILL_FIRE_RL_rl_wr_response_channel_2,
       WILL_FIRE_RL_rl_wr_response_channel_3,
       WILL_FIRE_RL_rl_wr_response_channel_4,
       WILL_FIRE_RL_rl_wr_response_channel_5,
       WILL_FIRE___me_check_36,
       WILL_FIRE___me_check_37,
       WILL_FIRE___me_check_38,
       WILL_FIRE___me_check_39,
       WILL_FIRE___me_check_40,
       WILL_FIRE___me_check_41,
       WILL_FIRE___me_check_42,
       WILL_FIRE___me_check_43,
       WILL_FIRE___me_check_44,
       WILL_FIRE___me_check_45,
       WILL_FIRE___me_check_46,
       WILL_FIRE___me_check_47,
       WILL_FIRE___me_check_48;

  // inputs to muxes for submodule ports
  wire [35 : 0] MUX_ocl_xactor_f_wr_data$enq_1__VAL_1,
		MUX_ocl_xactor_f_wr_data$enq_1__VAL_2;
  wire [13 : 0] MUX_fsm_jj_delay_count$write_1__VAL_1;
  wire MUX_rg_running$write_1__VAL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d304;
  reg TASK_testplusargs___d303;
  reg TASK_testplusargs___d313;
  reg [63 : 0] v__h44054;
  reg [31 : 0] v__h45539;
  reg [31 : 0] v__h45533;
  reg [31 : 0] v__h44040;
  reg [31 : 0] verbosity___1__h43704;
  // synopsys translate_on

  // remaining internal signals
  wire [31 : 0] data__h43706;
  wire fsm_abort_whas__64_AND_fsm_abort_wget__65_66_O_ETC___d365;

  // submodule aws_BSV_top
  mkAWS_BSV_Top aws_BSV_top(.CLK(CLK),
			    .RST_N(RST_N),
			    .ddr4_A_master_arready(aws_BSV_top$ddr4_A_master_arready),
			    .ddr4_A_master_awready(aws_BSV_top$ddr4_A_master_awready),
			    .ddr4_A_master_bid(aws_BSV_top$ddr4_A_master_bid),
			    .ddr4_A_master_bresp(aws_BSV_top$ddr4_A_master_bresp),
			    .ddr4_A_master_bvalid(aws_BSV_top$ddr4_A_master_bvalid),
			    .ddr4_A_master_rdata(aws_BSV_top$ddr4_A_master_rdata),
			    .ddr4_A_master_rid(aws_BSV_top$ddr4_A_master_rid),
			    .ddr4_A_master_rlast(aws_BSV_top$ddr4_A_master_rlast),
			    .ddr4_A_master_rresp(aws_BSV_top$ddr4_A_master_rresp),
			    .ddr4_A_master_rvalid(aws_BSV_top$ddr4_A_master_rvalid),
			    .ddr4_A_master_wready(aws_BSV_top$ddr4_A_master_wready),
			    .ddr4_B_master_arready(aws_BSV_top$ddr4_B_master_arready),
			    .ddr4_B_master_awready(aws_BSV_top$ddr4_B_master_awready),
			    .ddr4_B_master_bid(aws_BSV_top$ddr4_B_master_bid),
			    .ddr4_B_master_bresp(aws_BSV_top$ddr4_B_master_bresp),
			    .ddr4_B_master_bvalid(aws_BSV_top$ddr4_B_master_bvalid),
			    .ddr4_B_master_rdata(aws_BSV_top$ddr4_B_master_rdata),
			    .ddr4_B_master_rid(aws_BSV_top$ddr4_B_master_rid),
			    .ddr4_B_master_rlast(aws_BSV_top$ddr4_B_master_rlast),
			    .ddr4_B_master_rresp(aws_BSV_top$ddr4_B_master_rresp),
			    .ddr4_B_master_rvalid(aws_BSV_top$ddr4_B_master_rvalid),
			    .ddr4_B_master_wready(aws_BSV_top$ddr4_B_master_wready),
			    .ddr4_C_master_arready(aws_BSV_top$ddr4_C_master_arready),
			    .ddr4_C_master_awready(aws_BSV_top$ddr4_C_master_awready),
			    .ddr4_C_master_bid(aws_BSV_top$ddr4_C_master_bid),
			    .ddr4_C_master_bresp(aws_BSV_top$ddr4_C_master_bresp),
			    .ddr4_C_master_bvalid(aws_BSV_top$ddr4_C_master_bvalid),
			    .ddr4_C_master_rdata(aws_BSV_top$ddr4_C_master_rdata),
			    .ddr4_C_master_rid(aws_BSV_top$ddr4_C_master_rid),
			    .ddr4_C_master_rlast(aws_BSV_top$ddr4_C_master_rlast),
			    .ddr4_C_master_rresp(aws_BSV_top$ddr4_C_master_rresp),
			    .ddr4_C_master_rvalid(aws_BSV_top$ddr4_C_master_rvalid),
			    .ddr4_C_master_wready(aws_BSV_top$ddr4_C_master_wready),
			    .ddr4_D_master_arready(aws_BSV_top$ddr4_D_master_arready),
			    .ddr4_D_master_awready(aws_BSV_top$ddr4_D_master_awready),
			    .ddr4_D_master_bid(aws_BSV_top$ddr4_D_master_bid),
			    .ddr4_D_master_bresp(aws_BSV_top$ddr4_D_master_bresp),
			    .ddr4_D_master_bvalid(aws_BSV_top$ddr4_D_master_bvalid),
			    .ddr4_D_master_rdata(aws_BSV_top$ddr4_D_master_rdata),
			    .ddr4_D_master_rid(aws_BSV_top$ddr4_D_master_rid),
			    .ddr4_D_master_rlast(aws_BSV_top$ddr4_D_master_rlast),
			    .ddr4_D_master_rresp(aws_BSV_top$ddr4_D_master_rresp),
			    .ddr4_D_master_rvalid(aws_BSV_top$ddr4_D_master_rvalid),
			    .ddr4_D_master_wready(aws_BSV_top$ddr4_D_master_wready),
			    .dma_pcis_slave_araddr(aws_BSV_top$dma_pcis_slave_araddr),
			    .dma_pcis_slave_arburst(aws_BSV_top$dma_pcis_slave_arburst),
			    .dma_pcis_slave_arcache(aws_BSV_top$dma_pcis_slave_arcache),
			    .dma_pcis_slave_arid(aws_BSV_top$dma_pcis_slave_arid),
			    .dma_pcis_slave_arlen(aws_BSV_top$dma_pcis_slave_arlen),
			    .dma_pcis_slave_arlock(aws_BSV_top$dma_pcis_slave_arlock),
			    .dma_pcis_slave_arprot(aws_BSV_top$dma_pcis_slave_arprot),
			    .dma_pcis_slave_arqos(aws_BSV_top$dma_pcis_slave_arqos),
			    .dma_pcis_slave_arregion(aws_BSV_top$dma_pcis_slave_arregion),
			    .dma_pcis_slave_arsize(aws_BSV_top$dma_pcis_slave_arsize),
			    .dma_pcis_slave_arvalid(aws_BSV_top$dma_pcis_slave_arvalid),
			    .dma_pcis_slave_awaddr(aws_BSV_top$dma_pcis_slave_awaddr),
			    .dma_pcis_slave_awburst(aws_BSV_top$dma_pcis_slave_awburst),
			    .dma_pcis_slave_awcache(aws_BSV_top$dma_pcis_slave_awcache),
			    .dma_pcis_slave_awid(aws_BSV_top$dma_pcis_slave_awid),
			    .dma_pcis_slave_awlen(aws_BSV_top$dma_pcis_slave_awlen),
			    .dma_pcis_slave_awlock(aws_BSV_top$dma_pcis_slave_awlock),
			    .dma_pcis_slave_awprot(aws_BSV_top$dma_pcis_slave_awprot),
			    .dma_pcis_slave_awqos(aws_BSV_top$dma_pcis_slave_awqos),
			    .dma_pcis_slave_awregion(aws_BSV_top$dma_pcis_slave_awregion),
			    .dma_pcis_slave_awsize(aws_BSV_top$dma_pcis_slave_awsize),
			    .dma_pcis_slave_awvalid(aws_BSV_top$dma_pcis_slave_awvalid),
			    .dma_pcis_slave_bready(aws_BSV_top$dma_pcis_slave_bready),
			    .dma_pcis_slave_rready(aws_BSV_top$dma_pcis_slave_rready),
			    .dma_pcis_slave_wdata(aws_BSV_top$dma_pcis_slave_wdata),
			    .dma_pcis_slave_wlast(aws_BSV_top$dma_pcis_slave_wlast),
			    .dma_pcis_slave_wstrb(aws_BSV_top$dma_pcis_slave_wstrb),
			    .dma_pcis_slave_wvalid(aws_BSV_top$dma_pcis_slave_wvalid),
			    .m_ddr4_ready_ddr4_A_B_C_D_ready(aws_BSV_top$m_ddr4_ready_ddr4_A_B_C_D_ready),
			    .m_glcount0_glcount0(aws_BSV_top$m_glcount0_glcount0),
			    .m_glcount1_glcount1(aws_BSV_top$m_glcount1_glcount1),
			    .m_vdip_vdip(aws_BSV_top$m_vdip_vdip),
			    .ocl_slave_araddr(aws_BSV_top$ocl_slave_araddr),
			    .ocl_slave_arprot(aws_BSV_top$ocl_slave_arprot),
			    .ocl_slave_arvalid(aws_BSV_top$ocl_slave_arvalid),
			    .ocl_slave_awaddr(aws_BSV_top$ocl_slave_awaddr),
			    .ocl_slave_awprot(aws_BSV_top$ocl_slave_awprot),
			    .ocl_slave_awvalid(aws_BSV_top$ocl_slave_awvalid),
			    .ocl_slave_bready(aws_BSV_top$ocl_slave_bready),
			    .ocl_slave_rready(aws_BSV_top$ocl_slave_rready),
			    .ocl_slave_wdata(aws_BSV_top$ocl_slave_wdata),
			    .ocl_slave_wstrb(aws_BSV_top$ocl_slave_wstrb),
			    .ocl_slave_wvalid(aws_BSV_top$ocl_slave_wvalid),
			    .dma_pcis_slave_awready(aws_BSV_top$dma_pcis_slave_awready),
			    .dma_pcis_slave_wready(aws_BSV_top$dma_pcis_slave_wready),
			    .dma_pcis_slave_bvalid(aws_BSV_top$dma_pcis_slave_bvalid),
			    .dma_pcis_slave_bid(aws_BSV_top$dma_pcis_slave_bid),
			    .dma_pcis_slave_bresp(aws_BSV_top$dma_pcis_slave_bresp),
			    .dma_pcis_slave_arready(aws_BSV_top$dma_pcis_slave_arready),
			    .dma_pcis_slave_rvalid(aws_BSV_top$dma_pcis_slave_rvalid),
			    .dma_pcis_slave_rid(aws_BSV_top$dma_pcis_slave_rid),
			    .dma_pcis_slave_rdata(aws_BSV_top$dma_pcis_slave_rdata),
			    .dma_pcis_slave_rresp(aws_BSV_top$dma_pcis_slave_rresp),
			    .dma_pcis_slave_rlast(aws_BSV_top$dma_pcis_slave_rlast),
			    .ocl_slave_awready(aws_BSV_top$ocl_slave_awready),
			    .ocl_slave_wready(aws_BSV_top$ocl_slave_wready),
			    .ocl_slave_bvalid(aws_BSV_top$ocl_slave_bvalid),
			    .ocl_slave_bresp(aws_BSV_top$ocl_slave_bresp),
			    .ocl_slave_arready(aws_BSV_top$ocl_slave_arready),
			    .ocl_slave_rvalid(aws_BSV_top$ocl_slave_rvalid),
			    .ocl_slave_rresp(aws_BSV_top$ocl_slave_rresp),
			    .ocl_slave_rdata(aws_BSV_top$ocl_slave_rdata),
			    .ddr4_A_master_awvalid(aws_BSV_top$ddr4_A_master_awvalid),
			    .ddr4_A_master_awid(aws_BSV_top$ddr4_A_master_awid),
			    .ddr4_A_master_awaddr(aws_BSV_top$ddr4_A_master_awaddr),
			    .ddr4_A_master_awlen(aws_BSV_top$ddr4_A_master_awlen),
			    .ddr4_A_master_awsize(aws_BSV_top$ddr4_A_master_awsize),
			    .ddr4_A_master_awburst(aws_BSV_top$ddr4_A_master_awburst),
			    .ddr4_A_master_awlock(aws_BSV_top$ddr4_A_master_awlock),
			    .ddr4_A_master_awcache(aws_BSV_top$ddr4_A_master_awcache),
			    .ddr4_A_master_awprot(aws_BSV_top$ddr4_A_master_awprot),
			    .ddr4_A_master_awqos(aws_BSV_top$ddr4_A_master_awqos),
			    .ddr4_A_master_awregion(aws_BSV_top$ddr4_A_master_awregion),
			    .ddr4_A_master_wvalid(aws_BSV_top$ddr4_A_master_wvalid),
			    .ddr4_A_master_wdata(aws_BSV_top$ddr4_A_master_wdata),
			    .ddr4_A_master_wstrb(aws_BSV_top$ddr4_A_master_wstrb),
			    .ddr4_A_master_wlast(aws_BSV_top$ddr4_A_master_wlast),
			    .ddr4_A_master_bready(aws_BSV_top$ddr4_A_master_bready),
			    .ddr4_A_master_arvalid(aws_BSV_top$ddr4_A_master_arvalid),
			    .ddr4_A_master_arid(aws_BSV_top$ddr4_A_master_arid),
			    .ddr4_A_master_araddr(aws_BSV_top$ddr4_A_master_araddr),
			    .ddr4_A_master_arlen(aws_BSV_top$ddr4_A_master_arlen),
			    .ddr4_A_master_arsize(aws_BSV_top$ddr4_A_master_arsize),
			    .ddr4_A_master_arburst(aws_BSV_top$ddr4_A_master_arburst),
			    .ddr4_A_master_arlock(aws_BSV_top$ddr4_A_master_arlock),
			    .ddr4_A_master_arcache(aws_BSV_top$ddr4_A_master_arcache),
			    .ddr4_A_master_arprot(aws_BSV_top$ddr4_A_master_arprot),
			    .ddr4_A_master_arqos(aws_BSV_top$ddr4_A_master_arqos),
			    .ddr4_A_master_arregion(aws_BSV_top$ddr4_A_master_arregion),
			    .ddr4_A_master_rready(aws_BSV_top$ddr4_A_master_rready),
			    .ddr4_B_master_awvalid(aws_BSV_top$ddr4_B_master_awvalid),
			    .ddr4_B_master_awid(aws_BSV_top$ddr4_B_master_awid),
			    .ddr4_B_master_awaddr(aws_BSV_top$ddr4_B_master_awaddr),
			    .ddr4_B_master_awlen(aws_BSV_top$ddr4_B_master_awlen),
			    .ddr4_B_master_awsize(aws_BSV_top$ddr4_B_master_awsize),
			    .ddr4_B_master_awburst(aws_BSV_top$ddr4_B_master_awburst),
			    .ddr4_B_master_awlock(aws_BSV_top$ddr4_B_master_awlock),
			    .ddr4_B_master_awcache(aws_BSV_top$ddr4_B_master_awcache),
			    .ddr4_B_master_awprot(aws_BSV_top$ddr4_B_master_awprot),
			    .ddr4_B_master_awqos(aws_BSV_top$ddr4_B_master_awqos),
			    .ddr4_B_master_awregion(aws_BSV_top$ddr4_B_master_awregion),
			    .ddr4_B_master_wvalid(aws_BSV_top$ddr4_B_master_wvalid),
			    .ddr4_B_master_wdata(aws_BSV_top$ddr4_B_master_wdata),
			    .ddr4_B_master_wstrb(aws_BSV_top$ddr4_B_master_wstrb),
			    .ddr4_B_master_wlast(aws_BSV_top$ddr4_B_master_wlast),
			    .ddr4_B_master_bready(aws_BSV_top$ddr4_B_master_bready),
			    .ddr4_B_master_arvalid(aws_BSV_top$ddr4_B_master_arvalid),
			    .ddr4_B_master_arid(aws_BSV_top$ddr4_B_master_arid),
			    .ddr4_B_master_araddr(aws_BSV_top$ddr4_B_master_araddr),
			    .ddr4_B_master_arlen(aws_BSV_top$ddr4_B_master_arlen),
			    .ddr4_B_master_arsize(aws_BSV_top$ddr4_B_master_arsize),
			    .ddr4_B_master_arburst(aws_BSV_top$ddr4_B_master_arburst),
			    .ddr4_B_master_arlock(aws_BSV_top$ddr4_B_master_arlock),
			    .ddr4_B_master_arcache(aws_BSV_top$ddr4_B_master_arcache),
			    .ddr4_B_master_arprot(aws_BSV_top$ddr4_B_master_arprot),
			    .ddr4_B_master_arqos(aws_BSV_top$ddr4_B_master_arqos),
			    .ddr4_B_master_arregion(aws_BSV_top$ddr4_B_master_arregion),
			    .ddr4_B_master_rready(aws_BSV_top$ddr4_B_master_rready),
			    .ddr4_C_master_awvalid(aws_BSV_top$ddr4_C_master_awvalid),
			    .ddr4_C_master_awid(aws_BSV_top$ddr4_C_master_awid),
			    .ddr4_C_master_awaddr(aws_BSV_top$ddr4_C_master_awaddr),
			    .ddr4_C_master_awlen(aws_BSV_top$ddr4_C_master_awlen),
			    .ddr4_C_master_awsize(aws_BSV_top$ddr4_C_master_awsize),
			    .ddr4_C_master_awburst(aws_BSV_top$ddr4_C_master_awburst),
			    .ddr4_C_master_awlock(aws_BSV_top$ddr4_C_master_awlock),
			    .ddr4_C_master_awcache(aws_BSV_top$ddr4_C_master_awcache),
			    .ddr4_C_master_awprot(aws_BSV_top$ddr4_C_master_awprot),
			    .ddr4_C_master_awqos(aws_BSV_top$ddr4_C_master_awqos),
			    .ddr4_C_master_awregion(aws_BSV_top$ddr4_C_master_awregion),
			    .ddr4_C_master_wvalid(aws_BSV_top$ddr4_C_master_wvalid),
			    .ddr4_C_master_wdata(aws_BSV_top$ddr4_C_master_wdata),
			    .ddr4_C_master_wstrb(aws_BSV_top$ddr4_C_master_wstrb),
			    .ddr4_C_master_wlast(aws_BSV_top$ddr4_C_master_wlast),
			    .ddr4_C_master_bready(aws_BSV_top$ddr4_C_master_bready),
			    .ddr4_C_master_arvalid(aws_BSV_top$ddr4_C_master_arvalid),
			    .ddr4_C_master_arid(aws_BSV_top$ddr4_C_master_arid),
			    .ddr4_C_master_araddr(aws_BSV_top$ddr4_C_master_araddr),
			    .ddr4_C_master_arlen(aws_BSV_top$ddr4_C_master_arlen),
			    .ddr4_C_master_arsize(aws_BSV_top$ddr4_C_master_arsize),
			    .ddr4_C_master_arburst(aws_BSV_top$ddr4_C_master_arburst),
			    .ddr4_C_master_arlock(aws_BSV_top$ddr4_C_master_arlock),
			    .ddr4_C_master_arcache(aws_BSV_top$ddr4_C_master_arcache),
			    .ddr4_C_master_arprot(aws_BSV_top$ddr4_C_master_arprot),
			    .ddr4_C_master_arqos(aws_BSV_top$ddr4_C_master_arqos),
			    .ddr4_C_master_arregion(aws_BSV_top$ddr4_C_master_arregion),
			    .ddr4_C_master_rready(aws_BSV_top$ddr4_C_master_rready),
			    .ddr4_D_master_awvalid(aws_BSV_top$ddr4_D_master_awvalid),
			    .ddr4_D_master_awid(aws_BSV_top$ddr4_D_master_awid),
			    .ddr4_D_master_awaddr(aws_BSV_top$ddr4_D_master_awaddr),
			    .ddr4_D_master_awlen(aws_BSV_top$ddr4_D_master_awlen),
			    .ddr4_D_master_awsize(aws_BSV_top$ddr4_D_master_awsize),
			    .ddr4_D_master_awburst(aws_BSV_top$ddr4_D_master_awburst),
			    .ddr4_D_master_awlock(aws_BSV_top$ddr4_D_master_awlock),
			    .ddr4_D_master_awcache(aws_BSV_top$ddr4_D_master_awcache),
			    .ddr4_D_master_awprot(aws_BSV_top$ddr4_D_master_awprot),
			    .ddr4_D_master_awqos(aws_BSV_top$ddr4_D_master_awqos),
			    .ddr4_D_master_awregion(aws_BSV_top$ddr4_D_master_awregion),
			    .ddr4_D_master_wvalid(aws_BSV_top$ddr4_D_master_wvalid),
			    .ddr4_D_master_wdata(aws_BSV_top$ddr4_D_master_wdata),
			    .ddr4_D_master_wstrb(aws_BSV_top$ddr4_D_master_wstrb),
			    .ddr4_D_master_wlast(aws_BSV_top$ddr4_D_master_wlast),
			    .ddr4_D_master_bready(aws_BSV_top$ddr4_D_master_bready),
			    .ddr4_D_master_arvalid(aws_BSV_top$ddr4_D_master_arvalid),
			    .ddr4_D_master_arid(aws_BSV_top$ddr4_D_master_arid),
			    .ddr4_D_master_araddr(aws_BSV_top$ddr4_D_master_araddr),
			    .ddr4_D_master_arlen(aws_BSV_top$ddr4_D_master_arlen),
			    .ddr4_D_master_arsize(aws_BSV_top$ddr4_D_master_arsize),
			    .ddr4_D_master_arburst(aws_BSV_top$ddr4_D_master_arburst),
			    .ddr4_D_master_arlock(aws_BSV_top$ddr4_D_master_arlock),
			    .ddr4_D_master_arcache(aws_BSV_top$ddr4_D_master_arcache),
			    .ddr4_D_master_arprot(aws_BSV_top$ddr4_D_master_arprot),
			    .ddr4_D_master_arqos(aws_BSV_top$ddr4_D_master_arqos),
			    .ddr4_D_master_arregion(aws_BSV_top$ddr4_D_master_arregion),
			    .ddr4_D_master_rready(aws_BSV_top$ddr4_D_master_rready),
			    .m_vled(aws_BSV_top$m_vled));

  // submodule ddr4_A
  mkMem_Model #(.ddr4_num(2'd0)) ddr4_A(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_A$araddr),
					.arburst(ddr4_A$arburst),
					.arcache(ddr4_A$arcache),
					.arid(ddr4_A$arid),
					.arlen(ddr4_A$arlen),
					.arlock(ddr4_A$arlock),
					.arprot(ddr4_A$arprot),
					.arqos(ddr4_A$arqos),
					.arregion(ddr4_A$arregion),
					.arsize(ddr4_A$arsize),
					.arvalid(ddr4_A$arvalid),
					.awaddr(ddr4_A$awaddr),
					.awburst(ddr4_A$awburst),
					.awcache(ddr4_A$awcache),
					.awid(ddr4_A$awid),
					.awlen(ddr4_A$awlen),
					.awlock(ddr4_A$awlock),
					.awprot(ddr4_A$awprot),
					.awqos(ddr4_A$awqos),
					.awregion(ddr4_A$awregion),
					.awsize(ddr4_A$awsize),
					.awvalid(ddr4_A$awvalid),
					.bready(ddr4_A$bready),
					.rready(ddr4_A$rready),
					.wdata(ddr4_A$wdata),
					.wlast(ddr4_A$wlast),
					.wstrb(ddr4_A$wstrb),
					.wvalid(ddr4_A$wvalid),
					.awready(ddr4_A$awready),
					.wready(ddr4_A$wready),
					.bvalid(ddr4_A$bvalid),
					.bid(ddr4_A$bid),
					.bresp(ddr4_A$bresp),
					.arready(ddr4_A$arready),
					.rvalid(ddr4_A$rvalid),
					.rid(ddr4_A$rid),
					.rdata(ddr4_A$rdata),
					.rresp(ddr4_A$rresp),
					.rlast(ddr4_A$rlast));

  // submodule ddr4_B
  mkMem_Model #(.ddr4_num(2'd1)) ddr4_B(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_B$araddr),
					.arburst(ddr4_B$arburst),
					.arcache(ddr4_B$arcache),
					.arid(ddr4_B$arid),
					.arlen(ddr4_B$arlen),
					.arlock(ddr4_B$arlock),
					.arprot(ddr4_B$arprot),
					.arqos(ddr4_B$arqos),
					.arregion(ddr4_B$arregion),
					.arsize(ddr4_B$arsize),
					.arvalid(ddr4_B$arvalid),
					.awaddr(ddr4_B$awaddr),
					.awburst(ddr4_B$awburst),
					.awcache(ddr4_B$awcache),
					.awid(ddr4_B$awid),
					.awlen(ddr4_B$awlen),
					.awlock(ddr4_B$awlock),
					.awprot(ddr4_B$awprot),
					.awqos(ddr4_B$awqos),
					.awregion(ddr4_B$awregion),
					.awsize(ddr4_B$awsize),
					.awvalid(ddr4_B$awvalid),
					.bready(ddr4_B$bready),
					.rready(ddr4_B$rready),
					.wdata(ddr4_B$wdata),
					.wlast(ddr4_B$wlast),
					.wstrb(ddr4_B$wstrb),
					.wvalid(ddr4_B$wvalid),
					.awready(ddr4_B$awready),
					.wready(ddr4_B$wready),
					.bvalid(ddr4_B$bvalid),
					.bid(ddr4_B$bid),
					.bresp(ddr4_B$bresp),
					.arready(ddr4_B$arready),
					.rvalid(ddr4_B$rvalid),
					.rid(ddr4_B$rid),
					.rdata(ddr4_B$rdata),
					.rresp(ddr4_B$rresp),
					.rlast(ddr4_B$rlast));

  // submodule ddr4_C
  mkMem_Model #(.ddr4_num(2'd2)) ddr4_C(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_C$araddr),
					.arburst(ddr4_C$arburst),
					.arcache(ddr4_C$arcache),
					.arid(ddr4_C$arid),
					.arlen(ddr4_C$arlen),
					.arlock(ddr4_C$arlock),
					.arprot(ddr4_C$arprot),
					.arqos(ddr4_C$arqos),
					.arregion(ddr4_C$arregion),
					.arsize(ddr4_C$arsize),
					.arvalid(ddr4_C$arvalid),
					.awaddr(ddr4_C$awaddr),
					.awburst(ddr4_C$awburst),
					.awcache(ddr4_C$awcache),
					.awid(ddr4_C$awid),
					.awlen(ddr4_C$awlen),
					.awlock(ddr4_C$awlock),
					.awprot(ddr4_C$awprot),
					.awqos(ddr4_C$awqos),
					.awregion(ddr4_C$awregion),
					.awsize(ddr4_C$awsize),
					.awvalid(ddr4_C$awvalid),
					.bready(ddr4_C$bready),
					.rready(ddr4_C$rready),
					.wdata(ddr4_C$wdata),
					.wlast(ddr4_C$wlast),
					.wstrb(ddr4_C$wstrb),
					.wvalid(ddr4_C$wvalid),
					.awready(ddr4_C$awready),
					.wready(ddr4_C$wready),
					.bvalid(ddr4_C$bvalid),
					.bid(ddr4_C$bid),
					.bresp(ddr4_C$bresp),
					.arready(ddr4_C$arready),
					.rvalid(ddr4_C$rvalid),
					.rid(ddr4_C$rid),
					.rdata(ddr4_C$rdata),
					.rresp(ddr4_C$rresp),
					.rlast(ddr4_C$rlast));

  // submodule ddr4_D
  mkMem_Model #(.ddr4_num(2'd3)) ddr4_D(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_D$araddr),
					.arburst(ddr4_D$arburst),
					.arcache(ddr4_D$arcache),
					.arid(ddr4_D$arid),
					.arlen(ddr4_D$arlen),
					.arlock(ddr4_D$arlock),
					.arprot(ddr4_D$arprot),
					.arqos(ddr4_D$arqos),
					.arregion(ddr4_D$arregion),
					.arsize(ddr4_D$arsize),
					.arvalid(ddr4_D$arvalid),
					.awaddr(ddr4_D$awaddr),
					.awburst(ddr4_D$awburst),
					.awcache(ddr4_D$awcache),
					.awid(ddr4_D$awid),
					.awlen(ddr4_D$awlen),
					.awlock(ddr4_D$awlock),
					.awprot(ddr4_D$awprot),
					.awqos(ddr4_D$awqos),
					.awregion(ddr4_D$awregion),
					.awsize(ddr4_D$awsize),
					.awvalid(ddr4_D$awvalid),
					.bready(ddr4_D$bready),
					.rready(ddr4_D$rready),
					.wdata(ddr4_D$wdata),
					.wlast(ddr4_D$wlast),
					.wstrb(ddr4_D$wstrb),
					.wvalid(ddr4_D$wvalid),
					.awready(ddr4_D$awready),
					.wready(ddr4_D$wready),
					.bvalid(ddr4_D$bvalid),
					.bid(ddr4_D$bid),
					.bresp(ddr4_D$bresp),
					.arready(ddr4_D$arready),
					.rvalid(ddr4_D$rvalid),
					.rid(ddr4_D$rid),
					.rdata(ddr4_D$rdata),
					.rresp(ddr4_D$rresp),
					.rlast(ddr4_D$rlast));

  // submodule dma_pcis_xactor_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) dma_pcis_xactor_f_rd_addr(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(dma_pcis_xactor_f_rd_addr$D_IN),
						     .ENQ(dma_pcis_xactor_f_rd_addr$ENQ),
						     .DEQ(dma_pcis_xactor_f_rd_addr$DEQ),
						     .CLR(dma_pcis_xactor_f_rd_addr$CLR),
						     .D_OUT(dma_pcis_xactor_f_rd_addr$D_OUT),
						     .FULL_N(),
						     .EMPTY_N(dma_pcis_xactor_f_rd_addr$EMPTY_N));

  // submodule dma_pcis_xactor_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) dma_pcis_xactor_f_rd_data(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(dma_pcis_xactor_f_rd_data$D_IN),
						     .ENQ(dma_pcis_xactor_f_rd_data$ENQ),
						     .DEQ(dma_pcis_xactor_f_rd_data$DEQ),
						     .CLR(dma_pcis_xactor_f_rd_data$CLR),
						     .D_OUT(),
						     .FULL_N(dma_pcis_xactor_f_rd_data$FULL_N),
						     .EMPTY_N());

  // submodule dma_pcis_xactor_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) dma_pcis_xactor_f_wr_addr(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(dma_pcis_xactor_f_wr_addr$D_IN),
						     .ENQ(dma_pcis_xactor_f_wr_addr$ENQ),
						     .DEQ(dma_pcis_xactor_f_wr_addr$DEQ),
						     .CLR(dma_pcis_xactor_f_wr_addr$CLR),
						     .D_OUT(dma_pcis_xactor_f_wr_addr$D_OUT),
						     .FULL_N(),
						     .EMPTY_N(dma_pcis_xactor_f_wr_addr$EMPTY_N));

  // submodule dma_pcis_xactor_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) dma_pcis_xactor_f_wr_data(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(dma_pcis_xactor_f_wr_data$D_IN),
						     .ENQ(dma_pcis_xactor_f_wr_data$ENQ),
						     .DEQ(dma_pcis_xactor_f_wr_data$DEQ),
						     .CLR(dma_pcis_xactor_f_wr_data$CLR),
						     .D_OUT(dma_pcis_xactor_f_wr_data$D_OUT),
						     .FULL_N(),
						     .EMPTY_N(dma_pcis_xactor_f_wr_data$EMPTY_N));

  // submodule dma_pcis_xactor_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) dma_pcis_xactor_f_wr_resp(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(dma_pcis_xactor_f_wr_resp$D_IN),
						     .ENQ(dma_pcis_xactor_f_wr_resp$ENQ),
						     .DEQ(dma_pcis_xactor_f_wr_resp$DEQ),
						     .CLR(dma_pcis_xactor_f_wr_resp$CLR),
						     .D_OUT(),
						     .FULL_N(dma_pcis_xactor_f_wr_resp$FULL_N),
						     .EMPTY_N());

  // submodule ocl_xactor_f_rd_addr
  FIFO2 #(.width(32'd35), .guarded(32'd1)) ocl_xactor_f_rd_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_rd_addr$D_IN),
								.ENQ(ocl_xactor_f_rd_addr$ENQ),
								.DEQ(ocl_xactor_f_rd_addr$DEQ),
								.CLR(ocl_xactor_f_rd_addr$CLR),
								.D_OUT(ocl_xactor_f_rd_addr$D_OUT),
								.FULL_N(ocl_xactor_f_rd_addr$FULL_N),
								.EMPTY_N(ocl_xactor_f_rd_addr$EMPTY_N));

  // submodule ocl_xactor_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(32'd1)) ocl_xactor_f_rd_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_rd_data$D_IN),
								.ENQ(ocl_xactor_f_rd_data$ENQ),
								.DEQ(ocl_xactor_f_rd_data$DEQ),
								.CLR(ocl_xactor_f_rd_data$CLR),
								.D_OUT(ocl_xactor_f_rd_data$D_OUT),
								.FULL_N(ocl_xactor_f_rd_data$FULL_N),
								.EMPTY_N(ocl_xactor_f_rd_data$EMPTY_N));

  // submodule ocl_xactor_f_wr_addr
  FIFO2 #(.width(32'd35), .guarded(32'd1)) ocl_xactor_f_wr_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_wr_addr$D_IN),
								.ENQ(ocl_xactor_f_wr_addr$ENQ),
								.DEQ(ocl_xactor_f_wr_addr$DEQ),
								.CLR(ocl_xactor_f_wr_addr$CLR),
								.D_OUT(ocl_xactor_f_wr_addr$D_OUT),
								.FULL_N(ocl_xactor_f_wr_addr$FULL_N),
								.EMPTY_N(ocl_xactor_f_wr_addr$EMPTY_N));

  // submodule ocl_xactor_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(32'd1)) ocl_xactor_f_wr_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_wr_data$D_IN),
								.ENQ(ocl_xactor_f_wr_data$ENQ),
								.DEQ(ocl_xactor_f_wr_data$DEQ),
								.CLR(ocl_xactor_f_wr_data$CLR),
								.D_OUT(ocl_xactor_f_wr_data$D_OUT),
								.FULL_N(ocl_xactor_f_wr_data$FULL_N),
								.EMPTY_N(ocl_xactor_f_wr_data$EMPTY_N));

  // submodule ocl_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ocl_xactor_f_wr_resp(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(ocl_xactor_f_wr_resp$D_IN),
							       .ENQ(ocl_xactor_f_wr_resp$ENQ),
							       .DEQ(ocl_xactor_f_wr_resp$DEQ),
							       .CLR(ocl_xactor_f_wr_resp$CLR),
							       .D_OUT(ocl_xactor_f_wr_resp$D_OUT),
							       .FULL_N(ocl_xactor_f_wr_resp$FULL_N),
							       .EMPTY_N(ocl_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_rl_wr_addr_channel_1
  assign CAN_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;

  // rule RL_rl_wr_data_channel_1
  assign CAN_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_response_channel_1
  assign CAN_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_1
  assign CAN_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;

  // rule RL_rl_rd_data_channel_1
  assign CAN_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_2
  assign CAN_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;

  // rule RL_rl_wr_data_channel_2
  assign CAN_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_response_channel_2
  assign CAN_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_2
  assign CAN_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;

  // rule RL_rl_rd_data_channel_2
  assign CAN_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_3
  assign CAN_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;

  // rule RL_rl_wr_data_channel_3
  assign CAN_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;

  // rule RL_rl_wr_response_channel_3
  assign CAN_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_3
  assign CAN_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;

  // rule RL_rl_rd_data_channel_3
  assign CAN_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_4
  assign CAN_FIRE_RL_rl_wr_addr_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_4 = 1'd1 ;

  // rule RL_rl_wr_data_channel_4
  assign CAN_FIRE_RL_rl_wr_data_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_4 = 1'd1 ;

  // rule RL_rl_wr_response_channel_4
  assign CAN_FIRE_RL_rl_wr_response_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_4 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_4
  assign CAN_FIRE_RL_rl_rd_addr_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_4 = 1'd1 ;

  // rule RL_rl_rd_data_channel_4
  assign CAN_FIRE_RL_rl_rd_data_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_4 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_5
  assign CAN_FIRE_RL_rl_wr_addr_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_5 = 1'd1 ;

  // rule RL_rl_wr_data_channel_5
  assign CAN_FIRE_RL_rl_wr_data_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_5 = 1'd1 ;

  // rule RL_rl_wr_response_channel_5
  assign CAN_FIRE_RL_rl_wr_response_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_5 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_5
  assign CAN_FIRE_RL_rl_rd_addr_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_5 = 1'd1 ;

  // rule RL_rl_rd_data_channel_5
  assign CAN_FIRE_RL_rl_rd_data_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_5 = 1'd1 ;

  // rule RL_rl_status_signals
  assign CAN_FIRE_RL_rl_status_signals = 1'd1 ;
  assign WILL_FIRE_RL_rl_status_signals = 1'd1 ;

  // rule RL_rl_once
  assign CAN_FIRE_RL_rl_once =
	     fsm_abort_whas__64_AND_fsm_abort_wget__65_66_O_ETC___d365 &&
	     !fsm_start_reg &&
	     !rg_done_once ;
  assign WILL_FIRE_RL_rl_once = CAN_FIRE_RL_rl_once ;

  // rule RL_rl_ocl_wr_response_drain
  assign CAN_FIRE_RL_rl_ocl_wr_response_drain = ocl_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_ocl_wr_response_drain =
	     ocl_xactor_f_wr_resp$EMPTY_N ;

  // rule RL_fsm_restart
  assign CAN_FIRE_RL_fsm_restart = fsm_start_reg_1 && !fsm_state_fired ;
  assign WILL_FIRE_RL_fsm_restart = CAN_FIRE_RL_fsm_restart ;

  // rule RL_fsm_action_l169c10
  assign CAN_FIRE_RL_fsm_action_l169c10 =
	     ocl_xactor_f_wr_addr$FULL_N && ocl_xactor_f_wr_data$FULL_N &&
	     fsm_state_mkFSMstate == 5'd1 ;
  assign WILL_FIRE_RL_fsm_action_l169c10 = CAN_FIRE_RL_fsm_action_l169c10 ;

  // rule RL_fsm_action_l180c10
  assign CAN_FIRE_RL_fsm_action_l180c10 =
	     ocl_xactor_f_wr_addr$FULL_N && ocl_xactor_f_wr_data$FULL_N &&
	     fsm_state_mkFSMstate == 5'd2 ;
  assign WILL_FIRE_RL_fsm_action_l180c10 = CAN_FIRE_RL_fsm_action_l180c10 ;

  // rule RL_fsm_action_l194c10
  assign CAN_FIRE_RL_fsm_action_l194c10 = fsm_state_mkFSMstate == 5'd3 ;
  assign WILL_FIRE_RL_fsm_action_l194c10 = CAN_FIRE_RL_fsm_action_l194c10 ;

  // rule RL_fsm_action_d_init_np
  assign CAN_FIRE_RL_fsm_action_d_init_np = fsm_state_mkFSMstate == 5'd4 ;
  assign WILL_FIRE_RL_fsm_action_d_init_np =
	     CAN_FIRE_RL_fsm_action_d_init_np ;

  // rule RL_fsm_action_np
  assign CAN_FIRE_RL_fsm_action_np =
	     fsm_jj_delay_count != 14'd9999 &&
	     (fsm_state_mkFSMstate == 5'd5 || fsm_state_mkFSMstate == 5'd6) ;
  assign WILL_FIRE_RL_fsm_action_np = CAN_FIRE_RL_fsm_action_np ;

  // rule RL_fsm_action_l198c10
  assign CAN_FIRE_RL_fsm_action_l198c10 =
	     fsm_jj_delay_count == 14'd9999 &&
	     (fsm_state_mkFSMstate == 5'd5 || fsm_state_mkFSMstate == 5'd6) ;
  assign WILL_FIRE_RL_fsm_action_l198c10 = CAN_FIRE_RL_fsm_action_l198c10 ;

  // rule RL_fsm_action_l201c10
  assign CAN_FIRE_RL_fsm_action_l201c10 =
	     ocl_xactor_f_wr_addr$FULL_N && ocl_xactor_f_wr_data$FULL_N &&
	     fsm_state_mkFSMstate == 5'd7 ;
  assign WILL_FIRE_RL_fsm_action_l201c10 = CAN_FIRE_RL_fsm_action_l201c10 ;

  // rule RL_fsm_action_l211c10
  assign CAN_FIRE_RL_fsm_action_l211c10 = fsm_state_mkFSMstate == 5'd8 ;
  assign WILL_FIRE_RL_fsm_action_l211c10 = CAN_FIRE_RL_fsm_action_l211c10 ;

  // rule RL_fsm_action_l212c21
  assign CAN_FIRE_RL_fsm_action_l212c21 = fsm_state_mkFSMstate == 5'd9 ;
  assign WILL_FIRE_RL_fsm_action_l212c21 = CAN_FIRE_RL_fsm_action_l212c21 ;

  // rule RL_fsm_action_l214c37
  assign CAN_FIRE_RL_fsm_action_l214c37 =
	     ocl_xactor_f_rd_addr$FULL_N && rg_running &&
	     (fsm_state_mkFSMstate == 5'd10 ||
	      fsm_state_mkFSMstate == 5'd12) ;
  assign WILL_FIRE_RL_fsm_action_l214c37 = CAN_FIRE_RL_fsm_action_l214c37 ;

  // rule RL_fsm_action_l215c13
  assign CAN_FIRE_RL_fsm_action_l215c13 =
	     ocl_xactor_f_rd_data$EMPTY_N && fsm_state_mkFSMstate == 5'd11 ;
  assign WILL_FIRE_RL_fsm_action_l215c13 = CAN_FIRE_RL_fsm_action_l215c13 ;

  // rule RL_fsm_action_l220c10
  assign CAN_FIRE_RL_fsm_action_l220c10 =
	     !rg_running &&
	     (fsm_state_mkFSMstate == 5'd10 ||
	      fsm_state_mkFSMstate == 5'd12) ;
  assign WILL_FIRE_RL_fsm_action_l220c10 = CAN_FIRE_RL_fsm_action_l220c10 ;

  // rule RL_fsm_action_l221c10
  assign CAN_FIRE_RL_fsm_action_l221c10 = fsm_state_mkFSMstate == 5'd13 ;
  assign WILL_FIRE_RL_fsm_action_l221c10 = CAN_FIRE_RL_fsm_action_l221c10 ;

  // rule __me_check_37
  assign CAN_FIRE___me_check_37 = 1'b1 ;
  assign WILL_FIRE___me_check_37 = 1'b1 ;

  // rule __me_check_38
  assign CAN_FIRE___me_check_38 = 1'b1 ;
  assign WILL_FIRE___me_check_38 = 1'b1 ;

  // rule __me_check_39
  assign CAN_FIRE___me_check_39 = 1'b1 ;
  assign WILL_FIRE___me_check_39 = 1'b1 ;

  // rule __me_check_40
  assign CAN_FIRE___me_check_40 = 1'b1 ;
  assign WILL_FIRE___me_check_40 = 1'b1 ;

  // rule __me_check_41
  assign CAN_FIRE___me_check_41 = 1'b1 ;
  assign WILL_FIRE___me_check_41 = 1'b1 ;

  // rule __me_check_43
  assign CAN_FIRE___me_check_43 = 1'b1 ;
  assign WILL_FIRE___me_check_43 = 1'b1 ;

  // rule __me_check_42
  assign CAN_FIRE___me_check_42 = 1'b1 ;
  assign WILL_FIRE___me_check_42 = 1'b1 ;

  // rule __me_check_44
  assign CAN_FIRE___me_check_44 = 1'b1 ;
  assign WILL_FIRE___me_check_44 = 1'b1 ;

  // rule __me_check_46
  assign CAN_FIRE___me_check_46 = 1'b1 ;
  assign WILL_FIRE___me_check_46 = 1'b1 ;

  // rule __me_check_45
  assign CAN_FIRE___me_check_45 = 1'b1 ;
  assign WILL_FIRE___me_check_45 = 1'b1 ;

  // rule __me_check_47
  assign CAN_FIRE___me_check_47 = 1'b1 ;
  assign WILL_FIRE___me_check_47 = 1'b1 ;

  // rule __me_check_48
  assign CAN_FIRE___me_check_48 = 1'b1 ;
  assign WILL_FIRE___me_check_48 = 1'b1 ;

  // rule RL_fsm_fsm_start
  assign CAN_FIRE_RL_fsm_fsm_start =
	     fsm_abort_whas__64_AND_fsm_abort_wget__65_66_O_ETC___d365 &&
	     fsm_start_reg ;
  assign WILL_FIRE_RL_fsm_fsm_start = CAN_FIRE_RL_fsm_fsm_start ;

  // rule RL_fsm_action_l161c10
  assign CAN_FIRE_RL_fsm_action_l161c10 =
	     fsm_start_wire$whas &&
	     (fsm_state_mkFSMstate == 5'd0 || fsm_state_mkFSMstate == 5'd14) ;
  assign WILL_FIRE_RL_fsm_action_l161c10 = CAN_FIRE_RL_fsm_action_l161c10 ;

  // rule __me_check_36
  assign CAN_FIRE___me_check_36 = 1'b1 ;
  assign WILL_FIRE___me_check_36 = 1'b1 ;

  // rule RL_fsm_idle_l160c7
  assign CAN_FIRE_RL_fsm_idle_l160c7 =
	     !fsm_start_wire$whas && fsm_state_mkFSMstate == 5'd14 ;
  assign WILL_FIRE_RL_fsm_idle_l160c7 = CAN_FIRE_RL_fsm_idle_l160c7 ;

  // rule RL_fsm_start_reg__dreg_update
  assign CAN_FIRE_RL_fsm_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_fsm_start_reg__dreg_update = 1'd1 ;

  // rule RL_fsm_state_handle_abort
  assign CAN_FIRE_RL_fsm_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_fsm_state_handle_abort = 1'b0 ;

  // rule RL_fsm_state_every
  assign CAN_FIRE_RL_fsm_state_every = 1'd1 ;
  assign WILL_FIRE_RL_fsm_state_every = 1'd1 ;

  // rule RL_fsm_state_fired__dreg_update
  assign CAN_FIRE_RL_fsm_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_fsm_state_fired__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_fsm_jj_delay_count$write_1__VAL_1 = fsm_jj_delay_count + 14'd1 ;
  assign MUX_ocl_xactor_f_wr_data$enq_1__VAL_1 = { data__h43706, 4'd15 } ;
  assign MUX_ocl_xactor_f_wr_data$enq_1__VAL_2 = { v__h44040, 4'd15 } ;
  assign MUX_rg_running$write_1__VAL_1 =
	     ocl_xactor_f_rd_data$D_OUT[31:0] < 32'd100000 ;

  // inlined wires
  assign fsm_start_wire$whas =
	     WILL_FIRE_RL_fsm_fsm_start || WILL_FIRE_RL_fsm_restart ;
  assign fsm_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_idle_l160c7 ||
	     WILL_FIRE_RL_fsm_action_l221c10 ||
	     WILL_FIRE_RL_fsm_action_l220c10 ||
	     WILL_FIRE_RL_fsm_action_l215c13 ||
	     WILL_FIRE_RL_fsm_action_l214c37 ||
	     WILL_FIRE_RL_fsm_action_l212c21 ||
	     WILL_FIRE_RL_fsm_action_l211c10 ||
	     WILL_FIRE_RL_fsm_action_l201c10 ||
	     WILL_FIRE_RL_fsm_action_l198c10 ||
	     WILL_FIRE_RL_fsm_action_np ||
	     WILL_FIRE_RL_fsm_action_d_init_np ||
	     WILL_FIRE_RL_fsm_action_l194c10 ||
	     WILL_FIRE_RL_fsm_action_l180c10 ||
	     WILL_FIRE_RL_fsm_action_l169c10 ||
	     WILL_FIRE_RL_fsm_action_l161c10 ;

  // register fsm_jj_delay_count
  assign fsm_jj_delay_count$D_IN =
	     WILL_FIRE_RL_fsm_action_np ?
	       MUX_fsm_jj_delay_count$write_1__VAL_1 :
	       14'd0 ;
  assign fsm_jj_delay_count$EN =
	     WILL_FIRE_RL_fsm_action_np || WILL_FIRE_RL_fsm_action_d_init_np ;

  // register fsm_start_reg
  assign fsm_start_reg$D_IN = !WILL_FIRE_RL_fsm_fsm_start ;
  assign fsm_start_reg$EN =
	     WILL_FIRE_RL_fsm_fsm_start || WILL_FIRE_RL_rl_once ;

  // register fsm_start_reg_1
  assign fsm_start_reg_1$D_IN = fsm_start_wire$whas ;
  assign fsm_start_reg_1$EN = 1'd1 ;

  // register fsm_state_can_overlap
  assign fsm_state_can_overlap$D_IN =
	     fsm_state_set_pw$whas || fsm_state_can_overlap ;
  assign fsm_state_can_overlap$EN = 1'd1 ;

  // register fsm_state_fired
  assign fsm_state_fired$D_IN = fsm_state_set_pw$whas ;
  assign fsm_state_fired$EN = 1'd1 ;

  // register fsm_state_mkFSMstate
  always@(WILL_FIRE_RL_fsm_idle_l160c7 or
	  WILL_FIRE_RL_fsm_action_l161c10 or
	  WILL_FIRE_RL_fsm_action_l169c10 or
	  WILL_FIRE_RL_fsm_action_l180c10 or
	  WILL_FIRE_RL_fsm_action_l194c10 or
	  WILL_FIRE_RL_fsm_action_d_init_np or
	  WILL_FIRE_RL_fsm_action_np or
	  WILL_FIRE_RL_fsm_action_l198c10 or
	  WILL_FIRE_RL_fsm_action_l201c10 or
	  WILL_FIRE_RL_fsm_action_l211c10 or
	  WILL_FIRE_RL_fsm_action_l212c21 or
	  WILL_FIRE_RL_fsm_action_l214c37 or
	  WILL_FIRE_RL_fsm_action_l215c13 or
	  WILL_FIRE_RL_fsm_action_l220c10 or WILL_FIRE_RL_fsm_action_l221c10)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fsm_idle_l160c7: fsm_state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_fsm_action_l161c10: fsm_state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_fsm_action_l169c10: fsm_state_mkFSMstate$D_IN = 5'd2;
      WILL_FIRE_RL_fsm_action_l180c10: fsm_state_mkFSMstate$D_IN = 5'd3;
      WILL_FIRE_RL_fsm_action_l194c10: fsm_state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_fsm_action_d_init_np: fsm_state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_fsm_action_np: fsm_state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_fsm_action_l198c10: fsm_state_mkFSMstate$D_IN = 5'd7;
      WILL_FIRE_RL_fsm_action_l201c10: fsm_state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_fsm_action_l211c10: fsm_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_fsm_action_l212c21: fsm_state_mkFSMstate$D_IN = 5'd10;
      WILL_FIRE_RL_fsm_action_l214c37: fsm_state_mkFSMstate$D_IN = 5'd11;
      WILL_FIRE_RL_fsm_action_l215c13: fsm_state_mkFSMstate$D_IN = 5'd12;
      WILL_FIRE_RL_fsm_action_l220c10: fsm_state_mkFSMstate$D_IN = 5'd13;
      WILL_FIRE_RL_fsm_action_l221c10: fsm_state_mkFSMstate$D_IN = 5'd14;
      default: fsm_state_mkFSMstate$D_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  assign fsm_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_idle_l160c7 ||
	     WILL_FIRE_RL_fsm_action_l161c10 ||
	     WILL_FIRE_RL_fsm_action_l169c10 ||
	     WILL_FIRE_RL_fsm_action_l180c10 ||
	     WILL_FIRE_RL_fsm_action_l194c10 ||
	     WILL_FIRE_RL_fsm_action_d_init_np ||
	     WILL_FIRE_RL_fsm_action_np ||
	     WILL_FIRE_RL_fsm_action_l198c10 ||
	     WILL_FIRE_RL_fsm_action_l201c10 ||
	     WILL_FIRE_RL_fsm_action_l211c10 ||
	     WILL_FIRE_RL_fsm_action_l212c21 ||
	     WILL_FIRE_RL_fsm_action_l214c37 ||
	     WILL_FIRE_RL_fsm_action_l215c13 ||
	     WILL_FIRE_RL_fsm_action_l220c10 ||
	     WILL_FIRE_RL_fsm_action_l221c10 ;

  // register rg_counter_4ns
  assign rg_counter_4ns$D_IN =
	     rg_counter_4ns +
	     64'b0000000000000000000000000000000000000000000000000000000000000101 ;
  assign rg_counter_4ns$EN = 1'd1 ;

  // register rg_done_once
  assign rg_done_once$D_IN = 1'd1 ;
  assign rg_done_once$EN = CAN_FIRE_RL_rl_once ;

  // register rg_last_vled
  assign rg_last_vled$D_IN = aws_BSV_top$m_vled ;
  assign rg_last_vled$EN = 1'd1 ;

  // register rg_running
  assign rg_running$D_IN =
	     !WILL_FIRE_RL_fsm_action_l215c13 ||
	     MUX_rg_running$write_1__VAL_1 ;
  assign rg_running$EN =
	     WILL_FIRE_RL_fsm_action_l215c13 ||
	     WILL_FIRE_RL_fsm_action_l212c21 ;

  // register rg_vdip
  assign rg_vdip$D_IN = 16'h0 ;
  assign rg_vdip$EN = 1'b0 ;

  // submodule aws_BSV_top
  assign aws_BSV_top$ddr4_A_master_arready = ddr4_A$arready ;
  assign aws_BSV_top$ddr4_A_master_awready = ddr4_A$awready ;
  assign aws_BSV_top$ddr4_A_master_bid = ddr4_A$bid ;
  assign aws_BSV_top$ddr4_A_master_bresp = ddr4_A$bresp ;
  assign aws_BSV_top$ddr4_A_master_bvalid = ddr4_A$bvalid ;
  assign aws_BSV_top$ddr4_A_master_rdata = ddr4_A$rdata ;
  assign aws_BSV_top$ddr4_A_master_rid = ddr4_A$rid ;
  assign aws_BSV_top$ddr4_A_master_rlast = ddr4_A$rlast ;
  assign aws_BSV_top$ddr4_A_master_rresp = ddr4_A$rresp ;
  assign aws_BSV_top$ddr4_A_master_rvalid = ddr4_A$rvalid ;
  assign aws_BSV_top$ddr4_A_master_wready = ddr4_A$wready ;
  assign aws_BSV_top$ddr4_B_master_arready = ddr4_B$arready ;
  assign aws_BSV_top$ddr4_B_master_awready = ddr4_B$awready ;
  assign aws_BSV_top$ddr4_B_master_bid = ddr4_B$bid ;
  assign aws_BSV_top$ddr4_B_master_bresp = ddr4_B$bresp ;
  assign aws_BSV_top$ddr4_B_master_bvalid = ddr4_B$bvalid ;
  assign aws_BSV_top$ddr4_B_master_rdata = ddr4_B$rdata ;
  assign aws_BSV_top$ddr4_B_master_rid = ddr4_B$rid ;
  assign aws_BSV_top$ddr4_B_master_rlast = ddr4_B$rlast ;
  assign aws_BSV_top$ddr4_B_master_rresp = ddr4_B$rresp ;
  assign aws_BSV_top$ddr4_B_master_rvalid = ddr4_B$rvalid ;
  assign aws_BSV_top$ddr4_B_master_wready = ddr4_B$wready ;
  assign aws_BSV_top$ddr4_C_master_arready = ddr4_C$arready ;
  assign aws_BSV_top$ddr4_C_master_awready = ddr4_C$awready ;
  assign aws_BSV_top$ddr4_C_master_bid = ddr4_C$bid ;
  assign aws_BSV_top$ddr4_C_master_bresp = ddr4_C$bresp ;
  assign aws_BSV_top$ddr4_C_master_bvalid = ddr4_C$bvalid ;
  assign aws_BSV_top$ddr4_C_master_rdata = ddr4_C$rdata ;
  assign aws_BSV_top$ddr4_C_master_rid = ddr4_C$rid ;
  assign aws_BSV_top$ddr4_C_master_rlast = ddr4_C$rlast ;
  assign aws_BSV_top$ddr4_C_master_rresp = ddr4_C$rresp ;
  assign aws_BSV_top$ddr4_C_master_rvalid = ddr4_C$rvalid ;
  assign aws_BSV_top$ddr4_C_master_wready = ddr4_C$wready ;
  assign aws_BSV_top$ddr4_D_master_arready = ddr4_D$arready ;
  assign aws_BSV_top$ddr4_D_master_awready = ddr4_D$awready ;
  assign aws_BSV_top$ddr4_D_master_bid = ddr4_D$bid ;
  assign aws_BSV_top$ddr4_D_master_bresp = ddr4_D$bresp ;
  assign aws_BSV_top$ddr4_D_master_bvalid = ddr4_D$bvalid ;
  assign aws_BSV_top$ddr4_D_master_rdata = ddr4_D$rdata ;
  assign aws_BSV_top$ddr4_D_master_rid = ddr4_D$rid ;
  assign aws_BSV_top$ddr4_D_master_rlast = ddr4_D$rlast ;
  assign aws_BSV_top$ddr4_D_master_rresp = ddr4_D$rresp ;
  assign aws_BSV_top$ddr4_D_master_rvalid = ddr4_D$rvalid ;
  assign aws_BSV_top$ddr4_D_master_wready = ddr4_D$wready ;
  assign aws_BSV_top$dma_pcis_slave_araddr =
	     dma_pcis_xactor_f_rd_addr$D_OUT[92:29] ;
  assign aws_BSV_top$dma_pcis_slave_arburst =
	     dma_pcis_xactor_f_rd_addr$D_OUT[17:16] ;
  assign aws_BSV_top$dma_pcis_slave_arcache =
	     dma_pcis_xactor_f_rd_addr$D_OUT[14:11] ;
  assign aws_BSV_top$dma_pcis_slave_arid =
	     dma_pcis_xactor_f_rd_addr$D_OUT[108:93] ;
  assign aws_BSV_top$dma_pcis_slave_arlen =
	     dma_pcis_xactor_f_rd_addr$D_OUT[28:21] ;
  assign aws_BSV_top$dma_pcis_slave_arlock =
	     dma_pcis_xactor_f_rd_addr$D_OUT[15] ;
  assign aws_BSV_top$dma_pcis_slave_arprot =
	     dma_pcis_xactor_f_rd_addr$D_OUT[10:8] ;
  assign aws_BSV_top$dma_pcis_slave_arqos =
	     dma_pcis_xactor_f_rd_addr$D_OUT[7:4] ;
  assign aws_BSV_top$dma_pcis_slave_arregion =
	     dma_pcis_xactor_f_rd_addr$D_OUT[3:0] ;
  assign aws_BSV_top$dma_pcis_slave_arsize =
	     dma_pcis_xactor_f_rd_addr$D_OUT[20:18] ;
  assign aws_BSV_top$dma_pcis_slave_arvalid =
	     dma_pcis_xactor_f_rd_addr$EMPTY_N ;
  assign aws_BSV_top$dma_pcis_slave_awaddr =
	     dma_pcis_xactor_f_wr_addr$D_OUT[92:29] ;
  assign aws_BSV_top$dma_pcis_slave_awburst =
	     dma_pcis_xactor_f_wr_addr$D_OUT[17:16] ;
  assign aws_BSV_top$dma_pcis_slave_awcache =
	     dma_pcis_xactor_f_wr_addr$D_OUT[14:11] ;
  assign aws_BSV_top$dma_pcis_slave_awid =
	     dma_pcis_xactor_f_wr_addr$D_OUT[108:93] ;
  assign aws_BSV_top$dma_pcis_slave_awlen =
	     dma_pcis_xactor_f_wr_addr$D_OUT[28:21] ;
  assign aws_BSV_top$dma_pcis_slave_awlock =
	     dma_pcis_xactor_f_wr_addr$D_OUT[15] ;
  assign aws_BSV_top$dma_pcis_slave_awprot =
	     dma_pcis_xactor_f_wr_addr$D_OUT[10:8] ;
  assign aws_BSV_top$dma_pcis_slave_awqos =
	     dma_pcis_xactor_f_wr_addr$D_OUT[7:4] ;
  assign aws_BSV_top$dma_pcis_slave_awregion =
	     dma_pcis_xactor_f_wr_addr$D_OUT[3:0] ;
  assign aws_BSV_top$dma_pcis_slave_awsize =
	     dma_pcis_xactor_f_wr_addr$D_OUT[20:18] ;
  assign aws_BSV_top$dma_pcis_slave_awvalid =
	     dma_pcis_xactor_f_wr_addr$EMPTY_N ;
  assign aws_BSV_top$dma_pcis_slave_bready =
	     dma_pcis_xactor_f_wr_resp$FULL_N ;
  assign aws_BSV_top$dma_pcis_slave_rready =
	     dma_pcis_xactor_f_rd_data$FULL_N ;
  assign aws_BSV_top$dma_pcis_slave_wdata =
	     dma_pcis_xactor_f_wr_data$D_OUT[576:65] ;
  assign aws_BSV_top$dma_pcis_slave_wlast =
	     dma_pcis_xactor_f_wr_data$D_OUT[0] ;
  assign aws_BSV_top$dma_pcis_slave_wstrb =
	     dma_pcis_xactor_f_wr_data$D_OUT[64:1] ;
  assign aws_BSV_top$dma_pcis_slave_wvalid =
	     dma_pcis_xactor_f_wr_data$EMPTY_N ;
  assign aws_BSV_top$m_ddr4_ready_ddr4_A_B_C_D_ready = 4'd15 ;
  assign aws_BSV_top$m_glcount0_glcount0 = { 1'd0, rg_counter_4ns[63:1] } ;
  assign aws_BSV_top$m_glcount1_glcount1 = { 1'd0, rg_counter_4ns[63:1] } ;
  assign aws_BSV_top$m_vdip_vdip = rg_vdip ;
  assign aws_BSV_top$ocl_slave_araddr = ocl_xactor_f_rd_addr$D_OUT[34:3] ;
  assign aws_BSV_top$ocl_slave_arprot = ocl_xactor_f_rd_addr$D_OUT[2:0] ;
  assign aws_BSV_top$ocl_slave_arvalid = ocl_xactor_f_rd_addr$EMPTY_N ;
  assign aws_BSV_top$ocl_slave_awaddr = ocl_xactor_f_wr_addr$D_OUT[34:3] ;
  assign aws_BSV_top$ocl_slave_awprot = ocl_xactor_f_wr_addr$D_OUT[2:0] ;
  assign aws_BSV_top$ocl_slave_awvalid = ocl_xactor_f_wr_addr$EMPTY_N ;
  assign aws_BSV_top$ocl_slave_bready = ocl_xactor_f_wr_resp$FULL_N ;
  assign aws_BSV_top$ocl_slave_rready = ocl_xactor_f_rd_data$FULL_N ;
  assign aws_BSV_top$ocl_slave_wdata = ocl_xactor_f_wr_data$D_OUT[35:4] ;
  assign aws_BSV_top$ocl_slave_wstrb = ocl_xactor_f_wr_data$D_OUT[3:0] ;
  assign aws_BSV_top$ocl_slave_wvalid = ocl_xactor_f_wr_data$EMPTY_N ;

  // submodule ddr4_A
  assign ddr4_A$araddr = aws_BSV_top$ddr4_A_master_araddr ;
  assign ddr4_A$arburst = aws_BSV_top$ddr4_A_master_arburst ;
  assign ddr4_A$arcache = aws_BSV_top$ddr4_A_master_arcache ;
  assign ddr4_A$arid = aws_BSV_top$ddr4_A_master_arid ;
  assign ddr4_A$arlen = aws_BSV_top$ddr4_A_master_arlen ;
  assign ddr4_A$arlock = aws_BSV_top$ddr4_A_master_arlock ;
  assign ddr4_A$arprot = aws_BSV_top$ddr4_A_master_arprot ;
  assign ddr4_A$arqos = aws_BSV_top$ddr4_A_master_arqos ;
  assign ddr4_A$arregion = aws_BSV_top$ddr4_A_master_arregion ;
  assign ddr4_A$arsize = aws_BSV_top$ddr4_A_master_arsize ;
  assign ddr4_A$arvalid = aws_BSV_top$ddr4_A_master_arvalid ;
  assign ddr4_A$awaddr = aws_BSV_top$ddr4_A_master_awaddr ;
  assign ddr4_A$awburst = aws_BSV_top$ddr4_A_master_awburst ;
  assign ddr4_A$awcache = aws_BSV_top$ddr4_A_master_awcache ;
  assign ddr4_A$awid = aws_BSV_top$ddr4_A_master_awid ;
  assign ddr4_A$awlen = aws_BSV_top$ddr4_A_master_awlen ;
  assign ddr4_A$awlock = aws_BSV_top$ddr4_A_master_awlock ;
  assign ddr4_A$awprot = aws_BSV_top$ddr4_A_master_awprot ;
  assign ddr4_A$awqos = aws_BSV_top$ddr4_A_master_awqos ;
  assign ddr4_A$awregion = aws_BSV_top$ddr4_A_master_awregion ;
  assign ddr4_A$awsize = aws_BSV_top$ddr4_A_master_awsize ;
  assign ddr4_A$awvalid = aws_BSV_top$ddr4_A_master_awvalid ;
  assign ddr4_A$bready = aws_BSV_top$ddr4_A_master_bready ;
  assign ddr4_A$rready = aws_BSV_top$ddr4_A_master_rready ;
  assign ddr4_A$wdata = aws_BSV_top$ddr4_A_master_wdata ;
  assign ddr4_A$wlast = aws_BSV_top$ddr4_A_master_wlast ;
  assign ddr4_A$wstrb = aws_BSV_top$ddr4_A_master_wstrb ;
  assign ddr4_A$wvalid = aws_BSV_top$ddr4_A_master_wvalid ;

  // submodule ddr4_B
  assign ddr4_B$araddr = aws_BSV_top$ddr4_B_master_araddr ;
  assign ddr4_B$arburst = aws_BSV_top$ddr4_B_master_arburst ;
  assign ddr4_B$arcache = aws_BSV_top$ddr4_B_master_arcache ;
  assign ddr4_B$arid = aws_BSV_top$ddr4_B_master_arid ;
  assign ddr4_B$arlen = aws_BSV_top$ddr4_B_master_arlen ;
  assign ddr4_B$arlock = aws_BSV_top$ddr4_B_master_arlock ;
  assign ddr4_B$arprot = aws_BSV_top$ddr4_B_master_arprot ;
  assign ddr4_B$arqos = aws_BSV_top$ddr4_B_master_arqos ;
  assign ddr4_B$arregion = aws_BSV_top$ddr4_B_master_arregion ;
  assign ddr4_B$arsize = aws_BSV_top$ddr4_B_master_arsize ;
  assign ddr4_B$arvalid = aws_BSV_top$ddr4_B_master_arvalid ;
  assign ddr4_B$awaddr = aws_BSV_top$ddr4_B_master_awaddr ;
  assign ddr4_B$awburst = aws_BSV_top$ddr4_B_master_awburst ;
  assign ddr4_B$awcache = aws_BSV_top$ddr4_B_master_awcache ;
  assign ddr4_B$awid = aws_BSV_top$ddr4_B_master_awid ;
  assign ddr4_B$awlen = aws_BSV_top$ddr4_B_master_awlen ;
  assign ddr4_B$awlock = aws_BSV_top$ddr4_B_master_awlock ;
  assign ddr4_B$awprot = aws_BSV_top$ddr4_B_master_awprot ;
  assign ddr4_B$awqos = aws_BSV_top$ddr4_B_master_awqos ;
  assign ddr4_B$awregion = aws_BSV_top$ddr4_B_master_awregion ;
  assign ddr4_B$awsize = aws_BSV_top$ddr4_B_master_awsize ;
  assign ddr4_B$awvalid = aws_BSV_top$ddr4_B_master_awvalid ;
  assign ddr4_B$bready = aws_BSV_top$ddr4_B_master_bready ;
  assign ddr4_B$rready = aws_BSV_top$ddr4_B_master_rready ;
  assign ddr4_B$wdata = aws_BSV_top$ddr4_B_master_wdata ;
  assign ddr4_B$wlast = aws_BSV_top$ddr4_B_master_wlast ;
  assign ddr4_B$wstrb = aws_BSV_top$ddr4_B_master_wstrb ;
  assign ddr4_B$wvalid = aws_BSV_top$ddr4_B_master_wvalid ;

  // submodule ddr4_C
  assign ddr4_C$araddr = aws_BSV_top$ddr4_C_master_araddr ;
  assign ddr4_C$arburst = aws_BSV_top$ddr4_C_master_arburst ;
  assign ddr4_C$arcache = aws_BSV_top$ddr4_C_master_arcache ;
  assign ddr4_C$arid = aws_BSV_top$ddr4_C_master_arid ;
  assign ddr4_C$arlen = aws_BSV_top$ddr4_C_master_arlen ;
  assign ddr4_C$arlock = aws_BSV_top$ddr4_C_master_arlock ;
  assign ddr4_C$arprot = aws_BSV_top$ddr4_C_master_arprot ;
  assign ddr4_C$arqos = aws_BSV_top$ddr4_C_master_arqos ;
  assign ddr4_C$arregion = aws_BSV_top$ddr4_C_master_arregion ;
  assign ddr4_C$arsize = aws_BSV_top$ddr4_C_master_arsize ;
  assign ddr4_C$arvalid = aws_BSV_top$ddr4_C_master_arvalid ;
  assign ddr4_C$awaddr = aws_BSV_top$ddr4_C_master_awaddr ;
  assign ddr4_C$awburst = aws_BSV_top$ddr4_C_master_awburst ;
  assign ddr4_C$awcache = aws_BSV_top$ddr4_C_master_awcache ;
  assign ddr4_C$awid = aws_BSV_top$ddr4_C_master_awid ;
  assign ddr4_C$awlen = aws_BSV_top$ddr4_C_master_awlen ;
  assign ddr4_C$awlock = aws_BSV_top$ddr4_C_master_awlock ;
  assign ddr4_C$awprot = aws_BSV_top$ddr4_C_master_awprot ;
  assign ddr4_C$awqos = aws_BSV_top$ddr4_C_master_awqos ;
  assign ddr4_C$awregion = aws_BSV_top$ddr4_C_master_awregion ;
  assign ddr4_C$awsize = aws_BSV_top$ddr4_C_master_awsize ;
  assign ddr4_C$awvalid = aws_BSV_top$ddr4_C_master_awvalid ;
  assign ddr4_C$bready = aws_BSV_top$ddr4_C_master_bready ;
  assign ddr4_C$rready = aws_BSV_top$ddr4_C_master_rready ;
  assign ddr4_C$wdata = aws_BSV_top$ddr4_C_master_wdata ;
  assign ddr4_C$wlast = aws_BSV_top$ddr4_C_master_wlast ;
  assign ddr4_C$wstrb = aws_BSV_top$ddr4_C_master_wstrb ;
  assign ddr4_C$wvalid = aws_BSV_top$ddr4_C_master_wvalid ;

  // submodule ddr4_D
  assign ddr4_D$araddr = aws_BSV_top$ddr4_D_master_araddr ;
  assign ddr4_D$arburst = aws_BSV_top$ddr4_D_master_arburst ;
  assign ddr4_D$arcache = aws_BSV_top$ddr4_D_master_arcache ;
  assign ddr4_D$arid = aws_BSV_top$ddr4_D_master_arid ;
  assign ddr4_D$arlen = aws_BSV_top$ddr4_D_master_arlen ;
  assign ddr4_D$arlock = aws_BSV_top$ddr4_D_master_arlock ;
  assign ddr4_D$arprot = aws_BSV_top$ddr4_D_master_arprot ;
  assign ddr4_D$arqos = aws_BSV_top$ddr4_D_master_arqos ;
  assign ddr4_D$arregion = aws_BSV_top$ddr4_D_master_arregion ;
  assign ddr4_D$arsize = aws_BSV_top$ddr4_D_master_arsize ;
  assign ddr4_D$arvalid = aws_BSV_top$ddr4_D_master_arvalid ;
  assign ddr4_D$awaddr = aws_BSV_top$ddr4_D_master_awaddr ;
  assign ddr4_D$awburst = aws_BSV_top$ddr4_D_master_awburst ;
  assign ddr4_D$awcache = aws_BSV_top$ddr4_D_master_awcache ;
  assign ddr4_D$awid = aws_BSV_top$ddr4_D_master_awid ;
  assign ddr4_D$awlen = aws_BSV_top$ddr4_D_master_awlen ;
  assign ddr4_D$awlock = aws_BSV_top$ddr4_D_master_awlock ;
  assign ddr4_D$awprot = aws_BSV_top$ddr4_D_master_awprot ;
  assign ddr4_D$awqos = aws_BSV_top$ddr4_D_master_awqos ;
  assign ddr4_D$awregion = aws_BSV_top$ddr4_D_master_awregion ;
  assign ddr4_D$awsize = aws_BSV_top$ddr4_D_master_awsize ;
  assign ddr4_D$awvalid = aws_BSV_top$ddr4_D_master_awvalid ;
  assign ddr4_D$bready = aws_BSV_top$ddr4_D_master_bready ;
  assign ddr4_D$rready = aws_BSV_top$ddr4_D_master_rready ;
  assign ddr4_D$wdata = aws_BSV_top$ddr4_D_master_wdata ;
  assign ddr4_D$wlast = aws_BSV_top$ddr4_D_master_wlast ;
  assign ddr4_D$wstrb = aws_BSV_top$ddr4_D_master_wstrb ;
  assign ddr4_D$wvalid = aws_BSV_top$ddr4_D_master_wvalid ;

  // submodule dma_pcis_xactor_f_rd_addr
  assign dma_pcis_xactor_f_rd_addr$D_IN = 109'h0 ;
  assign dma_pcis_xactor_f_rd_addr$ENQ = 1'b0 ;
  assign dma_pcis_xactor_f_rd_addr$DEQ =
	     dma_pcis_xactor_f_rd_addr$EMPTY_N &&
	     aws_BSV_top$dma_pcis_slave_arready ;
  assign dma_pcis_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule dma_pcis_xactor_f_rd_data
  assign dma_pcis_xactor_f_rd_data$D_IN =
	     { aws_BSV_top$dma_pcis_slave_rid,
	       aws_BSV_top$dma_pcis_slave_rdata,
	       aws_BSV_top$dma_pcis_slave_rresp,
	       aws_BSV_top$dma_pcis_slave_rlast } ;
  assign dma_pcis_xactor_f_rd_data$ENQ =
	     aws_BSV_top$dma_pcis_slave_rvalid &&
	     dma_pcis_xactor_f_rd_data$FULL_N ;
  assign dma_pcis_xactor_f_rd_data$DEQ = 1'b0 ;
  assign dma_pcis_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule dma_pcis_xactor_f_wr_addr
  assign dma_pcis_xactor_f_wr_addr$D_IN = 109'h0 ;
  assign dma_pcis_xactor_f_wr_addr$ENQ = 1'b0 ;
  assign dma_pcis_xactor_f_wr_addr$DEQ =
	     dma_pcis_xactor_f_wr_addr$EMPTY_N &&
	     aws_BSV_top$dma_pcis_slave_awready ;
  assign dma_pcis_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule dma_pcis_xactor_f_wr_data
  assign dma_pcis_xactor_f_wr_data$D_IN = 577'h0 ;
  assign dma_pcis_xactor_f_wr_data$ENQ = 1'b0 ;
  assign dma_pcis_xactor_f_wr_data$DEQ =
	     dma_pcis_xactor_f_wr_data$EMPTY_N &&
	     aws_BSV_top$dma_pcis_slave_wready ;
  assign dma_pcis_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule dma_pcis_xactor_f_wr_resp
  assign dma_pcis_xactor_f_wr_resp$D_IN =
	     { aws_BSV_top$dma_pcis_slave_bid,
	       aws_BSV_top$dma_pcis_slave_bresp } ;
  assign dma_pcis_xactor_f_wr_resp$ENQ =
	     aws_BSV_top$dma_pcis_slave_bvalid &&
	     dma_pcis_xactor_f_wr_resp$FULL_N ;
  assign dma_pcis_xactor_f_wr_resp$DEQ = 1'b0 ;
  assign dma_pcis_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule ocl_xactor_f_rd_addr
  assign ocl_xactor_f_rd_addr$D_IN = 35'd524288 ;
  assign ocl_xactor_f_rd_addr$ENQ = CAN_FIRE_RL_fsm_action_l214c37 ;
  assign ocl_xactor_f_rd_addr$DEQ =
	     ocl_xactor_f_rd_addr$EMPTY_N && aws_BSV_top$ocl_slave_arready ;
  assign ocl_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule ocl_xactor_f_rd_data
  assign ocl_xactor_f_rd_data$D_IN =
	     { aws_BSV_top$ocl_slave_rresp, aws_BSV_top$ocl_slave_rdata } ;
  assign ocl_xactor_f_rd_data$ENQ =
	     aws_BSV_top$ocl_slave_rvalid && ocl_xactor_f_rd_data$FULL_N ;
  assign ocl_xactor_f_rd_data$DEQ = CAN_FIRE_RL_fsm_action_l215c13 ;
  assign ocl_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule ocl_xactor_f_wr_addr
  always@(WILL_FIRE_RL_fsm_action_l169c10 or
	  WILL_FIRE_RL_fsm_action_l180c10 or WILL_FIRE_RL_fsm_action_l201c10)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fsm_action_l169c10: ocl_xactor_f_wr_addr$D_IN = 35'd524320;
      WILL_FIRE_RL_fsm_action_l180c10: ocl_xactor_f_wr_addr$D_IN = 35'd524352;
      WILL_FIRE_RL_fsm_action_l201c10: ocl_xactor_f_wr_addr$D_IN = 35'd524384;
      default: ocl_xactor_f_wr_addr$D_IN =
		   35'h2AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ocl_xactor_f_wr_addr$ENQ =
	     WILL_FIRE_RL_fsm_action_l169c10 ||
	     WILL_FIRE_RL_fsm_action_l180c10 ||
	     WILL_FIRE_RL_fsm_action_l201c10 ;
  assign ocl_xactor_f_wr_addr$DEQ =
	     ocl_xactor_f_wr_addr$EMPTY_N && aws_BSV_top$ocl_slave_awready ;
  assign ocl_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule ocl_xactor_f_wr_data
  always@(WILL_FIRE_RL_fsm_action_l169c10 or
	  MUX_ocl_xactor_f_wr_data$enq_1__VAL_1 or
	  WILL_FIRE_RL_fsm_action_l180c10 or
	  MUX_ocl_xactor_f_wr_data$enq_1__VAL_2 or
	  WILL_FIRE_RL_fsm_action_l201c10)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fsm_action_l169c10:
	  ocl_xactor_f_wr_data$D_IN = MUX_ocl_xactor_f_wr_data$enq_1__VAL_1;
      WILL_FIRE_RL_fsm_action_l180c10:
	  ocl_xactor_f_wr_data$D_IN = MUX_ocl_xactor_f_wr_data$enq_1__VAL_2;
      WILL_FIRE_RL_fsm_action_l201c10: ocl_xactor_f_wr_data$D_IN = 36'd15;
      default: ocl_xactor_f_wr_data$D_IN =
		   36'hAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ocl_xactor_f_wr_data$ENQ =
	     WILL_FIRE_RL_fsm_action_l169c10 ||
	     WILL_FIRE_RL_fsm_action_l180c10 ||
	     WILL_FIRE_RL_fsm_action_l201c10 ;
  assign ocl_xactor_f_wr_data$DEQ =
	     ocl_xactor_f_wr_data$EMPTY_N && aws_BSV_top$ocl_slave_wready ;
  assign ocl_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule ocl_xactor_f_wr_resp
  assign ocl_xactor_f_wr_resp$D_IN = aws_BSV_top$ocl_slave_bresp ;
  assign ocl_xactor_f_wr_resp$ENQ =
	     aws_BSV_top$ocl_slave_bvalid && ocl_xactor_f_wr_resp$FULL_N ;
  assign ocl_xactor_f_wr_resp$DEQ = ocl_xactor_f_wr_resp$EMPTY_N ;
  assign ocl_xactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign data__h43706 = { 28'd0, verbosity___1__h43704[3:0] } ;
  assign fsm_abort_whas__64_AND_fsm_abort_wget__65_66_O_ETC___d365 =
	     (fsm_state_mkFSMstate == 5'd0 ||
	      fsm_state_mkFSMstate == 5'd14) &&
	     (!fsm_start_reg_1 || fsm_state_fired) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fsm_jj_delay_count <= `BSV_ASSIGNMENT_DELAY 14'd0;
	fsm_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fsm_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_counter_4ns <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_done_once <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_last_vled <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_vdip <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (fsm_jj_delay_count$EN)
	  fsm_jj_delay_count <= `BSV_ASSIGNMENT_DELAY fsm_jj_delay_count$D_IN;
	if (fsm_start_reg$EN)
	  fsm_start_reg <= `BSV_ASSIGNMENT_DELAY fsm_start_reg$D_IN;
	if (fsm_start_reg_1$EN)
	  fsm_start_reg_1 <= `BSV_ASSIGNMENT_DELAY fsm_start_reg_1$D_IN;
	if (fsm_state_can_overlap$EN)
	  fsm_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_state_can_overlap$D_IN;
	if (fsm_state_fired$EN)
	  fsm_state_fired <= `BSV_ASSIGNMENT_DELAY fsm_state_fired$D_IN;
	if (fsm_state_mkFSMstate$EN)
	  fsm_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_state_mkFSMstate$D_IN;
	if (rg_counter_4ns$EN)
	  rg_counter_4ns <= `BSV_ASSIGNMENT_DELAY rg_counter_4ns$D_IN;
	if (rg_done_once$EN)
	  rg_done_once <= `BSV_ASSIGNMENT_DELAY rg_done_once$D_IN;
	if (rg_last_vled$EN)
	  rg_last_vled <= `BSV_ASSIGNMENT_DELAY rg_last_vled$D_IN;
	if (rg_vdip$EN) rg_vdip <= `BSV_ASSIGNMENT_DELAY rg_vdip$D_IN;
      end
    if (rg_running$EN) rg_running <= `BSV_ASSIGNMENT_DELAY rg_running$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fsm_jj_delay_count = 14'h2AAA;
    fsm_start_reg = 1'h0;
    fsm_start_reg_1 = 1'h0;
    fsm_state_can_overlap = 1'h0;
    fsm_state_fired = 1'h0;
    fsm_state_mkFSMstate = 5'h0A;
    rg_counter_4ns = 64'hAAAAAAAAAAAAAAAA;
    rg_done_once = 1'h0;
    rg_last_vled = 16'hAAAA;
    rg_running = 1'h0;
    rg_vdip = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (ocl_xactor_f_wr_resp$EMPTY_N && ocl_xactor_f_wr_resp$D_OUT != 2'd0)
	$write("Top_HW_Side: OCL response error: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (ocl_xactor_f_wr_resp$EMPTY_N && ocl_xactor_f_wr_resp$D_OUT == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (ocl_xactor_f_wr_resp$EMPTY_N && ocl_xactor_f_wr_resp$D_OUT == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (ocl_xactor_f_wr_resp$EMPTY_N &&
	  ocl_xactor_f_wr_resp$D_OUT != 2'd0 &&
	  ocl_xactor_f_wr_resp$D_OUT != 2'd1 &&
	  ocl_xactor_f_wr_resp$D_OUT != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (ocl_xactor_f_wr_resp$EMPTY_N && ocl_xactor_f_wr_resp$D_OUT != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (ocl_xactor_f_wr_resp$EMPTY_N && ocl_xactor_f_wr_resp$D_OUT != 2'd0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l169c10)
	begin
	  TASK_testplusargs___d304 = $test$plusargs("v1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l169c10)
	begin
	  TASK_testplusargs___d303 = $test$plusargs("v2");
	  #0;
	end
    verbosity___1__h43704 =
	TASK_testplusargs___d303 ?
	  32'd2 :
	  (TASK_testplusargs___d304 ? 32'd1 : 32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l169c10)
	$display("Top_HW_Side: verbosity = %0d, logdelay = 0x%0h",
		 verbosity___1__h43704,
		 32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l180c10)
	begin
	  TASK_testplusargs___d313 = $test$plusargs("tohost");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l180c10 && TASK_testplusargs___d313)
	begin
	  v__h44054 = $imported_c_get_symbol_val("tohost");
	  #0;
	end
    v__h44040 = TASK_testplusargs___d313 ? v__h44054[31:0] : 32'd1;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l180c10)
	$display("Top_HW_Side: watch_tohost = %0d, tohost_addr = 0x%0h",
		 TASK_testplusargs___d313,
		 v__h44040);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l194c10)
	$display("Top_HW_Side: Top_HW_Side: load DDR4 (TODO); for now, delay 10000 ticks");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l198c10)
	$display("Top_HW_Side: Top_HW_Side: finished delay 10000 ticks");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l201c10)
	begin
	  v__h45539 = $stime;
	  #0;
	end
    v__h45533 = v__h45539 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l201c10)
	$imported_c_start_timing({ 32'd0, v__h45533 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l211c10)
	$display("Top_HW_Side: polling remote counter");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l220c10)
	$display("Top_HW_Side: remote counter exceeded limit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l221c10) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l169c10 &&
	  (WILL_FIRE_RL_fsm_action_l180c10 ||
	   WILL_FIRE_RL_fsm_action_l194c10 ||
	   WILL_FIRE_RL_fsm_action_d_init_np ||
	   WILL_FIRE_RL_fsm_action_np ||
	   WILL_FIRE_RL_fsm_action_l198c10 ||
	   WILL_FIRE_RL_fsm_action_l201c10 ||
	   WILL_FIRE_RL_fsm_action_l211c10 ||
	   WILL_FIRE_RL_fsm_action_l212c21 ||
	   WILL_FIRE_RL_fsm_action_l214c37 ||
	   WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 169, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l169c10] and\n  [RL_fsm_action_l180c10, RL_fsm_action_l194c10, RL_fsm_action_d_init_np,\n  RL_fsm_action_np, RL_fsm_action_l198c10, RL_fsm_action_l201c10,\n  RL_fsm_action_l211c10, RL_fsm_action_l212c21, RL_fsm_action_l214c37,\n  RL_fsm_action_l215c13, RL_fsm_action_l220c10, RL_fsm_action_l221c10] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l180c10 &&
	  (WILL_FIRE_RL_fsm_action_l194c10 ||
	   WILL_FIRE_RL_fsm_action_d_init_np ||
	   WILL_FIRE_RL_fsm_action_np ||
	   WILL_FIRE_RL_fsm_action_l198c10 ||
	   WILL_FIRE_RL_fsm_action_l201c10 ||
	   WILL_FIRE_RL_fsm_action_l211c10 ||
	   WILL_FIRE_RL_fsm_action_l212c21 ||
	   WILL_FIRE_RL_fsm_action_l214c37 ||
	   WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 180, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l180c10] and\n  [RL_fsm_action_l194c10, RL_fsm_action_d_init_np, RL_fsm_action_np,\n  RL_fsm_action_l198c10, RL_fsm_action_l201c10, RL_fsm_action_l211c10,\n  RL_fsm_action_l212c21, RL_fsm_action_l214c37, RL_fsm_action_l215c13,\n  RL_fsm_action_l220c10, RL_fsm_action_l221c10] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l194c10 &&
	  (WILL_FIRE_RL_fsm_action_d_init_np || WILL_FIRE_RL_fsm_action_np ||
	   WILL_FIRE_RL_fsm_action_l198c10 ||
	   WILL_FIRE_RL_fsm_action_l201c10 ||
	   WILL_FIRE_RL_fsm_action_l211c10 ||
	   WILL_FIRE_RL_fsm_action_l212c21 ||
	   WILL_FIRE_RL_fsm_action_l214c37 ||
	   WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 194, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l194c10] and\n  [RL_fsm_action_d_init_np, RL_fsm_action_np, RL_fsm_action_l198c10,\n  RL_fsm_action_l201c10, RL_fsm_action_l211c10, RL_fsm_action_l212c21,\n  RL_fsm_action_l214c37, RL_fsm_action_l215c13, RL_fsm_action_l220c10,\n  RL_fsm_action_l221c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_d_init_np &&
	  (WILL_FIRE_RL_fsm_action_np || WILL_FIRE_RL_fsm_action_l198c10 ||
	   WILL_FIRE_RL_fsm_action_l201c10 ||
	   WILL_FIRE_RL_fsm_action_l211c10 ||
	   WILL_FIRE_RL_fsm_action_l212c21 ||
	   WILL_FIRE_RL_fsm_action_l214c37 ||
	   WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_d_init_np] and\n  [RL_fsm_action_np, RL_fsm_action_l198c10, RL_fsm_action_l201c10,\n  RL_fsm_action_l211c10, RL_fsm_action_l212c21, RL_fsm_action_l214c37,\n  RL_fsm_action_l215c13, RL_fsm_action_l220c10, RL_fsm_action_l221c10] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_np &&
	  (WILL_FIRE_RL_fsm_action_l198c10 ||
	   WILL_FIRE_RL_fsm_action_l201c10 ||
	   WILL_FIRE_RL_fsm_action_l211c10 ||
	   WILL_FIRE_RL_fsm_action_l212c21 ||
	   WILL_FIRE_RL_fsm_action_l214c37 ||
	   WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_np] and\n  [RL_fsm_action_l198c10, RL_fsm_action_l201c10, RL_fsm_action_l211c10,\n  RL_fsm_action_l212c21, RL_fsm_action_l214c37, RL_fsm_action_l215c13,\n  RL_fsm_action_l220c10, RL_fsm_action_l221c10] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l201c10 &&
	  (WILL_FIRE_RL_fsm_action_l211c10 ||
	   WILL_FIRE_RL_fsm_action_l212c21 ||
	   WILL_FIRE_RL_fsm_action_l214c37 ||
	   WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 201, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l201c10] and\n  [RL_fsm_action_l211c10, RL_fsm_action_l212c21, RL_fsm_action_l214c37,\n  RL_fsm_action_l215c13, RL_fsm_action_l220c10, RL_fsm_action_l221c10] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l198c10 &&
	  (WILL_FIRE_RL_fsm_action_l201c10 ||
	   WILL_FIRE_RL_fsm_action_l211c10 ||
	   WILL_FIRE_RL_fsm_action_l212c21 ||
	   WILL_FIRE_RL_fsm_action_l214c37 ||
	   WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 198, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l198c10] and\n  [RL_fsm_action_l201c10, RL_fsm_action_l211c10, RL_fsm_action_l212c21,\n  RL_fsm_action_l214c37, RL_fsm_action_l215c13, RL_fsm_action_l220c10,\n  RL_fsm_action_l221c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l211c10 &&
	  (WILL_FIRE_RL_fsm_action_l212c21 ||
	   WILL_FIRE_RL_fsm_action_l214c37 ||
	   WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 211, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l211c10] and\n  [RL_fsm_action_l212c21, RL_fsm_action_l214c37, RL_fsm_action_l215c13,\n  RL_fsm_action_l220c10, RL_fsm_action_l221c10] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l214c37 &&
	  (WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 214, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l214c37] and\n  [RL_fsm_action_l215c13, RL_fsm_action_l220c10, RL_fsm_action_l221c10] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l212c21 &&
	  (WILL_FIRE_RL_fsm_action_l214c37 ||
	   WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 212, column 21: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l212c21] and\n  [RL_fsm_action_l214c37, RL_fsm_action_l215c13, RL_fsm_action_l220c10,\n  RL_fsm_action_l221c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l215c13 &&
	  (WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 215, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l215c13] and\n  [RL_fsm_action_l220c10, RL_fsm_action_l221c10] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l220c10 && WILL_FIRE_RL_fsm_action_l221c10)
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 220, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l220c10] and\n  [RL_fsm_action_l221c10] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l161c10)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l161c10)
	$display("Bluespec RISC-V + WindSoC AWS simulation v1.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l161c10)
	$display("Copyright (c) 2017-2020 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l161c10)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_action_l161c10 &&
	  (WILL_FIRE_RL_fsm_action_l169c10 ||
	   WILL_FIRE_RL_fsm_action_l180c10 ||
	   WILL_FIRE_RL_fsm_action_l194c10 ||
	   WILL_FIRE_RL_fsm_action_d_init_np ||
	   WILL_FIRE_RL_fsm_action_np ||
	   WILL_FIRE_RL_fsm_action_l198c10 ||
	   WILL_FIRE_RL_fsm_action_l201c10 ||
	   WILL_FIRE_RL_fsm_action_l211c10 ||
	   WILL_FIRE_RL_fsm_action_l212c21 ||
	   WILL_FIRE_RL_fsm_action_l214c37 ||
	   WILL_FIRE_RL_fsm_action_l215c13 ||
	   WILL_FIRE_RL_fsm_action_l220c10 ||
	   WILL_FIRE_RL_fsm_action_l221c10))
	$display("Error: \"../../src_Testbench_AWS/Top/Top_HW_Side.bsv\", line 161, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_fsm_action_l161c10] and\n  [RL_fsm_action_l169c10, RL_fsm_action_l180c10, RL_fsm_action_l194c10,\n  RL_fsm_action_d_init_np, RL_fsm_action_np, RL_fsm_action_l198c10,\n  RL_fsm_action_l201c10, RL_fsm_action_l211c10, RL_fsm_action_l212c21,\n  RL_fsm_action_l214c37, RL_fsm_action_l215c13, RL_fsm_action_l220c10,\n  RL_fsm_action_l221c10] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTop_HW_Side

