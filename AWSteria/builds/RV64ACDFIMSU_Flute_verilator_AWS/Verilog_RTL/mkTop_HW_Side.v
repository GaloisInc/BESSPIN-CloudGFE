//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTop_HW_Side(CLK,
		     RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire [577 : 0] ddr4_A_deburster_inSerial_shim_wff_rv$port0__write_1,
		 ddr4_A_deburster_inSerial_shim_wff_rv$port1__read,
		 ddr4_A_deburster_inSerial_shim_wff_rv$port2__read,
		 ddr4_B_deburster_inSerial_shim_wff_rv$port0__write_1,
		 ddr4_B_deburster_inSerial_shim_wff_rv$port1__read,
		 ddr4_B_deburster_inSerial_shim_wff_rv$port2__read,
		 ddr4_C_deburster_inSerial_shim_wff_rv$port0__write_1,
		 ddr4_C_deburster_inSerial_shim_wff_rv$port1__read,
		 ddr4_C_deburster_inSerial_shim_wff_rv$port2__read,
		 ddr4_D_deburster_inSerial_shim_wff_rv$port0__write_1,
		 ddr4_D_deburster_inSerial_shim_wff_rv$port1__read,
		 ddr4_D_deburster_inSerial_shim_wff_rv$port2__read,
		 dma_pcis_xactor_shim_wff_rv$port0__write_1,
		 dma_pcis_xactor_shim_wff_rv$port1__read,
		 dma_pcis_xactor_shim_wff_rv$port2__read,
		 dma_pcis_xactor_shim_wff_rv$port3__read;
  wire [576 : 0] dma_pcis_xactor_ug_master_u_w_peekWire$wget;
  wire [531 : 0] ddr4_A_deburster_inSerial_shim_rff_rv$port0__write_1,
		 ddr4_A_deburster_inSerial_shim_rff_rv$port1__read,
		 ddr4_A_deburster_inSerial_shim_rff_rv$port2__read,
		 ddr4_B_deburster_inSerial_shim_rff_rv$port0__write_1,
		 ddr4_B_deburster_inSerial_shim_rff_rv$port1__read,
		 ddr4_B_deburster_inSerial_shim_rff_rv$port2__read,
		 ddr4_C_deburster_inSerial_shim_rff_rv$port0__write_1,
		 ddr4_C_deburster_inSerial_shim_rff_rv$port1__read,
		 ddr4_C_deburster_inSerial_shim_rff_rv$port2__read,
		 ddr4_D_deburster_inSerial_shim_rff_rv$port0__write_1,
		 ddr4_D_deburster_inSerial_shim_rff_rv$port1__read,
		 ddr4_D_deburster_inSerial_shim_rff_rv$port2__read;
  wire [530 : 0] dma_pcis_xactor_shim_rff_rv$port0__write_1,
		 dma_pcis_xactor_shim_rff_rv$port1__read,
		 dma_pcis_xactor_shim_rff_rv$port2__read,
		 dma_pcis_xactor_shim_rff_rv$port3__read;
  wire [529 : 0] dma_pcis_xactor_ug_master_u_r_putWire$wget;
  wire [109 : 0] ddr4_A_deburster_inSerial_shim_arff_rv$port0__write_1,
		 ddr4_A_deburster_inSerial_shim_arff_rv$port1__read,
		 ddr4_A_deburster_inSerial_shim_arff_rv$port2__read,
		 ddr4_A_deburster_inSerial_shim_awff_rv$port0__write_1,
		 ddr4_A_deburster_inSerial_shim_awff_rv$port1__read,
		 ddr4_A_deburster_inSerial_shim_awff_rv$port2__read,
		 ddr4_B_deburster_inSerial_shim_arff_rv$port0__write_1,
		 ddr4_B_deburster_inSerial_shim_arff_rv$port1__read,
		 ddr4_B_deburster_inSerial_shim_arff_rv$port2__read,
		 ddr4_B_deburster_inSerial_shim_awff_rv$port0__write_1,
		 ddr4_B_deburster_inSerial_shim_awff_rv$port1__read,
		 ddr4_B_deburster_inSerial_shim_awff_rv$port2__read,
		 ddr4_C_deburster_inSerial_shim_arff_rv$port0__write_1,
		 ddr4_C_deburster_inSerial_shim_arff_rv$port1__read,
		 ddr4_C_deburster_inSerial_shim_arff_rv$port2__read,
		 ddr4_C_deburster_inSerial_shim_awff_rv$port0__write_1,
		 ddr4_C_deburster_inSerial_shim_awff_rv$port1__read,
		 ddr4_C_deburster_inSerial_shim_awff_rv$port2__read,
		 ddr4_D_deburster_inSerial_shim_arff_rv$port0__write_1,
		 ddr4_D_deburster_inSerial_shim_arff_rv$port1__read,
		 ddr4_D_deburster_inSerial_shim_arff_rv$port2__read,
		 ddr4_D_deburster_inSerial_shim_awff_rv$port0__write_1,
		 ddr4_D_deburster_inSerial_shim_awff_rv$port1__read,
		 ddr4_D_deburster_inSerial_shim_awff_rv$port2__read;
  wire [108 : 0] dma_pcis_xactor_shim_arff_rv$port0__write_1,
		 dma_pcis_xactor_shim_arff_rv$port1__read,
		 dma_pcis_xactor_shim_arff_rv$port2__read,
		 dma_pcis_xactor_shim_arff_rv$port3__read,
		 dma_pcis_xactor_shim_awff_rv$port0__write_1,
		 dma_pcis_xactor_shim_awff_rv$port1__read,
		 dma_pcis_xactor_shim_awff_rv$port2__read,
		 dma_pcis_xactor_shim_awff_rv$port3__read;
  wire [107 : 0] dma_pcis_xactor_ug_master_u_ar_peekWire$wget,
		 dma_pcis_xactor_ug_master_u_aw_peekWire$wget;
  wire [18 : 0] ddr4_A_deburster_inSerial_shim_bff_rv$port0__write_1,
		ddr4_A_deburster_inSerial_shim_bff_rv$port1__read,
		ddr4_A_deburster_inSerial_shim_bff_rv$port2__read,
		ddr4_B_deburster_inSerial_shim_bff_rv$port0__write_1,
		ddr4_B_deburster_inSerial_shim_bff_rv$port1__read,
		ddr4_B_deburster_inSerial_shim_bff_rv$port2__read,
		ddr4_C_deburster_inSerial_shim_bff_rv$port0__write_1,
		ddr4_C_deburster_inSerial_shim_bff_rv$port1__read,
		ddr4_C_deburster_inSerial_shim_bff_rv$port2__read,
		ddr4_D_deburster_inSerial_shim_bff_rv$port0__write_1,
		ddr4_D_deburster_inSerial_shim_bff_rv$port1__read,
		ddr4_D_deburster_inSerial_shim_bff_rv$port2__read;
  wire [17 : 0] dma_pcis_xactor_shim_bff_rv$port0__write_1,
		dma_pcis_xactor_shim_bff_rv$port1__read,
		dma_pcis_xactor_shim_bff_rv$port2__read,
		dma_pcis_xactor_shim_bff_rv$port3__read;
  wire [16 : 0] dma_pcis_xactor_ug_master_u_b_putWire$wget;
  wire [7 : 0] ddr4_A_deburster_flitReceived$port0__write_1,
	       ddr4_A_deburster_flitReceived$port1__read,
	       ddr4_A_deburster_readsSent$port0__write_1,
	       ddr4_A_deburster_readsSent$port1__read,
	       ddr4_A_deburster_writesSent$port0__write_1,
	       ddr4_A_deburster_writesSent$port1__read,
	       ddr4_B_deburster_flitReceived$port0__write_1,
	       ddr4_B_deburster_flitReceived$port1__read,
	       ddr4_B_deburster_readsSent$port0__write_1,
	       ddr4_B_deburster_readsSent$port1__read,
	       ddr4_B_deburster_writesSent$port0__write_1,
	       ddr4_B_deburster_writesSent$port1__read,
	       ddr4_C_deburster_flitReceived$port0__write_1,
	       ddr4_C_deburster_flitReceived$port1__read,
	       ddr4_C_deburster_readsSent$port0__write_1,
	       ddr4_C_deburster_readsSent$port1__read,
	       ddr4_C_deburster_writesSent$port0__write_1,
	       ddr4_C_deburster_writesSent$port1__read,
	       ddr4_D_deburster_flitReceived$port0__write_1,
	       ddr4_D_deburster_flitReceived$port1__read,
	       ddr4_D_deburster_readsSent$port0__write_1,
	       ddr4_D_deburster_readsSent$port1__read,
	       ddr4_D_deburster_writesSent$port0__write_1,
	       ddr4_D_deburster_writesSent$port1__read;
  wire [1 : 0] ddr4_A_deburster_inSerial_state$port0__write_1,
	       ddr4_A_deburster_inSerial_state$port1__read,
	       ddr4_A_deburster_inSerial_state$port1__write_1,
	       ddr4_A_deburster_inSerial_state$port2__read,
	       ddr4_B_deburster_inSerial_state$port0__write_1,
	       ddr4_B_deburster_inSerial_state$port1__read,
	       ddr4_B_deburster_inSerial_state$port1__write_1,
	       ddr4_B_deburster_inSerial_state$port2__read,
	       ddr4_C_deburster_inSerial_state$port0__write_1,
	       ddr4_C_deburster_inSerial_state$port1__read,
	       ddr4_C_deburster_inSerial_state$port1__write_1,
	       ddr4_C_deburster_inSerial_state$port2__read,
	       ddr4_D_deburster_inSerial_state$port0__write_1,
	       ddr4_D_deburster_inSerial_state$port1__read,
	       ddr4_D_deburster_inSerial_state$port1__write_1,
	       ddr4_D_deburster_inSerial_state$port2__read;
  wire ddr4_A_deburster_inSerial_shim_arff_rv$EN_port1__write,
       ddr4_A_deburster_inSerial_shim_awff_rv$EN_port1__write,
       ddr4_A_deburster_inSerial_shim_bff_rv$EN_port0__write,
       ddr4_A_deburster_inSerial_state$EN_port0__write,
       ddr4_A_deburster_inSerial_state$EN_port1__write,
       ddr4_B_deburster_inSerial_shim_arff_rv$EN_port1__write,
       ddr4_B_deburster_inSerial_shim_awff_rv$EN_port1__write,
       ddr4_B_deburster_inSerial_shim_bff_rv$EN_port0__write,
       ddr4_B_deburster_inSerial_state$EN_port0__write,
       ddr4_B_deburster_inSerial_state$EN_port1__write,
       ddr4_C_deburster_inSerial_shim_arff_rv$EN_port1__write,
       ddr4_C_deburster_inSerial_shim_awff_rv$EN_port1__write,
       ddr4_C_deburster_inSerial_shim_bff_rv$EN_port0__write,
       ddr4_C_deburster_inSerial_state$EN_port0__write,
       ddr4_C_deburster_inSerial_state$EN_port1__write,
       ddr4_D_deburster_inSerial_shim_arff_rv$EN_port1__write,
       ddr4_D_deburster_inSerial_shim_awff_rv$EN_port1__write,
       ddr4_D_deburster_inSerial_shim_bff_rv$EN_port0__write,
       ddr4_D_deburster_inSerial_state$EN_port0__write,
       ddr4_D_deburster_inSerial_state$EN_port1__write,
       dma_pcis_xactor_ug_master_u_ar_dropWire$whas,
       dma_pcis_xactor_ug_master_u_aw_dropWire$whas,
       dma_pcis_xactor_ug_master_u_b_putWire$whas,
       dma_pcis_xactor_ug_master_u_r_putWire$whas,
       dma_pcis_xactor_ug_master_u_w_dropWire$whas,
       ocl_xactor_u_master_u_ar_dropWire$whas,
       ocl_xactor_u_master_u_aw_dropWire$whas,
       ocl_xactor_u_master_u_w_dropWire$whas;

  // register ddr4_A_deburster_flitReceived
  reg [7 : 0] ddr4_A_deburster_flitReceived;
  wire [7 : 0] ddr4_A_deburster_flitReceived$D_IN;
  wire ddr4_A_deburster_flitReceived$EN;

  // register ddr4_A_deburster_inSerial_lastWasRead
  reg ddr4_A_deburster_inSerial_lastWasRead;
  wire ddr4_A_deburster_inSerial_lastWasRead$D_IN,
       ddr4_A_deburster_inSerial_lastWasRead$EN;

  // register ddr4_A_deburster_inSerial_shim_arff_rv
  reg [109 : 0] ddr4_A_deburster_inSerial_shim_arff_rv;
  wire [109 : 0] ddr4_A_deburster_inSerial_shim_arff_rv$D_IN;
  wire ddr4_A_deburster_inSerial_shim_arff_rv$EN;

  // register ddr4_A_deburster_inSerial_shim_awff_rv
  reg [109 : 0] ddr4_A_deburster_inSerial_shim_awff_rv;
  wire [109 : 0] ddr4_A_deburster_inSerial_shim_awff_rv$D_IN;
  wire ddr4_A_deburster_inSerial_shim_awff_rv$EN;

  // register ddr4_A_deburster_inSerial_shim_bff_rv
  reg [18 : 0] ddr4_A_deburster_inSerial_shim_bff_rv;
  wire [18 : 0] ddr4_A_deburster_inSerial_shim_bff_rv$D_IN;
  wire ddr4_A_deburster_inSerial_shim_bff_rv$EN;

  // register ddr4_A_deburster_inSerial_shim_rff_rv
  reg [531 : 0] ddr4_A_deburster_inSerial_shim_rff_rv;
  wire [531 : 0] ddr4_A_deburster_inSerial_shim_rff_rv$D_IN;
  wire ddr4_A_deburster_inSerial_shim_rff_rv$EN;

  // register ddr4_A_deburster_inSerial_shim_wff_rv
  reg [577 : 0] ddr4_A_deburster_inSerial_shim_wff_rv;
  wire [577 : 0] ddr4_A_deburster_inSerial_shim_wff_rv$D_IN;
  wire ddr4_A_deburster_inSerial_shim_wff_rv$EN;

  // register ddr4_A_deburster_inSerial_state
  reg [1 : 0] ddr4_A_deburster_inSerial_state;
  wire [1 : 0] ddr4_A_deburster_inSerial_state$D_IN;
  wire ddr4_A_deburster_inSerial_state$EN;

  // register ddr4_A_deburster_readsSent
  reg [7 : 0] ddr4_A_deburster_readsSent;
  wire [7 : 0] ddr4_A_deburster_readsSent$D_IN;
  wire ddr4_A_deburster_readsSent$EN;

  // register ddr4_A_deburster_writesSent
  reg [7 : 0] ddr4_A_deburster_writesSent;
  wire [7 : 0] ddr4_A_deburster_writesSent$D_IN;
  wire ddr4_A_deburster_writesSent$EN;

  // register ddr4_B_deburster_flitReceived
  reg [7 : 0] ddr4_B_deburster_flitReceived;
  wire [7 : 0] ddr4_B_deburster_flitReceived$D_IN;
  wire ddr4_B_deburster_flitReceived$EN;

  // register ddr4_B_deburster_inSerial_lastWasRead
  reg ddr4_B_deburster_inSerial_lastWasRead;
  wire ddr4_B_deburster_inSerial_lastWasRead$D_IN,
       ddr4_B_deburster_inSerial_lastWasRead$EN;

  // register ddr4_B_deburster_inSerial_shim_arff_rv
  reg [109 : 0] ddr4_B_deburster_inSerial_shim_arff_rv;
  wire [109 : 0] ddr4_B_deburster_inSerial_shim_arff_rv$D_IN;
  wire ddr4_B_deburster_inSerial_shim_arff_rv$EN;

  // register ddr4_B_deburster_inSerial_shim_awff_rv
  reg [109 : 0] ddr4_B_deburster_inSerial_shim_awff_rv;
  wire [109 : 0] ddr4_B_deburster_inSerial_shim_awff_rv$D_IN;
  wire ddr4_B_deburster_inSerial_shim_awff_rv$EN;

  // register ddr4_B_deburster_inSerial_shim_bff_rv
  reg [18 : 0] ddr4_B_deburster_inSerial_shim_bff_rv;
  wire [18 : 0] ddr4_B_deburster_inSerial_shim_bff_rv$D_IN;
  wire ddr4_B_deburster_inSerial_shim_bff_rv$EN;

  // register ddr4_B_deburster_inSerial_shim_rff_rv
  reg [531 : 0] ddr4_B_deburster_inSerial_shim_rff_rv;
  wire [531 : 0] ddr4_B_deburster_inSerial_shim_rff_rv$D_IN;
  wire ddr4_B_deburster_inSerial_shim_rff_rv$EN;

  // register ddr4_B_deburster_inSerial_shim_wff_rv
  reg [577 : 0] ddr4_B_deburster_inSerial_shim_wff_rv;
  wire [577 : 0] ddr4_B_deburster_inSerial_shim_wff_rv$D_IN;
  wire ddr4_B_deburster_inSerial_shim_wff_rv$EN;

  // register ddr4_B_deburster_inSerial_state
  reg [1 : 0] ddr4_B_deburster_inSerial_state;
  wire [1 : 0] ddr4_B_deburster_inSerial_state$D_IN;
  wire ddr4_B_deburster_inSerial_state$EN;

  // register ddr4_B_deburster_readsSent
  reg [7 : 0] ddr4_B_deburster_readsSent;
  wire [7 : 0] ddr4_B_deburster_readsSent$D_IN;
  wire ddr4_B_deburster_readsSent$EN;

  // register ddr4_B_deburster_writesSent
  reg [7 : 0] ddr4_B_deburster_writesSent;
  wire [7 : 0] ddr4_B_deburster_writesSent$D_IN;
  wire ddr4_B_deburster_writesSent$EN;

  // register ddr4_C_deburster_flitReceived
  reg [7 : 0] ddr4_C_deburster_flitReceived;
  wire [7 : 0] ddr4_C_deburster_flitReceived$D_IN;
  wire ddr4_C_deburster_flitReceived$EN;

  // register ddr4_C_deburster_inSerial_lastWasRead
  reg ddr4_C_deburster_inSerial_lastWasRead;
  wire ddr4_C_deburster_inSerial_lastWasRead$D_IN,
       ddr4_C_deburster_inSerial_lastWasRead$EN;

  // register ddr4_C_deburster_inSerial_shim_arff_rv
  reg [109 : 0] ddr4_C_deburster_inSerial_shim_arff_rv;
  wire [109 : 0] ddr4_C_deburster_inSerial_shim_arff_rv$D_IN;
  wire ddr4_C_deburster_inSerial_shim_arff_rv$EN;

  // register ddr4_C_deburster_inSerial_shim_awff_rv
  reg [109 : 0] ddr4_C_deburster_inSerial_shim_awff_rv;
  wire [109 : 0] ddr4_C_deburster_inSerial_shim_awff_rv$D_IN;
  wire ddr4_C_deburster_inSerial_shim_awff_rv$EN;

  // register ddr4_C_deburster_inSerial_shim_bff_rv
  reg [18 : 0] ddr4_C_deburster_inSerial_shim_bff_rv;
  wire [18 : 0] ddr4_C_deburster_inSerial_shim_bff_rv$D_IN;
  wire ddr4_C_deburster_inSerial_shim_bff_rv$EN;

  // register ddr4_C_deburster_inSerial_shim_rff_rv
  reg [531 : 0] ddr4_C_deburster_inSerial_shim_rff_rv;
  wire [531 : 0] ddr4_C_deburster_inSerial_shim_rff_rv$D_IN;
  wire ddr4_C_deburster_inSerial_shim_rff_rv$EN;

  // register ddr4_C_deburster_inSerial_shim_wff_rv
  reg [577 : 0] ddr4_C_deburster_inSerial_shim_wff_rv;
  wire [577 : 0] ddr4_C_deburster_inSerial_shim_wff_rv$D_IN;
  wire ddr4_C_deburster_inSerial_shim_wff_rv$EN;

  // register ddr4_C_deburster_inSerial_state
  reg [1 : 0] ddr4_C_deburster_inSerial_state;
  wire [1 : 0] ddr4_C_deburster_inSerial_state$D_IN;
  wire ddr4_C_deburster_inSerial_state$EN;

  // register ddr4_C_deburster_readsSent
  reg [7 : 0] ddr4_C_deburster_readsSent;
  wire [7 : 0] ddr4_C_deburster_readsSent$D_IN;
  wire ddr4_C_deburster_readsSent$EN;

  // register ddr4_C_deburster_writesSent
  reg [7 : 0] ddr4_C_deburster_writesSent;
  wire [7 : 0] ddr4_C_deburster_writesSent$D_IN;
  wire ddr4_C_deburster_writesSent$EN;

  // register ddr4_D_deburster_flitReceived
  reg [7 : 0] ddr4_D_deburster_flitReceived;
  wire [7 : 0] ddr4_D_deburster_flitReceived$D_IN;
  wire ddr4_D_deburster_flitReceived$EN;

  // register ddr4_D_deburster_inSerial_lastWasRead
  reg ddr4_D_deburster_inSerial_lastWasRead;
  wire ddr4_D_deburster_inSerial_lastWasRead$D_IN,
       ddr4_D_deburster_inSerial_lastWasRead$EN;

  // register ddr4_D_deburster_inSerial_shim_arff_rv
  reg [109 : 0] ddr4_D_deburster_inSerial_shim_arff_rv;
  wire [109 : 0] ddr4_D_deburster_inSerial_shim_arff_rv$D_IN;
  wire ddr4_D_deburster_inSerial_shim_arff_rv$EN;

  // register ddr4_D_deburster_inSerial_shim_awff_rv
  reg [109 : 0] ddr4_D_deburster_inSerial_shim_awff_rv;
  wire [109 : 0] ddr4_D_deburster_inSerial_shim_awff_rv$D_IN;
  wire ddr4_D_deburster_inSerial_shim_awff_rv$EN;

  // register ddr4_D_deburster_inSerial_shim_bff_rv
  reg [18 : 0] ddr4_D_deburster_inSerial_shim_bff_rv;
  wire [18 : 0] ddr4_D_deburster_inSerial_shim_bff_rv$D_IN;
  wire ddr4_D_deburster_inSerial_shim_bff_rv$EN;

  // register ddr4_D_deburster_inSerial_shim_rff_rv
  reg [531 : 0] ddr4_D_deburster_inSerial_shim_rff_rv;
  wire [531 : 0] ddr4_D_deburster_inSerial_shim_rff_rv$D_IN;
  wire ddr4_D_deburster_inSerial_shim_rff_rv$EN;

  // register ddr4_D_deburster_inSerial_shim_wff_rv
  reg [577 : 0] ddr4_D_deburster_inSerial_shim_wff_rv;
  wire [577 : 0] ddr4_D_deburster_inSerial_shim_wff_rv$D_IN;
  wire ddr4_D_deburster_inSerial_shim_wff_rv$EN;

  // register ddr4_D_deburster_inSerial_state
  reg [1 : 0] ddr4_D_deburster_inSerial_state;
  wire [1 : 0] ddr4_D_deburster_inSerial_state$D_IN;
  wire ddr4_D_deburster_inSerial_state$EN;

  // register ddr4_D_deburster_readsSent
  reg [7 : 0] ddr4_D_deburster_readsSent;
  wire [7 : 0] ddr4_D_deburster_readsSent$D_IN;
  wire ddr4_D_deburster_readsSent$EN;

  // register ddr4_D_deburster_writesSent
  reg [7 : 0] ddr4_D_deburster_writesSent;
  wire [7 : 0] ddr4_D_deburster_writesSent$D_IN;
  wire ddr4_D_deburster_writesSent$EN;

  // register dma_pcis_xactor_clearing
  reg dma_pcis_xactor_clearing;
  wire dma_pcis_xactor_clearing$D_IN, dma_pcis_xactor_clearing$EN;

  // register dma_pcis_xactor_shim_arff_rv
  reg [108 : 0] dma_pcis_xactor_shim_arff_rv;
  wire [108 : 0] dma_pcis_xactor_shim_arff_rv$D_IN;
  wire dma_pcis_xactor_shim_arff_rv$EN;

  // register dma_pcis_xactor_shim_awff_rv
  reg [108 : 0] dma_pcis_xactor_shim_awff_rv;
  wire [108 : 0] dma_pcis_xactor_shim_awff_rv$D_IN;
  wire dma_pcis_xactor_shim_awff_rv$EN;

  // register dma_pcis_xactor_shim_bff_rv
  reg [17 : 0] dma_pcis_xactor_shim_bff_rv;
  wire [17 : 0] dma_pcis_xactor_shim_bff_rv$D_IN;
  wire dma_pcis_xactor_shim_bff_rv$EN;

  // register dma_pcis_xactor_shim_rff_rv
  reg [530 : 0] dma_pcis_xactor_shim_rff_rv;
  wire [530 : 0] dma_pcis_xactor_shim_rff_rv$D_IN;
  wire dma_pcis_xactor_shim_rff_rv$EN;

  // register dma_pcis_xactor_shim_wff_rv
  reg [577 : 0] dma_pcis_xactor_shim_wff_rv;
  wire [577 : 0] dma_pcis_xactor_shim_wff_rv$D_IN;
  wire dma_pcis_xactor_shim_wff_rv$EN;

  // register rg_AXI4_wr_data_beat
  reg [7 : 0] rg_AXI4_wr_data_beat;
  wire [7 : 0] rg_AXI4_wr_data_beat$D_IN;
  wire rg_AXI4_wr_data_beat$EN;

  // register rg_counter_4ns
  reg [63 : 0] rg_counter_4ns;
  wire [63 : 0] rg_counter_4ns$D_IN;
  wire rg_counter_4ns$EN;

  // register rg_last_vled
  reg [15 : 0] rg_last_vled;
  wire [15 : 0] rg_last_vled$D_IN;
  wire rg_last_vled$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  wire [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_vdip
  reg [15 : 0] rg_vdip;
  wire [15 : 0] rg_vdip$D_IN;
  wire rg_vdip$EN;

  // ports of submodule aws_BSV_top
  wire [511 : 0] aws_BSV_top$ddr4_A_master_rdata,
		 aws_BSV_top$ddr4_A_master_wdata,
		 aws_BSV_top$ddr4_B_master_rdata,
		 aws_BSV_top$ddr4_B_master_wdata,
		 aws_BSV_top$ddr4_C_master_rdata,
		 aws_BSV_top$ddr4_C_master_wdata,
		 aws_BSV_top$ddr4_D_master_rdata,
		 aws_BSV_top$ddr4_D_master_wdata,
		 aws_BSV_top$dma_pcis_slave_rdata,
		 aws_BSV_top$dma_pcis_slave_wdata;
  wire [63 : 0] aws_BSV_top$ddr4_A_master_araddr,
		aws_BSV_top$ddr4_A_master_awaddr,
		aws_BSV_top$ddr4_A_master_wstrb,
		aws_BSV_top$ddr4_B_master_araddr,
		aws_BSV_top$ddr4_B_master_awaddr,
		aws_BSV_top$ddr4_B_master_wstrb,
		aws_BSV_top$ddr4_C_master_araddr,
		aws_BSV_top$ddr4_C_master_awaddr,
		aws_BSV_top$ddr4_C_master_wstrb,
		aws_BSV_top$ddr4_D_master_araddr,
		aws_BSV_top$ddr4_D_master_awaddr,
		aws_BSV_top$ddr4_D_master_wstrb,
		aws_BSV_top$dma_pcis_slave_araddr,
		aws_BSV_top$dma_pcis_slave_awaddr,
		aws_BSV_top$dma_pcis_slave_wstrb,
		aws_BSV_top$m_glcount0_glcount0,
		aws_BSV_top$m_glcount1_glcount1;
  wire [31 : 0] aws_BSV_top$ocl_slave_ar_araddr,
		aws_BSV_top$ocl_slave_aw_awaddr,
		aws_BSV_top$ocl_slave_r_rdata,
		aws_BSV_top$ocl_slave_w_wdata;
  wire [15 : 0] aws_BSV_top$ddr4_A_master_arid,
		aws_BSV_top$ddr4_A_master_awid,
		aws_BSV_top$ddr4_A_master_bid,
		aws_BSV_top$ddr4_A_master_rid,
		aws_BSV_top$ddr4_B_master_arid,
		aws_BSV_top$ddr4_B_master_awid,
		aws_BSV_top$ddr4_B_master_bid,
		aws_BSV_top$ddr4_B_master_rid,
		aws_BSV_top$ddr4_C_master_arid,
		aws_BSV_top$ddr4_C_master_awid,
		aws_BSV_top$ddr4_C_master_bid,
		aws_BSV_top$ddr4_C_master_rid,
		aws_BSV_top$ddr4_D_master_arid,
		aws_BSV_top$ddr4_D_master_awid,
		aws_BSV_top$ddr4_D_master_bid,
		aws_BSV_top$ddr4_D_master_rid,
		aws_BSV_top$m_vdip_vdip,
		aws_BSV_top$m_vled;
  wire [14 : 0] aws_BSV_top$dma_pcis_slave_arid,
		aws_BSV_top$dma_pcis_slave_awid,
		aws_BSV_top$dma_pcis_slave_bid,
		aws_BSV_top$dma_pcis_slave_rid;
  wire [7 : 0] aws_BSV_top$ddr4_A_master_arlen,
	       aws_BSV_top$ddr4_A_master_awlen,
	       aws_BSV_top$ddr4_B_master_arlen,
	       aws_BSV_top$ddr4_B_master_awlen,
	       aws_BSV_top$ddr4_C_master_arlen,
	       aws_BSV_top$ddr4_C_master_awlen,
	       aws_BSV_top$ddr4_D_master_arlen,
	       aws_BSV_top$ddr4_D_master_awlen,
	       aws_BSV_top$dma_pcis_slave_arlen,
	       aws_BSV_top$dma_pcis_slave_awlen;
  wire [3 : 0] aws_BSV_top$ddr4_A_master_arcache,
	       aws_BSV_top$ddr4_A_master_arqos,
	       aws_BSV_top$ddr4_A_master_arregion,
	       aws_BSV_top$ddr4_A_master_awcache,
	       aws_BSV_top$ddr4_A_master_awqos,
	       aws_BSV_top$ddr4_A_master_awregion,
	       aws_BSV_top$ddr4_B_master_arcache,
	       aws_BSV_top$ddr4_B_master_arqos,
	       aws_BSV_top$ddr4_B_master_arregion,
	       aws_BSV_top$ddr4_B_master_awcache,
	       aws_BSV_top$ddr4_B_master_awqos,
	       aws_BSV_top$ddr4_B_master_awregion,
	       aws_BSV_top$ddr4_C_master_arcache,
	       aws_BSV_top$ddr4_C_master_arqos,
	       aws_BSV_top$ddr4_C_master_arregion,
	       aws_BSV_top$ddr4_C_master_awcache,
	       aws_BSV_top$ddr4_C_master_awqos,
	       aws_BSV_top$ddr4_C_master_awregion,
	       aws_BSV_top$ddr4_D_master_arcache,
	       aws_BSV_top$ddr4_D_master_arqos,
	       aws_BSV_top$ddr4_D_master_arregion,
	       aws_BSV_top$ddr4_D_master_awcache,
	       aws_BSV_top$ddr4_D_master_awqos,
	       aws_BSV_top$ddr4_D_master_awregion,
	       aws_BSV_top$dma_pcis_slave_arcache,
	       aws_BSV_top$dma_pcis_slave_arqos,
	       aws_BSV_top$dma_pcis_slave_arregion,
	       aws_BSV_top$dma_pcis_slave_awcache,
	       aws_BSV_top$dma_pcis_slave_awqos,
	       aws_BSV_top$dma_pcis_slave_awregion,
	       aws_BSV_top$m_ddr4_ready_ddr4_A_B_C_D_ready,
	       aws_BSV_top$ocl_slave_w_wstrb;
  wire [2 : 0] aws_BSV_top$ddr4_A_master_arprot,
	       aws_BSV_top$ddr4_A_master_arsize,
	       aws_BSV_top$ddr4_A_master_awprot,
	       aws_BSV_top$ddr4_A_master_awsize,
	       aws_BSV_top$ddr4_B_master_arprot,
	       aws_BSV_top$ddr4_B_master_arsize,
	       aws_BSV_top$ddr4_B_master_awprot,
	       aws_BSV_top$ddr4_B_master_awsize,
	       aws_BSV_top$ddr4_C_master_arprot,
	       aws_BSV_top$ddr4_C_master_arsize,
	       aws_BSV_top$ddr4_C_master_awprot,
	       aws_BSV_top$ddr4_C_master_awsize,
	       aws_BSV_top$ddr4_D_master_arprot,
	       aws_BSV_top$ddr4_D_master_arsize,
	       aws_BSV_top$ddr4_D_master_awprot,
	       aws_BSV_top$ddr4_D_master_awsize,
	       aws_BSV_top$dma_pcis_slave_arprot,
	       aws_BSV_top$dma_pcis_slave_arsize,
	       aws_BSV_top$dma_pcis_slave_awprot,
	       aws_BSV_top$dma_pcis_slave_awsize,
	       aws_BSV_top$ocl_slave_ar_arprot,
	       aws_BSV_top$ocl_slave_aw_awprot;
  wire [1 : 0] aws_BSV_top$ddr4_A_master_arburst,
	       aws_BSV_top$ddr4_A_master_awburst,
	       aws_BSV_top$ddr4_A_master_bresp,
	       aws_BSV_top$ddr4_A_master_rresp,
	       aws_BSV_top$ddr4_B_master_arburst,
	       aws_BSV_top$ddr4_B_master_awburst,
	       aws_BSV_top$ddr4_B_master_bresp,
	       aws_BSV_top$ddr4_B_master_rresp,
	       aws_BSV_top$ddr4_C_master_arburst,
	       aws_BSV_top$ddr4_C_master_awburst,
	       aws_BSV_top$ddr4_C_master_bresp,
	       aws_BSV_top$ddr4_C_master_rresp,
	       aws_BSV_top$ddr4_D_master_arburst,
	       aws_BSV_top$ddr4_D_master_awburst,
	       aws_BSV_top$ddr4_D_master_bresp,
	       aws_BSV_top$ddr4_D_master_rresp,
	       aws_BSV_top$dma_pcis_slave_arburst,
	       aws_BSV_top$dma_pcis_slave_awburst,
	       aws_BSV_top$dma_pcis_slave_bresp,
	       aws_BSV_top$dma_pcis_slave_rresp,
	       aws_BSV_top$ocl_slave_b_bresp,
	       aws_BSV_top$ocl_slave_r_rresp;
  wire aws_BSV_top$ddr4_A_master_arlock,
       aws_BSV_top$ddr4_A_master_arready,
       aws_BSV_top$ddr4_A_master_arvalid,
       aws_BSV_top$ddr4_A_master_awlock,
       aws_BSV_top$ddr4_A_master_awready,
       aws_BSV_top$ddr4_A_master_awvalid,
       aws_BSV_top$ddr4_A_master_bready,
       aws_BSV_top$ddr4_A_master_bvalid,
       aws_BSV_top$ddr4_A_master_rlast,
       aws_BSV_top$ddr4_A_master_rready,
       aws_BSV_top$ddr4_A_master_rvalid,
       aws_BSV_top$ddr4_A_master_wlast,
       aws_BSV_top$ddr4_A_master_wready,
       aws_BSV_top$ddr4_A_master_wvalid,
       aws_BSV_top$ddr4_B_master_arlock,
       aws_BSV_top$ddr4_B_master_arready,
       aws_BSV_top$ddr4_B_master_arvalid,
       aws_BSV_top$ddr4_B_master_awlock,
       aws_BSV_top$ddr4_B_master_awready,
       aws_BSV_top$ddr4_B_master_awvalid,
       aws_BSV_top$ddr4_B_master_bready,
       aws_BSV_top$ddr4_B_master_bvalid,
       aws_BSV_top$ddr4_B_master_rlast,
       aws_BSV_top$ddr4_B_master_rready,
       aws_BSV_top$ddr4_B_master_rvalid,
       aws_BSV_top$ddr4_B_master_wlast,
       aws_BSV_top$ddr4_B_master_wready,
       aws_BSV_top$ddr4_B_master_wvalid,
       aws_BSV_top$ddr4_C_master_arlock,
       aws_BSV_top$ddr4_C_master_arready,
       aws_BSV_top$ddr4_C_master_arvalid,
       aws_BSV_top$ddr4_C_master_awlock,
       aws_BSV_top$ddr4_C_master_awready,
       aws_BSV_top$ddr4_C_master_awvalid,
       aws_BSV_top$ddr4_C_master_bready,
       aws_BSV_top$ddr4_C_master_bvalid,
       aws_BSV_top$ddr4_C_master_rlast,
       aws_BSV_top$ddr4_C_master_rready,
       aws_BSV_top$ddr4_C_master_rvalid,
       aws_BSV_top$ddr4_C_master_wlast,
       aws_BSV_top$ddr4_C_master_wready,
       aws_BSV_top$ddr4_C_master_wvalid,
       aws_BSV_top$ddr4_D_master_arlock,
       aws_BSV_top$ddr4_D_master_arready,
       aws_BSV_top$ddr4_D_master_arvalid,
       aws_BSV_top$ddr4_D_master_awlock,
       aws_BSV_top$ddr4_D_master_awready,
       aws_BSV_top$ddr4_D_master_awvalid,
       aws_BSV_top$ddr4_D_master_bready,
       aws_BSV_top$ddr4_D_master_bvalid,
       aws_BSV_top$ddr4_D_master_rlast,
       aws_BSV_top$ddr4_D_master_rready,
       aws_BSV_top$ddr4_D_master_rvalid,
       aws_BSV_top$ddr4_D_master_wlast,
       aws_BSV_top$ddr4_D_master_wready,
       aws_BSV_top$ddr4_D_master_wvalid,
       aws_BSV_top$dma_pcis_slave_arlock,
       aws_BSV_top$dma_pcis_slave_arready,
       aws_BSV_top$dma_pcis_slave_arvalid,
       aws_BSV_top$dma_pcis_slave_awlock,
       aws_BSV_top$dma_pcis_slave_awready,
       aws_BSV_top$dma_pcis_slave_awvalid,
       aws_BSV_top$dma_pcis_slave_bready,
       aws_BSV_top$dma_pcis_slave_bvalid,
       aws_BSV_top$dma_pcis_slave_rlast,
       aws_BSV_top$dma_pcis_slave_rready,
       aws_BSV_top$dma_pcis_slave_rvalid,
       aws_BSV_top$dma_pcis_slave_wlast,
       aws_BSV_top$dma_pcis_slave_wready,
       aws_BSV_top$dma_pcis_slave_wvalid,
       aws_BSV_top$ocl_slave_ar_arready,
       aws_BSV_top$ocl_slave_ar_arvalid,
       aws_BSV_top$ocl_slave_aw_awready,
       aws_BSV_top$ocl_slave_aw_awvalid,
       aws_BSV_top$ocl_slave_b_bready,
       aws_BSV_top$ocl_slave_b_bvalid,
       aws_BSV_top$ocl_slave_r_rready,
       aws_BSV_top$ocl_slave_r_rvalid,
       aws_BSV_top$ocl_slave_w_wready,
       aws_BSV_top$ocl_slave_w_wvalid;

  // ports of submodule comms
  wire [631 : 0] comms$fi_C_to_BSV_bytevec_enq_x;
  wire [607 : 0] comms$fo_BSV_to_C_bytevec_first;
  wire [576 : 0] comms$fo_AXI4_Wr_Data_d512_u0_first;
  wire [530 : 0] comms$fi_AXI4_Rd_Data_i16_d512_u0_enq_x;
  wire [108 : 0] comms$fo_AXI4_Rd_Addr_i16_a64_u0_first,
		 comms$fo_AXI4_Wr_Addr_i16_a64_u0_first;
  wire [35 : 0] comms$fo_AXI4L_Wr_Data_d32_first;
  wire [34 : 0] comms$fo_AXI4L_Rd_Addr_a32_u0_first,
		comms$fo_AXI4L_Wr_Addr_a32_u0_first;
  wire [33 : 0] comms$fi_AXI4L_Rd_Data_d32_u0_enq_x;
  wire [17 : 0] comms$fi_AXI4_Wr_Resp_i16_u0_enq_x;
  wire [1 : 0] comms$fi_AXI4L_Wr_Resp_u0_enq_x;
  wire comms$EN_fi_AXI4L_Rd_Data_d32_u0_enq,
       comms$EN_fi_AXI4L_Wr_Resp_u0_enq,
       comms$EN_fi_AXI4_Rd_Data_i16_d512_u0_enq,
       comms$EN_fi_AXI4_Wr_Resp_i16_u0_enq,
       comms$EN_fi_C_to_BSV_bytevec_enq,
       comms$EN_fo_AXI4L_Rd_Addr_a32_u0_deq,
       comms$EN_fo_AXI4L_Wr_Addr_a32_u0_deq,
       comms$EN_fo_AXI4L_Wr_Data_d32_deq,
       comms$EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq,
       comms$EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq,
       comms$EN_fo_AXI4_Wr_Data_d512_u0_deq,
       comms$EN_fo_BSV_to_C_bytevec_deq,
       comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq,
       comms$RDY_fi_AXI4L_Wr_Resp_u0_enq,
       comms$RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq,
       comms$RDY_fi_AXI4_Wr_Resp_i16_u0_enq,
       comms$RDY_fi_C_to_BSV_bytevec_enq,
       comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq,
       comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first,
       comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq,
       comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first,
       comms$RDY_fo_AXI4L_Wr_Data_d32_deq,
       comms$RDY_fo_AXI4L_Wr_Data_d32_first,
       comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq,
       comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first,
       comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq,
       comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first,
       comms$RDY_fo_AXI4_Wr_Data_d512_u0_deq,
       comms$RDY_fo_AXI4_Wr_Data_d512_u0_first,
       comms$RDY_fo_BSV_to_C_bytevec_deq,
       comms$RDY_fo_BSV_to_C_bytevec_first;

  // ports of submodule ddr4_A
  wire [511 : 0] ddr4_A$rdata, ddr4_A$wdata;
  wire [63 : 0] ddr4_A$araddr, ddr4_A$awaddr, ddr4_A$wstrb;
  wire [15 : 0] ddr4_A$arid, ddr4_A$awid, ddr4_A$bid, ddr4_A$rid;
  wire [7 : 0] ddr4_A$arlen, ddr4_A$awlen;
  wire [3 : 0] ddr4_A$arcache,
	       ddr4_A$arqos,
	       ddr4_A$arregion,
	       ddr4_A$awcache,
	       ddr4_A$awqos,
	       ddr4_A$awregion;
  wire [2 : 0] ddr4_A$arprot, ddr4_A$arsize, ddr4_A$awprot, ddr4_A$awsize;
  wire [1 : 0] ddr4_A$arburst, ddr4_A$awburst, ddr4_A$bresp, ddr4_A$rresp;
  wire ddr4_A$arlock,
       ddr4_A$arready,
       ddr4_A$arvalid,
       ddr4_A$awlock,
       ddr4_A$awready,
       ddr4_A$awvalid,
       ddr4_A$bready,
       ddr4_A$bvalid,
       ddr4_A$rlast,
       ddr4_A$rready,
       ddr4_A$rvalid,
       ddr4_A$wlast,
       ddr4_A$wready,
       ddr4_A$wvalid;

  // ports of submodule ddr4_A_deburster_countWriteRspFF
  wire [7 : 0] ddr4_A_deburster_countWriteRspFF$D_IN,
	       ddr4_A_deburster_countWriteRspFF$D_OUT;
  wire ddr4_A_deburster_countWriteRspFF$CLR,
       ddr4_A_deburster_countWriteRspFF$DEQ,
       ddr4_A_deburster_countWriteRspFF$EMPTY_N,
       ddr4_A_deburster_countWriteRspFF$ENQ,
       ddr4_A_deburster_countWriteRspFF$FULL_N;

  // ports of submodule ddr4_A_deburster_inShim_arff
  wire [108 : 0] ddr4_A_deburster_inShim_arff$D_IN,
		 ddr4_A_deburster_inShim_arff$D_OUT;
  wire ddr4_A_deburster_inShim_arff$CLR,
       ddr4_A_deburster_inShim_arff$DEQ,
       ddr4_A_deburster_inShim_arff$EMPTY_N,
       ddr4_A_deburster_inShim_arff$ENQ,
       ddr4_A_deburster_inShim_arff$FULL_N;

  // ports of submodule ddr4_A_deburster_inShim_awff
  wire [108 : 0] ddr4_A_deburster_inShim_awff$D_IN,
		 ddr4_A_deburster_inShim_awff$D_OUT;
  wire ddr4_A_deburster_inShim_awff$CLR,
       ddr4_A_deburster_inShim_awff$DEQ,
       ddr4_A_deburster_inShim_awff$EMPTY_N,
       ddr4_A_deburster_inShim_awff$ENQ,
       ddr4_A_deburster_inShim_awff$FULL_N;

  // ports of submodule ddr4_A_deburster_inShim_bff
  wire [17 : 0] ddr4_A_deburster_inShim_bff$D_IN,
		ddr4_A_deburster_inShim_bff$D_OUT;
  wire ddr4_A_deburster_inShim_bff$CLR,
       ddr4_A_deburster_inShim_bff$DEQ,
       ddr4_A_deburster_inShim_bff$EMPTY_N,
       ddr4_A_deburster_inShim_bff$ENQ,
       ddr4_A_deburster_inShim_bff$FULL_N;

  // ports of submodule ddr4_A_deburster_inShim_rff
  wire [530 : 0] ddr4_A_deburster_inShim_rff$D_IN,
		 ddr4_A_deburster_inShim_rff$D_OUT;
  wire ddr4_A_deburster_inShim_rff$CLR,
       ddr4_A_deburster_inShim_rff$DEQ,
       ddr4_A_deburster_inShim_rff$EMPTY_N,
       ddr4_A_deburster_inShim_rff$ENQ,
       ddr4_A_deburster_inShim_rff$FULL_N;

  // ports of submodule ddr4_A_deburster_inShim_wff
  wire [576 : 0] ddr4_A_deburster_inShim_wff$D_IN,
		 ddr4_A_deburster_inShim_wff$D_OUT;
  wire ddr4_A_deburster_inShim_wff$CLR,
       ddr4_A_deburster_inShim_wff$DEQ,
       ddr4_A_deburster_inShim_wff$EMPTY_N,
       ddr4_A_deburster_inShim_wff$ENQ,
       ddr4_A_deburster_inShim_wff$FULL_N;

  // ports of submodule ddr4_A_deburster_lastReadRspFF
  wire ddr4_A_deburster_lastReadRspFF$CLR,
       ddr4_A_deburster_lastReadRspFF$DEQ,
       ddr4_A_deburster_lastReadRspFF$D_IN,
       ddr4_A_deburster_lastReadRspFF$D_OUT,
       ddr4_A_deburster_lastReadRspFF$EMPTY_N,
       ddr4_A_deburster_lastReadRspFF$ENQ,
       ddr4_A_deburster_lastReadRspFF$FULL_N;

  // ports of submodule ddr4_A_deburster_outShim_arff
  wire [108 : 0] ddr4_A_deburster_outShim_arff$D_IN,
		 ddr4_A_deburster_outShim_arff$D_OUT;
  wire ddr4_A_deburster_outShim_arff$CLR,
       ddr4_A_deburster_outShim_arff$DEQ,
       ddr4_A_deburster_outShim_arff$EMPTY_N,
       ddr4_A_deburster_outShim_arff$ENQ,
       ddr4_A_deburster_outShim_arff$FULL_N;

  // ports of submodule ddr4_A_deburster_outShim_awff
  wire [108 : 0] ddr4_A_deburster_outShim_awff$D_IN,
		 ddr4_A_deburster_outShim_awff$D_OUT;
  wire ddr4_A_deburster_outShim_awff$CLR,
       ddr4_A_deburster_outShim_awff$DEQ,
       ddr4_A_deburster_outShim_awff$EMPTY_N,
       ddr4_A_deburster_outShim_awff$ENQ,
       ddr4_A_deburster_outShim_awff$FULL_N;

  // ports of submodule ddr4_A_deburster_outShim_bff
  wire [17 : 0] ddr4_A_deburster_outShim_bff$D_IN,
		ddr4_A_deburster_outShim_bff$D_OUT;
  wire ddr4_A_deburster_outShim_bff$CLR,
       ddr4_A_deburster_outShim_bff$DEQ,
       ddr4_A_deburster_outShim_bff$EMPTY_N,
       ddr4_A_deburster_outShim_bff$ENQ,
       ddr4_A_deburster_outShim_bff$FULL_N;

  // ports of submodule ddr4_A_deburster_outShim_rff
  wire [530 : 0] ddr4_A_deburster_outShim_rff$D_IN,
		 ddr4_A_deburster_outShim_rff$D_OUT;
  wire ddr4_A_deburster_outShim_rff$CLR,
       ddr4_A_deburster_outShim_rff$DEQ,
       ddr4_A_deburster_outShim_rff$EMPTY_N,
       ddr4_A_deburster_outShim_rff$ENQ,
       ddr4_A_deburster_outShim_rff$FULL_N;

  // ports of submodule ddr4_A_deburster_outShim_wff
  wire [576 : 0] ddr4_A_deburster_outShim_wff$D_IN,
		 ddr4_A_deburster_outShim_wff$D_OUT;
  wire ddr4_A_deburster_outShim_wff$CLR,
       ddr4_A_deburster_outShim_wff$DEQ,
       ddr4_A_deburster_outShim_wff$EMPTY_N,
       ddr4_A_deburster_outShim_wff$ENQ,
       ddr4_A_deburster_outShim_wff$FULL_N;

  // ports of submodule ddr4_B
  wire [511 : 0] ddr4_B$rdata, ddr4_B$wdata;
  wire [63 : 0] ddr4_B$araddr, ddr4_B$awaddr, ddr4_B$wstrb;
  wire [15 : 0] ddr4_B$arid, ddr4_B$awid, ddr4_B$bid, ddr4_B$rid;
  wire [7 : 0] ddr4_B$arlen, ddr4_B$awlen;
  wire [3 : 0] ddr4_B$arcache,
	       ddr4_B$arqos,
	       ddr4_B$arregion,
	       ddr4_B$awcache,
	       ddr4_B$awqos,
	       ddr4_B$awregion;
  wire [2 : 0] ddr4_B$arprot, ddr4_B$arsize, ddr4_B$awprot, ddr4_B$awsize;
  wire [1 : 0] ddr4_B$arburst, ddr4_B$awburst, ddr4_B$bresp, ddr4_B$rresp;
  wire ddr4_B$arlock,
       ddr4_B$arready,
       ddr4_B$arvalid,
       ddr4_B$awlock,
       ddr4_B$awready,
       ddr4_B$awvalid,
       ddr4_B$bready,
       ddr4_B$bvalid,
       ddr4_B$rlast,
       ddr4_B$rready,
       ddr4_B$rvalid,
       ddr4_B$wlast,
       ddr4_B$wready,
       ddr4_B$wvalid;

  // ports of submodule ddr4_B_deburster_countWriteRspFF
  wire [7 : 0] ddr4_B_deburster_countWriteRspFF$D_IN,
	       ddr4_B_deburster_countWriteRspFF$D_OUT;
  wire ddr4_B_deburster_countWriteRspFF$CLR,
       ddr4_B_deburster_countWriteRspFF$DEQ,
       ddr4_B_deburster_countWriteRspFF$EMPTY_N,
       ddr4_B_deburster_countWriteRspFF$ENQ,
       ddr4_B_deburster_countWriteRspFF$FULL_N;

  // ports of submodule ddr4_B_deburster_inShim_arff
  wire [108 : 0] ddr4_B_deburster_inShim_arff$D_IN,
		 ddr4_B_deburster_inShim_arff$D_OUT;
  wire ddr4_B_deburster_inShim_arff$CLR,
       ddr4_B_deburster_inShim_arff$DEQ,
       ddr4_B_deburster_inShim_arff$EMPTY_N,
       ddr4_B_deburster_inShim_arff$ENQ,
       ddr4_B_deburster_inShim_arff$FULL_N;

  // ports of submodule ddr4_B_deburster_inShim_awff
  wire [108 : 0] ddr4_B_deburster_inShim_awff$D_IN,
		 ddr4_B_deburster_inShim_awff$D_OUT;
  wire ddr4_B_deburster_inShim_awff$CLR,
       ddr4_B_deburster_inShim_awff$DEQ,
       ddr4_B_deburster_inShim_awff$EMPTY_N,
       ddr4_B_deburster_inShim_awff$ENQ,
       ddr4_B_deburster_inShim_awff$FULL_N;

  // ports of submodule ddr4_B_deburster_inShim_bff
  wire [17 : 0] ddr4_B_deburster_inShim_bff$D_IN,
		ddr4_B_deburster_inShim_bff$D_OUT;
  wire ddr4_B_deburster_inShim_bff$CLR,
       ddr4_B_deburster_inShim_bff$DEQ,
       ddr4_B_deburster_inShim_bff$EMPTY_N,
       ddr4_B_deburster_inShim_bff$ENQ,
       ddr4_B_deburster_inShim_bff$FULL_N;

  // ports of submodule ddr4_B_deburster_inShim_rff
  wire [530 : 0] ddr4_B_deburster_inShim_rff$D_IN,
		 ddr4_B_deburster_inShim_rff$D_OUT;
  wire ddr4_B_deburster_inShim_rff$CLR,
       ddr4_B_deburster_inShim_rff$DEQ,
       ddr4_B_deburster_inShim_rff$EMPTY_N,
       ddr4_B_deburster_inShim_rff$ENQ,
       ddr4_B_deburster_inShim_rff$FULL_N;

  // ports of submodule ddr4_B_deburster_inShim_wff
  wire [576 : 0] ddr4_B_deburster_inShim_wff$D_IN,
		 ddr4_B_deburster_inShim_wff$D_OUT;
  wire ddr4_B_deburster_inShim_wff$CLR,
       ddr4_B_deburster_inShim_wff$DEQ,
       ddr4_B_deburster_inShim_wff$EMPTY_N,
       ddr4_B_deburster_inShim_wff$ENQ,
       ddr4_B_deburster_inShim_wff$FULL_N;

  // ports of submodule ddr4_B_deburster_lastReadRspFF
  wire ddr4_B_deburster_lastReadRspFF$CLR,
       ddr4_B_deburster_lastReadRspFF$DEQ,
       ddr4_B_deburster_lastReadRspFF$D_IN,
       ddr4_B_deburster_lastReadRspFF$D_OUT,
       ddr4_B_deburster_lastReadRspFF$EMPTY_N,
       ddr4_B_deburster_lastReadRspFF$ENQ,
       ddr4_B_deburster_lastReadRspFF$FULL_N;

  // ports of submodule ddr4_B_deburster_outShim_arff
  wire [108 : 0] ddr4_B_deburster_outShim_arff$D_IN,
		 ddr4_B_deburster_outShim_arff$D_OUT;
  wire ddr4_B_deburster_outShim_arff$CLR,
       ddr4_B_deburster_outShim_arff$DEQ,
       ddr4_B_deburster_outShim_arff$EMPTY_N,
       ddr4_B_deburster_outShim_arff$ENQ,
       ddr4_B_deburster_outShim_arff$FULL_N;

  // ports of submodule ddr4_B_deburster_outShim_awff
  wire [108 : 0] ddr4_B_deburster_outShim_awff$D_IN,
		 ddr4_B_deburster_outShim_awff$D_OUT;
  wire ddr4_B_deburster_outShim_awff$CLR,
       ddr4_B_deburster_outShim_awff$DEQ,
       ddr4_B_deburster_outShim_awff$EMPTY_N,
       ddr4_B_deburster_outShim_awff$ENQ,
       ddr4_B_deburster_outShim_awff$FULL_N;

  // ports of submodule ddr4_B_deburster_outShim_bff
  wire [17 : 0] ddr4_B_deburster_outShim_bff$D_IN,
		ddr4_B_deburster_outShim_bff$D_OUT;
  wire ddr4_B_deburster_outShim_bff$CLR,
       ddr4_B_deburster_outShim_bff$DEQ,
       ddr4_B_deburster_outShim_bff$EMPTY_N,
       ddr4_B_deburster_outShim_bff$ENQ,
       ddr4_B_deburster_outShim_bff$FULL_N;

  // ports of submodule ddr4_B_deburster_outShim_rff
  wire [530 : 0] ddr4_B_deburster_outShim_rff$D_IN,
		 ddr4_B_deburster_outShim_rff$D_OUT;
  wire ddr4_B_deburster_outShim_rff$CLR,
       ddr4_B_deburster_outShim_rff$DEQ,
       ddr4_B_deburster_outShim_rff$EMPTY_N,
       ddr4_B_deburster_outShim_rff$ENQ,
       ddr4_B_deburster_outShim_rff$FULL_N;

  // ports of submodule ddr4_B_deburster_outShim_wff
  wire [576 : 0] ddr4_B_deburster_outShim_wff$D_IN,
		 ddr4_B_deburster_outShim_wff$D_OUT;
  wire ddr4_B_deburster_outShim_wff$CLR,
       ddr4_B_deburster_outShim_wff$DEQ,
       ddr4_B_deburster_outShim_wff$EMPTY_N,
       ddr4_B_deburster_outShim_wff$ENQ,
       ddr4_B_deburster_outShim_wff$FULL_N;

  // ports of submodule ddr4_C
  wire [511 : 0] ddr4_C$rdata, ddr4_C$wdata;
  wire [63 : 0] ddr4_C$araddr, ddr4_C$awaddr, ddr4_C$wstrb;
  wire [15 : 0] ddr4_C$arid, ddr4_C$awid, ddr4_C$bid, ddr4_C$rid;
  wire [7 : 0] ddr4_C$arlen, ddr4_C$awlen;
  wire [3 : 0] ddr4_C$arcache,
	       ddr4_C$arqos,
	       ddr4_C$arregion,
	       ddr4_C$awcache,
	       ddr4_C$awqos,
	       ddr4_C$awregion;
  wire [2 : 0] ddr4_C$arprot, ddr4_C$arsize, ddr4_C$awprot, ddr4_C$awsize;
  wire [1 : 0] ddr4_C$arburst, ddr4_C$awburst, ddr4_C$bresp, ddr4_C$rresp;
  wire ddr4_C$arlock,
       ddr4_C$arready,
       ddr4_C$arvalid,
       ddr4_C$awlock,
       ddr4_C$awready,
       ddr4_C$awvalid,
       ddr4_C$bready,
       ddr4_C$bvalid,
       ddr4_C$rlast,
       ddr4_C$rready,
       ddr4_C$rvalid,
       ddr4_C$wlast,
       ddr4_C$wready,
       ddr4_C$wvalid;

  // ports of submodule ddr4_C_deburster_countWriteRspFF
  wire [7 : 0] ddr4_C_deburster_countWriteRspFF$D_IN,
	       ddr4_C_deburster_countWriteRspFF$D_OUT;
  wire ddr4_C_deburster_countWriteRspFF$CLR,
       ddr4_C_deburster_countWriteRspFF$DEQ,
       ddr4_C_deburster_countWriteRspFF$EMPTY_N,
       ddr4_C_deburster_countWriteRspFF$ENQ,
       ddr4_C_deburster_countWriteRspFF$FULL_N;

  // ports of submodule ddr4_C_deburster_inShim_arff
  wire [108 : 0] ddr4_C_deburster_inShim_arff$D_IN,
		 ddr4_C_deburster_inShim_arff$D_OUT;
  wire ddr4_C_deburster_inShim_arff$CLR,
       ddr4_C_deburster_inShim_arff$DEQ,
       ddr4_C_deburster_inShim_arff$EMPTY_N,
       ddr4_C_deburster_inShim_arff$ENQ,
       ddr4_C_deburster_inShim_arff$FULL_N;

  // ports of submodule ddr4_C_deburster_inShim_awff
  wire [108 : 0] ddr4_C_deburster_inShim_awff$D_IN,
		 ddr4_C_deburster_inShim_awff$D_OUT;
  wire ddr4_C_deburster_inShim_awff$CLR,
       ddr4_C_deburster_inShim_awff$DEQ,
       ddr4_C_deburster_inShim_awff$EMPTY_N,
       ddr4_C_deburster_inShim_awff$ENQ,
       ddr4_C_deburster_inShim_awff$FULL_N;

  // ports of submodule ddr4_C_deburster_inShim_bff
  wire [17 : 0] ddr4_C_deburster_inShim_bff$D_IN,
		ddr4_C_deburster_inShim_bff$D_OUT;
  wire ddr4_C_deburster_inShim_bff$CLR,
       ddr4_C_deburster_inShim_bff$DEQ,
       ddr4_C_deburster_inShim_bff$EMPTY_N,
       ddr4_C_deburster_inShim_bff$ENQ,
       ddr4_C_deburster_inShim_bff$FULL_N;

  // ports of submodule ddr4_C_deburster_inShim_rff
  wire [530 : 0] ddr4_C_deburster_inShim_rff$D_IN,
		 ddr4_C_deburster_inShim_rff$D_OUT;
  wire ddr4_C_deburster_inShim_rff$CLR,
       ddr4_C_deburster_inShim_rff$DEQ,
       ddr4_C_deburster_inShim_rff$EMPTY_N,
       ddr4_C_deburster_inShim_rff$ENQ,
       ddr4_C_deburster_inShim_rff$FULL_N;

  // ports of submodule ddr4_C_deburster_inShim_wff
  wire [576 : 0] ddr4_C_deburster_inShim_wff$D_IN,
		 ddr4_C_deburster_inShim_wff$D_OUT;
  wire ddr4_C_deburster_inShim_wff$CLR,
       ddr4_C_deburster_inShim_wff$DEQ,
       ddr4_C_deburster_inShim_wff$EMPTY_N,
       ddr4_C_deburster_inShim_wff$ENQ,
       ddr4_C_deburster_inShim_wff$FULL_N;

  // ports of submodule ddr4_C_deburster_lastReadRspFF
  wire ddr4_C_deburster_lastReadRspFF$CLR,
       ddr4_C_deburster_lastReadRspFF$DEQ,
       ddr4_C_deburster_lastReadRspFF$D_IN,
       ddr4_C_deburster_lastReadRspFF$D_OUT,
       ddr4_C_deburster_lastReadRspFF$EMPTY_N,
       ddr4_C_deburster_lastReadRspFF$ENQ,
       ddr4_C_deburster_lastReadRspFF$FULL_N;

  // ports of submodule ddr4_C_deburster_outShim_arff
  wire [108 : 0] ddr4_C_deburster_outShim_arff$D_IN,
		 ddr4_C_deburster_outShim_arff$D_OUT;
  wire ddr4_C_deburster_outShim_arff$CLR,
       ddr4_C_deburster_outShim_arff$DEQ,
       ddr4_C_deburster_outShim_arff$EMPTY_N,
       ddr4_C_deburster_outShim_arff$ENQ,
       ddr4_C_deburster_outShim_arff$FULL_N;

  // ports of submodule ddr4_C_deburster_outShim_awff
  wire [108 : 0] ddr4_C_deburster_outShim_awff$D_IN,
		 ddr4_C_deburster_outShim_awff$D_OUT;
  wire ddr4_C_deburster_outShim_awff$CLR,
       ddr4_C_deburster_outShim_awff$DEQ,
       ddr4_C_deburster_outShim_awff$EMPTY_N,
       ddr4_C_deburster_outShim_awff$ENQ,
       ddr4_C_deburster_outShim_awff$FULL_N;

  // ports of submodule ddr4_C_deburster_outShim_bff
  wire [17 : 0] ddr4_C_deburster_outShim_bff$D_IN,
		ddr4_C_deburster_outShim_bff$D_OUT;
  wire ddr4_C_deburster_outShim_bff$CLR,
       ddr4_C_deburster_outShim_bff$DEQ,
       ddr4_C_deburster_outShim_bff$EMPTY_N,
       ddr4_C_deburster_outShim_bff$ENQ,
       ddr4_C_deburster_outShim_bff$FULL_N;

  // ports of submodule ddr4_C_deburster_outShim_rff
  wire [530 : 0] ddr4_C_deburster_outShim_rff$D_IN,
		 ddr4_C_deburster_outShim_rff$D_OUT;
  wire ddr4_C_deburster_outShim_rff$CLR,
       ddr4_C_deburster_outShim_rff$DEQ,
       ddr4_C_deburster_outShim_rff$EMPTY_N,
       ddr4_C_deburster_outShim_rff$ENQ,
       ddr4_C_deburster_outShim_rff$FULL_N;

  // ports of submodule ddr4_C_deburster_outShim_wff
  wire [576 : 0] ddr4_C_deburster_outShim_wff$D_IN,
		 ddr4_C_deburster_outShim_wff$D_OUT;
  wire ddr4_C_deburster_outShim_wff$CLR,
       ddr4_C_deburster_outShim_wff$DEQ,
       ddr4_C_deburster_outShim_wff$EMPTY_N,
       ddr4_C_deburster_outShim_wff$ENQ,
       ddr4_C_deburster_outShim_wff$FULL_N;

  // ports of submodule ddr4_D
  wire [511 : 0] ddr4_D$rdata, ddr4_D$wdata;
  wire [63 : 0] ddr4_D$araddr, ddr4_D$awaddr, ddr4_D$wstrb;
  wire [15 : 0] ddr4_D$arid, ddr4_D$awid, ddr4_D$bid, ddr4_D$rid;
  wire [7 : 0] ddr4_D$arlen, ddr4_D$awlen;
  wire [3 : 0] ddr4_D$arcache,
	       ddr4_D$arqos,
	       ddr4_D$arregion,
	       ddr4_D$awcache,
	       ddr4_D$awqos,
	       ddr4_D$awregion;
  wire [2 : 0] ddr4_D$arprot, ddr4_D$arsize, ddr4_D$awprot, ddr4_D$awsize;
  wire [1 : 0] ddr4_D$arburst, ddr4_D$awburst, ddr4_D$bresp, ddr4_D$rresp;
  wire ddr4_D$arlock,
       ddr4_D$arready,
       ddr4_D$arvalid,
       ddr4_D$awlock,
       ddr4_D$awready,
       ddr4_D$awvalid,
       ddr4_D$bready,
       ddr4_D$bvalid,
       ddr4_D$rlast,
       ddr4_D$rready,
       ddr4_D$rvalid,
       ddr4_D$wlast,
       ddr4_D$wready,
       ddr4_D$wvalid;

  // ports of submodule ddr4_D_deburster_countWriteRspFF
  wire [7 : 0] ddr4_D_deburster_countWriteRspFF$D_IN,
	       ddr4_D_deburster_countWriteRspFF$D_OUT;
  wire ddr4_D_deburster_countWriteRspFF$CLR,
       ddr4_D_deburster_countWriteRspFF$DEQ,
       ddr4_D_deburster_countWriteRspFF$EMPTY_N,
       ddr4_D_deburster_countWriteRspFF$ENQ,
       ddr4_D_deburster_countWriteRspFF$FULL_N;

  // ports of submodule ddr4_D_deburster_inShim_arff
  wire [108 : 0] ddr4_D_deburster_inShim_arff$D_IN,
		 ddr4_D_deburster_inShim_arff$D_OUT;
  wire ddr4_D_deburster_inShim_arff$CLR,
       ddr4_D_deburster_inShim_arff$DEQ,
       ddr4_D_deburster_inShim_arff$EMPTY_N,
       ddr4_D_deburster_inShim_arff$ENQ,
       ddr4_D_deburster_inShim_arff$FULL_N;

  // ports of submodule ddr4_D_deburster_inShim_awff
  wire [108 : 0] ddr4_D_deburster_inShim_awff$D_IN,
		 ddr4_D_deburster_inShim_awff$D_OUT;
  wire ddr4_D_deburster_inShim_awff$CLR,
       ddr4_D_deburster_inShim_awff$DEQ,
       ddr4_D_deburster_inShim_awff$EMPTY_N,
       ddr4_D_deburster_inShim_awff$ENQ,
       ddr4_D_deburster_inShim_awff$FULL_N;

  // ports of submodule ddr4_D_deburster_inShim_bff
  wire [17 : 0] ddr4_D_deburster_inShim_bff$D_IN,
		ddr4_D_deburster_inShim_bff$D_OUT;
  wire ddr4_D_deburster_inShim_bff$CLR,
       ddr4_D_deburster_inShim_bff$DEQ,
       ddr4_D_deburster_inShim_bff$EMPTY_N,
       ddr4_D_deburster_inShim_bff$ENQ,
       ddr4_D_deburster_inShim_bff$FULL_N;

  // ports of submodule ddr4_D_deburster_inShim_rff
  wire [530 : 0] ddr4_D_deburster_inShim_rff$D_IN,
		 ddr4_D_deburster_inShim_rff$D_OUT;
  wire ddr4_D_deburster_inShim_rff$CLR,
       ddr4_D_deburster_inShim_rff$DEQ,
       ddr4_D_deburster_inShim_rff$EMPTY_N,
       ddr4_D_deburster_inShim_rff$ENQ,
       ddr4_D_deburster_inShim_rff$FULL_N;

  // ports of submodule ddr4_D_deburster_inShim_wff
  wire [576 : 0] ddr4_D_deburster_inShim_wff$D_IN,
		 ddr4_D_deburster_inShim_wff$D_OUT;
  wire ddr4_D_deburster_inShim_wff$CLR,
       ddr4_D_deburster_inShim_wff$DEQ,
       ddr4_D_deburster_inShim_wff$EMPTY_N,
       ddr4_D_deburster_inShim_wff$ENQ,
       ddr4_D_deburster_inShim_wff$FULL_N;

  // ports of submodule ddr4_D_deburster_lastReadRspFF
  wire ddr4_D_deburster_lastReadRspFF$CLR,
       ddr4_D_deburster_lastReadRspFF$DEQ,
       ddr4_D_deburster_lastReadRspFF$D_IN,
       ddr4_D_deburster_lastReadRspFF$D_OUT,
       ddr4_D_deburster_lastReadRspFF$EMPTY_N,
       ddr4_D_deburster_lastReadRspFF$ENQ,
       ddr4_D_deburster_lastReadRspFF$FULL_N;

  // ports of submodule ddr4_D_deburster_outShim_arff
  wire [108 : 0] ddr4_D_deburster_outShim_arff$D_IN,
		 ddr4_D_deburster_outShim_arff$D_OUT;
  wire ddr4_D_deburster_outShim_arff$CLR,
       ddr4_D_deburster_outShim_arff$DEQ,
       ddr4_D_deburster_outShim_arff$EMPTY_N,
       ddr4_D_deburster_outShim_arff$ENQ,
       ddr4_D_deburster_outShim_arff$FULL_N;

  // ports of submodule ddr4_D_deburster_outShim_awff
  wire [108 : 0] ddr4_D_deburster_outShim_awff$D_IN,
		 ddr4_D_deburster_outShim_awff$D_OUT;
  wire ddr4_D_deburster_outShim_awff$CLR,
       ddr4_D_deburster_outShim_awff$DEQ,
       ddr4_D_deburster_outShim_awff$EMPTY_N,
       ddr4_D_deburster_outShim_awff$ENQ,
       ddr4_D_deburster_outShim_awff$FULL_N;

  // ports of submodule ddr4_D_deburster_outShim_bff
  wire [17 : 0] ddr4_D_deburster_outShim_bff$D_IN,
		ddr4_D_deburster_outShim_bff$D_OUT;
  wire ddr4_D_deburster_outShim_bff$CLR,
       ddr4_D_deburster_outShim_bff$DEQ,
       ddr4_D_deburster_outShim_bff$EMPTY_N,
       ddr4_D_deburster_outShim_bff$ENQ,
       ddr4_D_deburster_outShim_bff$FULL_N;

  // ports of submodule ddr4_D_deburster_outShim_rff
  wire [530 : 0] ddr4_D_deburster_outShim_rff$D_IN,
		 ddr4_D_deburster_outShim_rff$D_OUT;
  wire ddr4_D_deburster_outShim_rff$CLR,
       ddr4_D_deburster_outShim_rff$DEQ,
       ddr4_D_deburster_outShim_rff$EMPTY_N,
       ddr4_D_deburster_outShim_rff$ENQ,
       ddr4_D_deburster_outShim_rff$FULL_N;

  // ports of submodule ddr4_D_deburster_outShim_wff
  wire [576 : 0] ddr4_D_deburster_outShim_wff$D_IN,
		 ddr4_D_deburster_outShim_wff$D_OUT;
  wire ddr4_D_deburster_outShim_wff$CLR,
       ddr4_D_deburster_outShim_wff$DEQ,
       ddr4_D_deburster_outShim_wff$EMPTY_N,
       ddr4_D_deburster_outShim_wff$ENQ,
       ddr4_D_deburster_outShim_wff$FULL_N;

  // ports of submodule ocl_xactor_shim_arff
  wire [34 : 0] ocl_xactor_shim_arff$D_IN, ocl_xactor_shim_arff$D_OUT;
  wire ocl_xactor_shim_arff$CLR,
       ocl_xactor_shim_arff$DEQ,
       ocl_xactor_shim_arff$EMPTY_N,
       ocl_xactor_shim_arff$ENQ,
       ocl_xactor_shim_arff$FULL_N;

  // ports of submodule ocl_xactor_shim_awff
  wire [34 : 0] ocl_xactor_shim_awff$D_IN, ocl_xactor_shim_awff$D_OUT;
  wire ocl_xactor_shim_awff$CLR,
       ocl_xactor_shim_awff$DEQ,
       ocl_xactor_shim_awff$EMPTY_N,
       ocl_xactor_shim_awff$ENQ,
       ocl_xactor_shim_awff$FULL_N;

  // ports of submodule ocl_xactor_shim_bff
  wire [1 : 0] ocl_xactor_shim_bff$D_IN, ocl_xactor_shim_bff$D_OUT;
  wire ocl_xactor_shim_bff$CLR,
       ocl_xactor_shim_bff$DEQ,
       ocl_xactor_shim_bff$EMPTY_N,
       ocl_xactor_shim_bff$ENQ,
       ocl_xactor_shim_bff$FULL_N;

  // ports of submodule ocl_xactor_shim_rff
  wire [33 : 0] ocl_xactor_shim_rff$D_IN, ocl_xactor_shim_rff$D_OUT;
  wire ocl_xactor_shim_rff$CLR,
       ocl_xactor_shim_rff$DEQ,
       ocl_xactor_shim_rff$EMPTY_N,
       ocl_xactor_shim_rff$ENQ,
       ocl_xactor_shim_rff$FULL_N;

  // ports of submodule ocl_xactor_shim_wff
  wire [35 : 0] ocl_xactor_shim_wff$D_IN, ocl_xactor_shim_wff$D_OUT;
  wire ocl_xactor_shim_wff$CLR,
       ocl_xactor_shim_wff$DEQ,
       ocl_xactor_shim_wff$EMPTY_N,
       ocl_xactor_shim_wff$ENQ,
       ocl_xactor_shim_wff$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_connect_arflit,
       CAN_FIRE_RL_connect_arflit_1,
       CAN_FIRE_RL_connect_arflit_2,
       CAN_FIRE_RL_connect_arflit_3,
       CAN_FIRE_RL_connect_arflit_4,
       CAN_FIRE_RL_connect_arflit_5,
       CAN_FIRE_RL_connect_arflit_6,
       CAN_FIRE_RL_connect_arflit_7,
       CAN_FIRE_RL_connect_arflit_8,
       CAN_FIRE_RL_connect_arflit_9,
       CAN_FIRE_RL_connect_arready,
       CAN_FIRE_RL_connect_arready_1,
       CAN_FIRE_RL_connect_arready_2,
       CAN_FIRE_RL_connect_arready_3,
       CAN_FIRE_RL_connect_arready_4,
       CAN_FIRE_RL_connect_arready_5,
       CAN_FIRE_RL_connect_arready_6,
       CAN_FIRE_RL_connect_arready_7,
       CAN_FIRE_RL_connect_arready_8,
       CAN_FIRE_RL_connect_arready_9,
       CAN_FIRE_RL_connect_awflit,
       CAN_FIRE_RL_connect_awflit_1,
       CAN_FIRE_RL_connect_awflit_2,
       CAN_FIRE_RL_connect_awflit_3,
       CAN_FIRE_RL_connect_awflit_4,
       CAN_FIRE_RL_connect_awflit_5,
       CAN_FIRE_RL_connect_awflit_6,
       CAN_FIRE_RL_connect_awflit_7,
       CAN_FIRE_RL_connect_awflit_8,
       CAN_FIRE_RL_connect_awflit_9,
       CAN_FIRE_RL_connect_awready,
       CAN_FIRE_RL_connect_awready_1,
       CAN_FIRE_RL_connect_awready_2,
       CAN_FIRE_RL_connect_awready_3,
       CAN_FIRE_RL_connect_awready_4,
       CAN_FIRE_RL_connect_awready_5,
       CAN_FIRE_RL_connect_awready_6,
       CAN_FIRE_RL_connect_awready_7,
       CAN_FIRE_RL_connect_awready_8,
       CAN_FIRE_RL_connect_awready_9,
       CAN_FIRE_RL_connect_bflit,
       CAN_FIRE_RL_connect_bflit_1,
       CAN_FIRE_RL_connect_bflit_2,
       CAN_FIRE_RL_connect_bflit_3,
       CAN_FIRE_RL_connect_bflit_4,
       CAN_FIRE_RL_connect_bflit_5,
       CAN_FIRE_RL_connect_bflit_6,
       CAN_FIRE_RL_connect_bflit_7,
       CAN_FIRE_RL_connect_bflit_8,
       CAN_FIRE_RL_connect_bflit_9,
       CAN_FIRE_RL_connect_bready,
       CAN_FIRE_RL_connect_bready_1,
       CAN_FIRE_RL_connect_bready_2,
       CAN_FIRE_RL_connect_bready_3,
       CAN_FIRE_RL_connect_bready_4,
       CAN_FIRE_RL_connect_bready_5,
       CAN_FIRE_RL_connect_bready_6,
       CAN_FIRE_RL_connect_bready_7,
       CAN_FIRE_RL_connect_bready_8,
       CAN_FIRE_RL_connect_bready_9,
       CAN_FIRE_RL_connect_rflit,
       CAN_FIRE_RL_connect_rflit_1,
       CAN_FIRE_RL_connect_rflit_2,
       CAN_FIRE_RL_connect_rflit_3,
       CAN_FIRE_RL_connect_rflit_4,
       CAN_FIRE_RL_connect_rflit_5,
       CAN_FIRE_RL_connect_rflit_6,
       CAN_FIRE_RL_connect_rflit_7,
       CAN_FIRE_RL_connect_rflit_8,
       CAN_FIRE_RL_connect_rflit_9,
       CAN_FIRE_RL_connect_rready,
       CAN_FIRE_RL_connect_rready_1,
       CAN_FIRE_RL_connect_rready_2,
       CAN_FIRE_RL_connect_rready_3,
       CAN_FIRE_RL_connect_rready_4,
       CAN_FIRE_RL_connect_rready_5,
       CAN_FIRE_RL_connect_rready_6,
       CAN_FIRE_RL_connect_rready_7,
       CAN_FIRE_RL_connect_rready_8,
       CAN_FIRE_RL_connect_rready_9,
       CAN_FIRE_RL_connect_wflit,
       CAN_FIRE_RL_connect_wflit_1,
       CAN_FIRE_RL_connect_wflit_2,
       CAN_FIRE_RL_connect_wflit_3,
       CAN_FIRE_RL_connect_wflit_4,
       CAN_FIRE_RL_connect_wflit_5,
       CAN_FIRE_RL_connect_wflit_6,
       CAN_FIRE_RL_connect_wflit_7,
       CAN_FIRE_RL_connect_wflit_8,
       CAN_FIRE_RL_connect_wflit_9,
       CAN_FIRE_RL_connect_wready,
       CAN_FIRE_RL_connect_wready_1,
       CAN_FIRE_RL_connect_wready_2,
       CAN_FIRE_RL_connect_wready_3,
       CAN_FIRE_RL_connect_wready_4,
       CAN_FIRE_RL_connect_wready_5,
       CAN_FIRE_RL_connect_wready_6,
       CAN_FIRE_RL_connect_wready_7,
       CAN_FIRE_RL_connect_wready_8,
       CAN_FIRE_RL_connect_wready_9,
       CAN_FIRE_RL_ddr4_A_deburster_forward_read_req,
       CAN_FIRE_RL_ddr4_A_deburster_forward_read_rsp,
       CAN_FIRE_RL_ddr4_A_deburster_forward_write_req,
       CAN_FIRE_RL_ddr4_A_deburster_handle_write_rsp,
       CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeAR,
       CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeAW,
       CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeB,
       CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeR,
       CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeW,
       CAN_FIRE_RL_ddr4_B_deburster_forward_read_req,
       CAN_FIRE_RL_ddr4_B_deburster_forward_read_rsp,
       CAN_FIRE_RL_ddr4_B_deburster_forward_write_req,
       CAN_FIRE_RL_ddr4_B_deburster_handle_write_rsp,
       CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeAR,
       CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeAW,
       CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeB,
       CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeR,
       CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeW,
       CAN_FIRE_RL_ddr4_C_deburster_forward_read_req,
       CAN_FIRE_RL_ddr4_C_deburster_forward_read_rsp,
       CAN_FIRE_RL_ddr4_C_deburster_forward_write_req,
       CAN_FIRE_RL_ddr4_C_deburster_handle_write_rsp,
       CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeAR,
       CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeAW,
       CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeB,
       CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeR,
       CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeW,
       CAN_FIRE_RL_ddr4_D_deburster_forward_read_req,
       CAN_FIRE_RL_ddr4_D_deburster_forward_read_rsp,
       CAN_FIRE_RL_ddr4_D_deburster_forward_write_req,
       CAN_FIRE_RL_ddr4_D_deburster_handle_write_rsp,
       CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeAR,
       CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeAW,
       CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeB,
       CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeR,
       CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeW,
       CAN_FIRE_RL_dma_pcis_xactor_do_clear,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_ocl_xactor_u_master_u_ar_doDrop,
       CAN_FIRE_RL_ocl_xactor_u_master_u_ar_setPeek,
       CAN_FIRE_RL_ocl_xactor_u_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_ocl_xactor_u_master_u_aw_doDrop,
       CAN_FIRE_RL_ocl_xactor_u_master_u_aw_setPeek,
       CAN_FIRE_RL_ocl_xactor_u_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_ocl_xactor_u_master_u_b_doPut,
       CAN_FIRE_RL_ocl_xactor_u_master_u_b_warnDoPut,
       CAN_FIRE_RL_ocl_xactor_u_master_u_r_doPut,
       CAN_FIRE_RL_ocl_xactor_u_master_u_r_warnDoPut,
       CAN_FIRE_RL_ocl_xactor_u_master_u_w_doDrop,
       CAN_FIRE_RL_ocl_xactor_u_master_u_w_setPeek,
       CAN_FIRE_RL_ocl_xactor_u_master_u_w_warnDoDrop,
       CAN_FIRE_RL_rl_connect_dma_pcis_rd_addr,
       CAN_FIRE_RL_rl_connect_dma_pcis_rd_data,
       CAN_FIRE_RL_rl_connect_dma_pcis_wr_addr,
       CAN_FIRE_RL_rl_connect_dma_pcis_wr_data,
       CAN_FIRE_RL_rl_connect_dma_pcis_wr_resp,
       CAN_FIRE_RL_rl_connect_ocl_rd_addr,
       CAN_FIRE_RL_rl_connect_ocl_rd_data,
       CAN_FIRE_RL_rl_connect_ocl_wr_addr,
       CAN_FIRE_RL_rl_connect_ocl_wr_data,
       CAN_FIRE_RL_rl_connect_ocl_wr_resp,
       CAN_FIRE_RL_rl_connecting,
       CAN_FIRE_RL_rl_host_recv,
       CAN_FIRE_RL_rl_host_send,
       CAN_FIRE_RL_rl_start_when_connected,
       CAN_FIRE_RL_rl_status_signals,
       CAN_FIRE___me_check_13,
       CAN_FIRE___me_check_22,
       CAN_FIRE___me_check_31,
       CAN_FIRE___me_check_4,
       WILL_FIRE_RL_connect_arflit,
       WILL_FIRE_RL_connect_arflit_1,
       WILL_FIRE_RL_connect_arflit_2,
       WILL_FIRE_RL_connect_arflit_3,
       WILL_FIRE_RL_connect_arflit_4,
       WILL_FIRE_RL_connect_arflit_5,
       WILL_FIRE_RL_connect_arflit_6,
       WILL_FIRE_RL_connect_arflit_7,
       WILL_FIRE_RL_connect_arflit_8,
       WILL_FIRE_RL_connect_arflit_9,
       WILL_FIRE_RL_connect_arready,
       WILL_FIRE_RL_connect_arready_1,
       WILL_FIRE_RL_connect_arready_2,
       WILL_FIRE_RL_connect_arready_3,
       WILL_FIRE_RL_connect_arready_4,
       WILL_FIRE_RL_connect_arready_5,
       WILL_FIRE_RL_connect_arready_6,
       WILL_FIRE_RL_connect_arready_7,
       WILL_FIRE_RL_connect_arready_8,
       WILL_FIRE_RL_connect_arready_9,
       WILL_FIRE_RL_connect_awflit,
       WILL_FIRE_RL_connect_awflit_1,
       WILL_FIRE_RL_connect_awflit_2,
       WILL_FIRE_RL_connect_awflit_3,
       WILL_FIRE_RL_connect_awflit_4,
       WILL_FIRE_RL_connect_awflit_5,
       WILL_FIRE_RL_connect_awflit_6,
       WILL_FIRE_RL_connect_awflit_7,
       WILL_FIRE_RL_connect_awflit_8,
       WILL_FIRE_RL_connect_awflit_9,
       WILL_FIRE_RL_connect_awready,
       WILL_FIRE_RL_connect_awready_1,
       WILL_FIRE_RL_connect_awready_2,
       WILL_FIRE_RL_connect_awready_3,
       WILL_FIRE_RL_connect_awready_4,
       WILL_FIRE_RL_connect_awready_5,
       WILL_FIRE_RL_connect_awready_6,
       WILL_FIRE_RL_connect_awready_7,
       WILL_FIRE_RL_connect_awready_8,
       WILL_FIRE_RL_connect_awready_9,
       WILL_FIRE_RL_connect_bflit,
       WILL_FIRE_RL_connect_bflit_1,
       WILL_FIRE_RL_connect_bflit_2,
       WILL_FIRE_RL_connect_bflit_3,
       WILL_FIRE_RL_connect_bflit_4,
       WILL_FIRE_RL_connect_bflit_5,
       WILL_FIRE_RL_connect_bflit_6,
       WILL_FIRE_RL_connect_bflit_7,
       WILL_FIRE_RL_connect_bflit_8,
       WILL_FIRE_RL_connect_bflit_9,
       WILL_FIRE_RL_connect_bready,
       WILL_FIRE_RL_connect_bready_1,
       WILL_FIRE_RL_connect_bready_2,
       WILL_FIRE_RL_connect_bready_3,
       WILL_FIRE_RL_connect_bready_4,
       WILL_FIRE_RL_connect_bready_5,
       WILL_FIRE_RL_connect_bready_6,
       WILL_FIRE_RL_connect_bready_7,
       WILL_FIRE_RL_connect_bready_8,
       WILL_FIRE_RL_connect_bready_9,
       WILL_FIRE_RL_connect_rflit,
       WILL_FIRE_RL_connect_rflit_1,
       WILL_FIRE_RL_connect_rflit_2,
       WILL_FIRE_RL_connect_rflit_3,
       WILL_FIRE_RL_connect_rflit_4,
       WILL_FIRE_RL_connect_rflit_5,
       WILL_FIRE_RL_connect_rflit_6,
       WILL_FIRE_RL_connect_rflit_7,
       WILL_FIRE_RL_connect_rflit_8,
       WILL_FIRE_RL_connect_rflit_9,
       WILL_FIRE_RL_connect_rready,
       WILL_FIRE_RL_connect_rready_1,
       WILL_FIRE_RL_connect_rready_2,
       WILL_FIRE_RL_connect_rready_3,
       WILL_FIRE_RL_connect_rready_4,
       WILL_FIRE_RL_connect_rready_5,
       WILL_FIRE_RL_connect_rready_6,
       WILL_FIRE_RL_connect_rready_7,
       WILL_FIRE_RL_connect_rready_8,
       WILL_FIRE_RL_connect_rready_9,
       WILL_FIRE_RL_connect_wflit,
       WILL_FIRE_RL_connect_wflit_1,
       WILL_FIRE_RL_connect_wflit_2,
       WILL_FIRE_RL_connect_wflit_3,
       WILL_FIRE_RL_connect_wflit_4,
       WILL_FIRE_RL_connect_wflit_5,
       WILL_FIRE_RL_connect_wflit_6,
       WILL_FIRE_RL_connect_wflit_7,
       WILL_FIRE_RL_connect_wflit_8,
       WILL_FIRE_RL_connect_wflit_9,
       WILL_FIRE_RL_connect_wready,
       WILL_FIRE_RL_connect_wready_1,
       WILL_FIRE_RL_connect_wready_2,
       WILL_FIRE_RL_connect_wready_3,
       WILL_FIRE_RL_connect_wready_4,
       WILL_FIRE_RL_connect_wready_5,
       WILL_FIRE_RL_connect_wready_6,
       WILL_FIRE_RL_connect_wready_7,
       WILL_FIRE_RL_connect_wready_8,
       WILL_FIRE_RL_connect_wready_9,
       WILL_FIRE_RL_ddr4_A_deburster_forward_read_req,
       WILL_FIRE_RL_ddr4_A_deburster_forward_read_rsp,
       WILL_FIRE_RL_ddr4_A_deburster_forward_write_req,
       WILL_FIRE_RL_ddr4_A_deburster_handle_write_rsp,
       WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAR,
       WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAW,
       WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeB,
       WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeR,
       WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeW,
       WILL_FIRE_RL_ddr4_B_deburster_forward_read_req,
       WILL_FIRE_RL_ddr4_B_deburster_forward_read_rsp,
       WILL_FIRE_RL_ddr4_B_deburster_forward_write_req,
       WILL_FIRE_RL_ddr4_B_deburster_handle_write_rsp,
       WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAR,
       WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAW,
       WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeB,
       WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeR,
       WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeW,
       WILL_FIRE_RL_ddr4_C_deburster_forward_read_req,
       WILL_FIRE_RL_ddr4_C_deburster_forward_read_rsp,
       WILL_FIRE_RL_ddr4_C_deburster_forward_write_req,
       WILL_FIRE_RL_ddr4_C_deburster_handle_write_rsp,
       WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAR,
       WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAW,
       WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeB,
       WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeR,
       WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeW,
       WILL_FIRE_RL_ddr4_D_deburster_forward_read_req,
       WILL_FIRE_RL_ddr4_D_deburster_forward_read_rsp,
       WILL_FIRE_RL_ddr4_D_deburster_forward_write_req,
       WILL_FIRE_RL_ddr4_D_deburster_handle_write_rsp,
       WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAR,
       WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAW,
       WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeB,
       WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeR,
       WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeW,
       WILL_FIRE_RL_dma_pcis_xactor_do_clear,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_ocl_xactor_u_master_u_ar_doDrop,
       WILL_FIRE_RL_ocl_xactor_u_master_u_ar_setPeek,
       WILL_FIRE_RL_ocl_xactor_u_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_ocl_xactor_u_master_u_aw_doDrop,
       WILL_FIRE_RL_ocl_xactor_u_master_u_aw_setPeek,
       WILL_FIRE_RL_ocl_xactor_u_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_ocl_xactor_u_master_u_b_doPut,
       WILL_FIRE_RL_ocl_xactor_u_master_u_b_warnDoPut,
       WILL_FIRE_RL_ocl_xactor_u_master_u_r_doPut,
       WILL_FIRE_RL_ocl_xactor_u_master_u_r_warnDoPut,
       WILL_FIRE_RL_ocl_xactor_u_master_u_w_doDrop,
       WILL_FIRE_RL_ocl_xactor_u_master_u_w_setPeek,
       WILL_FIRE_RL_ocl_xactor_u_master_u_w_warnDoDrop,
       WILL_FIRE_RL_rl_connect_dma_pcis_rd_addr,
       WILL_FIRE_RL_rl_connect_dma_pcis_rd_data,
       WILL_FIRE_RL_rl_connect_dma_pcis_wr_addr,
       WILL_FIRE_RL_rl_connect_dma_pcis_wr_data,
       WILL_FIRE_RL_rl_connect_dma_pcis_wr_resp,
       WILL_FIRE_RL_rl_connect_ocl_rd_addr,
       WILL_FIRE_RL_rl_connect_ocl_rd_data,
       WILL_FIRE_RL_rl_connect_ocl_wr_addr,
       WILL_FIRE_RL_rl_connect_ocl_wr_data,
       WILL_FIRE_RL_rl_connect_ocl_wr_resp,
       WILL_FIRE_RL_rl_connecting,
       WILL_FIRE_RL_rl_host_recv,
       WILL_FIRE_RL_rl_host_send,
       WILL_FIRE_RL_rl_start_when_connected,
       WILL_FIRE_RL_rl_status_signals,
       WILL_FIRE___me_check_13,
       WILL_FIRE___me_check_22,
       WILL_FIRE___me_check_31,
       WILL_FIRE___me_check_4;

  // inputs to muxes for submodule ports
  wire MUX_ddr4_A_deburster_inSerial_state$port1__write_1__SEL_1,
       MUX_ddr4_B_deburster_inSerial_state$port1__write_1__SEL_1,
       MUX_ddr4_C_deburster_inSerial_state$port1__write_1__SEL_1,
       MUX_ddr4_D_deburster_inSerial_state$port1__write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [631 : 0] TASK_c_host_recv___d1171;
  // synopsys translate_on

  // remaining internal signals
  wire [63 : 0] x__h14991,
		x__h15760,
		x__h21372,
		x__h22141,
		x__h27753,
		x__h28522,
		x__h8608,
		x__h9379,
		x_araddr__h15640,
		x_araddr__h22021,
		x_araddr__h28402,
		x_araddr__h9259,
		x_awaddr__h14871,
		x_awaddr__h21252,
		x_awaddr__h27633,
		x_awaddr__h8484,
		y__h14979,
		y__h15748,
		y__h21360,
		y__h22129,
		y__h27741,
		y__h28510,
		y__h8596,
		y__h9367;
  wire [7 : 0] x1__h15265,
	       x1__h15406,
	       x1__h15991,
	       x1__h21646,
	       x1__h21787,
	       x1__h22372,
	       x1__h28027,
	       x1__h28168,
	       x1__h28753,
	       x1__h8884,
	       x1__h9025,
	       x1__h9610;
  wire ddr4_A_deburster_countWriteRspFF_first__4_ULE__ETC___d96,
       ddr4_A_deburster_readsSent_port0__read__18_EQ__ETC___d129,
       ddr4_B_deburster_countWriteRspFF_first__32_ULE_ETC___d234,
       ddr4_B_deburster_readsSent_port0__read__56_EQ__ETC___d267,
       ddr4_C_deburster_countWriteRspFF_first__70_ULE_ETC___d372,
       ddr4_C_deburster_readsSent_port0__read__94_EQ__ETC___d405,
       ddr4_D_deburster_countWriteRspFF_first__08_ULE_ETC___d510,
       ddr4_D_deburster_readsSent_port0__read__32_EQ__ETC___d543;

  // submodule aws_BSV_top
  mkAWS_BSV_Top aws_BSV_top(.CLK(CLK),
			    .RST_N(RST_N),
			    .ddr4_A_master_arready(aws_BSV_top$ddr4_A_master_arready),
			    .ddr4_A_master_awready(aws_BSV_top$ddr4_A_master_awready),
			    .ddr4_A_master_bid(aws_BSV_top$ddr4_A_master_bid),
			    .ddr4_A_master_bresp(aws_BSV_top$ddr4_A_master_bresp),
			    .ddr4_A_master_rdata(aws_BSV_top$ddr4_A_master_rdata),
			    .ddr4_A_master_rid(aws_BSV_top$ddr4_A_master_rid),
			    .ddr4_A_master_rlast(aws_BSV_top$ddr4_A_master_rlast),
			    .ddr4_A_master_rresp(aws_BSV_top$ddr4_A_master_rresp),
			    .ddr4_A_master_wready(aws_BSV_top$ddr4_A_master_wready),
			    .ddr4_B_master_arready(aws_BSV_top$ddr4_B_master_arready),
			    .ddr4_B_master_awready(aws_BSV_top$ddr4_B_master_awready),
			    .ddr4_B_master_bid(aws_BSV_top$ddr4_B_master_bid),
			    .ddr4_B_master_bresp(aws_BSV_top$ddr4_B_master_bresp),
			    .ddr4_B_master_rdata(aws_BSV_top$ddr4_B_master_rdata),
			    .ddr4_B_master_rid(aws_BSV_top$ddr4_B_master_rid),
			    .ddr4_B_master_rlast(aws_BSV_top$ddr4_B_master_rlast),
			    .ddr4_B_master_rresp(aws_BSV_top$ddr4_B_master_rresp),
			    .ddr4_B_master_wready(aws_BSV_top$ddr4_B_master_wready),
			    .ddr4_C_master_arready(aws_BSV_top$ddr4_C_master_arready),
			    .ddr4_C_master_awready(aws_BSV_top$ddr4_C_master_awready),
			    .ddr4_C_master_bid(aws_BSV_top$ddr4_C_master_bid),
			    .ddr4_C_master_bresp(aws_BSV_top$ddr4_C_master_bresp),
			    .ddr4_C_master_rdata(aws_BSV_top$ddr4_C_master_rdata),
			    .ddr4_C_master_rid(aws_BSV_top$ddr4_C_master_rid),
			    .ddr4_C_master_rlast(aws_BSV_top$ddr4_C_master_rlast),
			    .ddr4_C_master_rresp(aws_BSV_top$ddr4_C_master_rresp),
			    .ddr4_C_master_wready(aws_BSV_top$ddr4_C_master_wready),
			    .ddr4_D_master_arready(aws_BSV_top$ddr4_D_master_arready),
			    .ddr4_D_master_awready(aws_BSV_top$ddr4_D_master_awready),
			    .ddr4_D_master_bid(aws_BSV_top$ddr4_D_master_bid),
			    .ddr4_D_master_bresp(aws_BSV_top$ddr4_D_master_bresp),
			    .ddr4_D_master_rdata(aws_BSV_top$ddr4_D_master_rdata),
			    .ddr4_D_master_rid(aws_BSV_top$ddr4_D_master_rid),
			    .ddr4_D_master_rlast(aws_BSV_top$ddr4_D_master_rlast),
			    .ddr4_D_master_rresp(aws_BSV_top$ddr4_D_master_rresp),
			    .ddr4_D_master_wready(aws_BSV_top$ddr4_D_master_wready),
			    .dma_pcis_slave_araddr(aws_BSV_top$dma_pcis_slave_araddr),
			    .dma_pcis_slave_arburst(aws_BSV_top$dma_pcis_slave_arburst),
			    .dma_pcis_slave_arcache(aws_BSV_top$dma_pcis_slave_arcache),
			    .dma_pcis_slave_arid(aws_BSV_top$dma_pcis_slave_arid),
			    .dma_pcis_slave_arlen(aws_BSV_top$dma_pcis_slave_arlen),
			    .dma_pcis_slave_arlock(aws_BSV_top$dma_pcis_slave_arlock),
			    .dma_pcis_slave_arprot(aws_BSV_top$dma_pcis_slave_arprot),
			    .dma_pcis_slave_arqos(aws_BSV_top$dma_pcis_slave_arqos),
			    .dma_pcis_slave_arregion(aws_BSV_top$dma_pcis_slave_arregion),
			    .dma_pcis_slave_arsize(aws_BSV_top$dma_pcis_slave_arsize),
			    .dma_pcis_slave_awaddr(aws_BSV_top$dma_pcis_slave_awaddr),
			    .dma_pcis_slave_awburst(aws_BSV_top$dma_pcis_slave_awburst),
			    .dma_pcis_slave_awcache(aws_BSV_top$dma_pcis_slave_awcache),
			    .dma_pcis_slave_awid(aws_BSV_top$dma_pcis_slave_awid),
			    .dma_pcis_slave_awlen(aws_BSV_top$dma_pcis_slave_awlen),
			    .dma_pcis_slave_awlock(aws_BSV_top$dma_pcis_slave_awlock),
			    .dma_pcis_slave_awprot(aws_BSV_top$dma_pcis_slave_awprot),
			    .dma_pcis_slave_awqos(aws_BSV_top$dma_pcis_slave_awqos),
			    .dma_pcis_slave_awregion(aws_BSV_top$dma_pcis_slave_awregion),
			    .dma_pcis_slave_awsize(aws_BSV_top$dma_pcis_slave_awsize),
			    .dma_pcis_slave_bready(aws_BSV_top$dma_pcis_slave_bready),
			    .dma_pcis_slave_rready(aws_BSV_top$dma_pcis_slave_rready),
			    .dma_pcis_slave_wdata(aws_BSV_top$dma_pcis_slave_wdata),
			    .dma_pcis_slave_wlast(aws_BSV_top$dma_pcis_slave_wlast),
			    .dma_pcis_slave_wstrb(aws_BSV_top$dma_pcis_slave_wstrb),
			    .m_ddr4_ready_ddr4_A_B_C_D_ready(aws_BSV_top$m_ddr4_ready_ddr4_A_B_C_D_ready),
			    .m_glcount0_glcount0(aws_BSV_top$m_glcount0_glcount0),
			    .m_glcount1_glcount1(aws_BSV_top$m_glcount1_glcount1),
			    .m_vdip_vdip(aws_BSV_top$m_vdip_vdip),
			    .ocl_slave_ar_araddr(aws_BSV_top$ocl_slave_ar_araddr),
			    .ocl_slave_ar_arprot(aws_BSV_top$ocl_slave_ar_arprot),
			    .ocl_slave_aw_awaddr(aws_BSV_top$ocl_slave_aw_awaddr),
			    .ocl_slave_aw_awprot(aws_BSV_top$ocl_slave_aw_awprot),
			    .ocl_slave_b_bready(aws_BSV_top$ocl_slave_b_bready),
			    .ocl_slave_r_rready(aws_BSV_top$ocl_slave_r_rready),
			    .ocl_slave_w_wdata(aws_BSV_top$ocl_slave_w_wdata),
			    .ocl_slave_w_wstrb(aws_BSV_top$ocl_slave_w_wstrb),
			    .dma_pcis_slave_awvalid(aws_BSV_top$dma_pcis_slave_awvalid),
			    .dma_pcis_slave_wvalid(aws_BSV_top$dma_pcis_slave_wvalid),
			    .dma_pcis_slave_arvalid(aws_BSV_top$dma_pcis_slave_arvalid),
			    .ocl_slave_aw_awvalid(aws_BSV_top$ocl_slave_aw_awvalid),
			    .ocl_slave_w_wvalid(aws_BSV_top$ocl_slave_w_wvalid),
			    .ocl_slave_ar_arvalid(aws_BSV_top$ocl_slave_ar_arvalid),
			    .ddr4_A_master_bvalid(aws_BSV_top$ddr4_A_master_bvalid),
			    .ddr4_A_master_rvalid(aws_BSV_top$ddr4_A_master_rvalid),
			    .ddr4_B_master_bvalid(aws_BSV_top$ddr4_B_master_bvalid),
			    .ddr4_B_master_rvalid(aws_BSV_top$ddr4_B_master_rvalid),
			    .ddr4_C_master_bvalid(aws_BSV_top$ddr4_C_master_bvalid),
			    .ddr4_C_master_rvalid(aws_BSV_top$ddr4_C_master_rvalid),
			    .ddr4_D_master_bvalid(aws_BSV_top$ddr4_D_master_bvalid),
			    .ddr4_D_master_rvalid(aws_BSV_top$ddr4_D_master_rvalid),
			    .dma_pcis_slave_awready(aws_BSV_top$dma_pcis_slave_awready),
			    .dma_pcis_slave_wready(aws_BSV_top$dma_pcis_slave_wready),
			    .dma_pcis_slave_bid(aws_BSV_top$dma_pcis_slave_bid),
			    .dma_pcis_slave_bresp(aws_BSV_top$dma_pcis_slave_bresp),
			    .dma_pcis_slave_bvalid(aws_BSV_top$dma_pcis_slave_bvalid),
			    .dma_pcis_slave_arready(aws_BSV_top$dma_pcis_slave_arready),
			    .dma_pcis_slave_rid(aws_BSV_top$dma_pcis_slave_rid),
			    .dma_pcis_slave_rdata(aws_BSV_top$dma_pcis_slave_rdata),
			    .dma_pcis_slave_rresp(aws_BSV_top$dma_pcis_slave_rresp),
			    .dma_pcis_slave_rlast(aws_BSV_top$dma_pcis_slave_rlast),
			    .dma_pcis_slave_rvalid(aws_BSV_top$dma_pcis_slave_rvalid),
			    .ocl_slave_aw_awready(aws_BSV_top$ocl_slave_aw_awready),
			    .ocl_slave_w_wready(aws_BSV_top$ocl_slave_w_wready),
			    .ocl_slave_b_bresp(aws_BSV_top$ocl_slave_b_bresp),
			    .ocl_slave_b_bvalid(aws_BSV_top$ocl_slave_b_bvalid),
			    .ocl_slave_ar_arready(aws_BSV_top$ocl_slave_ar_arready),
			    .ocl_slave_r_rdata(aws_BSV_top$ocl_slave_r_rdata),
			    .ocl_slave_r_rresp(aws_BSV_top$ocl_slave_r_rresp),
			    .ocl_slave_r_rvalid(aws_BSV_top$ocl_slave_r_rvalid),
			    .ddr4_A_master_awid(aws_BSV_top$ddr4_A_master_awid),
			    .ddr4_A_master_awaddr(aws_BSV_top$ddr4_A_master_awaddr),
			    .ddr4_A_master_awlen(aws_BSV_top$ddr4_A_master_awlen),
			    .ddr4_A_master_awsize(aws_BSV_top$ddr4_A_master_awsize),
			    .ddr4_A_master_awburst(aws_BSV_top$ddr4_A_master_awburst),
			    .ddr4_A_master_awlock(aws_BSV_top$ddr4_A_master_awlock),
			    .ddr4_A_master_awcache(aws_BSV_top$ddr4_A_master_awcache),
			    .ddr4_A_master_awprot(aws_BSV_top$ddr4_A_master_awprot),
			    .ddr4_A_master_awqos(aws_BSV_top$ddr4_A_master_awqos),
			    .ddr4_A_master_awregion(aws_BSV_top$ddr4_A_master_awregion),
			    .ddr4_A_master_awvalid(aws_BSV_top$ddr4_A_master_awvalid),
			    .ddr4_A_master_wdata(aws_BSV_top$ddr4_A_master_wdata),
			    .ddr4_A_master_wstrb(aws_BSV_top$ddr4_A_master_wstrb),
			    .ddr4_A_master_wlast(aws_BSV_top$ddr4_A_master_wlast),
			    .ddr4_A_master_wvalid(aws_BSV_top$ddr4_A_master_wvalid),
			    .ddr4_A_master_bready(aws_BSV_top$ddr4_A_master_bready),
			    .ddr4_A_master_arid(aws_BSV_top$ddr4_A_master_arid),
			    .ddr4_A_master_araddr(aws_BSV_top$ddr4_A_master_araddr),
			    .ddr4_A_master_arlen(aws_BSV_top$ddr4_A_master_arlen),
			    .ddr4_A_master_arsize(aws_BSV_top$ddr4_A_master_arsize),
			    .ddr4_A_master_arburst(aws_BSV_top$ddr4_A_master_arburst),
			    .ddr4_A_master_arlock(aws_BSV_top$ddr4_A_master_arlock),
			    .ddr4_A_master_arcache(aws_BSV_top$ddr4_A_master_arcache),
			    .ddr4_A_master_arprot(aws_BSV_top$ddr4_A_master_arprot),
			    .ddr4_A_master_arqos(aws_BSV_top$ddr4_A_master_arqos),
			    .ddr4_A_master_arregion(aws_BSV_top$ddr4_A_master_arregion),
			    .ddr4_A_master_arvalid(aws_BSV_top$ddr4_A_master_arvalid),
			    .ddr4_A_master_rready(aws_BSV_top$ddr4_A_master_rready),
			    .ddr4_B_master_awid(aws_BSV_top$ddr4_B_master_awid),
			    .ddr4_B_master_awaddr(aws_BSV_top$ddr4_B_master_awaddr),
			    .ddr4_B_master_awlen(aws_BSV_top$ddr4_B_master_awlen),
			    .ddr4_B_master_awsize(aws_BSV_top$ddr4_B_master_awsize),
			    .ddr4_B_master_awburst(aws_BSV_top$ddr4_B_master_awburst),
			    .ddr4_B_master_awlock(aws_BSV_top$ddr4_B_master_awlock),
			    .ddr4_B_master_awcache(aws_BSV_top$ddr4_B_master_awcache),
			    .ddr4_B_master_awprot(aws_BSV_top$ddr4_B_master_awprot),
			    .ddr4_B_master_awqos(aws_BSV_top$ddr4_B_master_awqos),
			    .ddr4_B_master_awregion(aws_BSV_top$ddr4_B_master_awregion),
			    .ddr4_B_master_awvalid(aws_BSV_top$ddr4_B_master_awvalid),
			    .ddr4_B_master_wdata(aws_BSV_top$ddr4_B_master_wdata),
			    .ddr4_B_master_wstrb(aws_BSV_top$ddr4_B_master_wstrb),
			    .ddr4_B_master_wlast(aws_BSV_top$ddr4_B_master_wlast),
			    .ddr4_B_master_wvalid(aws_BSV_top$ddr4_B_master_wvalid),
			    .ddr4_B_master_bready(aws_BSV_top$ddr4_B_master_bready),
			    .ddr4_B_master_arid(aws_BSV_top$ddr4_B_master_arid),
			    .ddr4_B_master_araddr(aws_BSV_top$ddr4_B_master_araddr),
			    .ddr4_B_master_arlen(aws_BSV_top$ddr4_B_master_arlen),
			    .ddr4_B_master_arsize(aws_BSV_top$ddr4_B_master_arsize),
			    .ddr4_B_master_arburst(aws_BSV_top$ddr4_B_master_arburst),
			    .ddr4_B_master_arlock(aws_BSV_top$ddr4_B_master_arlock),
			    .ddr4_B_master_arcache(aws_BSV_top$ddr4_B_master_arcache),
			    .ddr4_B_master_arprot(aws_BSV_top$ddr4_B_master_arprot),
			    .ddr4_B_master_arqos(aws_BSV_top$ddr4_B_master_arqos),
			    .ddr4_B_master_arregion(aws_BSV_top$ddr4_B_master_arregion),
			    .ddr4_B_master_arvalid(aws_BSV_top$ddr4_B_master_arvalid),
			    .ddr4_B_master_rready(aws_BSV_top$ddr4_B_master_rready),
			    .ddr4_C_master_awid(aws_BSV_top$ddr4_C_master_awid),
			    .ddr4_C_master_awaddr(aws_BSV_top$ddr4_C_master_awaddr),
			    .ddr4_C_master_awlen(aws_BSV_top$ddr4_C_master_awlen),
			    .ddr4_C_master_awsize(aws_BSV_top$ddr4_C_master_awsize),
			    .ddr4_C_master_awburst(aws_BSV_top$ddr4_C_master_awburst),
			    .ddr4_C_master_awlock(aws_BSV_top$ddr4_C_master_awlock),
			    .ddr4_C_master_awcache(aws_BSV_top$ddr4_C_master_awcache),
			    .ddr4_C_master_awprot(aws_BSV_top$ddr4_C_master_awprot),
			    .ddr4_C_master_awqos(aws_BSV_top$ddr4_C_master_awqos),
			    .ddr4_C_master_awregion(aws_BSV_top$ddr4_C_master_awregion),
			    .ddr4_C_master_awvalid(aws_BSV_top$ddr4_C_master_awvalid),
			    .ddr4_C_master_wdata(aws_BSV_top$ddr4_C_master_wdata),
			    .ddr4_C_master_wstrb(aws_BSV_top$ddr4_C_master_wstrb),
			    .ddr4_C_master_wlast(aws_BSV_top$ddr4_C_master_wlast),
			    .ddr4_C_master_wvalid(aws_BSV_top$ddr4_C_master_wvalid),
			    .ddr4_C_master_bready(aws_BSV_top$ddr4_C_master_bready),
			    .ddr4_C_master_arid(aws_BSV_top$ddr4_C_master_arid),
			    .ddr4_C_master_araddr(aws_BSV_top$ddr4_C_master_araddr),
			    .ddr4_C_master_arlen(aws_BSV_top$ddr4_C_master_arlen),
			    .ddr4_C_master_arsize(aws_BSV_top$ddr4_C_master_arsize),
			    .ddr4_C_master_arburst(aws_BSV_top$ddr4_C_master_arburst),
			    .ddr4_C_master_arlock(aws_BSV_top$ddr4_C_master_arlock),
			    .ddr4_C_master_arcache(aws_BSV_top$ddr4_C_master_arcache),
			    .ddr4_C_master_arprot(aws_BSV_top$ddr4_C_master_arprot),
			    .ddr4_C_master_arqos(aws_BSV_top$ddr4_C_master_arqos),
			    .ddr4_C_master_arregion(aws_BSV_top$ddr4_C_master_arregion),
			    .ddr4_C_master_arvalid(aws_BSV_top$ddr4_C_master_arvalid),
			    .ddr4_C_master_rready(aws_BSV_top$ddr4_C_master_rready),
			    .ddr4_D_master_awid(aws_BSV_top$ddr4_D_master_awid),
			    .ddr4_D_master_awaddr(aws_BSV_top$ddr4_D_master_awaddr),
			    .ddr4_D_master_awlen(aws_BSV_top$ddr4_D_master_awlen),
			    .ddr4_D_master_awsize(aws_BSV_top$ddr4_D_master_awsize),
			    .ddr4_D_master_awburst(aws_BSV_top$ddr4_D_master_awburst),
			    .ddr4_D_master_awlock(aws_BSV_top$ddr4_D_master_awlock),
			    .ddr4_D_master_awcache(aws_BSV_top$ddr4_D_master_awcache),
			    .ddr4_D_master_awprot(aws_BSV_top$ddr4_D_master_awprot),
			    .ddr4_D_master_awqos(aws_BSV_top$ddr4_D_master_awqos),
			    .ddr4_D_master_awregion(aws_BSV_top$ddr4_D_master_awregion),
			    .ddr4_D_master_awvalid(aws_BSV_top$ddr4_D_master_awvalid),
			    .ddr4_D_master_wdata(aws_BSV_top$ddr4_D_master_wdata),
			    .ddr4_D_master_wstrb(aws_BSV_top$ddr4_D_master_wstrb),
			    .ddr4_D_master_wlast(aws_BSV_top$ddr4_D_master_wlast),
			    .ddr4_D_master_wvalid(aws_BSV_top$ddr4_D_master_wvalid),
			    .ddr4_D_master_bready(aws_BSV_top$ddr4_D_master_bready),
			    .ddr4_D_master_arid(aws_BSV_top$ddr4_D_master_arid),
			    .ddr4_D_master_araddr(aws_BSV_top$ddr4_D_master_araddr),
			    .ddr4_D_master_arlen(aws_BSV_top$ddr4_D_master_arlen),
			    .ddr4_D_master_arsize(aws_BSV_top$ddr4_D_master_arsize),
			    .ddr4_D_master_arburst(aws_BSV_top$ddr4_D_master_arburst),
			    .ddr4_D_master_arlock(aws_BSV_top$ddr4_D_master_arlock),
			    .ddr4_D_master_arcache(aws_BSV_top$ddr4_D_master_arcache),
			    .ddr4_D_master_arprot(aws_BSV_top$ddr4_D_master_arprot),
			    .ddr4_D_master_arqos(aws_BSV_top$ddr4_D_master_arqos),
			    .ddr4_D_master_arregion(aws_BSV_top$ddr4_D_master_arregion),
			    .ddr4_D_master_arvalid(aws_BSV_top$ddr4_D_master_arvalid),
			    .ddr4_D_master_rready(aws_BSV_top$ddr4_D_master_rready),
			    .m_vled(aws_BSV_top$m_vled));

  // submodule comms
  mkBytevec comms(.CLK(CLK),
		  .RST_N(RST_N),
		  .fi_AXI4L_Rd_Data_d32_u0_enq_x(comms$fi_AXI4L_Rd_Data_d32_u0_enq_x),
		  .fi_AXI4L_Wr_Resp_u0_enq_x(comms$fi_AXI4L_Wr_Resp_u0_enq_x),
		  .fi_AXI4_Rd_Data_i16_d512_u0_enq_x(comms$fi_AXI4_Rd_Data_i16_d512_u0_enq_x),
		  .fi_AXI4_Wr_Resp_i16_u0_enq_x(comms$fi_AXI4_Wr_Resp_i16_u0_enq_x),
		  .fi_C_to_BSV_bytevec_enq_x(comms$fi_C_to_BSV_bytevec_enq_x),
		  .EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq(comms$EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq),
		  .EN_fo_AXI4_Wr_Data_d512_u0_deq(comms$EN_fo_AXI4_Wr_Data_d512_u0_deq),
		  .EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq(comms$EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq),
		  .EN_fo_AXI4L_Wr_Addr_a32_u0_deq(comms$EN_fo_AXI4L_Wr_Addr_a32_u0_deq),
		  .EN_fo_AXI4L_Wr_Data_d32_deq(comms$EN_fo_AXI4L_Wr_Data_d32_deq),
		  .EN_fo_AXI4L_Rd_Addr_a32_u0_deq(comms$EN_fo_AXI4L_Rd_Addr_a32_u0_deq),
		  .EN_fi_AXI4_Wr_Resp_i16_u0_enq(comms$EN_fi_AXI4_Wr_Resp_i16_u0_enq),
		  .EN_fi_AXI4_Rd_Data_i16_d512_u0_enq(comms$EN_fi_AXI4_Rd_Data_i16_d512_u0_enq),
		  .EN_fi_AXI4L_Wr_Resp_u0_enq(comms$EN_fi_AXI4L_Wr_Resp_u0_enq),
		  .EN_fi_AXI4L_Rd_Data_d32_u0_enq(comms$EN_fi_AXI4L_Rd_Data_d32_u0_enq),
		  .EN_fi_C_to_BSV_bytevec_enq(comms$EN_fi_C_to_BSV_bytevec_enq),
		  .EN_fo_BSV_to_C_bytevec_deq(comms$EN_fo_BSV_to_C_bytevec_deq),
		  .fo_AXI4_Wr_Addr_i16_a64_u0_first(comms$fo_AXI4_Wr_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first(comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq(comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq),
		  .fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty(),
		  .RDY_fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty(),
		  .fo_AXI4_Wr_Data_d512_u0_first(comms$fo_AXI4_Wr_Data_d512_u0_first),
		  .RDY_fo_AXI4_Wr_Data_d512_u0_first(comms$RDY_fo_AXI4_Wr_Data_d512_u0_first),
		  .RDY_fo_AXI4_Wr_Data_d512_u0_deq(comms$RDY_fo_AXI4_Wr_Data_d512_u0_deq),
		  .fo_AXI4_Wr_Data_d512_u0_notEmpty(),
		  .RDY_fo_AXI4_Wr_Data_d512_u0_notEmpty(),
		  .fo_AXI4_Rd_Addr_i16_a64_u0_first(comms$fo_AXI4_Rd_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first(comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq(comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq),
		  .fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty(),
		  .RDY_fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty(),
		  .fo_AXI4L_Wr_Addr_a32_u0_first(comms$fo_AXI4L_Wr_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Wr_Addr_a32_u0_first(comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Wr_Addr_a32_u0_deq(comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq),
		  .fo_AXI4L_Wr_Addr_a32_u0_notEmpty(),
		  .RDY_fo_AXI4L_Wr_Addr_a32_u0_notEmpty(),
		  .fo_AXI4L_Wr_Data_d32_first(comms$fo_AXI4L_Wr_Data_d32_first),
		  .RDY_fo_AXI4L_Wr_Data_d32_first(comms$RDY_fo_AXI4L_Wr_Data_d32_first),
		  .RDY_fo_AXI4L_Wr_Data_d32_deq(comms$RDY_fo_AXI4L_Wr_Data_d32_deq),
		  .fo_AXI4L_Wr_Data_d32_notEmpty(),
		  .RDY_fo_AXI4L_Wr_Data_d32_notEmpty(),
		  .fo_AXI4L_Rd_Addr_a32_u0_first(comms$fo_AXI4L_Rd_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Rd_Addr_a32_u0_first(comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Rd_Addr_a32_u0_deq(comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq),
		  .fo_AXI4L_Rd_Addr_a32_u0_notEmpty(),
		  .RDY_fo_AXI4L_Rd_Addr_a32_u0_notEmpty(),
		  .RDY_fi_AXI4_Wr_Resp_i16_u0_enq(comms$RDY_fi_AXI4_Wr_Resp_i16_u0_enq),
		  .fi_AXI4_Wr_Resp_i16_u0_notFull(),
		  .RDY_fi_AXI4_Wr_Resp_i16_u0_notFull(),
		  .RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq(comms$RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq),
		  .fi_AXI4_Rd_Data_i16_d512_u0_notFull(),
		  .RDY_fi_AXI4_Rd_Data_i16_d512_u0_notFull(),
		  .RDY_fi_AXI4L_Wr_Resp_u0_enq(comms$RDY_fi_AXI4L_Wr_Resp_u0_enq),
		  .fi_AXI4L_Wr_Resp_u0_notFull(),
		  .RDY_fi_AXI4L_Wr_Resp_u0_notFull(),
		  .RDY_fi_AXI4L_Rd_Data_d32_u0_enq(comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq),
		  .fi_AXI4L_Rd_Data_d32_u0_notFull(),
		  .RDY_fi_AXI4L_Rd_Data_d32_u0_notFull(),
		  .RDY_fi_C_to_BSV_bytevec_enq(comms$RDY_fi_C_to_BSV_bytevec_enq),
		  .fi_C_to_BSV_bytevec_notFull(),
		  .RDY_fi_C_to_BSV_bytevec_notFull(),
		  .fo_BSV_to_C_bytevec_first(comms$fo_BSV_to_C_bytevec_first),
		  .RDY_fo_BSV_to_C_bytevec_first(comms$RDY_fo_BSV_to_C_bytevec_first),
		  .RDY_fo_BSV_to_C_bytevec_deq(comms$RDY_fo_BSV_to_C_bytevec_deq),
		  .fo_BSV_to_C_bytevec_notEmpty(),
		  .RDY_fo_BSV_to_C_bytevec_notEmpty());

  // submodule ddr4_A
  mkMem_Model #(.ddr4_num(2'd0)) ddr4_A(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_A$araddr),
					.arburst(ddr4_A$arburst),
					.arcache(ddr4_A$arcache),
					.arid(ddr4_A$arid),
					.arlen(ddr4_A$arlen),
					.arlock(ddr4_A$arlock),
					.arprot(ddr4_A$arprot),
					.arqos(ddr4_A$arqos),
					.arregion(ddr4_A$arregion),
					.arsize(ddr4_A$arsize),
					.awaddr(ddr4_A$awaddr),
					.awburst(ddr4_A$awburst),
					.awcache(ddr4_A$awcache),
					.awid(ddr4_A$awid),
					.awlen(ddr4_A$awlen),
					.awlock(ddr4_A$awlock),
					.awprot(ddr4_A$awprot),
					.awqos(ddr4_A$awqos),
					.awregion(ddr4_A$awregion),
					.awsize(ddr4_A$awsize),
					.bready(ddr4_A$bready),
					.rready(ddr4_A$rready),
					.wdata(ddr4_A$wdata),
					.wlast(ddr4_A$wlast),
					.wstrb(ddr4_A$wstrb),
					.awvalid(ddr4_A$awvalid),
					.wvalid(ddr4_A$wvalid),
					.arvalid(ddr4_A$arvalid),
					.awready(ddr4_A$awready),
					.wready(ddr4_A$wready),
					.bid(ddr4_A$bid),
					.bresp(ddr4_A$bresp),
					.bvalid(ddr4_A$bvalid),
					.arready(ddr4_A$arready),
					.rid(ddr4_A$rid),
					.rdata(ddr4_A$rdata),
					.rresp(ddr4_A$rresp),
					.rlast(ddr4_A$rlast),
					.rvalid(ddr4_A$rvalid));

  // submodule ddr4_A_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ddr4_A_deburster_countWriteRspFF(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ddr4_A_deburster_countWriteRspFF$D_IN),
								.ENQ(ddr4_A_deburster_countWriteRspFF$ENQ),
								.DEQ(ddr4_A_deburster_countWriteRspFF$DEQ),
								.CLR(ddr4_A_deburster_countWriteRspFF$CLR),
								.D_OUT(ddr4_A_deburster_countWriteRspFF$D_OUT),
								.FULL_N(ddr4_A_deburster_countWriteRspFF$FULL_N),
								.EMPTY_N(ddr4_A_deburster_countWriteRspFF$EMPTY_N));

  // submodule ddr4_A_deburster_inShim_arff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_A_deburster_inShim_arff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_A_deburster_inShim_arff$D_IN),
							.ENQ(ddr4_A_deburster_inShim_arff$ENQ),
							.DEQ(ddr4_A_deburster_inShim_arff$DEQ),
							.CLR(ddr4_A_deburster_inShim_arff$CLR),
							.D_OUT(ddr4_A_deburster_inShim_arff$D_OUT),
							.FULL_N(ddr4_A_deburster_inShim_arff$FULL_N),
							.EMPTY_N(ddr4_A_deburster_inShim_arff$EMPTY_N));

  // submodule ddr4_A_deburster_inShim_awff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_A_deburster_inShim_awff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_A_deburster_inShim_awff$D_IN),
							.ENQ(ddr4_A_deburster_inShim_awff$ENQ),
							.DEQ(ddr4_A_deburster_inShim_awff$DEQ),
							.CLR(ddr4_A_deburster_inShim_awff$CLR),
							.D_OUT(ddr4_A_deburster_inShim_awff$D_OUT),
							.FULL_N(ddr4_A_deburster_inShim_awff$FULL_N),
							.EMPTY_N(ddr4_A_deburster_inShim_awff$EMPTY_N));

  // submodule ddr4_A_deburster_inShim_bff
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) ddr4_A_deburster_inShim_bff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_A_deburster_inShim_bff$D_IN),
						       .ENQ(ddr4_A_deburster_inShim_bff$ENQ),
						       .DEQ(ddr4_A_deburster_inShim_bff$DEQ),
						       .CLR(ddr4_A_deburster_inShim_bff$CLR),
						       .D_OUT(ddr4_A_deburster_inShim_bff$D_OUT),
						       .FULL_N(ddr4_A_deburster_inShim_bff$FULL_N),
						       .EMPTY_N(ddr4_A_deburster_inShim_bff$EMPTY_N));

  // submodule ddr4_A_deburster_inShim_rff
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) ddr4_A_deburster_inShim_rff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_A_deburster_inShim_rff$D_IN),
						       .ENQ(ddr4_A_deburster_inShim_rff$ENQ),
						       .DEQ(ddr4_A_deburster_inShim_rff$DEQ),
						       .CLR(ddr4_A_deburster_inShim_rff$CLR),
						       .D_OUT(ddr4_A_deburster_inShim_rff$D_OUT),
						       .FULL_N(ddr4_A_deburster_inShim_rff$FULL_N),
						       .EMPTY_N(ddr4_A_deburster_inShim_rff$EMPTY_N));

  // submodule ddr4_A_deburster_inShim_wff
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) ddr4_A_deburster_inShim_wff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_A_deburster_inShim_wff$D_IN),
						       .ENQ(ddr4_A_deburster_inShim_wff$ENQ),
						       .DEQ(ddr4_A_deburster_inShim_wff$DEQ),
						       .CLR(ddr4_A_deburster_inShim_wff$CLR),
						       .D_OUT(ddr4_A_deburster_inShim_wff$D_OUT),
						       .FULL_N(ddr4_A_deburster_inShim_wff$FULL_N),
						       .EMPTY_N(ddr4_A_deburster_inShim_wff$EMPTY_N));

  // submodule ddr4_A_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ddr4_A_deburster_lastReadRspFF(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ddr4_A_deburster_lastReadRspFF$D_IN),
							      .ENQ(ddr4_A_deburster_lastReadRspFF$ENQ),
							      .DEQ(ddr4_A_deburster_lastReadRspFF$DEQ),
							      .CLR(ddr4_A_deburster_lastReadRspFF$CLR),
							      .D_OUT(ddr4_A_deburster_lastReadRspFF$D_OUT),
							      .FULL_N(ddr4_A_deburster_lastReadRspFF$FULL_N),
							      .EMPTY_N(ddr4_A_deburster_lastReadRspFF$EMPTY_N));

  // submodule ddr4_A_deburster_outShim_arff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_A_deburster_outShim_arff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ddr4_A_deburster_outShim_arff$D_IN),
							 .ENQ(ddr4_A_deburster_outShim_arff$ENQ),
							 .DEQ(ddr4_A_deburster_outShim_arff$DEQ),
							 .CLR(ddr4_A_deburster_outShim_arff$CLR),
							 .D_OUT(ddr4_A_deburster_outShim_arff$D_OUT),
							 .FULL_N(ddr4_A_deburster_outShim_arff$FULL_N),
							 .EMPTY_N(ddr4_A_deburster_outShim_arff$EMPTY_N));

  // submodule ddr4_A_deburster_outShim_awff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_A_deburster_outShim_awff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ddr4_A_deburster_outShim_awff$D_IN),
							 .ENQ(ddr4_A_deburster_outShim_awff$ENQ),
							 .DEQ(ddr4_A_deburster_outShim_awff$DEQ),
							 .CLR(ddr4_A_deburster_outShim_awff$CLR),
							 .D_OUT(ddr4_A_deburster_outShim_awff$D_OUT),
							 .FULL_N(ddr4_A_deburster_outShim_awff$FULL_N),
							 .EMPTY_N(ddr4_A_deburster_outShim_awff$EMPTY_N));

  // submodule ddr4_A_deburster_outShim_bff
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) ddr4_A_deburster_outShim_bff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_A_deburster_outShim_bff$D_IN),
							.ENQ(ddr4_A_deburster_outShim_bff$ENQ),
							.DEQ(ddr4_A_deburster_outShim_bff$DEQ),
							.CLR(ddr4_A_deburster_outShim_bff$CLR),
							.D_OUT(ddr4_A_deburster_outShim_bff$D_OUT),
							.FULL_N(ddr4_A_deburster_outShim_bff$FULL_N),
							.EMPTY_N(ddr4_A_deburster_outShim_bff$EMPTY_N));

  // submodule ddr4_A_deburster_outShim_rff
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) ddr4_A_deburster_outShim_rff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_A_deburster_outShim_rff$D_IN),
							.ENQ(ddr4_A_deburster_outShim_rff$ENQ),
							.DEQ(ddr4_A_deburster_outShim_rff$DEQ),
							.CLR(ddr4_A_deburster_outShim_rff$CLR),
							.D_OUT(ddr4_A_deburster_outShim_rff$D_OUT),
							.FULL_N(ddr4_A_deburster_outShim_rff$FULL_N),
							.EMPTY_N(ddr4_A_deburster_outShim_rff$EMPTY_N));

  // submodule ddr4_A_deburster_outShim_wff
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) ddr4_A_deburster_outShim_wff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_A_deburster_outShim_wff$D_IN),
							.ENQ(ddr4_A_deburster_outShim_wff$ENQ),
							.DEQ(ddr4_A_deburster_outShim_wff$DEQ),
							.CLR(ddr4_A_deburster_outShim_wff$CLR),
							.D_OUT(ddr4_A_deburster_outShim_wff$D_OUT),
							.FULL_N(ddr4_A_deburster_outShim_wff$FULL_N),
							.EMPTY_N(ddr4_A_deburster_outShim_wff$EMPTY_N));

  // submodule ddr4_B
  mkMem_Model #(.ddr4_num(2'd1)) ddr4_B(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_B$araddr),
					.arburst(ddr4_B$arburst),
					.arcache(ddr4_B$arcache),
					.arid(ddr4_B$arid),
					.arlen(ddr4_B$arlen),
					.arlock(ddr4_B$arlock),
					.arprot(ddr4_B$arprot),
					.arqos(ddr4_B$arqos),
					.arregion(ddr4_B$arregion),
					.arsize(ddr4_B$arsize),
					.awaddr(ddr4_B$awaddr),
					.awburst(ddr4_B$awburst),
					.awcache(ddr4_B$awcache),
					.awid(ddr4_B$awid),
					.awlen(ddr4_B$awlen),
					.awlock(ddr4_B$awlock),
					.awprot(ddr4_B$awprot),
					.awqos(ddr4_B$awqos),
					.awregion(ddr4_B$awregion),
					.awsize(ddr4_B$awsize),
					.bready(ddr4_B$bready),
					.rready(ddr4_B$rready),
					.wdata(ddr4_B$wdata),
					.wlast(ddr4_B$wlast),
					.wstrb(ddr4_B$wstrb),
					.awvalid(ddr4_B$awvalid),
					.wvalid(ddr4_B$wvalid),
					.arvalid(ddr4_B$arvalid),
					.awready(ddr4_B$awready),
					.wready(ddr4_B$wready),
					.bid(ddr4_B$bid),
					.bresp(ddr4_B$bresp),
					.bvalid(ddr4_B$bvalid),
					.arready(ddr4_B$arready),
					.rid(ddr4_B$rid),
					.rdata(ddr4_B$rdata),
					.rresp(ddr4_B$rresp),
					.rlast(ddr4_B$rlast),
					.rvalid(ddr4_B$rvalid));

  // submodule ddr4_B_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ddr4_B_deburster_countWriteRspFF(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ddr4_B_deburster_countWriteRspFF$D_IN),
								.ENQ(ddr4_B_deburster_countWriteRspFF$ENQ),
								.DEQ(ddr4_B_deburster_countWriteRspFF$DEQ),
								.CLR(ddr4_B_deburster_countWriteRspFF$CLR),
								.D_OUT(ddr4_B_deburster_countWriteRspFF$D_OUT),
								.FULL_N(ddr4_B_deburster_countWriteRspFF$FULL_N),
								.EMPTY_N(ddr4_B_deburster_countWriteRspFF$EMPTY_N));

  // submodule ddr4_B_deburster_inShim_arff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_B_deburster_inShim_arff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_B_deburster_inShim_arff$D_IN),
							.ENQ(ddr4_B_deburster_inShim_arff$ENQ),
							.DEQ(ddr4_B_deburster_inShim_arff$DEQ),
							.CLR(ddr4_B_deburster_inShim_arff$CLR),
							.D_OUT(ddr4_B_deburster_inShim_arff$D_OUT),
							.FULL_N(ddr4_B_deburster_inShim_arff$FULL_N),
							.EMPTY_N(ddr4_B_deburster_inShim_arff$EMPTY_N));

  // submodule ddr4_B_deburster_inShim_awff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_B_deburster_inShim_awff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_B_deburster_inShim_awff$D_IN),
							.ENQ(ddr4_B_deburster_inShim_awff$ENQ),
							.DEQ(ddr4_B_deburster_inShim_awff$DEQ),
							.CLR(ddr4_B_deburster_inShim_awff$CLR),
							.D_OUT(ddr4_B_deburster_inShim_awff$D_OUT),
							.FULL_N(ddr4_B_deburster_inShim_awff$FULL_N),
							.EMPTY_N(ddr4_B_deburster_inShim_awff$EMPTY_N));

  // submodule ddr4_B_deburster_inShim_bff
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) ddr4_B_deburster_inShim_bff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_B_deburster_inShim_bff$D_IN),
						       .ENQ(ddr4_B_deburster_inShim_bff$ENQ),
						       .DEQ(ddr4_B_deburster_inShim_bff$DEQ),
						       .CLR(ddr4_B_deburster_inShim_bff$CLR),
						       .D_OUT(ddr4_B_deburster_inShim_bff$D_OUT),
						       .FULL_N(ddr4_B_deburster_inShim_bff$FULL_N),
						       .EMPTY_N(ddr4_B_deburster_inShim_bff$EMPTY_N));

  // submodule ddr4_B_deburster_inShim_rff
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) ddr4_B_deburster_inShim_rff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_B_deburster_inShim_rff$D_IN),
						       .ENQ(ddr4_B_deburster_inShim_rff$ENQ),
						       .DEQ(ddr4_B_deburster_inShim_rff$DEQ),
						       .CLR(ddr4_B_deburster_inShim_rff$CLR),
						       .D_OUT(ddr4_B_deburster_inShim_rff$D_OUT),
						       .FULL_N(ddr4_B_deburster_inShim_rff$FULL_N),
						       .EMPTY_N(ddr4_B_deburster_inShim_rff$EMPTY_N));

  // submodule ddr4_B_deburster_inShim_wff
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) ddr4_B_deburster_inShim_wff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_B_deburster_inShim_wff$D_IN),
						       .ENQ(ddr4_B_deburster_inShim_wff$ENQ),
						       .DEQ(ddr4_B_deburster_inShim_wff$DEQ),
						       .CLR(ddr4_B_deburster_inShim_wff$CLR),
						       .D_OUT(ddr4_B_deburster_inShim_wff$D_OUT),
						       .FULL_N(ddr4_B_deburster_inShim_wff$FULL_N),
						       .EMPTY_N(ddr4_B_deburster_inShim_wff$EMPTY_N));

  // submodule ddr4_B_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ddr4_B_deburster_lastReadRspFF(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ddr4_B_deburster_lastReadRspFF$D_IN),
							      .ENQ(ddr4_B_deburster_lastReadRspFF$ENQ),
							      .DEQ(ddr4_B_deburster_lastReadRspFF$DEQ),
							      .CLR(ddr4_B_deburster_lastReadRspFF$CLR),
							      .D_OUT(ddr4_B_deburster_lastReadRspFF$D_OUT),
							      .FULL_N(ddr4_B_deburster_lastReadRspFF$FULL_N),
							      .EMPTY_N(ddr4_B_deburster_lastReadRspFF$EMPTY_N));

  // submodule ddr4_B_deburster_outShim_arff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_B_deburster_outShim_arff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ddr4_B_deburster_outShim_arff$D_IN),
							 .ENQ(ddr4_B_deburster_outShim_arff$ENQ),
							 .DEQ(ddr4_B_deburster_outShim_arff$DEQ),
							 .CLR(ddr4_B_deburster_outShim_arff$CLR),
							 .D_OUT(ddr4_B_deburster_outShim_arff$D_OUT),
							 .FULL_N(ddr4_B_deburster_outShim_arff$FULL_N),
							 .EMPTY_N(ddr4_B_deburster_outShim_arff$EMPTY_N));

  // submodule ddr4_B_deburster_outShim_awff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_B_deburster_outShim_awff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ddr4_B_deburster_outShim_awff$D_IN),
							 .ENQ(ddr4_B_deburster_outShim_awff$ENQ),
							 .DEQ(ddr4_B_deburster_outShim_awff$DEQ),
							 .CLR(ddr4_B_deburster_outShim_awff$CLR),
							 .D_OUT(ddr4_B_deburster_outShim_awff$D_OUT),
							 .FULL_N(ddr4_B_deburster_outShim_awff$FULL_N),
							 .EMPTY_N(ddr4_B_deburster_outShim_awff$EMPTY_N));

  // submodule ddr4_B_deburster_outShim_bff
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) ddr4_B_deburster_outShim_bff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_B_deburster_outShim_bff$D_IN),
							.ENQ(ddr4_B_deburster_outShim_bff$ENQ),
							.DEQ(ddr4_B_deburster_outShim_bff$DEQ),
							.CLR(ddr4_B_deburster_outShim_bff$CLR),
							.D_OUT(ddr4_B_deburster_outShim_bff$D_OUT),
							.FULL_N(ddr4_B_deburster_outShim_bff$FULL_N),
							.EMPTY_N(ddr4_B_deburster_outShim_bff$EMPTY_N));

  // submodule ddr4_B_deburster_outShim_rff
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) ddr4_B_deburster_outShim_rff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_B_deburster_outShim_rff$D_IN),
							.ENQ(ddr4_B_deburster_outShim_rff$ENQ),
							.DEQ(ddr4_B_deburster_outShim_rff$DEQ),
							.CLR(ddr4_B_deburster_outShim_rff$CLR),
							.D_OUT(ddr4_B_deburster_outShim_rff$D_OUT),
							.FULL_N(ddr4_B_deburster_outShim_rff$FULL_N),
							.EMPTY_N(ddr4_B_deburster_outShim_rff$EMPTY_N));

  // submodule ddr4_B_deburster_outShim_wff
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) ddr4_B_deburster_outShim_wff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_B_deburster_outShim_wff$D_IN),
							.ENQ(ddr4_B_deburster_outShim_wff$ENQ),
							.DEQ(ddr4_B_deburster_outShim_wff$DEQ),
							.CLR(ddr4_B_deburster_outShim_wff$CLR),
							.D_OUT(ddr4_B_deburster_outShim_wff$D_OUT),
							.FULL_N(ddr4_B_deburster_outShim_wff$FULL_N),
							.EMPTY_N(ddr4_B_deburster_outShim_wff$EMPTY_N));

  // submodule ddr4_C
  mkMem_Model #(.ddr4_num(2'd2)) ddr4_C(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_C$araddr),
					.arburst(ddr4_C$arburst),
					.arcache(ddr4_C$arcache),
					.arid(ddr4_C$arid),
					.arlen(ddr4_C$arlen),
					.arlock(ddr4_C$arlock),
					.arprot(ddr4_C$arprot),
					.arqos(ddr4_C$arqos),
					.arregion(ddr4_C$arregion),
					.arsize(ddr4_C$arsize),
					.awaddr(ddr4_C$awaddr),
					.awburst(ddr4_C$awburst),
					.awcache(ddr4_C$awcache),
					.awid(ddr4_C$awid),
					.awlen(ddr4_C$awlen),
					.awlock(ddr4_C$awlock),
					.awprot(ddr4_C$awprot),
					.awqos(ddr4_C$awqos),
					.awregion(ddr4_C$awregion),
					.awsize(ddr4_C$awsize),
					.bready(ddr4_C$bready),
					.rready(ddr4_C$rready),
					.wdata(ddr4_C$wdata),
					.wlast(ddr4_C$wlast),
					.wstrb(ddr4_C$wstrb),
					.awvalid(ddr4_C$awvalid),
					.wvalid(ddr4_C$wvalid),
					.arvalid(ddr4_C$arvalid),
					.awready(ddr4_C$awready),
					.wready(ddr4_C$wready),
					.bid(ddr4_C$bid),
					.bresp(ddr4_C$bresp),
					.bvalid(ddr4_C$bvalid),
					.arready(ddr4_C$arready),
					.rid(ddr4_C$rid),
					.rdata(ddr4_C$rdata),
					.rresp(ddr4_C$rresp),
					.rlast(ddr4_C$rlast),
					.rvalid(ddr4_C$rvalid));

  // submodule ddr4_C_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ddr4_C_deburster_countWriteRspFF(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ddr4_C_deburster_countWriteRspFF$D_IN),
								.ENQ(ddr4_C_deburster_countWriteRspFF$ENQ),
								.DEQ(ddr4_C_deburster_countWriteRspFF$DEQ),
								.CLR(ddr4_C_deburster_countWriteRspFF$CLR),
								.D_OUT(ddr4_C_deburster_countWriteRspFF$D_OUT),
								.FULL_N(ddr4_C_deburster_countWriteRspFF$FULL_N),
								.EMPTY_N(ddr4_C_deburster_countWriteRspFF$EMPTY_N));

  // submodule ddr4_C_deburster_inShim_arff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_C_deburster_inShim_arff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_C_deburster_inShim_arff$D_IN),
							.ENQ(ddr4_C_deburster_inShim_arff$ENQ),
							.DEQ(ddr4_C_deburster_inShim_arff$DEQ),
							.CLR(ddr4_C_deburster_inShim_arff$CLR),
							.D_OUT(ddr4_C_deburster_inShim_arff$D_OUT),
							.FULL_N(ddr4_C_deburster_inShim_arff$FULL_N),
							.EMPTY_N(ddr4_C_deburster_inShim_arff$EMPTY_N));

  // submodule ddr4_C_deburster_inShim_awff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_C_deburster_inShim_awff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_C_deburster_inShim_awff$D_IN),
							.ENQ(ddr4_C_deburster_inShim_awff$ENQ),
							.DEQ(ddr4_C_deburster_inShim_awff$DEQ),
							.CLR(ddr4_C_deburster_inShim_awff$CLR),
							.D_OUT(ddr4_C_deburster_inShim_awff$D_OUT),
							.FULL_N(ddr4_C_deburster_inShim_awff$FULL_N),
							.EMPTY_N(ddr4_C_deburster_inShim_awff$EMPTY_N));

  // submodule ddr4_C_deburster_inShim_bff
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) ddr4_C_deburster_inShim_bff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_C_deburster_inShim_bff$D_IN),
						       .ENQ(ddr4_C_deburster_inShim_bff$ENQ),
						       .DEQ(ddr4_C_deburster_inShim_bff$DEQ),
						       .CLR(ddr4_C_deburster_inShim_bff$CLR),
						       .D_OUT(ddr4_C_deburster_inShim_bff$D_OUT),
						       .FULL_N(ddr4_C_deburster_inShim_bff$FULL_N),
						       .EMPTY_N(ddr4_C_deburster_inShim_bff$EMPTY_N));

  // submodule ddr4_C_deburster_inShim_rff
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) ddr4_C_deburster_inShim_rff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_C_deburster_inShim_rff$D_IN),
						       .ENQ(ddr4_C_deburster_inShim_rff$ENQ),
						       .DEQ(ddr4_C_deburster_inShim_rff$DEQ),
						       .CLR(ddr4_C_deburster_inShim_rff$CLR),
						       .D_OUT(ddr4_C_deburster_inShim_rff$D_OUT),
						       .FULL_N(ddr4_C_deburster_inShim_rff$FULL_N),
						       .EMPTY_N(ddr4_C_deburster_inShim_rff$EMPTY_N));

  // submodule ddr4_C_deburster_inShim_wff
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) ddr4_C_deburster_inShim_wff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_C_deburster_inShim_wff$D_IN),
						       .ENQ(ddr4_C_deburster_inShim_wff$ENQ),
						       .DEQ(ddr4_C_deburster_inShim_wff$DEQ),
						       .CLR(ddr4_C_deburster_inShim_wff$CLR),
						       .D_OUT(ddr4_C_deburster_inShim_wff$D_OUT),
						       .FULL_N(ddr4_C_deburster_inShim_wff$FULL_N),
						       .EMPTY_N(ddr4_C_deburster_inShim_wff$EMPTY_N));

  // submodule ddr4_C_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ddr4_C_deburster_lastReadRspFF(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ddr4_C_deburster_lastReadRspFF$D_IN),
							      .ENQ(ddr4_C_deburster_lastReadRspFF$ENQ),
							      .DEQ(ddr4_C_deburster_lastReadRspFF$DEQ),
							      .CLR(ddr4_C_deburster_lastReadRspFF$CLR),
							      .D_OUT(ddr4_C_deburster_lastReadRspFF$D_OUT),
							      .FULL_N(ddr4_C_deburster_lastReadRspFF$FULL_N),
							      .EMPTY_N(ddr4_C_deburster_lastReadRspFF$EMPTY_N));

  // submodule ddr4_C_deburster_outShim_arff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_C_deburster_outShim_arff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ddr4_C_deburster_outShim_arff$D_IN),
							 .ENQ(ddr4_C_deburster_outShim_arff$ENQ),
							 .DEQ(ddr4_C_deburster_outShim_arff$DEQ),
							 .CLR(ddr4_C_deburster_outShim_arff$CLR),
							 .D_OUT(ddr4_C_deburster_outShim_arff$D_OUT),
							 .FULL_N(ddr4_C_deburster_outShim_arff$FULL_N),
							 .EMPTY_N(ddr4_C_deburster_outShim_arff$EMPTY_N));

  // submodule ddr4_C_deburster_outShim_awff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_C_deburster_outShim_awff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ddr4_C_deburster_outShim_awff$D_IN),
							 .ENQ(ddr4_C_deburster_outShim_awff$ENQ),
							 .DEQ(ddr4_C_deburster_outShim_awff$DEQ),
							 .CLR(ddr4_C_deburster_outShim_awff$CLR),
							 .D_OUT(ddr4_C_deburster_outShim_awff$D_OUT),
							 .FULL_N(ddr4_C_deburster_outShim_awff$FULL_N),
							 .EMPTY_N(ddr4_C_deburster_outShim_awff$EMPTY_N));

  // submodule ddr4_C_deburster_outShim_bff
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) ddr4_C_deburster_outShim_bff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_C_deburster_outShim_bff$D_IN),
							.ENQ(ddr4_C_deburster_outShim_bff$ENQ),
							.DEQ(ddr4_C_deburster_outShim_bff$DEQ),
							.CLR(ddr4_C_deburster_outShim_bff$CLR),
							.D_OUT(ddr4_C_deburster_outShim_bff$D_OUT),
							.FULL_N(ddr4_C_deburster_outShim_bff$FULL_N),
							.EMPTY_N(ddr4_C_deburster_outShim_bff$EMPTY_N));

  // submodule ddr4_C_deburster_outShim_rff
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) ddr4_C_deburster_outShim_rff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_C_deburster_outShim_rff$D_IN),
							.ENQ(ddr4_C_deburster_outShim_rff$ENQ),
							.DEQ(ddr4_C_deburster_outShim_rff$DEQ),
							.CLR(ddr4_C_deburster_outShim_rff$CLR),
							.D_OUT(ddr4_C_deburster_outShim_rff$D_OUT),
							.FULL_N(ddr4_C_deburster_outShim_rff$FULL_N),
							.EMPTY_N(ddr4_C_deburster_outShim_rff$EMPTY_N));

  // submodule ddr4_C_deburster_outShim_wff
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) ddr4_C_deburster_outShim_wff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_C_deburster_outShim_wff$D_IN),
							.ENQ(ddr4_C_deburster_outShim_wff$ENQ),
							.DEQ(ddr4_C_deburster_outShim_wff$DEQ),
							.CLR(ddr4_C_deburster_outShim_wff$CLR),
							.D_OUT(ddr4_C_deburster_outShim_wff$D_OUT),
							.FULL_N(ddr4_C_deburster_outShim_wff$FULL_N),
							.EMPTY_N(ddr4_C_deburster_outShim_wff$EMPTY_N));

  // submodule ddr4_D
  mkMem_Model #(.ddr4_num(2'd3)) ddr4_D(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_D$araddr),
					.arburst(ddr4_D$arburst),
					.arcache(ddr4_D$arcache),
					.arid(ddr4_D$arid),
					.arlen(ddr4_D$arlen),
					.arlock(ddr4_D$arlock),
					.arprot(ddr4_D$arprot),
					.arqos(ddr4_D$arqos),
					.arregion(ddr4_D$arregion),
					.arsize(ddr4_D$arsize),
					.awaddr(ddr4_D$awaddr),
					.awburst(ddr4_D$awburst),
					.awcache(ddr4_D$awcache),
					.awid(ddr4_D$awid),
					.awlen(ddr4_D$awlen),
					.awlock(ddr4_D$awlock),
					.awprot(ddr4_D$awprot),
					.awqos(ddr4_D$awqos),
					.awregion(ddr4_D$awregion),
					.awsize(ddr4_D$awsize),
					.bready(ddr4_D$bready),
					.rready(ddr4_D$rready),
					.wdata(ddr4_D$wdata),
					.wlast(ddr4_D$wlast),
					.wstrb(ddr4_D$wstrb),
					.awvalid(ddr4_D$awvalid),
					.wvalid(ddr4_D$wvalid),
					.arvalid(ddr4_D$arvalid),
					.awready(ddr4_D$awready),
					.wready(ddr4_D$wready),
					.bid(ddr4_D$bid),
					.bresp(ddr4_D$bresp),
					.bvalid(ddr4_D$bvalid),
					.arready(ddr4_D$arready),
					.rid(ddr4_D$rid),
					.rdata(ddr4_D$rdata),
					.rresp(ddr4_D$rresp),
					.rlast(ddr4_D$rlast),
					.rvalid(ddr4_D$rvalid));

  // submodule ddr4_D_deburster_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ddr4_D_deburster_countWriteRspFF(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ddr4_D_deburster_countWriteRspFF$D_IN),
								.ENQ(ddr4_D_deburster_countWriteRspFF$ENQ),
								.DEQ(ddr4_D_deburster_countWriteRspFF$DEQ),
								.CLR(ddr4_D_deburster_countWriteRspFF$CLR),
								.D_OUT(ddr4_D_deburster_countWriteRspFF$D_OUT),
								.FULL_N(ddr4_D_deburster_countWriteRspFF$FULL_N),
								.EMPTY_N(ddr4_D_deburster_countWriteRspFF$EMPTY_N));

  // submodule ddr4_D_deburster_inShim_arff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_D_deburster_inShim_arff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_D_deburster_inShim_arff$D_IN),
							.ENQ(ddr4_D_deburster_inShim_arff$ENQ),
							.DEQ(ddr4_D_deburster_inShim_arff$DEQ),
							.CLR(ddr4_D_deburster_inShim_arff$CLR),
							.D_OUT(ddr4_D_deburster_inShim_arff$D_OUT),
							.FULL_N(ddr4_D_deburster_inShim_arff$FULL_N),
							.EMPTY_N(ddr4_D_deburster_inShim_arff$EMPTY_N));

  // submodule ddr4_D_deburster_inShim_awff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_D_deburster_inShim_awff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_D_deburster_inShim_awff$D_IN),
							.ENQ(ddr4_D_deburster_inShim_awff$ENQ),
							.DEQ(ddr4_D_deburster_inShim_awff$DEQ),
							.CLR(ddr4_D_deburster_inShim_awff$CLR),
							.D_OUT(ddr4_D_deburster_inShim_awff$D_OUT),
							.FULL_N(ddr4_D_deburster_inShim_awff$FULL_N),
							.EMPTY_N(ddr4_D_deburster_inShim_awff$EMPTY_N));

  // submodule ddr4_D_deburster_inShim_bff
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) ddr4_D_deburster_inShim_bff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_D_deburster_inShim_bff$D_IN),
						       .ENQ(ddr4_D_deburster_inShim_bff$ENQ),
						       .DEQ(ddr4_D_deburster_inShim_bff$DEQ),
						       .CLR(ddr4_D_deburster_inShim_bff$CLR),
						       .D_OUT(ddr4_D_deburster_inShim_bff$D_OUT),
						       .FULL_N(ddr4_D_deburster_inShim_bff$FULL_N),
						       .EMPTY_N(ddr4_D_deburster_inShim_bff$EMPTY_N));

  // submodule ddr4_D_deburster_inShim_rff
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) ddr4_D_deburster_inShim_rff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_D_deburster_inShim_rff$D_IN),
						       .ENQ(ddr4_D_deburster_inShim_rff$ENQ),
						       .DEQ(ddr4_D_deburster_inShim_rff$DEQ),
						       .CLR(ddr4_D_deburster_inShim_rff$CLR),
						       .D_OUT(ddr4_D_deburster_inShim_rff$D_OUT),
						       .FULL_N(ddr4_D_deburster_inShim_rff$FULL_N),
						       .EMPTY_N(ddr4_D_deburster_inShim_rff$EMPTY_N));

  // submodule ddr4_D_deburster_inShim_wff
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) ddr4_D_deburster_inShim_wff(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ddr4_D_deburster_inShim_wff$D_IN),
						       .ENQ(ddr4_D_deburster_inShim_wff$ENQ),
						       .DEQ(ddr4_D_deburster_inShim_wff$DEQ),
						       .CLR(ddr4_D_deburster_inShim_wff$CLR),
						       .D_OUT(ddr4_D_deburster_inShim_wff$D_OUT),
						       .FULL_N(ddr4_D_deburster_inShim_wff$FULL_N),
						       .EMPTY_N(ddr4_D_deburster_inShim_wff$EMPTY_N));

  // submodule ddr4_D_deburster_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ddr4_D_deburster_lastReadRspFF(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ddr4_D_deburster_lastReadRspFF$D_IN),
							      .ENQ(ddr4_D_deburster_lastReadRspFF$ENQ),
							      .DEQ(ddr4_D_deburster_lastReadRspFF$DEQ),
							      .CLR(ddr4_D_deburster_lastReadRspFF$CLR),
							      .D_OUT(ddr4_D_deburster_lastReadRspFF$D_OUT),
							      .FULL_N(ddr4_D_deburster_lastReadRspFF$FULL_N),
							      .EMPTY_N(ddr4_D_deburster_lastReadRspFF$EMPTY_N));

  // submodule ddr4_D_deburster_outShim_arff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_D_deburster_outShim_arff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ddr4_D_deburster_outShim_arff$D_IN),
							 .ENQ(ddr4_D_deburster_outShim_arff$ENQ),
							 .DEQ(ddr4_D_deburster_outShim_arff$DEQ),
							 .CLR(ddr4_D_deburster_outShim_arff$CLR),
							 .D_OUT(ddr4_D_deburster_outShim_arff$D_OUT),
							 .FULL_N(ddr4_D_deburster_outShim_arff$FULL_N),
							 .EMPTY_N(ddr4_D_deburster_outShim_arff$EMPTY_N));

  // submodule ddr4_D_deburster_outShim_awff
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) ddr4_D_deburster_outShim_awff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ddr4_D_deburster_outShim_awff$D_IN),
							 .ENQ(ddr4_D_deburster_outShim_awff$ENQ),
							 .DEQ(ddr4_D_deburster_outShim_awff$DEQ),
							 .CLR(ddr4_D_deburster_outShim_awff$CLR),
							 .D_OUT(ddr4_D_deburster_outShim_awff$D_OUT),
							 .FULL_N(ddr4_D_deburster_outShim_awff$FULL_N),
							 .EMPTY_N(ddr4_D_deburster_outShim_awff$EMPTY_N));

  // submodule ddr4_D_deburster_outShim_bff
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) ddr4_D_deburster_outShim_bff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_D_deburster_outShim_bff$D_IN),
							.ENQ(ddr4_D_deburster_outShim_bff$ENQ),
							.DEQ(ddr4_D_deburster_outShim_bff$DEQ),
							.CLR(ddr4_D_deburster_outShim_bff$CLR),
							.D_OUT(ddr4_D_deburster_outShim_bff$D_OUT),
							.FULL_N(ddr4_D_deburster_outShim_bff$FULL_N),
							.EMPTY_N(ddr4_D_deburster_outShim_bff$EMPTY_N));

  // submodule ddr4_D_deburster_outShim_rff
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) ddr4_D_deburster_outShim_rff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_D_deburster_outShim_rff$D_IN),
							.ENQ(ddr4_D_deburster_outShim_rff$ENQ),
							.DEQ(ddr4_D_deburster_outShim_rff$DEQ),
							.CLR(ddr4_D_deburster_outShim_rff$CLR),
							.D_OUT(ddr4_D_deburster_outShim_rff$D_OUT),
							.FULL_N(ddr4_D_deburster_outShim_rff$FULL_N),
							.EMPTY_N(ddr4_D_deburster_outShim_rff$EMPTY_N));

  // submodule ddr4_D_deburster_outShim_wff
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) ddr4_D_deburster_outShim_wff(.RST(RST_N),
							.CLK(CLK),
							.D_IN(ddr4_D_deburster_outShim_wff$D_IN),
							.ENQ(ddr4_D_deburster_outShim_wff$ENQ),
							.DEQ(ddr4_D_deburster_outShim_wff$DEQ),
							.CLR(ddr4_D_deburster_outShim_wff$CLR),
							.D_OUT(ddr4_D_deburster_outShim_wff$D_OUT),
							.FULL_N(ddr4_D_deburster_outShim_wff$FULL_N),
							.EMPTY_N(ddr4_D_deburster_outShim_wff$EMPTY_N));

  // submodule ocl_xactor_shim_arff
  SizedFIFO #(.p1width(32'd35),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ocl_xactor_shim_arff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ocl_xactor_shim_arff$D_IN),
						    .ENQ(ocl_xactor_shim_arff$ENQ),
						    .DEQ(ocl_xactor_shim_arff$DEQ),
						    .CLR(ocl_xactor_shim_arff$CLR),
						    .D_OUT(ocl_xactor_shim_arff$D_OUT),
						    .FULL_N(ocl_xactor_shim_arff$FULL_N),
						    .EMPTY_N(ocl_xactor_shim_arff$EMPTY_N));

  // submodule ocl_xactor_shim_awff
  SizedFIFO #(.p1width(32'd35),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ocl_xactor_shim_awff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ocl_xactor_shim_awff$D_IN),
						    .ENQ(ocl_xactor_shim_awff$ENQ),
						    .DEQ(ocl_xactor_shim_awff$DEQ),
						    .CLR(ocl_xactor_shim_awff$CLR),
						    .D_OUT(ocl_xactor_shim_awff$D_OUT),
						    .FULL_N(ocl_xactor_shim_awff$FULL_N),
						    .EMPTY_N(ocl_xactor_shim_awff$EMPTY_N));

  // submodule ocl_xactor_shim_bff
  SizedFIFO #(.p1width(32'd2),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ocl_xactor_shim_bff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ocl_xactor_shim_bff$D_IN),
						   .ENQ(ocl_xactor_shim_bff$ENQ),
						   .DEQ(ocl_xactor_shim_bff$DEQ),
						   .CLR(ocl_xactor_shim_bff$CLR),
						   .D_OUT(ocl_xactor_shim_bff$D_OUT),
						   .FULL_N(ocl_xactor_shim_bff$FULL_N),
						   .EMPTY_N(ocl_xactor_shim_bff$EMPTY_N));

  // submodule ocl_xactor_shim_rff
  SizedFIFO #(.p1width(32'd34),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ocl_xactor_shim_rff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ocl_xactor_shim_rff$D_IN),
						   .ENQ(ocl_xactor_shim_rff$ENQ),
						   .DEQ(ocl_xactor_shim_rff$DEQ),
						   .CLR(ocl_xactor_shim_rff$CLR),
						   .D_OUT(ocl_xactor_shim_rff$D_OUT),
						   .FULL_N(ocl_xactor_shim_rff$FULL_N),
						   .EMPTY_N(ocl_xactor_shim_rff$EMPTY_N));

  // submodule ocl_xactor_shim_wff
  SizedFIFO #(.p1width(32'd36),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) ocl_xactor_shim_wff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ocl_xactor_shim_wff$D_IN),
						   .ENQ(ocl_xactor_shim_wff$ENQ),
						   .DEQ(ocl_xactor_shim_wff$DEQ),
						   .CLR(ocl_xactor_shim_wff$CLR),
						   .D_OUT(ocl_xactor_shim_wff$D_OUT),
						   .FULL_N(ocl_xactor_shim_wff$FULL_N),
						   .EMPTY_N(ocl_xactor_shim_wff$EMPTY_N));

  // rule RL_connect_awready
  assign CAN_FIRE_RL_connect_awready = 1'd1 ;
  assign WILL_FIRE_RL_connect_awready = 1'd1 ;

  // rule RL_connect_wready
  assign CAN_FIRE_RL_connect_wready = 1'd1 ;
  assign WILL_FIRE_RL_connect_wready = 1'd1 ;

  // rule RL_connect_wflit
  assign CAN_FIRE_RL_connect_wflit = aws_BSV_top$ddr4_A_master_wvalid ;
  assign WILL_FIRE_RL_connect_wflit = aws_BSV_top$ddr4_A_master_wvalid ;

  // rule RL_connect_bflit
  assign CAN_FIRE_RL_connect_bflit = ddr4_A_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_bflit = ddr4_A_deburster_inShim_bff$EMPTY_N ;

  // rule RL_connect_bready
  assign CAN_FIRE_RL_connect_bready = 1'b1 ;
  assign WILL_FIRE_RL_connect_bready = 1'b1 ;

  // rule RL_connect_arready
  assign CAN_FIRE_RL_connect_arready = 1'd1 ;
  assign WILL_FIRE_RL_connect_arready = 1'd1 ;

  // rule RL_connect_rflit
  assign CAN_FIRE_RL_connect_rflit = ddr4_A_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_rflit = ddr4_A_deburster_inShim_rff$EMPTY_N ;

  // rule RL_connect_rready
  assign CAN_FIRE_RL_connect_rready = 1'b1 ;
  assign WILL_FIRE_RL_connect_rready = 1'b1 ;

  // rule RL_connect_awready_1
  assign CAN_FIRE_RL_connect_awready_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_awready_1 = 1'd1 ;

  // rule RL_connect_wready_1
  assign CAN_FIRE_RL_connect_wready_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_wready_1 = 1'd1 ;

  // rule RL_connect_wflit_1
  assign CAN_FIRE_RL_connect_wflit_1 = aws_BSV_top$ddr4_B_master_wvalid ;
  assign WILL_FIRE_RL_connect_wflit_1 = aws_BSV_top$ddr4_B_master_wvalid ;

  // rule RL_connect_bflit_1
  assign CAN_FIRE_RL_connect_bflit_1 = ddr4_B_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_bflit_1 = ddr4_B_deburster_inShim_bff$EMPTY_N ;

  // rule RL_connect_bready_1
  assign CAN_FIRE_RL_connect_bready_1 = 1'b1 ;
  assign WILL_FIRE_RL_connect_bready_1 = 1'b1 ;

  // rule RL_connect_arready_1
  assign CAN_FIRE_RL_connect_arready_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_arready_1 = 1'd1 ;

  // rule RL_connect_rflit_1
  assign CAN_FIRE_RL_connect_rflit_1 = ddr4_B_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_rflit_1 = ddr4_B_deburster_inShim_rff$EMPTY_N ;

  // rule RL_connect_rready_1
  assign CAN_FIRE_RL_connect_rready_1 = 1'b1 ;
  assign WILL_FIRE_RL_connect_rready_1 = 1'b1 ;

  // rule RL_connect_awready_2
  assign CAN_FIRE_RL_connect_awready_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect_awready_2 = 1'd1 ;

  // rule RL_connect_wready_2
  assign CAN_FIRE_RL_connect_wready_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect_wready_2 = 1'd1 ;

  // rule RL_connect_wflit_2
  assign CAN_FIRE_RL_connect_wflit_2 = aws_BSV_top$ddr4_C_master_wvalid ;
  assign WILL_FIRE_RL_connect_wflit_2 = aws_BSV_top$ddr4_C_master_wvalid ;

  // rule RL_connect_bflit_2
  assign CAN_FIRE_RL_connect_bflit_2 = ddr4_C_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_bflit_2 = ddr4_C_deburster_inShim_bff$EMPTY_N ;

  // rule RL_connect_bready_2
  assign CAN_FIRE_RL_connect_bready_2 = 1'b1 ;
  assign WILL_FIRE_RL_connect_bready_2 = 1'b1 ;

  // rule RL_connect_arready_2
  assign CAN_FIRE_RL_connect_arready_2 = 1'd1 ;
  assign WILL_FIRE_RL_connect_arready_2 = 1'd1 ;

  // rule RL_connect_rflit_2
  assign CAN_FIRE_RL_connect_rflit_2 = ddr4_C_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_rflit_2 = ddr4_C_deburster_inShim_rff$EMPTY_N ;

  // rule RL_connect_rready_2
  assign CAN_FIRE_RL_connect_rready_2 = 1'b1 ;
  assign WILL_FIRE_RL_connect_rready_2 = 1'b1 ;

  // rule RL_connect_awready_3
  assign CAN_FIRE_RL_connect_awready_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect_awready_3 = 1'd1 ;

  // rule RL_connect_wready_3
  assign CAN_FIRE_RL_connect_wready_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect_wready_3 = 1'd1 ;

  // rule RL_connect_wflit_3
  assign CAN_FIRE_RL_connect_wflit_3 = aws_BSV_top$ddr4_D_master_wvalid ;
  assign WILL_FIRE_RL_connect_wflit_3 = aws_BSV_top$ddr4_D_master_wvalid ;

  // rule RL_connect_bflit_3
  assign CAN_FIRE_RL_connect_bflit_3 = ddr4_D_deburster_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_bflit_3 = ddr4_D_deburster_inShim_bff$EMPTY_N ;

  // rule RL_connect_bready_3
  assign CAN_FIRE_RL_connect_bready_3 = 1'b1 ;
  assign WILL_FIRE_RL_connect_bready_3 = 1'b1 ;

  // rule RL_connect_arready_3
  assign CAN_FIRE_RL_connect_arready_3 = 1'd1 ;
  assign WILL_FIRE_RL_connect_arready_3 = 1'd1 ;

  // rule RL_connect_rflit_3
  assign CAN_FIRE_RL_connect_rflit_3 = ddr4_D_deburster_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_rflit_3 = ddr4_D_deburster_inShim_rff$EMPTY_N ;

  // rule RL_connect_rready_3
  assign CAN_FIRE_RL_connect_rready_3 = 1'b1 ;
  assign WILL_FIRE_RL_connect_rready_3 = 1'b1 ;

  // rule RL_connect_awflit_4
  assign CAN_FIRE_RL_connect_awflit_4 =
	     ddr4_A_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_awflit_4 =
	     ddr4_A_deburster_outShim_awff$EMPTY_N ;

  // rule RL_connect_awready_4
  assign CAN_FIRE_RL_connect_awready_4 = 1'b1 ;
  assign WILL_FIRE_RL_connect_awready_4 = 1'b1 ;

  // rule RL_connect_wflit_4
  assign CAN_FIRE_RL_connect_wflit_4 = ddr4_A_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_wflit_4 = ddr4_A_deburster_outShim_wff$EMPTY_N ;

  // rule RL_connect_wready_4
  assign CAN_FIRE_RL_connect_wready_4 = 1'b1 ;
  assign WILL_FIRE_RL_connect_wready_4 = 1'b1 ;

  // rule RL_connect_arflit_4
  assign CAN_FIRE_RL_connect_arflit_4 =
	     ddr4_A_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_arflit_4 =
	     ddr4_A_deburster_outShim_arff$EMPTY_N ;

  // rule RL_connect_arready_4
  assign CAN_FIRE_RL_connect_arready_4 = 1'b1 ;
  assign WILL_FIRE_RL_connect_arready_4 = 1'b1 ;

  // rule RL_connect_bready_4
  assign CAN_FIRE_RL_connect_bready_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect_bready_4 = 1'd1 ;

  // rule RL_connect_bflit_4
  assign CAN_FIRE_RL_connect_bflit_4 = ddr4_A$bvalid ;
  assign WILL_FIRE_RL_connect_bflit_4 = ddr4_A$bvalid ;

  // rule RL_connect_rready_4
  assign CAN_FIRE_RL_connect_rready_4 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rready_4 = 1'd1 ;

  // rule RL_connect_rflit_4
  assign CAN_FIRE_RL_connect_rflit_4 = ddr4_A$rvalid ;
  assign WILL_FIRE_RL_connect_rflit_4 = ddr4_A$rvalid ;

  // rule RL_connect_awflit_5
  assign CAN_FIRE_RL_connect_awflit_5 =
	     ddr4_B_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_awflit_5 =
	     ddr4_B_deburster_outShim_awff$EMPTY_N ;

  // rule RL_connect_awready_5
  assign CAN_FIRE_RL_connect_awready_5 = 1'b1 ;
  assign WILL_FIRE_RL_connect_awready_5 = 1'b1 ;

  // rule RL_connect_wflit_5
  assign CAN_FIRE_RL_connect_wflit_5 = ddr4_B_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_wflit_5 = ddr4_B_deburster_outShim_wff$EMPTY_N ;

  // rule RL_connect_wready_5
  assign CAN_FIRE_RL_connect_wready_5 = 1'b1 ;
  assign WILL_FIRE_RL_connect_wready_5 = 1'b1 ;

  // rule RL_connect_arflit_5
  assign CAN_FIRE_RL_connect_arflit_5 =
	     ddr4_B_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_arflit_5 =
	     ddr4_B_deburster_outShim_arff$EMPTY_N ;

  // rule RL_connect_arready_5
  assign CAN_FIRE_RL_connect_arready_5 = 1'b1 ;
  assign WILL_FIRE_RL_connect_arready_5 = 1'b1 ;

  // rule RL_connect_bready_5
  assign CAN_FIRE_RL_connect_bready_5 = 1'd1 ;
  assign WILL_FIRE_RL_connect_bready_5 = 1'd1 ;

  // rule RL_connect_bflit_5
  assign CAN_FIRE_RL_connect_bflit_5 = ddr4_B$bvalid ;
  assign WILL_FIRE_RL_connect_bflit_5 = ddr4_B$bvalid ;

  // rule RL_connect_rready_5
  assign CAN_FIRE_RL_connect_rready_5 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rready_5 = 1'd1 ;

  // rule RL_connect_rflit_5
  assign CAN_FIRE_RL_connect_rflit_5 = ddr4_B$rvalid ;
  assign WILL_FIRE_RL_connect_rflit_5 = ddr4_B$rvalid ;

  // rule RL_connect_awflit_6
  assign CAN_FIRE_RL_connect_awflit_6 =
	     ddr4_C_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_awflit_6 =
	     ddr4_C_deburster_outShim_awff$EMPTY_N ;

  // rule RL_connect_awready_6
  assign CAN_FIRE_RL_connect_awready_6 = 1'b1 ;
  assign WILL_FIRE_RL_connect_awready_6 = 1'b1 ;

  // rule RL_connect_wflit_6
  assign CAN_FIRE_RL_connect_wflit_6 = ddr4_C_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_wflit_6 = ddr4_C_deburster_outShim_wff$EMPTY_N ;

  // rule RL_connect_wready_6
  assign CAN_FIRE_RL_connect_wready_6 = 1'b1 ;
  assign WILL_FIRE_RL_connect_wready_6 = 1'b1 ;

  // rule RL_connect_arflit_6
  assign CAN_FIRE_RL_connect_arflit_6 =
	     ddr4_C_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_arflit_6 =
	     ddr4_C_deburster_outShim_arff$EMPTY_N ;

  // rule RL_connect_arready_6
  assign CAN_FIRE_RL_connect_arready_6 = 1'b1 ;
  assign WILL_FIRE_RL_connect_arready_6 = 1'b1 ;

  // rule RL_connect_bready_6
  assign CAN_FIRE_RL_connect_bready_6 = 1'd1 ;
  assign WILL_FIRE_RL_connect_bready_6 = 1'd1 ;

  // rule RL_connect_bflit_6
  assign CAN_FIRE_RL_connect_bflit_6 = ddr4_C$bvalid ;
  assign WILL_FIRE_RL_connect_bflit_6 = ddr4_C$bvalid ;

  // rule RL_connect_rready_6
  assign CAN_FIRE_RL_connect_rready_6 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rready_6 = 1'd1 ;

  // rule RL_connect_rflit_6
  assign CAN_FIRE_RL_connect_rflit_6 = ddr4_C$rvalid ;
  assign WILL_FIRE_RL_connect_rflit_6 = ddr4_C$rvalid ;

  // rule RL_connect_awflit_7
  assign CAN_FIRE_RL_connect_awflit_7 =
	     ddr4_D_deburster_outShim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_awflit_7 =
	     ddr4_D_deburster_outShim_awff$EMPTY_N ;

  // rule RL_connect_awready_7
  assign CAN_FIRE_RL_connect_awready_7 = 1'b1 ;
  assign WILL_FIRE_RL_connect_awready_7 = 1'b1 ;

  // rule RL_connect_wflit_7
  assign CAN_FIRE_RL_connect_wflit_7 = ddr4_D_deburster_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_wflit_7 = ddr4_D_deburster_outShim_wff$EMPTY_N ;

  // rule RL_connect_wready_7
  assign CAN_FIRE_RL_connect_wready_7 = 1'b1 ;
  assign WILL_FIRE_RL_connect_wready_7 = 1'b1 ;

  // rule RL_connect_arflit_7
  assign CAN_FIRE_RL_connect_arflit_7 =
	     ddr4_D_deburster_outShim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_arflit_7 =
	     ddr4_D_deburster_outShim_arff$EMPTY_N ;

  // rule RL_connect_arready_7
  assign CAN_FIRE_RL_connect_arready_7 = 1'b1 ;
  assign WILL_FIRE_RL_connect_arready_7 = 1'b1 ;

  // rule RL_connect_bready_7
  assign CAN_FIRE_RL_connect_bready_7 = 1'd1 ;
  assign WILL_FIRE_RL_connect_bready_7 = 1'd1 ;

  // rule RL_connect_bflit_7
  assign CAN_FIRE_RL_connect_bflit_7 = ddr4_D$bvalid ;
  assign WILL_FIRE_RL_connect_bflit_7 = ddr4_D$bvalid ;

  // rule RL_connect_rready_7
  assign CAN_FIRE_RL_connect_rready_7 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rready_7 = 1'd1 ;

  // rule RL_connect_rflit_7
  assign CAN_FIRE_RL_connect_rflit_7 = ddr4_D$rvalid ;
  assign WILL_FIRE_RL_connect_rflit_7 = ddr4_D$rvalid ;

  // rule RL_rl_connecting
  assign CAN_FIRE_RL_rl_connecting = rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_connecting = rg_state == 2'd0 ;

  // rule RL_rl_start_when_connected
  assign CAN_FIRE_RL_rl_start_when_connected = rg_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_start_when_connected = rg_state == 2'd1 ;

  // rule RL_rl_host_recv
  assign CAN_FIRE_RL_rl_host_recv =
	     comms$RDY_fi_C_to_BSV_bytevec_enq && rg_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_host_recv = CAN_FIRE_RL_rl_host_recv ;

  // rule RL_rl_host_send
  assign CAN_FIRE_RL_rl_host_send =
	     comms$RDY_fo_BSV_to_C_bytevec_deq &&
	     comms$RDY_fo_BSV_to_C_bytevec_first &&
	     rg_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_host_send = CAN_FIRE_RL_rl_host_send ;

  // rule RL_connect_bflit_8
  assign CAN_FIRE_RL_connect_bflit_8 = aws_BSV_top$dma_pcis_slave_bvalid ;
  assign WILL_FIRE_RL_connect_bflit_8 = aws_BSV_top$dma_pcis_slave_bvalid ;

  // rule RL_connect_bready_8
  assign CAN_FIRE_RL_connect_bready_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_bready_8 = 1'd1 ;

  // rule RL_connect_rflit_8
  assign CAN_FIRE_RL_connect_rflit_8 = aws_BSV_top$dma_pcis_slave_rvalid ;
  assign WILL_FIRE_RL_connect_rflit_8 = aws_BSV_top$dma_pcis_slave_rvalid ;

  // rule RL_connect_rready_8
  assign CAN_FIRE_RL_connect_rready_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rready_8 = 1'd1 ;

  // rule RL_rl_connect_dma_pcis_wr_addr
  assign CAN_FIRE_RL_rl_connect_dma_pcis_wr_addr =
	     !dma_pcis_xactor_clearing &&
	     comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq &&
	     comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first &&
	     !dma_pcis_xactor_shim_awff_rv[108] ;
  assign WILL_FIRE_RL_rl_connect_dma_pcis_wr_addr =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_addr ;

  // rule RL_connect_awready_8
  assign CAN_FIRE_RL_connect_awready_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_awready_8 = 1'd1 ;

  // rule RL_rl_connect_dma_pcis_wr_data
  assign CAN_FIRE_RL_rl_connect_dma_pcis_wr_data =
	     !dma_pcis_xactor_clearing &&
	     comms$RDY_fo_AXI4_Wr_Data_d512_u0_deq &&
	     comms$RDY_fo_AXI4_Wr_Data_d512_u0_first &&
	     !dma_pcis_xactor_shim_wff_rv[577] ;
  assign WILL_FIRE_RL_rl_connect_dma_pcis_wr_data =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_data ;

  // rule RL_connect_wready_8
  assign CAN_FIRE_RL_connect_wready_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_wready_8 = 1'd1 ;

  // rule RL_rl_connect_dma_pcis_rd_addr
  assign CAN_FIRE_RL_rl_connect_dma_pcis_rd_addr =
	     !dma_pcis_xactor_clearing &&
	     comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq &&
	     comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first &&
	     !dma_pcis_xactor_shim_arff_rv[108] ;
  assign WILL_FIRE_RL_rl_connect_dma_pcis_rd_addr =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_addr ;

  // rule RL_connect_arready_8
  assign CAN_FIRE_RL_connect_arready_8 = 1'd1 ;
  assign WILL_FIRE_RL_connect_arready_8 = 1'd1 ;

  // rule RL_connect_awready_9
  assign CAN_FIRE_RL_connect_awready_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_awready_9 = 1'd1 ;

  // rule RL_connect_wready_9
  assign CAN_FIRE_RL_connect_wready_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_wready_9 = 1'd1 ;

  // rule RL_connect_bflit_9
  assign CAN_FIRE_RL_connect_bflit_9 = aws_BSV_top$ocl_slave_b_bvalid ;
  assign WILL_FIRE_RL_connect_bflit_9 = aws_BSV_top$ocl_slave_b_bvalid ;

  // rule RL_connect_bready_9
  assign CAN_FIRE_RL_connect_bready_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_bready_9 = 1'd1 ;

  // rule RL_connect_arready_9
  assign CAN_FIRE_RL_connect_arready_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_arready_9 = 1'd1 ;

  // rule RL_connect_rflit_9
  assign CAN_FIRE_RL_connect_rflit_9 = aws_BSV_top$ocl_slave_r_rvalid ;
  assign WILL_FIRE_RL_connect_rflit_9 = aws_BSV_top$ocl_slave_r_rvalid ;

  // rule RL_connect_rready_9
  assign CAN_FIRE_RL_connect_rready_9 = 1'd1 ;
  assign WILL_FIRE_RL_connect_rready_9 = 1'd1 ;

  // rule RL_ddr4_A_deburster_handle_write_rsp
  assign CAN_FIRE_RL_ddr4_A_deburster_handle_write_rsp =
	     ddr4_A_deburster_countWriteRspFF$EMPTY_N &&
	     ddr4_A_deburster_outShim_bff$EMPTY_N &&
	     (!ddr4_A_deburster_countWriteRspFF_first__4_ULE__ETC___d96 ||
	      !ddr4_A_deburster_inSerial_shim_bff_rv[18]) ;
  assign WILL_FIRE_RL_ddr4_A_deburster_handle_write_rsp =
	     CAN_FIRE_RL_ddr4_A_deburster_handle_write_rsp ;

  // rule RL_ddr4_A_deburster_forward_read_rsp
  assign CAN_FIRE_RL_ddr4_A_deburster_forward_read_rsp =
	     !ddr4_A_deburster_inSerial_shim_rff_rv[531] &&
	     ddr4_A_deburster_lastReadRspFF$EMPTY_N &&
	     ddr4_A_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ddr4_A_deburster_forward_read_rsp =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_read_rsp ;

  // rule RL_ddr4_A_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeAW =
	     ddr4_A_deburster_inShim_awff$EMPTY_N &&
	     !ddr4_A_deburster_inSerial_shim_awff_rv[109] &&
	     ddr4_A_deburster_inSerial_state == 2'd0 &&
	     (ddr4_A_deburster_inSerial_lastWasRead ||
	      !ddr4_A_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeAW &&
	     !aws_BSV_top$ddr4_A_master_awvalid ;

  // rule RL_connect_arflit
  assign CAN_FIRE_RL_connect_arflit = aws_BSV_top$ddr4_A_master_arvalid ;
  assign WILL_FIRE_RL_connect_arflit = aws_BSV_top$ddr4_A_master_arvalid ;

  // rule RL_ddr4_A_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeAR =
	     ddr4_A_deburster_inShim_arff$EMPTY_N &&
	     !ddr4_A_deburster_inSerial_shim_arff_rv[109] &&
	     ddr4_A_deburster_inSerial_state == 2'd0 &&
	     (!ddr4_A_deburster_inSerial_lastWasRead ||
	      !ddr4_A_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeAR &&
	     !aws_BSV_top$ddr4_A_master_arvalid ;

  // rule RL_connect_awflit
  assign CAN_FIRE_RL_connect_awflit = aws_BSV_top$ddr4_A_master_awvalid ;
  assign WILL_FIRE_RL_connect_awflit = aws_BSV_top$ddr4_A_master_awvalid ;

  // rule RL_ddr4_A_deburster_forward_read_req
  assign CAN_FIRE_RL_ddr4_A_deburster_forward_read_req =
	     ddr4_A_deburster_inSerial_shim_arff_rv$port1__read[109] &&
	     ddr4_A_deburster_outShim_arff$FULL_N &&
	     ddr4_A_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_ddr4_A_deburster_forward_read_req =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_read_req ;

  // rule RL_ddr4_A_deburster_inSerial_takeW
  assign CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeW =
	     ddr4_A_deburster_inShim_wff$EMPTY_N &&
	     !ddr4_A_deburster_inSerial_shim_wff_rv[577] &&
	     ddr4_A_deburster_inSerial_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeW =
	     CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeW &&
	     !aws_BSV_top$ddr4_A_master_wvalid ;

  // rule RL_ddr4_A_deburster_forward_write_req
  assign CAN_FIRE_RL_ddr4_A_deburster_forward_write_req =
	     ddr4_A_deburster_inSerial_shim_awff_rv$port1__read[109] &&
	     ddr4_A_deburster_inSerial_shim_wff_rv$port1__read[577] &&
	     ddr4_A_deburster_outShim_awff$FULL_N &&
	     ddr4_A_deburster_outShim_wff$FULL_N &&
	     (!ddr4_A_deburster_inSerial_shim_wff_rv$port1__read[0] ||
	      ddr4_A_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_ddr4_A_deburster_forward_write_req =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_write_req ;

  // rule RL_ddr4_A_deburster_inSerial_takeB
  assign CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeB =
	     ddr4_A_deburster_inSerial_shim_bff_rv$port1__read[18] &&
	     ddr4_A_deburster_inShim_bff$FULL_N ;
  assign WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeB =
	     CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeB ;

  // rule RL_ddr4_A_deburster_inSerial_takeR
  assign CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeR =
	     ddr4_A_deburster_inSerial_shim_rff_rv$port1__read[531] &&
	     ddr4_A_deburster_inShim_rff$FULL_N ;
  assign WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeR =
	     CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeR ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule RL_ddr4_B_deburster_handle_write_rsp
  assign CAN_FIRE_RL_ddr4_B_deburster_handle_write_rsp =
	     ddr4_B_deburster_countWriteRspFF$EMPTY_N &&
	     ddr4_B_deburster_outShim_bff$EMPTY_N &&
	     (!ddr4_B_deburster_countWriteRspFF_first__32_ULE_ETC___d234 ||
	      !ddr4_B_deburster_inSerial_shim_bff_rv[18]) ;
  assign WILL_FIRE_RL_ddr4_B_deburster_handle_write_rsp =
	     CAN_FIRE_RL_ddr4_B_deburster_handle_write_rsp ;

  // rule RL_ddr4_B_deburster_forward_read_rsp
  assign CAN_FIRE_RL_ddr4_B_deburster_forward_read_rsp =
	     !ddr4_B_deburster_inSerial_shim_rff_rv[531] &&
	     ddr4_B_deburster_lastReadRspFF$EMPTY_N &&
	     ddr4_B_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ddr4_B_deburster_forward_read_rsp =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_read_rsp ;

  // rule RL_ddr4_B_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeAW =
	     ddr4_B_deburster_inShim_awff$EMPTY_N &&
	     !ddr4_B_deburster_inSerial_shim_awff_rv[109] &&
	     ddr4_B_deburster_inSerial_state == 2'd0 &&
	     (ddr4_B_deburster_inSerial_lastWasRead ||
	      !ddr4_B_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeAW &&
	     !aws_BSV_top$ddr4_B_master_awvalid ;

  // rule RL_connect_arflit_1
  assign CAN_FIRE_RL_connect_arflit_1 = aws_BSV_top$ddr4_B_master_arvalid ;
  assign WILL_FIRE_RL_connect_arflit_1 = aws_BSV_top$ddr4_B_master_arvalid ;

  // rule RL_ddr4_B_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeAR =
	     ddr4_B_deburster_inShim_arff$EMPTY_N &&
	     !ddr4_B_deburster_inSerial_shim_arff_rv[109] &&
	     ddr4_B_deburster_inSerial_state == 2'd0 &&
	     (!ddr4_B_deburster_inSerial_lastWasRead ||
	      !ddr4_B_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeAR &&
	     !aws_BSV_top$ddr4_B_master_arvalid ;

  // rule RL_connect_awflit_1
  assign CAN_FIRE_RL_connect_awflit_1 = aws_BSV_top$ddr4_B_master_awvalid ;
  assign WILL_FIRE_RL_connect_awflit_1 = aws_BSV_top$ddr4_B_master_awvalid ;

  // rule RL_ddr4_B_deburster_forward_read_req
  assign CAN_FIRE_RL_ddr4_B_deburster_forward_read_req =
	     ddr4_B_deburster_inSerial_shim_arff_rv$port1__read[109] &&
	     ddr4_B_deburster_outShim_arff$FULL_N &&
	     ddr4_B_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_ddr4_B_deburster_forward_read_req =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_read_req ;

  // rule RL_ddr4_B_deburster_inSerial_takeW
  assign CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeW =
	     ddr4_B_deburster_inShim_wff$EMPTY_N &&
	     !ddr4_B_deburster_inSerial_shim_wff_rv[577] &&
	     ddr4_B_deburster_inSerial_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeW =
	     CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeW &&
	     !aws_BSV_top$ddr4_B_master_wvalid ;

  // rule RL_ddr4_B_deburster_forward_write_req
  assign CAN_FIRE_RL_ddr4_B_deburster_forward_write_req =
	     ddr4_B_deburster_inSerial_shim_awff_rv$port1__read[109] &&
	     ddr4_B_deburster_inSerial_shim_wff_rv$port1__read[577] &&
	     ddr4_B_deburster_outShim_awff$FULL_N &&
	     ddr4_B_deburster_outShim_wff$FULL_N &&
	     (!ddr4_B_deburster_inSerial_shim_wff_rv$port1__read[0] ||
	      ddr4_B_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_ddr4_B_deburster_forward_write_req =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_write_req ;

  // rule RL_ddr4_B_deburster_inSerial_takeB
  assign CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeB =
	     ddr4_B_deburster_inSerial_shim_bff_rv$port1__read[18] &&
	     ddr4_B_deburster_inShim_bff$FULL_N ;
  assign WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeB =
	     CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeB ;

  // rule RL_ddr4_B_deburster_inSerial_takeR
  assign CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeR =
	     ddr4_B_deburster_inSerial_shim_rff_rv$port1__read[531] &&
	     ddr4_B_deburster_inShim_rff$FULL_N ;
  assign WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeR =
	     CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeR ;

  // rule __me_check_13
  assign CAN_FIRE___me_check_13 = 1'b1 ;
  assign WILL_FIRE___me_check_13 = 1'b1 ;

  // rule RL_ddr4_C_deburster_handle_write_rsp
  assign CAN_FIRE_RL_ddr4_C_deburster_handle_write_rsp =
	     ddr4_C_deburster_countWriteRspFF$EMPTY_N &&
	     ddr4_C_deburster_outShim_bff$EMPTY_N &&
	     (!ddr4_C_deburster_countWriteRspFF_first__70_ULE_ETC___d372 ||
	      !ddr4_C_deburster_inSerial_shim_bff_rv[18]) ;
  assign WILL_FIRE_RL_ddr4_C_deburster_handle_write_rsp =
	     CAN_FIRE_RL_ddr4_C_deburster_handle_write_rsp ;

  // rule RL_ddr4_C_deburster_forward_read_rsp
  assign CAN_FIRE_RL_ddr4_C_deburster_forward_read_rsp =
	     !ddr4_C_deburster_inSerial_shim_rff_rv[531] &&
	     ddr4_C_deburster_lastReadRspFF$EMPTY_N &&
	     ddr4_C_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ddr4_C_deburster_forward_read_rsp =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_read_rsp ;

  // rule RL_ddr4_C_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeAW =
	     ddr4_C_deburster_inShim_awff$EMPTY_N &&
	     !ddr4_C_deburster_inSerial_shim_awff_rv[109] &&
	     ddr4_C_deburster_inSerial_state == 2'd0 &&
	     (ddr4_C_deburster_inSerial_lastWasRead ||
	      !ddr4_C_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeAW &&
	     !aws_BSV_top$ddr4_C_master_awvalid ;

  // rule RL_connect_arflit_2
  assign CAN_FIRE_RL_connect_arflit_2 = aws_BSV_top$ddr4_C_master_arvalid ;
  assign WILL_FIRE_RL_connect_arflit_2 = aws_BSV_top$ddr4_C_master_arvalid ;

  // rule RL_ddr4_C_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeAR =
	     ddr4_C_deburster_inShim_arff$EMPTY_N &&
	     !ddr4_C_deburster_inSerial_shim_arff_rv[109] &&
	     ddr4_C_deburster_inSerial_state == 2'd0 &&
	     (!ddr4_C_deburster_inSerial_lastWasRead ||
	      !ddr4_C_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeAR &&
	     !aws_BSV_top$ddr4_C_master_arvalid ;

  // rule RL_connect_awflit_2
  assign CAN_FIRE_RL_connect_awflit_2 = aws_BSV_top$ddr4_C_master_awvalid ;
  assign WILL_FIRE_RL_connect_awflit_2 = aws_BSV_top$ddr4_C_master_awvalid ;

  // rule RL_ddr4_C_deburster_forward_read_req
  assign CAN_FIRE_RL_ddr4_C_deburster_forward_read_req =
	     ddr4_C_deburster_inSerial_shim_arff_rv$port1__read[109] &&
	     ddr4_C_deburster_outShim_arff$FULL_N &&
	     ddr4_C_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_ddr4_C_deburster_forward_read_req =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_read_req ;

  // rule RL_ddr4_C_deburster_inSerial_takeW
  assign CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeW =
	     ddr4_C_deburster_inShim_wff$EMPTY_N &&
	     !ddr4_C_deburster_inSerial_shim_wff_rv[577] &&
	     ddr4_C_deburster_inSerial_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeW =
	     CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeW &&
	     !aws_BSV_top$ddr4_C_master_wvalid ;

  // rule RL_ddr4_C_deburster_forward_write_req
  assign CAN_FIRE_RL_ddr4_C_deburster_forward_write_req =
	     ddr4_C_deburster_inSerial_shim_awff_rv$port1__read[109] &&
	     ddr4_C_deburster_inSerial_shim_wff_rv$port1__read[577] &&
	     ddr4_C_deburster_outShim_awff$FULL_N &&
	     ddr4_C_deburster_outShim_wff$FULL_N &&
	     (!ddr4_C_deburster_inSerial_shim_wff_rv$port1__read[0] ||
	      ddr4_C_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_ddr4_C_deburster_forward_write_req =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_write_req ;

  // rule RL_ddr4_C_deburster_inSerial_takeB
  assign CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeB =
	     ddr4_C_deburster_inSerial_shim_bff_rv$port1__read[18] &&
	     ddr4_C_deburster_inShim_bff$FULL_N ;
  assign WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeB =
	     CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeB ;

  // rule RL_ddr4_C_deburster_inSerial_takeR
  assign CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeR =
	     ddr4_C_deburster_inSerial_shim_rff_rv$port1__read[531] &&
	     ddr4_C_deburster_inShim_rff$FULL_N ;
  assign WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeR =
	     CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeR ;

  // rule __me_check_22
  assign CAN_FIRE___me_check_22 = 1'b1 ;
  assign WILL_FIRE___me_check_22 = 1'b1 ;

  // rule RL_ddr4_D_deburster_handle_write_rsp
  assign CAN_FIRE_RL_ddr4_D_deburster_handle_write_rsp =
	     ddr4_D_deburster_countWriteRspFF$EMPTY_N &&
	     ddr4_D_deburster_outShim_bff$EMPTY_N &&
	     (!ddr4_D_deburster_countWriteRspFF_first__08_ULE_ETC___d510 ||
	      !ddr4_D_deburster_inSerial_shim_bff_rv[18]) ;
  assign WILL_FIRE_RL_ddr4_D_deburster_handle_write_rsp =
	     CAN_FIRE_RL_ddr4_D_deburster_handle_write_rsp ;

  // rule RL_ddr4_D_deburster_forward_read_rsp
  assign CAN_FIRE_RL_ddr4_D_deburster_forward_read_rsp =
	     !ddr4_D_deburster_inSerial_shim_rff_rv[531] &&
	     ddr4_D_deburster_lastReadRspFF$EMPTY_N &&
	     ddr4_D_deburster_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_ddr4_D_deburster_forward_read_rsp =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_read_rsp ;

  // rule RL_ddr4_D_deburster_inSerial_takeAW
  assign CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeAW =
	     ddr4_D_deburster_inShim_awff$EMPTY_N &&
	     !ddr4_D_deburster_inSerial_shim_awff_rv[109] &&
	     ddr4_D_deburster_inSerial_state == 2'd0 &&
	     (ddr4_D_deburster_inSerial_lastWasRead ||
	      !ddr4_D_deburster_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAW =
	     CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeAW &&
	     !aws_BSV_top$ddr4_D_master_awvalid ;

  // rule RL_connect_arflit_3
  assign CAN_FIRE_RL_connect_arflit_3 = aws_BSV_top$ddr4_D_master_arvalid ;
  assign WILL_FIRE_RL_connect_arflit_3 = aws_BSV_top$ddr4_D_master_arvalid ;

  // rule RL_ddr4_D_deburster_inSerial_takeAR
  assign CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeAR =
	     ddr4_D_deburster_inShim_arff$EMPTY_N &&
	     !ddr4_D_deburster_inSerial_shim_arff_rv[109] &&
	     ddr4_D_deburster_inSerial_state == 2'd0 &&
	     (!ddr4_D_deburster_inSerial_lastWasRead ||
	      !ddr4_D_deburster_inShim_awff$EMPTY_N) ;
  assign WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAR =
	     CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeAR &&
	     !aws_BSV_top$ddr4_D_master_arvalid ;

  // rule RL_connect_awflit_3
  assign CAN_FIRE_RL_connect_awflit_3 = aws_BSV_top$ddr4_D_master_awvalid ;
  assign WILL_FIRE_RL_connect_awflit_3 = aws_BSV_top$ddr4_D_master_awvalid ;

  // rule RL_ddr4_D_deburster_forward_read_req
  assign CAN_FIRE_RL_ddr4_D_deburster_forward_read_req =
	     ddr4_D_deburster_inSerial_shim_arff_rv$port1__read[109] &&
	     ddr4_D_deburster_outShim_arff$FULL_N &&
	     ddr4_D_deburster_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_ddr4_D_deburster_forward_read_req =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_read_req ;

  // rule RL_ddr4_D_deburster_inSerial_takeW
  assign CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeW =
	     ddr4_D_deburster_inShim_wff$EMPTY_N &&
	     !ddr4_D_deburster_inSerial_shim_wff_rv[577] &&
	     ddr4_D_deburster_inSerial_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeW =
	     CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeW &&
	     !aws_BSV_top$ddr4_D_master_wvalid ;

  // rule RL_ddr4_D_deburster_forward_write_req
  assign CAN_FIRE_RL_ddr4_D_deburster_forward_write_req =
	     ddr4_D_deburster_inSerial_shim_awff_rv$port1__read[109] &&
	     ddr4_D_deburster_inSerial_shim_wff_rv$port1__read[577] &&
	     ddr4_D_deburster_outShim_awff$FULL_N &&
	     ddr4_D_deburster_outShim_wff$FULL_N &&
	     (!ddr4_D_deburster_inSerial_shim_wff_rv$port1__read[0] ||
	      ddr4_D_deburster_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_ddr4_D_deburster_forward_write_req =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_write_req ;

  // rule RL_ddr4_D_deburster_inSerial_takeB
  assign CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeB =
	     ddr4_D_deburster_inSerial_shim_bff_rv$port1__read[18] &&
	     ddr4_D_deburster_inShim_bff$FULL_N ;
  assign WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeB =
	     CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeB ;

  // rule RL_ddr4_D_deburster_inSerial_takeR
  assign CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeR =
	     ddr4_D_deburster_inSerial_shim_rff_rv$port1__read[531] &&
	     ddr4_D_deburster_inShim_rff$FULL_N ;
  assign WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeR =
	     CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeR ;

  // rule __me_check_31
  assign CAN_FIRE___me_check_31 = 1'b1 ;
  assign WILL_FIRE___me_check_31 = 1'b1 ;

  // rule RL_dma_pcis_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_setPeek =
	     dma_pcis_xactor_shim_awff_rv$port1__read[108] ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_setPeek ;

  // rule RL_connect_awflit_8
  assign CAN_FIRE_RL_connect_awflit_8 =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_setPeek ;
  assign WILL_FIRE_RL_connect_awflit_8 =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_setPeek ;

  // rule RL_dma_pcis_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_warnDoDrop =
	     dma_pcis_xactor_ug_master_u_aw_dropWire$whas &&
	     !dma_pcis_xactor_shim_awff_rv$port1__read[108] ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_dma_pcis_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_doDrop =
	     dma_pcis_xactor_shim_awff_rv$port1__read[108] &&
	     dma_pcis_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_doDrop ;

  // rule RL_dma_pcis_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_setPeek =
	     dma_pcis_xactor_shim_wff_rv$port1__read[577] ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_setPeek ;

  // rule RL_connect_wflit_8
  assign CAN_FIRE_RL_connect_wflit_8 =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_setPeek ;
  assign WILL_FIRE_RL_connect_wflit_8 =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_setPeek ;

  // rule RL_dma_pcis_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_warnDoDrop =
	     dma_pcis_xactor_ug_master_u_w_dropWire$whas &&
	     !dma_pcis_xactor_shim_wff_rv$port1__read[577] ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_dma_pcis_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_doDrop =
	     dma_pcis_xactor_shim_wff_rv$port1__read[577] &&
	     dma_pcis_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_doDrop ;

  // rule RL_dma_pcis_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_b_warnDoPut =
	     dma_pcis_xactor_ug_master_u_b_putWire$whas &&
	     dma_pcis_xactor_shim_bff_rv[17] ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_dma_pcis_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_b_doPut =
	     !dma_pcis_xactor_shim_bff_rv[17] &&
	     dma_pcis_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_b_doPut ;

  // rule RL_dma_pcis_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_setPeek =
	     dma_pcis_xactor_shim_arff_rv$port1__read[108] ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_setPeek ;

  // rule RL_connect_arflit_8
  assign CAN_FIRE_RL_connect_arflit_8 =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_setPeek ;
  assign WILL_FIRE_RL_connect_arflit_8 =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_setPeek ;

  // rule RL_dma_pcis_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_warnDoDrop =
	     dma_pcis_xactor_ug_master_u_ar_dropWire$whas &&
	     !dma_pcis_xactor_shim_arff_rv$port1__read[108] ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_dma_pcis_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_doDrop =
	     dma_pcis_xactor_shim_arff_rv$port1__read[108] &&
	     dma_pcis_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_doDrop ;

  // rule RL_dma_pcis_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_r_warnDoPut =
	     dma_pcis_xactor_ug_master_u_r_putWire$whas &&
	     dma_pcis_xactor_shim_rff_rv[530] ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_dma_pcis_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_r_doPut =
	     !dma_pcis_xactor_shim_rff_rv[530] &&
	     dma_pcis_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_r_doPut ;

  // rule RL_dma_pcis_xactor_do_clear
  assign CAN_FIRE_RL_dma_pcis_xactor_do_clear = dma_pcis_xactor_clearing ;
  assign WILL_FIRE_RL_dma_pcis_xactor_do_clear = dma_pcis_xactor_clearing ;

  // rule RL_ocl_xactor_u_master_u_aw_setPeek
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_aw_setPeek =
	     ocl_xactor_shim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_aw_setPeek =
	     ocl_xactor_shim_awff$EMPTY_N ;

  // rule RL_connect_awflit_9
  assign CAN_FIRE_RL_connect_awflit_9 = ocl_xactor_shim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_awflit_9 = ocl_xactor_shim_awff$EMPTY_N ;

  // rule RL_ocl_xactor_u_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_aw_warnDoDrop =
	     ocl_xactor_u_master_u_aw_dropWire$whas &&
	     !ocl_xactor_shim_awff$EMPTY_N ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_ocl_xactor_u_master_u_aw_warnDoDrop ;

  // rule RL_ocl_xactor_u_master_u_aw_doDrop
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_aw_doDrop =
	     ocl_xactor_shim_awff$EMPTY_N &&
	     ocl_xactor_u_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_aw_doDrop =
	     CAN_FIRE_RL_ocl_xactor_u_master_u_aw_doDrop ;

  // rule RL_rl_connect_ocl_wr_addr
  assign CAN_FIRE_RL_rl_connect_ocl_wr_addr =
	     comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq &&
	     comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first &&
	     ocl_xactor_shim_awff$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_ocl_wr_addr =
	     CAN_FIRE_RL_rl_connect_ocl_wr_addr ;

  // rule RL_ocl_xactor_u_master_u_w_setPeek
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_w_setPeek =
	     ocl_xactor_shim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_w_setPeek =
	     ocl_xactor_shim_wff$EMPTY_N ;

  // rule RL_connect_wflit_9
  assign CAN_FIRE_RL_connect_wflit_9 = ocl_xactor_shim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_wflit_9 = ocl_xactor_shim_wff$EMPTY_N ;

  // rule RL_ocl_xactor_u_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_w_warnDoDrop =
	     ocl_xactor_u_master_u_w_dropWire$whas &&
	     !ocl_xactor_shim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_ocl_xactor_u_master_u_w_warnDoDrop ;

  // rule RL_ocl_xactor_u_master_u_w_doDrop
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_w_doDrop =
	     ocl_xactor_shim_wff$EMPTY_N &&
	     ocl_xactor_u_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_w_doDrop =
	     CAN_FIRE_RL_ocl_xactor_u_master_u_w_doDrop ;

  // rule RL_rl_connect_ocl_wr_data
  assign CAN_FIRE_RL_rl_connect_ocl_wr_data =
	     comms$RDY_fo_AXI4L_Wr_Data_d32_deq &&
	     comms$RDY_fo_AXI4L_Wr_Data_d32_first &&
	     ocl_xactor_shim_wff$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_ocl_wr_data =
	     CAN_FIRE_RL_rl_connect_ocl_wr_data ;

  // rule RL_ocl_xactor_u_master_u_b_warnDoPut
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_b_warnDoPut =
	     aws_BSV_top$ocl_slave_b_bvalid && !ocl_xactor_shim_bff$FULL_N ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_b_warnDoPut =
	     CAN_FIRE_RL_ocl_xactor_u_master_u_b_warnDoPut ;

  // rule RL_ocl_xactor_u_master_u_ar_setPeek
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_ar_setPeek =
	     ocl_xactor_shim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_ar_setPeek =
	     ocl_xactor_shim_arff$EMPTY_N ;

  // rule RL_connect_arflit_9
  assign CAN_FIRE_RL_connect_arflit_9 = ocl_xactor_shim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_arflit_9 = ocl_xactor_shim_arff$EMPTY_N ;

  // rule RL_rl_status_signals
  assign CAN_FIRE_RL_rl_status_signals = 1'd1 ;
  assign WILL_FIRE_RL_rl_status_signals = 1'd1 ;

  // rule RL_ocl_xactor_u_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_ar_warnDoDrop =
	     ocl_xactor_u_master_u_ar_dropWire$whas &&
	     !ocl_xactor_shim_arff$EMPTY_N ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_ocl_xactor_u_master_u_ar_warnDoDrop ;

  // rule RL_ocl_xactor_u_master_u_ar_doDrop
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_ar_doDrop =
	     ocl_xactor_shim_arff$EMPTY_N &&
	     ocl_xactor_u_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_ar_doDrop =
	     CAN_FIRE_RL_ocl_xactor_u_master_u_ar_doDrop ;

  // rule RL_rl_connect_ocl_rd_addr
  assign CAN_FIRE_RL_rl_connect_ocl_rd_addr =
	     comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq &&
	     comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first &&
	     ocl_xactor_shim_arff$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_ocl_rd_addr =
	     CAN_FIRE_RL_rl_connect_ocl_rd_addr ;

  // rule RL_rl_connect_dma_pcis_wr_resp
  assign CAN_FIRE_RL_rl_connect_dma_pcis_wr_resp =
	     !dma_pcis_xactor_clearing &&
	     dma_pcis_xactor_shim_bff_rv$port1__read[17] &&
	     comms$RDY_fi_AXI4_Wr_Resp_i16_u0_enq ;
  assign WILL_FIRE_RL_rl_connect_dma_pcis_wr_resp =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_resp ;

  // rule RL_rl_connect_dma_pcis_rd_data
  assign CAN_FIRE_RL_rl_connect_dma_pcis_rd_data =
	     !dma_pcis_xactor_clearing &&
	     dma_pcis_xactor_shim_rff_rv$port1__read[530] &&
	     comms$RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq ;
  assign WILL_FIRE_RL_rl_connect_dma_pcis_rd_data =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_data ;

  // rule RL_rl_connect_ocl_wr_resp
  assign CAN_FIRE_RL_rl_connect_ocl_wr_resp =
	     comms$RDY_fi_AXI4L_Wr_Resp_u0_enq &&
	     ocl_xactor_shim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect_ocl_wr_resp =
	     CAN_FIRE_RL_rl_connect_ocl_wr_resp ;

  // rule RL_ocl_xactor_u_master_u_b_doPut
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_b_doPut =
	     ocl_xactor_shim_bff$FULL_N && aws_BSV_top$ocl_slave_b_bvalid ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_b_doPut =
	     CAN_FIRE_RL_ocl_xactor_u_master_u_b_doPut ;

  // rule RL_ocl_xactor_u_master_u_r_warnDoPut
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_r_warnDoPut =
	     aws_BSV_top$ocl_slave_r_rvalid && !ocl_xactor_shim_rff$FULL_N ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_r_warnDoPut =
	     CAN_FIRE_RL_ocl_xactor_u_master_u_r_warnDoPut ;

  // rule RL_rl_connect_ocl_rd_data
  assign CAN_FIRE_RL_rl_connect_ocl_rd_data =
	     comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq &&
	     ocl_xactor_shim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect_ocl_rd_data =
	     CAN_FIRE_RL_rl_connect_ocl_rd_data ;

  // rule RL_ocl_xactor_u_master_u_r_doPut
  assign CAN_FIRE_RL_ocl_xactor_u_master_u_r_doPut =
	     ocl_xactor_shim_rff$FULL_N && aws_BSV_top$ocl_slave_r_rvalid ;
  assign WILL_FIRE_RL_ocl_xactor_u_master_u_r_doPut =
	     CAN_FIRE_RL_ocl_xactor_u_master_u_r_doPut ;

  // inputs to muxes for submodule ports
  assign MUX_ddr4_A_deburster_inSerial_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeR &&
	     ddr4_A_deburster_inSerial_shim_rff_rv$port1__read[0] ;
  assign MUX_ddr4_B_deburster_inSerial_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeR &&
	     ddr4_B_deburster_inSerial_shim_rff_rv$port1__read[0] ;
  assign MUX_ddr4_C_deburster_inSerial_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeR &&
	     ddr4_C_deburster_inSerial_shim_rff_rv$port1__read[0] ;
  assign MUX_ddr4_D_deburster_inSerial_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeR &&
	     ddr4_D_deburster_inSerial_shim_rff_rv$port1__read[0] ;

  // inlined wires
  assign dma_pcis_xactor_ug_master_u_aw_peekWire$wget =
	     dma_pcis_xactor_shim_awff_rv$port1__read[107:0] ;
  assign dma_pcis_xactor_ug_master_u_w_peekWire$wget =
	     dma_pcis_xactor_shim_wff_rv$port1__read[576:0] ;
  assign dma_pcis_xactor_ug_master_u_b_putWire$wget =
	     { aws_BSV_top$dma_pcis_slave_bid,
	       aws_BSV_top$dma_pcis_slave_bresp } ;
  assign dma_pcis_xactor_ug_master_u_b_putWire$whas =
	     aws_BSV_top$dma_pcis_slave_bvalid &&
	     !dma_pcis_xactor_shim_bff_rv[17] ;
  assign dma_pcis_xactor_ug_master_u_ar_peekWire$wget =
	     dma_pcis_xactor_shim_arff_rv$port1__read[107:0] ;
  assign dma_pcis_xactor_ug_master_u_r_putWire$wget =
	     { aws_BSV_top$dma_pcis_slave_rid,
	       aws_BSV_top$dma_pcis_slave_rdata,
	       aws_BSV_top$dma_pcis_slave_rresp,
	       aws_BSV_top$dma_pcis_slave_rlast } ;
  assign dma_pcis_xactor_ug_master_u_r_putWire$whas =
	     aws_BSV_top$dma_pcis_slave_rvalid &&
	     !dma_pcis_xactor_shim_rff_rv[530] ;
  assign dma_pcis_xactor_ug_master_u_aw_dropWire$whas =
	     dma_pcis_xactor_shim_awff_rv$port1__read[108] &&
	     aws_BSV_top$dma_pcis_slave_awready ;
  assign dma_pcis_xactor_ug_master_u_w_dropWire$whas =
	     dma_pcis_xactor_shim_wff_rv$port1__read[577] &&
	     aws_BSV_top$dma_pcis_slave_wready ;
  assign dma_pcis_xactor_ug_master_u_ar_dropWire$whas =
	     dma_pcis_xactor_shim_arff_rv$port1__read[108] &&
	     aws_BSV_top$dma_pcis_slave_arready ;
  assign ocl_xactor_u_master_u_aw_dropWire$whas =
	     ocl_xactor_shim_awff$EMPTY_N &&
	     aws_BSV_top$ocl_slave_aw_awready ;
  assign ocl_xactor_u_master_u_w_dropWire$whas =
	     ocl_xactor_shim_wff$EMPTY_N && aws_BSV_top$ocl_slave_w_wready ;
  assign ocl_xactor_u_master_u_ar_dropWire$whas =
	     ocl_xactor_shim_arff$EMPTY_N &&
	     aws_BSV_top$ocl_slave_ar_arready ;
  assign ddr4_A_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, ddr4_A_deburster_inShim_awff$D_OUT } ;
  assign ddr4_A_deburster_inSerial_shim_awff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAW ?
	       ddr4_A_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       ddr4_A_deburster_inSerial_shim_awff_rv ;
  assign ddr4_A_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_ddr4_A_deburster_forward_write_req &&
	     ddr4_A_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign ddr4_A_deburster_inSerial_shim_awff_rv$port2__read =
	     ddr4_A_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_A_deburster_inSerial_shim_awff_rv$port1__read ;
  assign ddr4_A_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, ddr4_A_deburster_inShim_wff$D_OUT } ;
  assign ddr4_A_deburster_inSerial_shim_wff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeW ?
	       ddr4_A_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       ddr4_A_deburster_inSerial_shim_wff_rv ;
  assign ddr4_A_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_write_req ?
	       578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_A_deburster_inSerial_shim_wff_rv$port1__read ;
  assign ddr4_A_deburster_inSerial_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_ddr4_A_deburster_handle_write_rsp &&
	     ddr4_A_deburster_countWriteRspFF_first__4_ULE__ETC___d96 ;
  assign ddr4_A_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, ddr4_A_deburster_outShim_bff$D_OUT } ;
  assign ddr4_A_deburster_inSerial_shim_bff_rv$port1__read =
	     ddr4_A_deburster_inSerial_shim_bff_rv$EN_port0__write ?
	       ddr4_A_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       ddr4_A_deburster_inSerial_shim_bff_rv ;
  assign ddr4_A_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeB ?
	       19'd174762 :
	       ddr4_A_deburster_inSerial_shim_bff_rv$port1__read ;
  assign ddr4_A_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, ddr4_A_deburster_inShim_arff$D_OUT } ;
  assign ddr4_A_deburster_inSerial_shim_arff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAR ?
	       ddr4_A_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       ddr4_A_deburster_inSerial_shim_arff_rv ;
  assign ddr4_A_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_ddr4_A_deburster_forward_read_req &&
	     ddr4_A_deburster_readsSent_port0__read__18_EQ__ETC___d129 ;
  assign ddr4_A_deburster_inSerial_shim_arff_rv$port2__read =
	     ddr4_A_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_A_deburster_inSerial_shim_arff_rv$port1__read ;
  assign ddr4_A_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       ddr4_A_deburster_outShim_rff$D_OUT[530:1],
	       ddr4_A_deburster_lastReadRspFF$D_OUT } ;
  assign ddr4_A_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_read_rsp ?
	       ddr4_A_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       ddr4_A_deburster_inSerial_shim_rff_rv ;
  assign ddr4_A_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeR ?
	       532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_A_deburster_inSerial_shim_rff_rv$port1__read ;
  assign ddr4_A_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAR ;
  assign ddr4_A_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAW ? 2'd1 : 2'd2 ;
  assign ddr4_A_deburster_inSerial_state$port1__read =
	     ddr4_A_deburster_inSerial_state$EN_port0__write ?
	       ddr4_A_deburster_inSerial_state$port0__write_1 :
	       ddr4_A_deburster_inSerial_state ;
  assign ddr4_A_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeW &&
	     ddr4_A_deburster_inShim_wff$D_OUT[0] ||
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeR &&
	     ddr4_A_deburster_inSerial_shim_rff_rv$port1__read[0] ||
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeB ;
  assign ddr4_A_deburster_inSerial_state$port1__write_1 =
	     (MUX_ddr4_A_deburster_inSerial_state$port1__write_1__SEL_1 ||
	      WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign ddr4_A_deburster_inSerial_state$port2__read =
	     ddr4_A_deburster_inSerial_state$EN_port1__write ?
	       ddr4_A_deburster_inSerial_state$port1__write_1 :
	       ddr4_A_deburster_inSerial_state$port1__read ;
  assign ddr4_A_deburster_writesSent$port0__write_1 =
	     ddr4_A_deburster_inSerial_shim_wff_rv$port1__read[0] ?
	       8'd0 :
	       x1__h8884 ;
  assign ddr4_A_deburster_writesSent$port1__read =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_write_req ?
	       ddr4_A_deburster_writesSent$port0__write_1 :
	       ddr4_A_deburster_writesSent ;
  assign ddr4_A_deburster_readsSent$port0__write_1 =
	     ddr4_A_deburster_readsSent_port0__read__18_EQ__ETC___d129 ?
	       8'd0 :
	       x1__h9610 ;
  assign ddr4_A_deburster_readsSent$port1__read =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_read_req ?
	       ddr4_A_deburster_readsSent$port0__write_1 :
	       ddr4_A_deburster_readsSent ;
  assign ddr4_A_deburster_flitReceived$port0__write_1 =
	     ddr4_A_deburster_countWriteRspFF_first__4_ULE__ETC___d96 ?
	       8'd0 :
	       x1__h9025 ;
  assign ddr4_A_deburster_flitReceived$port1__read =
	     CAN_FIRE_RL_ddr4_A_deburster_handle_write_rsp ?
	       ddr4_A_deburster_flitReceived$port0__write_1 :
	       ddr4_A_deburster_flitReceived ;
  assign ddr4_B_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, ddr4_B_deburster_inShim_awff$D_OUT } ;
  assign ddr4_B_deburster_inSerial_shim_awff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAW ?
	       ddr4_B_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       ddr4_B_deburster_inSerial_shim_awff_rv ;
  assign ddr4_B_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_ddr4_B_deburster_forward_write_req &&
	     ddr4_B_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign ddr4_B_deburster_inSerial_shim_awff_rv$port2__read =
	     ddr4_B_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_B_deburster_inSerial_shim_awff_rv$port1__read ;
  assign ddr4_B_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, ddr4_B_deburster_inShim_wff$D_OUT } ;
  assign ddr4_B_deburster_inSerial_shim_wff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeW ?
	       ddr4_B_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       ddr4_B_deburster_inSerial_shim_wff_rv ;
  assign ddr4_B_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_write_req ?
	       578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_B_deburster_inSerial_shim_wff_rv$port1__read ;
  assign ddr4_B_deburster_inSerial_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_ddr4_B_deburster_handle_write_rsp &&
	     ddr4_B_deburster_countWriteRspFF_first__32_ULE_ETC___d234 ;
  assign ddr4_B_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, ddr4_B_deburster_outShim_bff$D_OUT } ;
  assign ddr4_B_deburster_inSerial_shim_bff_rv$port1__read =
	     ddr4_B_deburster_inSerial_shim_bff_rv$EN_port0__write ?
	       ddr4_B_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       ddr4_B_deburster_inSerial_shim_bff_rv ;
  assign ddr4_B_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeB ?
	       19'd174762 :
	       ddr4_B_deburster_inSerial_shim_bff_rv$port1__read ;
  assign ddr4_B_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, ddr4_B_deburster_inShim_arff$D_OUT } ;
  assign ddr4_B_deburster_inSerial_shim_arff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAR ?
	       ddr4_B_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       ddr4_B_deburster_inSerial_shim_arff_rv ;
  assign ddr4_B_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_ddr4_B_deburster_forward_read_req &&
	     ddr4_B_deburster_readsSent_port0__read__56_EQ__ETC___d267 ;
  assign ddr4_B_deburster_inSerial_shim_arff_rv$port2__read =
	     ddr4_B_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_B_deburster_inSerial_shim_arff_rv$port1__read ;
  assign ddr4_B_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       ddr4_B_deburster_outShim_rff$D_OUT[530:1],
	       ddr4_B_deburster_lastReadRspFF$D_OUT } ;
  assign ddr4_B_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_read_rsp ?
	       ddr4_B_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       ddr4_B_deburster_inSerial_shim_rff_rv ;
  assign ddr4_B_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeR ?
	       532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_B_deburster_inSerial_shim_rff_rv$port1__read ;
  assign ddr4_B_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAR ;
  assign ddr4_B_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAW ? 2'd1 : 2'd2 ;
  assign ddr4_B_deburster_inSerial_state$port1__read =
	     ddr4_B_deburster_inSerial_state$EN_port0__write ?
	       ddr4_B_deburster_inSerial_state$port0__write_1 :
	       ddr4_B_deburster_inSerial_state ;
  assign ddr4_B_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeW &&
	     ddr4_B_deburster_inShim_wff$D_OUT[0] ||
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeR &&
	     ddr4_B_deburster_inSerial_shim_rff_rv$port1__read[0] ||
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeB ;
  assign ddr4_B_deburster_inSerial_state$port1__write_1 =
	     (MUX_ddr4_B_deburster_inSerial_state$port1__write_1__SEL_1 ||
	      WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign ddr4_B_deburster_inSerial_state$port2__read =
	     ddr4_B_deburster_inSerial_state$EN_port1__write ?
	       ddr4_B_deburster_inSerial_state$port1__write_1 :
	       ddr4_B_deburster_inSerial_state$port1__read ;
  assign ddr4_B_deburster_writesSent$port0__write_1 =
	     ddr4_B_deburster_inSerial_shim_wff_rv$port1__read[0] ?
	       8'd0 :
	       x1__h15265 ;
  assign ddr4_B_deburster_writesSent$port1__read =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_write_req ?
	       ddr4_B_deburster_writesSent$port0__write_1 :
	       ddr4_B_deburster_writesSent ;
  assign ddr4_B_deburster_readsSent$port0__write_1 =
	     ddr4_B_deburster_readsSent_port0__read__56_EQ__ETC___d267 ?
	       8'd0 :
	       x1__h15991 ;
  assign ddr4_B_deburster_readsSent$port1__read =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_read_req ?
	       ddr4_B_deburster_readsSent$port0__write_1 :
	       ddr4_B_deburster_readsSent ;
  assign ddr4_B_deburster_flitReceived$port0__write_1 =
	     ddr4_B_deburster_countWriteRspFF_first__32_ULE_ETC___d234 ?
	       8'd0 :
	       x1__h15406 ;
  assign ddr4_B_deburster_flitReceived$port1__read =
	     CAN_FIRE_RL_ddr4_B_deburster_handle_write_rsp ?
	       ddr4_B_deburster_flitReceived$port0__write_1 :
	       ddr4_B_deburster_flitReceived ;
  assign ddr4_C_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, ddr4_C_deburster_inShim_awff$D_OUT } ;
  assign ddr4_C_deburster_inSerial_shim_awff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAW ?
	       ddr4_C_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       ddr4_C_deburster_inSerial_shim_awff_rv ;
  assign ddr4_C_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_ddr4_C_deburster_forward_write_req &&
	     ddr4_C_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign ddr4_C_deburster_inSerial_shim_awff_rv$port2__read =
	     ddr4_C_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_C_deburster_inSerial_shim_awff_rv$port1__read ;
  assign ddr4_C_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, ddr4_C_deburster_inShim_wff$D_OUT } ;
  assign ddr4_C_deburster_inSerial_shim_wff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeW ?
	       ddr4_C_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       ddr4_C_deburster_inSerial_shim_wff_rv ;
  assign ddr4_C_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_write_req ?
	       578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_C_deburster_inSerial_shim_wff_rv$port1__read ;
  assign ddr4_C_deburster_inSerial_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_ddr4_C_deburster_handle_write_rsp &&
	     ddr4_C_deburster_countWriteRspFF_first__70_ULE_ETC___d372 ;
  assign ddr4_C_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, ddr4_C_deburster_outShim_bff$D_OUT } ;
  assign ddr4_C_deburster_inSerial_shim_bff_rv$port1__read =
	     ddr4_C_deburster_inSerial_shim_bff_rv$EN_port0__write ?
	       ddr4_C_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       ddr4_C_deburster_inSerial_shim_bff_rv ;
  assign ddr4_C_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeB ?
	       19'd174762 :
	       ddr4_C_deburster_inSerial_shim_bff_rv$port1__read ;
  assign ddr4_C_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, ddr4_C_deburster_inShim_arff$D_OUT } ;
  assign ddr4_C_deburster_inSerial_shim_arff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAR ?
	       ddr4_C_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       ddr4_C_deburster_inSerial_shim_arff_rv ;
  assign ddr4_C_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_ddr4_C_deburster_forward_read_req &&
	     ddr4_C_deburster_readsSent_port0__read__94_EQ__ETC___d405 ;
  assign ddr4_C_deburster_inSerial_shim_arff_rv$port2__read =
	     ddr4_C_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_C_deburster_inSerial_shim_arff_rv$port1__read ;
  assign ddr4_C_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       ddr4_C_deburster_outShim_rff$D_OUT[530:1],
	       ddr4_C_deburster_lastReadRspFF$D_OUT } ;
  assign ddr4_C_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_read_rsp ?
	       ddr4_C_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       ddr4_C_deburster_inSerial_shim_rff_rv ;
  assign ddr4_C_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeR ?
	       532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_C_deburster_inSerial_shim_rff_rv$port1__read ;
  assign ddr4_C_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAR ;
  assign ddr4_C_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAW ? 2'd1 : 2'd2 ;
  assign ddr4_C_deburster_inSerial_state$port1__read =
	     ddr4_C_deburster_inSerial_state$EN_port0__write ?
	       ddr4_C_deburster_inSerial_state$port0__write_1 :
	       ddr4_C_deburster_inSerial_state ;
  assign ddr4_C_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeW &&
	     ddr4_C_deburster_inShim_wff$D_OUT[0] ||
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeR &&
	     ddr4_C_deburster_inSerial_shim_rff_rv$port1__read[0] ||
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeB ;
  assign ddr4_C_deburster_inSerial_state$port1__write_1 =
	     (MUX_ddr4_C_deburster_inSerial_state$port1__write_1__SEL_1 ||
	      WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign ddr4_C_deburster_inSerial_state$port2__read =
	     ddr4_C_deburster_inSerial_state$EN_port1__write ?
	       ddr4_C_deburster_inSerial_state$port1__write_1 :
	       ddr4_C_deburster_inSerial_state$port1__read ;
  assign ddr4_C_deburster_writesSent$port0__write_1 =
	     ddr4_C_deburster_inSerial_shim_wff_rv$port1__read[0] ?
	       8'd0 :
	       x1__h21646 ;
  assign ddr4_C_deburster_writesSent$port1__read =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_write_req ?
	       ddr4_C_deburster_writesSent$port0__write_1 :
	       ddr4_C_deburster_writesSent ;
  assign ddr4_C_deburster_readsSent$port0__write_1 =
	     ddr4_C_deburster_readsSent_port0__read__94_EQ__ETC___d405 ?
	       8'd0 :
	       x1__h22372 ;
  assign ddr4_C_deburster_readsSent$port1__read =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_read_req ?
	       ddr4_C_deburster_readsSent$port0__write_1 :
	       ddr4_C_deburster_readsSent ;
  assign ddr4_C_deburster_flitReceived$port0__write_1 =
	     ddr4_C_deburster_countWriteRspFF_first__70_ULE_ETC___d372 ?
	       8'd0 :
	       x1__h21787 ;
  assign ddr4_C_deburster_flitReceived$port1__read =
	     CAN_FIRE_RL_ddr4_C_deburster_handle_write_rsp ?
	       ddr4_C_deburster_flitReceived$port0__write_1 :
	       ddr4_C_deburster_flitReceived ;
  assign ddr4_D_deburster_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, ddr4_D_deburster_inShim_awff$D_OUT } ;
  assign ddr4_D_deburster_inSerial_shim_awff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAW ?
	       ddr4_D_deburster_inSerial_shim_awff_rv$port0__write_1 :
	       ddr4_D_deburster_inSerial_shim_awff_rv ;
  assign ddr4_D_deburster_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_ddr4_D_deburster_forward_write_req &&
	     ddr4_D_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign ddr4_D_deburster_inSerial_shim_awff_rv$port2__read =
	     ddr4_D_deburster_inSerial_shim_awff_rv$EN_port1__write ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_D_deburster_inSerial_shim_awff_rv$port1__read ;
  assign ddr4_D_deburster_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, ddr4_D_deburster_inShim_wff$D_OUT } ;
  assign ddr4_D_deburster_inSerial_shim_wff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeW ?
	       ddr4_D_deburster_inSerial_shim_wff_rv$port0__write_1 :
	       ddr4_D_deburster_inSerial_shim_wff_rv ;
  assign ddr4_D_deburster_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_write_req ?
	       578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_D_deburster_inSerial_shim_wff_rv$port1__read ;
  assign ddr4_D_deburster_inSerial_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_ddr4_D_deburster_handle_write_rsp &&
	     ddr4_D_deburster_countWriteRspFF_first__08_ULE_ETC___d510 ;
  assign ddr4_D_deburster_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, ddr4_D_deburster_outShim_bff$D_OUT } ;
  assign ddr4_D_deburster_inSerial_shim_bff_rv$port1__read =
	     ddr4_D_deburster_inSerial_shim_bff_rv$EN_port0__write ?
	       ddr4_D_deburster_inSerial_shim_bff_rv$port0__write_1 :
	       ddr4_D_deburster_inSerial_shim_bff_rv ;
  assign ddr4_D_deburster_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeB ?
	       19'd174762 :
	       ddr4_D_deburster_inSerial_shim_bff_rv$port1__read ;
  assign ddr4_D_deburster_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, ddr4_D_deburster_inShim_arff$D_OUT } ;
  assign ddr4_D_deburster_inSerial_shim_arff_rv$port1__read =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAR ?
	       ddr4_D_deburster_inSerial_shim_arff_rv$port0__write_1 :
	       ddr4_D_deburster_inSerial_shim_arff_rv ;
  assign ddr4_D_deburster_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_ddr4_D_deburster_forward_read_req &&
	     ddr4_D_deburster_readsSent_port0__read__32_EQ__ETC___d543 ;
  assign ddr4_D_deburster_inSerial_shim_arff_rv$port2__read =
	     ddr4_D_deburster_inSerial_shim_arff_rv$EN_port1__write ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_D_deburster_inSerial_shim_arff_rv$port1__read ;
  assign ddr4_D_deburster_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       ddr4_D_deburster_outShim_rff$D_OUT[530:1],
	       ddr4_D_deburster_lastReadRspFF$D_OUT } ;
  assign ddr4_D_deburster_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_read_rsp ?
	       ddr4_D_deburster_inSerial_shim_rff_rv$port0__write_1 :
	       ddr4_D_deburster_inSerial_shim_rff_rv ;
  assign ddr4_D_deburster_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeR ?
	       532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ddr4_D_deburster_inSerial_shim_rff_rv$port1__read ;
  assign ddr4_D_deburster_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAR ;
  assign ddr4_D_deburster_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAW ? 2'd1 : 2'd2 ;
  assign ddr4_D_deburster_inSerial_state$port1__read =
	     ddr4_D_deburster_inSerial_state$EN_port0__write ?
	       ddr4_D_deburster_inSerial_state$port0__write_1 :
	       ddr4_D_deburster_inSerial_state ;
  assign ddr4_D_deburster_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeW &&
	     ddr4_D_deburster_inShim_wff$D_OUT[0] ||
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeR &&
	     ddr4_D_deburster_inSerial_shim_rff_rv$port1__read[0] ||
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeB ;
  assign ddr4_D_deburster_inSerial_state$port1__write_1 =
	     (MUX_ddr4_D_deburster_inSerial_state$port1__write_1__SEL_1 ||
	      WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign ddr4_D_deburster_inSerial_state$port2__read =
	     ddr4_D_deburster_inSerial_state$EN_port1__write ?
	       ddr4_D_deburster_inSerial_state$port1__write_1 :
	       ddr4_D_deburster_inSerial_state$port1__read ;
  assign ddr4_D_deburster_writesSent$port0__write_1 =
	     ddr4_D_deburster_inSerial_shim_wff_rv$port1__read[0] ?
	       8'd0 :
	       x1__h28027 ;
  assign ddr4_D_deburster_writesSent$port1__read =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_write_req ?
	       ddr4_D_deburster_writesSent$port0__write_1 :
	       ddr4_D_deburster_writesSent ;
  assign ddr4_D_deburster_readsSent$port0__write_1 =
	     ddr4_D_deburster_readsSent_port0__read__32_EQ__ETC___d543 ?
	       8'd0 :
	       x1__h28753 ;
  assign ddr4_D_deburster_readsSent$port1__read =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_read_req ?
	       ddr4_D_deburster_readsSent$port0__write_1 :
	       ddr4_D_deburster_readsSent ;
  assign ddr4_D_deburster_flitReceived$port0__write_1 =
	     ddr4_D_deburster_countWriteRspFF_first__08_ULE_ETC___d510 ?
	       8'd0 :
	       x1__h28168 ;
  assign ddr4_D_deburster_flitReceived$port1__read =
	     CAN_FIRE_RL_ddr4_D_deburster_handle_write_rsp ?
	       ddr4_D_deburster_flitReceived$port0__write_1 :
	       ddr4_D_deburster_flitReceived ;
  assign dma_pcis_xactor_shim_awff_rv$port0__write_1 =
	     { 1'd1, comms$fo_AXI4_Wr_Addr_i16_a64_u0_first[107:0] } ;
  assign dma_pcis_xactor_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_addr ?
	       dma_pcis_xactor_shim_awff_rv$port0__write_1 :
	       dma_pcis_xactor_shim_awff_rv ;
  assign dma_pcis_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_doDrop ?
	       109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dma_pcis_xactor_shim_awff_rv$port1__read ;
  assign dma_pcis_xactor_shim_awff_rv$port3__read =
	     dma_pcis_xactor_clearing ?
	       109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dma_pcis_xactor_shim_awff_rv$port2__read ;
  assign dma_pcis_xactor_shim_wff_rv$port0__write_1 =
	     { 1'd1, comms$fo_AXI4_Wr_Data_d512_u0_first } ;
  assign dma_pcis_xactor_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_data ?
	       dma_pcis_xactor_shim_wff_rv$port0__write_1 :
	       dma_pcis_xactor_shim_wff_rv ;
  assign dma_pcis_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_doDrop ?
	       578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dma_pcis_xactor_shim_wff_rv$port1__read ;
  assign dma_pcis_xactor_shim_wff_rv$port3__read =
	     dma_pcis_xactor_clearing ?
	       578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dma_pcis_xactor_shim_wff_rv$port2__read ;
  assign dma_pcis_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, dma_pcis_xactor_ug_master_u_b_putWire$wget } ;
  assign dma_pcis_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_b_doPut ?
	       dma_pcis_xactor_shim_bff_rv$port0__write_1 :
	       dma_pcis_xactor_shim_bff_rv ;
  assign dma_pcis_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_resp ?
	       18'd43690 :
	       dma_pcis_xactor_shim_bff_rv$port1__read ;
  assign dma_pcis_xactor_shim_bff_rv$port3__read =
	     dma_pcis_xactor_clearing ?
	       18'd43690 :
	       dma_pcis_xactor_shim_bff_rv$port2__read ;
  assign dma_pcis_xactor_shim_arff_rv$port0__write_1 =
	     { 1'd1, comms$fo_AXI4_Rd_Addr_i16_a64_u0_first[107:0] } ;
  assign dma_pcis_xactor_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_addr ?
	       dma_pcis_xactor_shim_arff_rv$port0__write_1 :
	       dma_pcis_xactor_shim_arff_rv ;
  assign dma_pcis_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_doDrop ?
	       109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dma_pcis_xactor_shim_arff_rv$port1__read ;
  assign dma_pcis_xactor_shim_arff_rv$port3__read =
	     dma_pcis_xactor_clearing ?
	       109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dma_pcis_xactor_shim_arff_rv$port2__read ;
  assign dma_pcis_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, dma_pcis_xactor_ug_master_u_r_putWire$wget } ;
  assign dma_pcis_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_r_doPut ?
	       dma_pcis_xactor_shim_rff_rv$port0__write_1 :
	       dma_pcis_xactor_shim_rff_rv ;
  assign dma_pcis_xactor_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_data ?
	       531'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dma_pcis_xactor_shim_rff_rv$port1__read ;
  assign dma_pcis_xactor_shim_rff_rv$port3__read =
	     dma_pcis_xactor_clearing ?
	       531'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       dma_pcis_xactor_shim_rff_rv$port2__read ;

  // register ddr4_A_deburster_flitReceived
  assign ddr4_A_deburster_flitReceived$D_IN =
	     ddr4_A_deburster_flitReceived$port1__read ;
  assign ddr4_A_deburster_flitReceived$EN = 1'b1 ;

  // register ddr4_A_deburster_inSerial_lastWasRead
  assign ddr4_A_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAW ;
  assign ddr4_A_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAR ;

  // register ddr4_A_deburster_inSerial_shim_arff_rv
  assign ddr4_A_deburster_inSerial_shim_arff_rv$D_IN =
	     ddr4_A_deburster_inSerial_shim_arff_rv$port2__read ;
  assign ddr4_A_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register ddr4_A_deburster_inSerial_shim_awff_rv
  assign ddr4_A_deburster_inSerial_shim_awff_rv$D_IN =
	     ddr4_A_deburster_inSerial_shim_awff_rv$port2__read ;
  assign ddr4_A_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register ddr4_A_deburster_inSerial_shim_bff_rv
  assign ddr4_A_deburster_inSerial_shim_bff_rv$D_IN =
	     ddr4_A_deburster_inSerial_shim_bff_rv$port2__read ;
  assign ddr4_A_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register ddr4_A_deburster_inSerial_shim_rff_rv
  assign ddr4_A_deburster_inSerial_shim_rff_rv$D_IN =
	     ddr4_A_deburster_inSerial_shim_rff_rv$port2__read ;
  assign ddr4_A_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register ddr4_A_deburster_inSerial_shim_wff_rv
  assign ddr4_A_deburster_inSerial_shim_wff_rv$D_IN =
	     ddr4_A_deburster_inSerial_shim_wff_rv$port2__read ;
  assign ddr4_A_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register ddr4_A_deburster_inSerial_state
  assign ddr4_A_deburster_inSerial_state$D_IN =
	     ddr4_A_deburster_inSerial_state$port2__read ;
  assign ddr4_A_deburster_inSerial_state$EN = 1'b1 ;

  // register ddr4_A_deburster_readsSent
  assign ddr4_A_deburster_readsSent$D_IN =
	     ddr4_A_deburster_readsSent$port1__read ;
  assign ddr4_A_deburster_readsSent$EN = 1'b1 ;

  // register ddr4_A_deburster_writesSent
  assign ddr4_A_deburster_writesSent$D_IN =
	     ddr4_A_deburster_writesSent$port1__read ;
  assign ddr4_A_deburster_writesSent$EN = 1'b1 ;

  // register ddr4_B_deburster_flitReceived
  assign ddr4_B_deburster_flitReceived$D_IN =
	     ddr4_B_deburster_flitReceived$port1__read ;
  assign ddr4_B_deburster_flitReceived$EN = 1'b1 ;

  // register ddr4_B_deburster_inSerial_lastWasRead
  assign ddr4_B_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAW ;
  assign ddr4_B_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAR ;

  // register ddr4_B_deburster_inSerial_shim_arff_rv
  assign ddr4_B_deburster_inSerial_shim_arff_rv$D_IN =
	     ddr4_B_deburster_inSerial_shim_arff_rv$port2__read ;
  assign ddr4_B_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register ddr4_B_deburster_inSerial_shim_awff_rv
  assign ddr4_B_deburster_inSerial_shim_awff_rv$D_IN =
	     ddr4_B_deburster_inSerial_shim_awff_rv$port2__read ;
  assign ddr4_B_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register ddr4_B_deburster_inSerial_shim_bff_rv
  assign ddr4_B_deburster_inSerial_shim_bff_rv$D_IN =
	     ddr4_B_deburster_inSerial_shim_bff_rv$port2__read ;
  assign ddr4_B_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register ddr4_B_deburster_inSerial_shim_rff_rv
  assign ddr4_B_deburster_inSerial_shim_rff_rv$D_IN =
	     ddr4_B_deburster_inSerial_shim_rff_rv$port2__read ;
  assign ddr4_B_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register ddr4_B_deburster_inSerial_shim_wff_rv
  assign ddr4_B_deburster_inSerial_shim_wff_rv$D_IN =
	     ddr4_B_deburster_inSerial_shim_wff_rv$port2__read ;
  assign ddr4_B_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register ddr4_B_deburster_inSerial_state
  assign ddr4_B_deburster_inSerial_state$D_IN =
	     ddr4_B_deburster_inSerial_state$port2__read ;
  assign ddr4_B_deburster_inSerial_state$EN = 1'b1 ;

  // register ddr4_B_deburster_readsSent
  assign ddr4_B_deburster_readsSent$D_IN =
	     ddr4_B_deburster_readsSent$port1__read ;
  assign ddr4_B_deburster_readsSent$EN = 1'b1 ;

  // register ddr4_B_deburster_writesSent
  assign ddr4_B_deburster_writesSent$D_IN =
	     ddr4_B_deburster_writesSent$port1__read ;
  assign ddr4_B_deburster_writesSent$EN = 1'b1 ;

  // register ddr4_C_deburster_flitReceived
  assign ddr4_C_deburster_flitReceived$D_IN =
	     ddr4_C_deburster_flitReceived$port1__read ;
  assign ddr4_C_deburster_flitReceived$EN = 1'b1 ;

  // register ddr4_C_deburster_inSerial_lastWasRead
  assign ddr4_C_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAW ;
  assign ddr4_C_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAR ;

  // register ddr4_C_deburster_inSerial_shim_arff_rv
  assign ddr4_C_deburster_inSerial_shim_arff_rv$D_IN =
	     ddr4_C_deburster_inSerial_shim_arff_rv$port2__read ;
  assign ddr4_C_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register ddr4_C_deburster_inSerial_shim_awff_rv
  assign ddr4_C_deburster_inSerial_shim_awff_rv$D_IN =
	     ddr4_C_deburster_inSerial_shim_awff_rv$port2__read ;
  assign ddr4_C_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register ddr4_C_deburster_inSerial_shim_bff_rv
  assign ddr4_C_deburster_inSerial_shim_bff_rv$D_IN =
	     ddr4_C_deburster_inSerial_shim_bff_rv$port2__read ;
  assign ddr4_C_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register ddr4_C_deburster_inSerial_shim_rff_rv
  assign ddr4_C_deburster_inSerial_shim_rff_rv$D_IN =
	     ddr4_C_deburster_inSerial_shim_rff_rv$port2__read ;
  assign ddr4_C_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register ddr4_C_deburster_inSerial_shim_wff_rv
  assign ddr4_C_deburster_inSerial_shim_wff_rv$D_IN =
	     ddr4_C_deburster_inSerial_shim_wff_rv$port2__read ;
  assign ddr4_C_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register ddr4_C_deburster_inSerial_state
  assign ddr4_C_deburster_inSerial_state$D_IN =
	     ddr4_C_deburster_inSerial_state$port2__read ;
  assign ddr4_C_deburster_inSerial_state$EN = 1'b1 ;

  // register ddr4_C_deburster_readsSent
  assign ddr4_C_deburster_readsSent$D_IN =
	     ddr4_C_deburster_readsSent$port1__read ;
  assign ddr4_C_deburster_readsSent$EN = 1'b1 ;

  // register ddr4_C_deburster_writesSent
  assign ddr4_C_deburster_writesSent$D_IN =
	     ddr4_C_deburster_writesSent$port1__read ;
  assign ddr4_C_deburster_writesSent$EN = 1'b1 ;

  // register ddr4_D_deburster_flitReceived
  assign ddr4_D_deburster_flitReceived$D_IN =
	     ddr4_D_deburster_flitReceived$port1__read ;
  assign ddr4_D_deburster_flitReceived$EN = 1'b1 ;

  // register ddr4_D_deburster_inSerial_lastWasRead
  assign ddr4_D_deburster_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAW ;
  assign ddr4_D_deburster_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAW ||
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAR ;

  // register ddr4_D_deburster_inSerial_shim_arff_rv
  assign ddr4_D_deburster_inSerial_shim_arff_rv$D_IN =
	     ddr4_D_deburster_inSerial_shim_arff_rv$port2__read ;
  assign ddr4_D_deburster_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register ddr4_D_deburster_inSerial_shim_awff_rv
  assign ddr4_D_deburster_inSerial_shim_awff_rv$D_IN =
	     ddr4_D_deburster_inSerial_shim_awff_rv$port2__read ;
  assign ddr4_D_deburster_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register ddr4_D_deburster_inSerial_shim_bff_rv
  assign ddr4_D_deburster_inSerial_shim_bff_rv$D_IN =
	     ddr4_D_deburster_inSerial_shim_bff_rv$port2__read ;
  assign ddr4_D_deburster_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register ddr4_D_deburster_inSerial_shim_rff_rv
  assign ddr4_D_deburster_inSerial_shim_rff_rv$D_IN =
	     ddr4_D_deburster_inSerial_shim_rff_rv$port2__read ;
  assign ddr4_D_deburster_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register ddr4_D_deburster_inSerial_shim_wff_rv
  assign ddr4_D_deburster_inSerial_shim_wff_rv$D_IN =
	     ddr4_D_deburster_inSerial_shim_wff_rv$port2__read ;
  assign ddr4_D_deburster_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register ddr4_D_deburster_inSerial_state
  assign ddr4_D_deburster_inSerial_state$D_IN =
	     ddr4_D_deburster_inSerial_state$port2__read ;
  assign ddr4_D_deburster_inSerial_state$EN = 1'b1 ;

  // register ddr4_D_deburster_readsSent
  assign ddr4_D_deburster_readsSent$D_IN =
	     ddr4_D_deburster_readsSent$port1__read ;
  assign ddr4_D_deburster_readsSent$EN = 1'b1 ;

  // register ddr4_D_deburster_writesSent
  assign ddr4_D_deburster_writesSent$D_IN =
	     ddr4_D_deburster_writesSent$port1__read ;
  assign ddr4_D_deburster_writesSent$EN = 1'b1 ;

  // register dma_pcis_xactor_clearing
  assign dma_pcis_xactor_clearing$D_IN = 1'd0 ;
  assign dma_pcis_xactor_clearing$EN = dma_pcis_xactor_clearing ;

  // register dma_pcis_xactor_shim_arff_rv
  assign dma_pcis_xactor_shim_arff_rv$D_IN =
	     dma_pcis_xactor_shim_arff_rv$port3__read ;
  assign dma_pcis_xactor_shim_arff_rv$EN = 1'b1 ;

  // register dma_pcis_xactor_shim_awff_rv
  assign dma_pcis_xactor_shim_awff_rv$D_IN =
	     dma_pcis_xactor_shim_awff_rv$port3__read ;
  assign dma_pcis_xactor_shim_awff_rv$EN = 1'b1 ;

  // register dma_pcis_xactor_shim_bff_rv
  assign dma_pcis_xactor_shim_bff_rv$D_IN =
	     dma_pcis_xactor_shim_bff_rv$port3__read ;
  assign dma_pcis_xactor_shim_bff_rv$EN = 1'b1 ;

  // register dma_pcis_xactor_shim_rff_rv
  assign dma_pcis_xactor_shim_rff_rv$D_IN =
	     dma_pcis_xactor_shim_rff_rv$port3__read ;
  assign dma_pcis_xactor_shim_rff_rv$EN = 1'b1 ;

  // register dma_pcis_xactor_shim_wff_rv
  assign dma_pcis_xactor_shim_wff_rv$D_IN =
	     dma_pcis_xactor_shim_wff_rv$port3__read ;
  assign dma_pcis_xactor_shim_wff_rv$EN = 1'b1 ;

  // register rg_AXI4_wr_data_beat
  assign rg_AXI4_wr_data_beat$D_IN =
	     comms$fo_AXI4_Wr_Data_d512_u0_first[0] ?
	       8'd0 :
	       rg_AXI4_wr_data_beat + 8'd1 ;
  assign rg_AXI4_wr_data_beat$EN = CAN_FIRE_RL_rl_connect_dma_pcis_wr_data ;

  // register rg_counter_4ns
  assign rg_counter_4ns$D_IN =
	     rg_counter_4ns +
	     64'b0000000000000000000000000000000000000000000000000000000000000101 ;
  assign rg_counter_4ns$EN = 1'd1 ;

  // register rg_last_vled
  assign rg_last_vled$D_IN = aws_BSV_top$m_vled ;
  assign rg_last_vled$EN = 1'd1 ;

  // register rg_state
  assign rg_state$D_IN = WILL_FIRE_RL_rl_connecting ? 2'd1 : 2'd2 ;
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_connecting ||
	     WILL_FIRE_RL_rl_start_when_connected ;

  // register rg_vdip
  assign rg_vdip$D_IN = 16'h0 ;
  assign rg_vdip$EN = 1'b0 ;

  // submodule aws_BSV_top
  assign aws_BSV_top$ddr4_A_master_arready =
	     ddr4_A_deburster_inShim_arff$FULL_N ;
  assign aws_BSV_top$ddr4_A_master_awready =
	     ddr4_A_deburster_inShim_awff$FULL_N ;
  assign aws_BSV_top$ddr4_A_master_bid =
	     ddr4_A_deburster_inShim_bff$D_OUT[17:2] ;
  assign aws_BSV_top$ddr4_A_master_bresp =
	     ddr4_A_deburster_inShim_bff$D_OUT[1:0] ;
  assign aws_BSV_top$ddr4_A_master_rdata =
	     ddr4_A_deburster_inShim_rff$D_OUT[514:3] ;
  assign aws_BSV_top$ddr4_A_master_rid =
	     ddr4_A_deburster_inShim_rff$D_OUT[530:515] ;
  assign aws_BSV_top$ddr4_A_master_rlast =
	     ddr4_A_deburster_inShim_rff$D_OUT[0] ;
  assign aws_BSV_top$ddr4_A_master_rresp =
	     ddr4_A_deburster_inShim_rff$D_OUT[2:1] ;
  assign aws_BSV_top$ddr4_A_master_wready =
	     ddr4_A_deburster_inShim_wff$FULL_N ;
  assign aws_BSV_top$ddr4_B_master_arready =
	     ddr4_B_deburster_inShim_arff$FULL_N ;
  assign aws_BSV_top$ddr4_B_master_awready =
	     ddr4_B_deburster_inShim_awff$FULL_N ;
  assign aws_BSV_top$ddr4_B_master_bid =
	     ddr4_B_deburster_inShim_bff$D_OUT[17:2] ;
  assign aws_BSV_top$ddr4_B_master_bresp =
	     ddr4_B_deburster_inShim_bff$D_OUT[1:0] ;
  assign aws_BSV_top$ddr4_B_master_rdata =
	     ddr4_B_deburster_inShim_rff$D_OUT[514:3] ;
  assign aws_BSV_top$ddr4_B_master_rid =
	     ddr4_B_deburster_inShim_rff$D_OUT[530:515] ;
  assign aws_BSV_top$ddr4_B_master_rlast =
	     ddr4_B_deburster_inShim_rff$D_OUT[0] ;
  assign aws_BSV_top$ddr4_B_master_rresp =
	     ddr4_B_deburster_inShim_rff$D_OUT[2:1] ;
  assign aws_BSV_top$ddr4_B_master_wready =
	     ddr4_B_deburster_inShim_wff$FULL_N ;
  assign aws_BSV_top$ddr4_C_master_arready =
	     ddr4_C_deburster_inShim_arff$FULL_N ;
  assign aws_BSV_top$ddr4_C_master_awready =
	     ddr4_C_deburster_inShim_awff$FULL_N ;
  assign aws_BSV_top$ddr4_C_master_bid =
	     ddr4_C_deburster_inShim_bff$D_OUT[17:2] ;
  assign aws_BSV_top$ddr4_C_master_bresp =
	     ddr4_C_deburster_inShim_bff$D_OUT[1:0] ;
  assign aws_BSV_top$ddr4_C_master_rdata =
	     ddr4_C_deburster_inShim_rff$D_OUT[514:3] ;
  assign aws_BSV_top$ddr4_C_master_rid =
	     ddr4_C_deburster_inShim_rff$D_OUT[530:515] ;
  assign aws_BSV_top$ddr4_C_master_rlast =
	     ddr4_C_deburster_inShim_rff$D_OUT[0] ;
  assign aws_BSV_top$ddr4_C_master_rresp =
	     ddr4_C_deburster_inShim_rff$D_OUT[2:1] ;
  assign aws_BSV_top$ddr4_C_master_wready =
	     ddr4_C_deburster_inShim_wff$FULL_N ;
  assign aws_BSV_top$ddr4_D_master_arready =
	     ddr4_D_deburster_inShim_arff$FULL_N ;
  assign aws_BSV_top$ddr4_D_master_awready =
	     ddr4_D_deburster_inShim_awff$FULL_N ;
  assign aws_BSV_top$ddr4_D_master_bid =
	     ddr4_D_deburster_inShim_bff$D_OUT[17:2] ;
  assign aws_BSV_top$ddr4_D_master_bresp =
	     ddr4_D_deburster_inShim_bff$D_OUT[1:0] ;
  assign aws_BSV_top$ddr4_D_master_rdata =
	     ddr4_D_deburster_inShim_rff$D_OUT[514:3] ;
  assign aws_BSV_top$ddr4_D_master_rid =
	     ddr4_D_deburster_inShim_rff$D_OUT[530:515] ;
  assign aws_BSV_top$ddr4_D_master_rlast =
	     ddr4_D_deburster_inShim_rff$D_OUT[0] ;
  assign aws_BSV_top$ddr4_D_master_rresp =
	     ddr4_D_deburster_inShim_rff$D_OUT[2:1] ;
  assign aws_BSV_top$ddr4_D_master_wready =
	     ddr4_D_deburster_inShim_wff$FULL_N ;
  assign aws_BSV_top$dma_pcis_slave_araddr =
	     dma_pcis_xactor_ug_master_u_ar_peekWire$wget[92:29] ;
  assign aws_BSV_top$dma_pcis_slave_arburst =
	     dma_pcis_xactor_ug_master_u_ar_peekWire$wget[17:16] ;
  assign aws_BSV_top$dma_pcis_slave_arcache =
	     dma_pcis_xactor_ug_master_u_ar_peekWire$wget[14:11] ;
  assign aws_BSV_top$dma_pcis_slave_arid =
	     dma_pcis_xactor_ug_master_u_ar_peekWire$wget[107:93] ;
  assign aws_BSV_top$dma_pcis_slave_arlen =
	     dma_pcis_xactor_ug_master_u_ar_peekWire$wget[28:21] ;
  assign aws_BSV_top$dma_pcis_slave_arlock =
	     dma_pcis_xactor_ug_master_u_ar_peekWire$wget[15] ;
  assign aws_BSV_top$dma_pcis_slave_arprot =
	     dma_pcis_xactor_ug_master_u_ar_peekWire$wget[10:8] ;
  assign aws_BSV_top$dma_pcis_slave_arqos =
	     dma_pcis_xactor_ug_master_u_ar_peekWire$wget[7:4] ;
  assign aws_BSV_top$dma_pcis_slave_arregion =
	     dma_pcis_xactor_ug_master_u_ar_peekWire$wget[3:0] ;
  assign aws_BSV_top$dma_pcis_slave_arsize =
	     dma_pcis_xactor_ug_master_u_ar_peekWire$wget[20:18] ;
  assign aws_BSV_top$dma_pcis_slave_awaddr =
	     dma_pcis_xactor_ug_master_u_aw_peekWire$wget[92:29] ;
  assign aws_BSV_top$dma_pcis_slave_awburst =
	     dma_pcis_xactor_ug_master_u_aw_peekWire$wget[17:16] ;
  assign aws_BSV_top$dma_pcis_slave_awcache =
	     dma_pcis_xactor_ug_master_u_aw_peekWire$wget[14:11] ;
  assign aws_BSV_top$dma_pcis_slave_awid =
	     dma_pcis_xactor_ug_master_u_aw_peekWire$wget[107:93] ;
  assign aws_BSV_top$dma_pcis_slave_awlen =
	     dma_pcis_xactor_ug_master_u_aw_peekWire$wget[28:21] ;
  assign aws_BSV_top$dma_pcis_slave_awlock =
	     dma_pcis_xactor_ug_master_u_aw_peekWire$wget[15] ;
  assign aws_BSV_top$dma_pcis_slave_awprot =
	     dma_pcis_xactor_ug_master_u_aw_peekWire$wget[10:8] ;
  assign aws_BSV_top$dma_pcis_slave_awqos =
	     dma_pcis_xactor_ug_master_u_aw_peekWire$wget[7:4] ;
  assign aws_BSV_top$dma_pcis_slave_awregion =
	     dma_pcis_xactor_ug_master_u_aw_peekWire$wget[3:0] ;
  assign aws_BSV_top$dma_pcis_slave_awsize =
	     dma_pcis_xactor_ug_master_u_aw_peekWire$wget[20:18] ;
  assign aws_BSV_top$dma_pcis_slave_bready =
	     !dma_pcis_xactor_shim_bff_rv[17] ;
  assign aws_BSV_top$dma_pcis_slave_rready =
	     !dma_pcis_xactor_shim_rff_rv[530] ;
  assign aws_BSV_top$dma_pcis_slave_wdata =
	     dma_pcis_xactor_ug_master_u_w_peekWire$wget[576:65] ;
  assign aws_BSV_top$dma_pcis_slave_wlast =
	     dma_pcis_xactor_ug_master_u_w_peekWire$wget[0] ;
  assign aws_BSV_top$dma_pcis_slave_wstrb =
	     dma_pcis_xactor_ug_master_u_w_peekWire$wget[64:1] ;
  assign aws_BSV_top$m_ddr4_ready_ddr4_A_B_C_D_ready = 4'd15 ;
  assign aws_BSV_top$m_glcount0_glcount0 = { 1'd0, rg_counter_4ns[63:1] } ;
  assign aws_BSV_top$m_glcount1_glcount1 = { 1'd0, rg_counter_4ns[63:1] } ;
  assign aws_BSV_top$m_vdip_vdip = rg_vdip ;
  assign aws_BSV_top$ocl_slave_ar_araddr = ocl_xactor_shim_arff$D_OUT[34:3] ;
  assign aws_BSV_top$ocl_slave_ar_arprot = ocl_xactor_shim_arff$D_OUT[2:0] ;
  assign aws_BSV_top$ocl_slave_aw_awaddr = ocl_xactor_shim_awff$D_OUT[34:3] ;
  assign aws_BSV_top$ocl_slave_aw_awprot = ocl_xactor_shim_awff$D_OUT[2:0] ;
  assign aws_BSV_top$ocl_slave_b_bready = ocl_xactor_shim_bff$FULL_N ;
  assign aws_BSV_top$ocl_slave_r_rready = ocl_xactor_shim_rff$FULL_N ;
  assign aws_BSV_top$ocl_slave_w_wdata = ocl_xactor_shim_wff$D_OUT[35:4] ;
  assign aws_BSV_top$ocl_slave_w_wstrb = ocl_xactor_shim_wff$D_OUT[3:0] ;
  assign aws_BSV_top$dma_pcis_slave_awvalid =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_setPeek ;
  assign aws_BSV_top$dma_pcis_slave_wvalid =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_w_setPeek ;
  assign aws_BSV_top$dma_pcis_slave_arvalid =
	     CAN_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_setPeek ;
  assign aws_BSV_top$ocl_slave_aw_awvalid = ocl_xactor_shim_awff$EMPTY_N ;
  assign aws_BSV_top$ocl_slave_w_wvalid = ocl_xactor_shim_wff$EMPTY_N ;
  assign aws_BSV_top$ocl_slave_ar_arvalid = ocl_xactor_shim_arff$EMPTY_N ;
  assign aws_BSV_top$ddr4_A_master_bvalid =
	     ddr4_A_deburster_inShim_bff$EMPTY_N ;
  assign aws_BSV_top$ddr4_A_master_rvalid =
	     ddr4_A_deburster_inShim_rff$EMPTY_N ;
  assign aws_BSV_top$ddr4_B_master_bvalid =
	     ddr4_B_deburster_inShim_bff$EMPTY_N ;
  assign aws_BSV_top$ddr4_B_master_rvalid =
	     ddr4_B_deburster_inShim_rff$EMPTY_N ;
  assign aws_BSV_top$ddr4_C_master_bvalid =
	     ddr4_C_deburster_inShim_bff$EMPTY_N ;
  assign aws_BSV_top$ddr4_C_master_rvalid =
	     ddr4_C_deburster_inShim_rff$EMPTY_N ;
  assign aws_BSV_top$ddr4_D_master_bvalid =
	     ddr4_D_deburster_inShim_bff$EMPTY_N ;
  assign aws_BSV_top$ddr4_D_master_rvalid =
	     ddr4_D_deburster_inShim_rff$EMPTY_N ;

  // submodule comms
  assign comms$fi_AXI4L_Rd_Data_d32_u0_enq_x = ocl_xactor_shim_rff$D_OUT ;
  assign comms$fi_AXI4L_Wr_Resp_u0_enq_x = ocl_xactor_shim_bff$D_OUT ;
  assign comms$fi_AXI4_Rd_Data_i16_d512_u0_enq_x =
	     { 1'd0, dma_pcis_xactor_shim_rff_rv$port1__read[529:0] } ;
  assign comms$fi_AXI4_Wr_Resp_i16_u0_enq_x =
	     { 1'd0, dma_pcis_xactor_shim_bff_rv$port1__read[16:0] } ;
  assign comms$fi_C_to_BSV_bytevec_enq_x = TASK_c_host_recv___d1171 ;
  assign comms$EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_addr ;
  assign comms$EN_fo_AXI4_Wr_Data_d512_u0_deq =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_data ;
  assign comms$EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_addr ;
  assign comms$EN_fo_AXI4L_Wr_Addr_a32_u0_deq =
	     CAN_FIRE_RL_rl_connect_ocl_wr_addr ;
  assign comms$EN_fo_AXI4L_Wr_Data_d32_deq =
	     CAN_FIRE_RL_rl_connect_ocl_wr_data ;
  assign comms$EN_fo_AXI4L_Rd_Addr_a32_u0_deq =
	     CAN_FIRE_RL_rl_connect_ocl_rd_addr ;
  assign comms$EN_fi_AXI4_Wr_Resp_i16_u0_enq =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_resp ;
  assign comms$EN_fi_AXI4_Rd_Data_i16_d512_u0_enq =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_data ;
  assign comms$EN_fi_AXI4L_Wr_Resp_u0_enq =
	     CAN_FIRE_RL_rl_connect_ocl_wr_resp ;
  assign comms$EN_fi_AXI4L_Rd_Data_d32_u0_enq =
	     CAN_FIRE_RL_rl_connect_ocl_rd_data ;
  assign comms$EN_fi_C_to_BSV_bytevec_enq =
	     WILL_FIRE_RL_rl_host_recv &&
	     TASK_c_host_recv___d1171[7:0] != 8'd0 ;
  assign comms$EN_fo_BSV_to_C_bytevec_deq = CAN_FIRE_RL_rl_host_send ;

  // submodule ddr4_A
  assign ddr4_A$araddr = ddr4_A_deburster_outShim_arff$D_OUT[92:29] ;
  assign ddr4_A$arburst = ddr4_A_deburster_outShim_arff$D_OUT[17:16] ;
  assign ddr4_A$arcache = ddr4_A_deburster_outShim_arff$D_OUT[14:11] ;
  assign ddr4_A$arid = ddr4_A_deburster_outShim_arff$D_OUT[108:93] ;
  assign ddr4_A$arlen = ddr4_A_deburster_outShim_arff$D_OUT[28:21] ;
  assign ddr4_A$arlock = ddr4_A_deburster_outShim_arff$D_OUT[15] ;
  assign ddr4_A$arprot = ddr4_A_deburster_outShim_arff$D_OUT[10:8] ;
  assign ddr4_A$arqos = ddr4_A_deburster_outShim_arff$D_OUT[7:4] ;
  assign ddr4_A$arregion = ddr4_A_deburster_outShim_arff$D_OUT[3:0] ;
  assign ddr4_A$arsize = ddr4_A_deburster_outShim_arff$D_OUT[20:18] ;
  assign ddr4_A$awaddr = ddr4_A_deburster_outShim_awff$D_OUT[92:29] ;
  assign ddr4_A$awburst = ddr4_A_deburster_outShim_awff$D_OUT[17:16] ;
  assign ddr4_A$awcache = ddr4_A_deburster_outShim_awff$D_OUT[14:11] ;
  assign ddr4_A$awid = ddr4_A_deburster_outShim_awff$D_OUT[108:93] ;
  assign ddr4_A$awlen = ddr4_A_deburster_outShim_awff$D_OUT[28:21] ;
  assign ddr4_A$awlock = ddr4_A_deburster_outShim_awff$D_OUT[15] ;
  assign ddr4_A$awprot = ddr4_A_deburster_outShim_awff$D_OUT[10:8] ;
  assign ddr4_A$awqos = ddr4_A_deburster_outShim_awff$D_OUT[7:4] ;
  assign ddr4_A$awregion = ddr4_A_deburster_outShim_awff$D_OUT[3:0] ;
  assign ddr4_A$awsize = ddr4_A_deburster_outShim_awff$D_OUT[20:18] ;
  assign ddr4_A$bready = ddr4_A_deburster_outShim_bff$FULL_N ;
  assign ddr4_A$rready = ddr4_A_deburster_outShim_rff$FULL_N ;
  assign ddr4_A$wdata = ddr4_A_deburster_outShim_wff$D_OUT[576:65] ;
  assign ddr4_A$wlast = ddr4_A_deburster_outShim_wff$D_OUT[0] ;
  assign ddr4_A$wstrb = ddr4_A_deburster_outShim_wff$D_OUT[64:1] ;
  assign ddr4_A$awvalid = ddr4_A_deburster_outShim_awff$EMPTY_N ;
  assign ddr4_A$wvalid = ddr4_A_deburster_outShim_wff$EMPTY_N ;
  assign ddr4_A$arvalid = ddr4_A_deburster_outShim_arff$EMPTY_N ;

  // submodule ddr4_A_deburster_countWriteRspFF
  assign ddr4_A_deburster_countWriteRspFF$D_IN =
	     ddr4_A_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign ddr4_A_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_ddr4_A_deburster_forward_write_req &&
	     ddr4_A_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign ddr4_A_deburster_countWriteRspFF$DEQ =
	     WILL_FIRE_RL_ddr4_A_deburster_handle_write_rsp &&
	     ddr4_A_deburster_countWriteRspFF_first__4_ULE__ETC___d96 ;
  assign ddr4_A_deburster_countWriteRspFF$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_inShim_arff
  assign ddr4_A_deburster_inShim_arff$D_IN =
	     { aws_BSV_top$ddr4_A_master_arid,
	       aws_BSV_top$ddr4_A_master_araddr,
	       aws_BSV_top$ddr4_A_master_arlen,
	       aws_BSV_top$ddr4_A_master_arsize,
	       aws_BSV_top$ddr4_A_master_arburst,
	       aws_BSV_top$ddr4_A_master_arlock,
	       aws_BSV_top$ddr4_A_master_arcache,
	       aws_BSV_top$ddr4_A_master_arprot,
	       aws_BSV_top$ddr4_A_master_arqos,
	       aws_BSV_top$ddr4_A_master_arregion } ;
  assign ddr4_A_deburster_inShim_arff$ENQ =
	     aws_BSV_top$ddr4_A_master_arvalid &&
	     ddr4_A_deburster_inShim_arff$FULL_N ;
  assign ddr4_A_deburster_inShim_arff$DEQ =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAR ;
  assign ddr4_A_deburster_inShim_arff$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_inShim_awff
  assign ddr4_A_deburster_inShim_awff$D_IN =
	     { aws_BSV_top$ddr4_A_master_awid,
	       aws_BSV_top$ddr4_A_master_awaddr,
	       aws_BSV_top$ddr4_A_master_awlen,
	       aws_BSV_top$ddr4_A_master_awsize,
	       aws_BSV_top$ddr4_A_master_awburst,
	       aws_BSV_top$ddr4_A_master_awlock,
	       aws_BSV_top$ddr4_A_master_awcache,
	       aws_BSV_top$ddr4_A_master_awprot,
	       aws_BSV_top$ddr4_A_master_awqos,
	       aws_BSV_top$ddr4_A_master_awregion } ;
  assign ddr4_A_deburster_inShim_awff$ENQ =
	     aws_BSV_top$ddr4_A_master_awvalid &&
	     ddr4_A_deburster_inShim_awff$FULL_N ;
  assign ddr4_A_deburster_inShim_awff$DEQ =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeAW ;
  assign ddr4_A_deburster_inShim_awff$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_inShim_bff
  assign ddr4_A_deburster_inShim_bff$D_IN =
	     ddr4_A_deburster_inSerial_shim_bff_rv$port1__read[17:0] ;
  assign ddr4_A_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeB ;
  assign ddr4_A_deburster_inShim_bff$DEQ =
	     ddr4_A_deburster_inShim_bff$EMPTY_N &&
	     aws_BSV_top$ddr4_A_master_bready ;
  assign ddr4_A_deburster_inShim_bff$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_inShim_rff
  assign ddr4_A_deburster_inShim_rff$D_IN =
	     ddr4_A_deburster_inSerial_shim_rff_rv$port1__read[530:0] ;
  assign ddr4_A_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_ddr4_A_deburster_inSerial_takeR ;
  assign ddr4_A_deburster_inShim_rff$DEQ =
	     ddr4_A_deburster_inShim_rff$EMPTY_N &&
	     aws_BSV_top$ddr4_A_master_rready ;
  assign ddr4_A_deburster_inShim_rff$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_inShim_wff
  assign ddr4_A_deburster_inShim_wff$D_IN =
	     { aws_BSV_top$ddr4_A_master_wdata,
	       aws_BSV_top$ddr4_A_master_wstrb,
	       aws_BSV_top$ddr4_A_master_wlast } ;
  assign ddr4_A_deburster_inShim_wff$ENQ =
	     aws_BSV_top$ddr4_A_master_wvalid &&
	     ddr4_A_deburster_inShim_wff$FULL_N ;
  assign ddr4_A_deburster_inShim_wff$DEQ =
	     WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeW ;
  assign ddr4_A_deburster_inShim_wff$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_lastReadRspFF
  assign ddr4_A_deburster_lastReadRspFF$D_IN =
	     ddr4_A_deburster_readsSent_port0__read__18_EQ__ETC___d129 ;
  assign ddr4_A_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_read_req ;
  assign ddr4_A_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_read_rsp ;
  assign ddr4_A_deburster_lastReadRspFF$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_outShim_arff
  assign ddr4_A_deburster_outShim_arff$D_IN =
	     { ddr4_A_deburster_inSerial_shim_arff_rv$port1__read[108:93],
	       x_araddr__h9259,
	       8'd0,
	       ddr4_A_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       ddr4_A_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign ddr4_A_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_read_req ;
  assign ddr4_A_deburster_outShim_arff$DEQ =
	     ddr4_A_deburster_outShim_arff$EMPTY_N && ddr4_A$arready ;
  assign ddr4_A_deburster_outShim_arff$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_outShim_awff
  assign ddr4_A_deburster_outShim_awff$D_IN =
	     { ddr4_A_deburster_inSerial_shim_awff_rv$port1__read[108:93],
	       x_awaddr__h8484,
	       8'd0,
	       ddr4_A_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       ddr4_A_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign ddr4_A_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_write_req ;
  assign ddr4_A_deburster_outShim_awff$DEQ =
	     ddr4_A_deburster_outShim_awff$EMPTY_N && ddr4_A$awready ;
  assign ddr4_A_deburster_outShim_awff$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_outShim_bff
  assign ddr4_A_deburster_outShim_bff$D_IN = { ddr4_A$bid, ddr4_A$bresp } ;
  assign ddr4_A_deburster_outShim_bff$ENQ =
	     ddr4_A$bvalid && ddr4_A_deburster_outShim_bff$FULL_N ;
  assign ddr4_A_deburster_outShim_bff$DEQ =
	     CAN_FIRE_RL_ddr4_A_deburster_handle_write_rsp ;
  assign ddr4_A_deburster_outShim_bff$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_outShim_rff
  assign ddr4_A_deburster_outShim_rff$D_IN =
	     { ddr4_A$rid, ddr4_A$rdata, ddr4_A$rresp, ddr4_A$rlast } ;
  assign ddr4_A_deburster_outShim_rff$ENQ =
	     ddr4_A$rvalid && ddr4_A_deburster_outShim_rff$FULL_N ;
  assign ddr4_A_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_read_rsp ;
  assign ddr4_A_deburster_outShim_rff$CLR = 1'b0 ;

  // submodule ddr4_A_deburster_outShim_wff
  assign ddr4_A_deburster_outShim_wff$D_IN =
	     { ddr4_A_deburster_inSerial_shim_wff_rv$port1__read[576:1],
	       1'd1 } ;
  assign ddr4_A_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_ddr4_A_deburster_forward_write_req ;
  assign ddr4_A_deburster_outShim_wff$DEQ =
	     ddr4_A_deburster_outShim_wff$EMPTY_N && ddr4_A$wready ;
  assign ddr4_A_deburster_outShim_wff$CLR = 1'b0 ;

  // submodule ddr4_B
  assign ddr4_B$araddr = ddr4_B_deburster_outShim_arff$D_OUT[92:29] ;
  assign ddr4_B$arburst = ddr4_B_deburster_outShim_arff$D_OUT[17:16] ;
  assign ddr4_B$arcache = ddr4_B_deburster_outShim_arff$D_OUT[14:11] ;
  assign ddr4_B$arid = ddr4_B_deburster_outShim_arff$D_OUT[108:93] ;
  assign ddr4_B$arlen = ddr4_B_deburster_outShim_arff$D_OUT[28:21] ;
  assign ddr4_B$arlock = ddr4_B_deburster_outShim_arff$D_OUT[15] ;
  assign ddr4_B$arprot = ddr4_B_deburster_outShim_arff$D_OUT[10:8] ;
  assign ddr4_B$arqos = ddr4_B_deburster_outShim_arff$D_OUT[7:4] ;
  assign ddr4_B$arregion = ddr4_B_deburster_outShim_arff$D_OUT[3:0] ;
  assign ddr4_B$arsize = ddr4_B_deburster_outShim_arff$D_OUT[20:18] ;
  assign ddr4_B$awaddr = ddr4_B_deburster_outShim_awff$D_OUT[92:29] ;
  assign ddr4_B$awburst = ddr4_B_deburster_outShim_awff$D_OUT[17:16] ;
  assign ddr4_B$awcache = ddr4_B_deburster_outShim_awff$D_OUT[14:11] ;
  assign ddr4_B$awid = ddr4_B_deburster_outShim_awff$D_OUT[108:93] ;
  assign ddr4_B$awlen = ddr4_B_deburster_outShim_awff$D_OUT[28:21] ;
  assign ddr4_B$awlock = ddr4_B_deburster_outShim_awff$D_OUT[15] ;
  assign ddr4_B$awprot = ddr4_B_deburster_outShim_awff$D_OUT[10:8] ;
  assign ddr4_B$awqos = ddr4_B_deburster_outShim_awff$D_OUT[7:4] ;
  assign ddr4_B$awregion = ddr4_B_deburster_outShim_awff$D_OUT[3:0] ;
  assign ddr4_B$awsize = ddr4_B_deburster_outShim_awff$D_OUT[20:18] ;
  assign ddr4_B$bready = ddr4_B_deburster_outShim_bff$FULL_N ;
  assign ddr4_B$rready = ddr4_B_deburster_outShim_rff$FULL_N ;
  assign ddr4_B$wdata = ddr4_B_deburster_outShim_wff$D_OUT[576:65] ;
  assign ddr4_B$wlast = ddr4_B_deburster_outShim_wff$D_OUT[0] ;
  assign ddr4_B$wstrb = ddr4_B_deburster_outShim_wff$D_OUT[64:1] ;
  assign ddr4_B$awvalid = ddr4_B_deburster_outShim_awff$EMPTY_N ;
  assign ddr4_B$wvalid = ddr4_B_deburster_outShim_wff$EMPTY_N ;
  assign ddr4_B$arvalid = ddr4_B_deburster_outShim_arff$EMPTY_N ;

  // submodule ddr4_B_deburster_countWriteRspFF
  assign ddr4_B_deburster_countWriteRspFF$D_IN =
	     ddr4_B_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign ddr4_B_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_ddr4_B_deburster_forward_write_req &&
	     ddr4_B_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign ddr4_B_deburster_countWriteRspFF$DEQ =
	     WILL_FIRE_RL_ddr4_B_deburster_handle_write_rsp &&
	     ddr4_B_deburster_countWriteRspFF_first__32_ULE_ETC___d234 ;
  assign ddr4_B_deburster_countWriteRspFF$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_inShim_arff
  assign ddr4_B_deburster_inShim_arff$D_IN =
	     { aws_BSV_top$ddr4_B_master_arid,
	       aws_BSV_top$ddr4_B_master_araddr,
	       aws_BSV_top$ddr4_B_master_arlen,
	       aws_BSV_top$ddr4_B_master_arsize,
	       aws_BSV_top$ddr4_B_master_arburst,
	       aws_BSV_top$ddr4_B_master_arlock,
	       aws_BSV_top$ddr4_B_master_arcache,
	       aws_BSV_top$ddr4_B_master_arprot,
	       aws_BSV_top$ddr4_B_master_arqos,
	       aws_BSV_top$ddr4_B_master_arregion } ;
  assign ddr4_B_deburster_inShim_arff$ENQ =
	     aws_BSV_top$ddr4_B_master_arvalid &&
	     ddr4_B_deburster_inShim_arff$FULL_N ;
  assign ddr4_B_deburster_inShim_arff$DEQ =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAR ;
  assign ddr4_B_deburster_inShim_arff$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_inShim_awff
  assign ddr4_B_deburster_inShim_awff$D_IN =
	     { aws_BSV_top$ddr4_B_master_awid,
	       aws_BSV_top$ddr4_B_master_awaddr,
	       aws_BSV_top$ddr4_B_master_awlen,
	       aws_BSV_top$ddr4_B_master_awsize,
	       aws_BSV_top$ddr4_B_master_awburst,
	       aws_BSV_top$ddr4_B_master_awlock,
	       aws_BSV_top$ddr4_B_master_awcache,
	       aws_BSV_top$ddr4_B_master_awprot,
	       aws_BSV_top$ddr4_B_master_awqos,
	       aws_BSV_top$ddr4_B_master_awregion } ;
  assign ddr4_B_deburster_inShim_awff$ENQ =
	     aws_BSV_top$ddr4_B_master_awvalid &&
	     ddr4_B_deburster_inShim_awff$FULL_N ;
  assign ddr4_B_deburster_inShim_awff$DEQ =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeAW ;
  assign ddr4_B_deburster_inShim_awff$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_inShim_bff
  assign ddr4_B_deburster_inShim_bff$D_IN =
	     ddr4_B_deburster_inSerial_shim_bff_rv$port1__read[17:0] ;
  assign ddr4_B_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeB ;
  assign ddr4_B_deburster_inShim_bff$DEQ =
	     ddr4_B_deburster_inShim_bff$EMPTY_N &&
	     aws_BSV_top$ddr4_B_master_bready ;
  assign ddr4_B_deburster_inShim_bff$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_inShim_rff
  assign ddr4_B_deburster_inShim_rff$D_IN =
	     ddr4_B_deburster_inSerial_shim_rff_rv$port1__read[530:0] ;
  assign ddr4_B_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_ddr4_B_deburster_inSerial_takeR ;
  assign ddr4_B_deburster_inShim_rff$DEQ =
	     ddr4_B_deburster_inShim_rff$EMPTY_N &&
	     aws_BSV_top$ddr4_B_master_rready ;
  assign ddr4_B_deburster_inShim_rff$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_inShim_wff
  assign ddr4_B_deburster_inShim_wff$D_IN =
	     { aws_BSV_top$ddr4_B_master_wdata,
	       aws_BSV_top$ddr4_B_master_wstrb,
	       aws_BSV_top$ddr4_B_master_wlast } ;
  assign ddr4_B_deburster_inShim_wff$ENQ =
	     aws_BSV_top$ddr4_B_master_wvalid &&
	     ddr4_B_deburster_inShim_wff$FULL_N ;
  assign ddr4_B_deburster_inShim_wff$DEQ =
	     WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeW ;
  assign ddr4_B_deburster_inShim_wff$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_lastReadRspFF
  assign ddr4_B_deburster_lastReadRspFF$D_IN =
	     ddr4_B_deburster_readsSent_port0__read__56_EQ__ETC___d267 ;
  assign ddr4_B_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_read_req ;
  assign ddr4_B_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_read_rsp ;
  assign ddr4_B_deburster_lastReadRspFF$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_outShim_arff
  assign ddr4_B_deburster_outShim_arff$D_IN =
	     { ddr4_B_deburster_inSerial_shim_arff_rv$port1__read[108:93],
	       x_araddr__h15640,
	       8'd0,
	       ddr4_B_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       ddr4_B_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign ddr4_B_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_read_req ;
  assign ddr4_B_deburster_outShim_arff$DEQ =
	     ddr4_B_deburster_outShim_arff$EMPTY_N && ddr4_B$arready ;
  assign ddr4_B_deburster_outShim_arff$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_outShim_awff
  assign ddr4_B_deburster_outShim_awff$D_IN =
	     { ddr4_B_deburster_inSerial_shim_awff_rv$port1__read[108:93],
	       x_awaddr__h14871,
	       8'd0,
	       ddr4_B_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       ddr4_B_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign ddr4_B_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_write_req ;
  assign ddr4_B_deburster_outShim_awff$DEQ =
	     ddr4_B_deburster_outShim_awff$EMPTY_N && ddr4_B$awready ;
  assign ddr4_B_deburster_outShim_awff$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_outShim_bff
  assign ddr4_B_deburster_outShim_bff$D_IN = { ddr4_B$bid, ddr4_B$bresp } ;
  assign ddr4_B_deburster_outShim_bff$ENQ =
	     ddr4_B$bvalid && ddr4_B_deburster_outShim_bff$FULL_N ;
  assign ddr4_B_deburster_outShim_bff$DEQ =
	     CAN_FIRE_RL_ddr4_B_deburster_handle_write_rsp ;
  assign ddr4_B_deburster_outShim_bff$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_outShim_rff
  assign ddr4_B_deburster_outShim_rff$D_IN =
	     { ddr4_B$rid, ddr4_B$rdata, ddr4_B$rresp, ddr4_B$rlast } ;
  assign ddr4_B_deburster_outShim_rff$ENQ =
	     ddr4_B$rvalid && ddr4_B_deburster_outShim_rff$FULL_N ;
  assign ddr4_B_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_read_rsp ;
  assign ddr4_B_deburster_outShim_rff$CLR = 1'b0 ;

  // submodule ddr4_B_deburster_outShim_wff
  assign ddr4_B_deburster_outShim_wff$D_IN =
	     { ddr4_B_deburster_inSerial_shim_wff_rv$port1__read[576:1],
	       1'd1 } ;
  assign ddr4_B_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_ddr4_B_deburster_forward_write_req ;
  assign ddr4_B_deburster_outShim_wff$DEQ =
	     ddr4_B_deburster_outShim_wff$EMPTY_N && ddr4_B$wready ;
  assign ddr4_B_deburster_outShim_wff$CLR = 1'b0 ;

  // submodule ddr4_C
  assign ddr4_C$araddr = ddr4_C_deburster_outShim_arff$D_OUT[92:29] ;
  assign ddr4_C$arburst = ddr4_C_deburster_outShim_arff$D_OUT[17:16] ;
  assign ddr4_C$arcache = ddr4_C_deburster_outShim_arff$D_OUT[14:11] ;
  assign ddr4_C$arid = ddr4_C_deburster_outShim_arff$D_OUT[108:93] ;
  assign ddr4_C$arlen = ddr4_C_deburster_outShim_arff$D_OUT[28:21] ;
  assign ddr4_C$arlock = ddr4_C_deburster_outShim_arff$D_OUT[15] ;
  assign ddr4_C$arprot = ddr4_C_deburster_outShim_arff$D_OUT[10:8] ;
  assign ddr4_C$arqos = ddr4_C_deburster_outShim_arff$D_OUT[7:4] ;
  assign ddr4_C$arregion = ddr4_C_deburster_outShim_arff$D_OUT[3:0] ;
  assign ddr4_C$arsize = ddr4_C_deburster_outShim_arff$D_OUT[20:18] ;
  assign ddr4_C$awaddr = ddr4_C_deburster_outShim_awff$D_OUT[92:29] ;
  assign ddr4_C$awburst = ddr4_C_deburster_outShim_awff$D_OUT[17:16] ;
  assign ddr4_C$awcache = ddr4_C_deburster_outShim_awff$D_OUT[14:11] ;
  assign ddr4_C$awid = ddr4_C_deburster_outShim_awff$D_OUT[108:93] ;
  assign ddr4_C$awlen = ddr4_C_deburster_outShim_awff$D_OUT[28:21] ;
  assign ddr4_C$awlock = ddr4_C_deburster_outShim_awff$D_OUT[15] ;
  assign ddr4_C$awprot = ddr4_C_deburster_outShim_awff$D_OUT[10:8] ;
  assign ddr4_C$awqos = ddr4_C_deburster_outShim_awff$D_OUT[7:4] ;
  assign ddr4_C$awregion = ddr4_C_deburster_outShim_awff$D_OUT[3:0] ;
  assign ddr4_C$awsize = ddr4_C_deburster_outShim_awff$D_OUT[20:18] ;
  assign ddr4_C$bready = ddr4_C_deburster_outShim_bff$FULL_N ;
  assign ddr4_C$rready = ddr4_C_deburster_outShim_rff$FULL_N ;
  assign ddr4_C$wdata = ddr4_C_deburster_outShim_wff$D_OUT[576:65] ;
  assign ddr4_C$wlast = ddr4_C_deburster_outShim_wff$D_OUT[0] ;
  assign ddr4_C$wstrb = ddr4_C_deburster_outShim_wff$D_OUT[64:1] ;
  assign ddr4_C$awvalid = ddr4_C_deburster_outShim_awff$EMPTY_N ;
  assign ddr4_C$wvalid = ddr4_C_deburster_outShim_wff$EMPTY_N ;
  assign ddr4_C$arvalid = ddr4_C_deburster_outShim_arff$EMPTY_N ;

  // submodule ddr4_C_deburster_countWriteRspFF
  assign ddr4_C_deburster_countWriteRspFF$D_IN =
	     ddr4_C_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign ddr4_C_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_ddr4_C_deburster_forward_write_req &&
	     ddr4_C_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign ddr4_C_deburster_countWriteRspFF$DEQ =
	     WILL_FIRE_RL_ddr4_C_deburster_handle_write_rsp &&
	     ddr4_C_deburster_countWriteRspFF_first__70_ULE_ETC___d372 ;
  assign ddr4_C_deburster_countWriteRspFF$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_inShim_arff
  assign ddr4_C_deburster_inShim_arff$D_IN =
	     { aws_BSV_top$ddr4_C_master_arid,
	       aws_BSV_top$ddr4_C_master_araddr,
	       aws_BSV_top$ddr4_C_master_arlen,
	       aws_BSV_top$ddr4_C_master_arsize,
	       aws_BSV_top$ddr4_C_master_arburst,
	       aws_BSV_top$ddr4_C_master_arlock,
	       aws_BSV_top$ddr4_C_master_arcache,
	       aws_BSV_top$ddr4_C_master_arprot,
	       aws_BSV_top$ddr4_C_master_arqos,
	       aws_BSV_top$ddr4_C_master_arregion } ;
  assign ddr4_C_deburster_inShim_arff$ENQ =
	     aws_BSV_top$ddr4_C_master_arvalid &&
	     ddr4_C_deburster_inShim_arff$FULL_N ;
  assign ddr4_C_deburster_inShim_arff$DEQ =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAR ;
  assign ddr4_C_deburster_inShim_arff$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_inShim_awff
  assign ddr4_C_deburster_inShim_awff$D_IN =
	     { aws_BSV_top$ddr4_C_master_awid,
	       aws_BSV_top$ddr4_C_master_awaddr,
	       aws_BSV_top$ddr4_C_master_awlen,
	       aws_BSV_top$ddr4_C_master_awsize,
	       aws_BSV_top$ddr4_C_master_awburst,
	       aws_BSV_top$ddr4_C_master_awlock,
	       aws_BSV_top$ddr4_C_master_awcache,
	       aws_BSV_top$ddr4_C_master_awprot,
	       aws_BSV_top$ddr4_C_master_awqos,
	       aws_BSV_top$ddr4_C_master_awregion } ;
  assign ddr4_C_deburster_inShim_awff$ENQ =
	     aws_BSV_top$ddr4_C_master_awvalid &&
	     ddr4_C_deburster_inShim_awff$FULL_N ;
  assign ddr4_C_deburster_inShim_awff$DEQ =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeAW ;
  assign ddr4_C_deburster_inShim_awff$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_inShim_bff
  assign ddr4_C_deburster_inShim_bff$D_IN =
	     ddr4_C_deburster_inSerial_shim_bff_rv$port1__read[17:0] ;
  assign ddr4_C_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeB ;
  assign ddr4_C_deburster_inShim_bff$DEQ =
	     ddr4_C_deburster_inShim_bff$EMPTY_N &&
	     aws_BSV_top$ddr4_C_master_bready ;
  assign ddr4_C_deburster_inShim_bff$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_inShim_rff
  assign ddr4_C_deburster_inShim_rff$D_IN =
	     ddr4_C_deburster_inSerial_shim_rff_rv$port1__read[530:0] ;
  assign ddr4_C_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_ddr4_C_deburster_inSerial_takeR ;
  assign ddr4_C_deburster_inShim_rff$DEQ =
	     ddr4_C_deburster_inShim_rff$EMPTY_N &&
	     aws_BSV_top$ddr4_C_master_rready ;
  assign ddr4_C_deburster_inShim_rff$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_inShim_wff
  assign ddr4_C_deburster_inShim_wff$D_IN =
	     { aws_BSV_top$ddr4_C_master_wdata,
	       aws_BSV_top$ddr4_C_master_wstrb,
	       aws_BSV_top$ddr4_C_master_wlast } ;
  assign ddr4_C_deburster_inShim_wff$ENQ =
	     aws_BSV_top$ddr4_C_master_wvalid &&
	     ddr4_C_deburster_inShim_wff$FULL_N ;
  assign ddr4_C_deburster_inShim_wff$DEQ =
	     WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeW ;
  assign ddr4_C_deburster_inShim_wff$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_lastReadRspFF
  assign ddr4_C_deburster_lastReadRspFF$D_IN =
	     ddr4_C_deburster_readsSent_port0__read__94_EQ__ETC___d405 ;
  assign ddr4_C_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_read_req ;
  assign ddr4_C_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_read_rsp ;
  assign ddr4_C_deburster_lastReadRspFF$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_outShim_arff
  assign ddr4_C_deburster_outShim_arff$D_IN =
	     { ddr4_C_deburster_inSerial_shim_arff_rv$port1__read[108:93],
	       x_araddr__h22021,
	       8'd0,
	       ddr4_C_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       ddr4_C_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign ddr4_C_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_read_req ;
  assign ddr4_C_deburster_outShim_arff$DEQ =
	     ddr4_C_deburster_outShim_arff$EMPTY_N && ddr4_C$arready ;
  assign ddr4_C_deburster_outShim_arff$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_outShim_awff
  assign ddr4_C_deburster_outShim_awff$D_IN =
	     { ddr4_C_deburster_inSerial_shim_awff_rv$port1__read[108:93],
	       x_awaddr__h21252,
	       8'd0,
	       ddr4_C_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       ddr4_C_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign ddr4_C_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_write_req ;
  assign ddr4_C_deburster_outShim_awff$DEQ =
	     ddr4_C_deburster_outShim_awff$EMPTY_N && ddr4_C$awready ;
  assign ddr4_C_deburster_outShim_awff$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_outShim_bff
  assign ddr4_C_deburster_outShim_bff$D_IN = { ddr4_C$bid, ddr4_C$bresp } ;
  assign ddr4_C_deburster_outShim_bff$ENQ =
	     ddr4_C$bvalid && ddr4_C_deburster_outShim_bff$FULL_N ;
  assign ddr4_C_deburster_outShim_bff$DEQ =
	     CAN_FIRE_RL_ddr4_C_deburster_handle_write_rsp ;
  assign ddr4_C_deburster_outShim_bff$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_outShim_rff
  assign ddr4_C_deburster_outShim_rff$D_IN =
	     { ddr4_C$rid, ddr4_C$rdata, ddr4_C$rresp, ddr4_C$rlast } ;
  assign ddr4_C_deburster_outShim_rff$ENQ =
	     ddr4_C$rvalid && ddr4_C_deburster_outShim_rff$FULL_N ;
  assign ddr4_C_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_read_rsp ;
  assign ddr4_C_deburster_outShim_rff$CLR = 1'b0 ;

  // submodule ddr4_C_deburster_outShim_wff
  assign ddr4_C_deburster_outShim_wff$D_IN =
	     { ddr4_C_deburster_inSerial_shim_wff_rv$port1__read[576:1],
	       1'd1 } ;
  assign ddr4_C_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_ddr4_C_deburster_forward_write_req ;
  assign ddr4_C_deburster_outShim_wff$DEQ =
	     ddr4_C_deburster_outShim_wff$EMPTY_N && ddr4_C$wready ;
  assign ddr4_C_deburster_outShim_wff$CLR = 1'b0 ;

  // submodule ddr4_D
  assign ddr4_D$araddr = ddr4_D_deburster_outShim_arff$D_OUT[92:29] ;
  assign ddr4_D$arburst = ddr4_D_deburster_outShim_arff$D_OUT[17:16] ;
  assign ddr4_D$arcache = ddr4_D_deburster_outShim_arff$D_OUT[14:11] ;
  assign ddr4_D$arid = ddr4_D_deburster_outShim_arff$D_OUT[108:93] ;
  assign ddr4_D$arlen = ddr4_D_deburster_outShim_arff$D_OUT[28:21] ;
  assign ddr4_D$arlock = ddr4_D_deburster_outShim_arff$D_OUT[15] ;
  assign ddr4_D$arprot = ddr4_D_deburster_outShim_arff$D_OUT[10:8] ;
  assign ddr4_D$arqos = ddr4_D_deburster_outShim_arff$D_OUT[7:4] ;
  assign ddr4_D$arregion = ddr4_D_deburster_outShim_arff$D_OUT[3:0] ;
  assign ddr4_D$arsize = ddr4_D_deburster_outShim_arff$D_OUT[20:18] ;
  assign ddr4_D$awaddr = ddr4_D_deburster_outShim_awff$D_OUT[92:29] ;
  assign ddr4_D$awburst = ddr4_D_deburster_outShim_awff$D_OUT[17:16] ;
  assign ddr4_D$awcache = ddr4_D_deburster_outShim_awff$D_OUT[14:11] ;
  assign ddr4_D$awid = ddr4_D_deburster_outShim_awff$D_OUT[108:93] ;
  assign ddr4_D$awlen = ddr4_D_deburster_outShim_awff$D_OUT[28:21] ;
  assign ddr4_D$awlock = ddr4_D_deburster_outShim_awff$D_OUT[15] ;
  assign ddr4_D$awprot = ddr4_D_deburster_outShim_awff$D_OUT[10:8] ;
  assign ddr4_D$awqos = ddr4_D_deburster_outShim_awff$D_OUT[7:4] ;
  assign ddr4_D$awregion = ddr4_D_deburster_outShim_awff$D_OUT[3:0] ;
  assign ddr4_D$awsize = ddr4_D_deburster_outShim_awff$D_OUT[20:18] ;
  assign ddr4_D$bready = ddr4_D_deburster_outShim_bff$FULL_N ;
  assign ddr4_D$rready = ddr4_D_deburster_outShim_rff$FULL_N ;
  assign ddr4_D$wdata = ddr4_D_deburster_outShim_wff$D_OUT[576:65] ;
  assign ddr4_D$wlast = ddr4_D_deburster_outShim_wff$D_OUT[0] ;
  assign ddr4_D$wstrb = ddr4_D_deburster_outShim_wff$D_OUT[64:1] ;
  assign ddr4_D$awvalid = ddr4_D_deburster_outShim_awff$EMPTY_N ;
  assign ddr4_D$wvalid = ddr4_D_deburster_outShim_wff$EMPTY_N ;
  assign ddr4_D$arvalid = ddr4_D_deburster_outShim_arff$EMPTY_N ;

  // submodule ddr4_D_deburster_countWriteRspFF
  assign ddr4_D_deburster_countWriteRspFF$D_IN =
	     ddr4_D_deburster_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign ddr4_D_deburster_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_ddr4_D_deburster_forward_write_req &&
	     ddr4_D_deburster_inSerial_shim_wff_rv$port1__read[0] ;
  assign ddr4_D_deburster_countWriteRspFF$DEQ =
	     WILL_FIRE_RL_ddr4_D_deburster_handle_write_rsp &&
	     ddr4_D_deburster_countWriteRspFF_first__08_ULE_ETC___d510 ;
  assign ddr4_D_deburster_countWriteRspFF$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_inShim_arff
  assign ddr4_D_deburster_inShim_arff$D_IN =
	     { aws_BSV_top$ddr4_D_master_arid,
	       aws_BSV_top$ddr4_D_master_araddr,
	       aws_BSV_top$ddr4_D_master_arlen,
	       aws_BSV_top$ddr4_D_master_arsize,
	       aws_BSV_top$ddr4_D_master_arburst,
	       aws_BSV_top$ddr4_D_master_arlock,
	       aws_BSV_top$ddr4_D_master_arcache,
	       aws_BSV_top$ddr4_D_master_arprot,
	       aws_BSV_top$ddr4_D_master_arqos,
	       aws_BSV_top$ddr4_D_master_arregion } ;
  assign ddr4_D_deburster_inShim_arff$ENQ =
	     aws_BSV_top$ddr4_D_master_arvalid &&
	     ddr4_D_deburster_inShim_arff$FULL_N ;
  assign ddr4_D_deburster_inShim_arff$DEQ =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAR ;
  assign ddr4_D_deburster_inShim_arff$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_inShim_awff
  assign ddr4_D_deburster_inShim_awff$D_IN =
	     { aws_BSV_top$ddr4_D_master_awid,
	       aws_BSV_top$ddr4_D_master_awaddr,
	       aws_BSV_top$ddr4_D_master_awlen,
	       aws_BSV_top$ddr4_D_master_awsize,
	       aws_BSV_top$ddr4_D_master_awburst,
	       aws_BSV_top$ddr4_D_master_awlock,
	       aws_BSV_top$ddr4_D_master_awcache,
	       aws_BSV_top$ddr4_D_master_awprot,
	       aws_BSV_top$ddr4_D_master_awqos,
	       aws_BSV_top$ddr4_D_master_awregion } ;
  assign ddr4_D_deburster_inShim_awff$ENQ =
	     aws_BSV_top$ddr4_D_master_awvalid &&
	     ddr4_D_deburster_inShim_awff$FULL_N ;
  assign ddr4_D_deburster_inShim_awff$DEQ =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeAW ;
  assign ddr4_D_deburster_inShim_awff$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_inShim_bff
  assign ddr4_D_deburster_inShim_bff$D_IN =
	     ddr4_D_deburster_inSerial_shim_bff_rv$port1__read[17:0] ;
  assign ddr4_D_deburster_inShim_bff$ENQ =
	     CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeB ;
  assign ddr4_D_deburster_inShim_bff$DEQ =
	     ddr4_D_deburster_inShim_bff$EMPTY_N &&
	     aws_BSV_top$ddr4_D_master_bready ;
  assign ddr4_D_deburster_inShim_bff$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_inShim_rff
  assign ddr4_D_deburster_inShim_rff$D_IN =
	     ddr4_D_deburster_inSerial_shim_rff_rv$port1__read[530:0] ;
  assign ddr4_D_deburster_inShim_rff$ENQ =
	     CAN_FIRE_RL_ddr4_D_deburster_inSerial_takeR ;
  assign ddr4_D_deburster_inShim_rff$DEQ =
	     ddr4_D_deburster_inShim_rff$EMPTY_N &&
	     aws_BSV_top$ddr4_D_master_rready ;
  assign ddr4_D_deburster_inShim_rff$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_inShim_wff
  assign ddr4_D_deburster_inShim_wff$D_IN =
	     { aws_BSV_top$ddr4_D_master_wdata,
	       aws_BSV_top$ddr4_D_master_wstrb,
	       aws_BSV_top$ddr4_D_master_wlast } ;
  assign ddr4_D_deburster_inShim_wff$ENQ =
	     aws_BSV_top$ddr4_D_master_wvalid &&
	     ddr4_D_deburster_inShim_wff$FULL_N ;
  assign ddr4_D_deburster_inShim_wff$DEQ =
	     WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeW ;
  assign ddr4_D_deburster_inShim_wff$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_lastReadRspFF
  assign ddr4_D_deburster_lastReadRspFF$D_IN =
	     ddr4_D_deburster_readsSent_port0__read__32_EQ__ETC___d543 ;
  assign ddr4_D_deburster_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_read_req ;
  assign ddr4_D_deburster_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_read_rsp ;
  assign ddr4_D_deburster_lastReadRspFF$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_outShim_arff
  assign ddr4_D_deburster_outShim_arff$D_IN =
	     { ddr4_D_deburster_inSerial_shim_arff_rv$port1__read[108:93],
	       x_araddr__h28402,
	       8'd0,
	       ddr4_D_deburster_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       ddr4_D_deburster_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign ddr4_D_deburster_outShim_arff$ENQ =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_read_req ;
  assign ddr4_D_deburster_outShim_arff$DEQ =
	     ddr4_D_deburster_outShim_arff$EMPTY_N && ddr4_D$arready ;
  assign ddr4_D_deburster_outShim_arff$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_outShim_awff
  assign ddr4_D_deburster_outShim_awff$D_IN =
	     { ddr4_D_deburster_inSerial_shim_awff_rv$port1__read[108:93],
	       x_awaddr__h27633,
	       8'd0,
	       ddr4_D_deburster_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       ddr4_D_deburster_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign ddr4_D_deburster_outShim_awff$ENQ =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_write_req ;
  assign ddr4_D_deburster_outShim_awff$DEQ =
	     ddr4_D_deburster_outShim_awff$EMPTY_N && ddr4_D$awready ;
  assign ddr4_D_deburster_outShim_awff$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_outShim_bff
  assign ddr4_D_deburster_outShim_bff$D_IN = { ddr4_D$bid, ddr4_D$bresp } ;
  assign ddr4_D_deburster_outShim_bff$ENQ =
	     ddr4_D$bvalid && ddr4_D_deburster_outShim_bff$FULL_N ;
  assign ddr4_D_deburster_outShim_bff$DEQ =
	     CAN_FIRE_RL_ddr4_D_deburster_handle_write_rsp ;
  assign ddr4_D_deburster_outShim_bff$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_outShim_rff
  assign ddr4_D_deburster_outShim_rff$D_IN =
	     { ddr4_D$rid, ddr4_D$rdata, ddr4_D$rresp, ddr4_D$rlast } ;
  assign ddr4_D_deburster_outShim_rff$ENQ =
	     ddr4_D$rvalid && ddr4_D_deburster_outShim_rff$FULL_N ;
  assign ddr4_D_deburster_outShim_rff$DEQ =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_read_rsp ;
  assign ddr4_D_deburster_outShim_rff$CLR = 1'b0 ;

  // submodule ddr4_D_deburster_outShim_wff
  assign ddr4_D_deburster_outShim_wff$D_IN =
	     { ddr4_D_deburster_inSerial_shim_wff_rv$port1__read[576:1],
	       1'd1 } ;
  assign ddr4_D_deburster_outShim_wff$ENQ =
	     CAN_FIRE_RL_ddr4_D_deburster_forward_write_req ;
  assign ddr4_D_deburster_outShim_wff$DEQ =
	     ddr4_D_deburster_outShim_wff$EMPTY_N && ddr4_D$wready ;
  assign ddr4_D_deburster_outShim_wff$CLR = 1'b0 ;

  // submodule ocl_xactor_shim_arff
  assign ocl_xactor_shim_arff$D_IN = comms$fo_AXI4L_Rd_Addr_a32_u0_first ;
  assign ocl_xactor_shim_arff$ENQ =
	     comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq &&
	     comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first &&
	     ocl_xactor_shim_arff$FULL_N ;
  assign ocl_xactor_shim_arff$DEQ =
	     ocl_xactor_shim_arff$EMPTY_N &&
	     ocl_xactor_u_master_u_ar_dropWire$whas ;
  assign ocl_xactor_shim_arff$CLR = 1'b0 ;

  // submodule ocl_xactor_shim_awff
  assign ocl_xactor_shim_awff$D_IN = comms$fo_AXI4L_Wr_Addr_a32_u0_first ;
  assign ocl_xactor_shim_awff$ENQ =
	     comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq &&
	     comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first &&
	     ocl_xactor_shim_awff$FULL_N ;
  assign ocl_xactor_shim_awff$DEQ =
	     ocl_xactor_shim_awff$EMPTY_N &&
	     ocl_xactor_u_master_u_aw_dropWire$whas ;
  assign ocl_xactor_shim_awff$CLR = 1'b0 ;

  // submodule ocl_xactor_shim_bff
  assign ocl_xactor_shim_bff$D_IN = aws_BSV_top$ocl_slave_b_bresp ;
  assign ocl_xactor_shim_bff$ENQ =
	     ocl_xactor_shim_bff$FULL_N && aws_BSV_top$ocl_slave_b_bvalid ;
  assign ocl_xactor_shim_bff$DEQ =
	     comms$RDY_fi_AXI4L_Wr_Resp_u0_enq &&
	     ocl_xactor_shim_bff$EMPTY_N ;
  assign ocl_xactor_shim_bff$CLR = 1'b0 ;

  // submodule ocl_xactor_shim_rff
  assign ocl_xactor_shim_rff$D_IN =
	     { aws_BSV_top$ocl_slave_r_rdata,
	       aws_BSV_top$ocl_slave_r_rresp } ;
  assign ocl_xactor_shim_rff$ENQ =
	     ocl_xactor_shim_rff$FULL_N && aws_BSV_top$ocl_slave_r_rvalid ;
  assign ocl_xactor_shim_rff$DEQ =
	     comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq &&
	     ocl_xactor_shim_rff$EMPTY_N ;
  assign ocl_xactor_shim_rff$CLR = 1'b0 ;

  // submodule ocl_xactor_shim_wff
  assign ocl_xactor_shim_wff$D_IN = comms$fo_AXI4L_Wr_Data_d32_first ;
  assign ocl_xactor_shim_wff$ENQ =
	     comms$RDY_fo_AXI4L_Wr_Data_d32_deq &&
	     comms$RDY_fo_AXI4L_Wr_Data_d32_first &&
	     ocl_xactor_shim_wff$FULL_N ;
  assign ocl_xactor_shim_wff$DEQ =
	     ocl_xactor_shim_wff$EMPTY_N &&
	     ocl_xactor_u_master_u_w_dropWire$whas ;
  assign ocl_xactor_shim_wff$CLR = 1'b0 ;

  // remaining internal signals
  assign ddr4_A_deburster_countWriteRspFF_first__4_ULE__ETC___d96 =
	     ddr4_A_deburster_countWriteRspFF$D_OUT <=
	     ddr4_A_deburster_flitReceived ;
  assign ddr4_A_deburster_readsSent_port0__read__18_EQ__ETC___d129 =
	     ddr4_A_deburster_readsSent ==
	     ddr4_A_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign ddr4_B_deburster_countWriteRspFF_first__32_ULE_ETC___d234 =
	     ddr4_B_deburster_countWriteRspFF$D_OUT <=
	     ddr4_B_deburster_flitReceived ;
  assign ddr4_B_deburster_readsSent_port0__read__56_EQ__ETC___d267 =
	     ddr4_B_deburster_readsSent ==
	     ddr4_B_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign ddr4_C_deburster_countWriteRspFF_first__70_ULE_ETC___d372 =
	     ddr4_C_deburster_countWriteRspFF$D_OUT <=
	     ddr4_C_deburster_flitReceived ;
  assign ddr4_C_deburster_readsSent_port0__read__94_EQ__ETC___d405 =
	     ddr4_C_deburster_readsSent ==
	     ddr4_C_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign ddr4_D_deburster_countWriteRspFF_first__08_ULE_ETC___d510 =
	     ddr4_D_deburster_countWriteRspFF$D_OUT <=
	     ddr4_D_deburster_flitReceived ;
  assign ddr4_D_deburster_readsSent_port0__read__32_EQ__ETC___d543 =
	     ddr4_D_deburster_readsSent ==
	     ddr4_D_deburster_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign x1__h15265 = ddr4_B_deburster_writesSent + 8'd1 ;
  assign x1__h15406 = ddr4_B_deburster_flitReceived + 8'd1 ;
  assign x1__h15991 = ddr4_B_deburster_readsSent + 8'd1 ;
  assign x1__h21646 = ddr4_C_deburster_writesSent + 8'd1 ;
  assign x1__h21787 = ddr4_C_deburster_flitReceived + 8'd1 ;
  assign x1__h22372 = ddr4_C_deburster_readsSent + 8'd1 ;
  assign x1__h28027 = ddr4_D_deburster_writesSent + 8'd1 ;
  assign x1__h28168 = ddr4_D_deburster_flitReceived + 8'd1 ;
  assign x1__h28753 = ddr4_D_deburster_readsSent + 8'd1 ;
  assign x1__h8884 = ddr4_A_deburster_writesSent + 8'd1 ;
  assign x1__h9025 = ddr4_A_deburster_flitReceived + 8'd1 ;
  assign x1__h9610 = ddr4_A_deburster_readsSent + 8'd1 ;
  assign x__h14991 = { 56'd0, ddr4_B_deburster_writesSent } ;
  assign x__h15760 = { 56'd0, ddr4_B_deburster_readsSent } ;
  assign x__h21372 = { 56'd0, ddr4_C_deburster_writesSent } ;
  assign x__h22141 = { 56'd0, ddr4_C_deburster_readsSent } ;
  assign x__h27753 = { 56'd0, ddr4_D_deburster_writesSent } ;
  assign x__h28522 = { 56'd0, ddr4_D_deburster_readsSent } ;
  assign x__h8608 = { 56'd0, ddr4_A_deburster_writesSent } ;
  assign x__h9379 = { 56'd0, ddr4_A_deburster_readsSent } ;
  assign x_araddr__h15640 =
	     (ddr4_B_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       ddr4_B_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h15748 :
	       ddr4_B_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_araddr__h22021 =
	     (ddr4_C_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       ddr4_C_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h22129 :
	       ddr4_C_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_araddr__h28402 =
	     (ddr4_D_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       ddr4_D_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h28510 :
	       ddr4_D_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_araddr__h9259 =
	     (ddr4_A_deburster_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       ddr4_A_deburster_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h9367 :
	       ddr4_A_deburster_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_awaddr__h14871 =
	     (ddr4_B_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       ddr4_B_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h14979 :
	       ddr4_B_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_awaddr__h21252 =
	     (ddr4_C_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       ddr4_C_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h21360 :
	       ddr4_C_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_awaddr__h27633 =
	     (ddr4_D_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       ddr4_D_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h27741 :
	       ddr4_D_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_awaddr__h8484 =
	     (ddr4_A_deburster_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       ddr4_A_deburster_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h8596 :
	       ddr4_A_deburster_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign y__h14979 =
	     x__h14991 <<
	     ddr4_B_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h15748 =
	     x__h15760 <<
	     ddr4_B_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h21360 =
	     x__h21372 <<
	     ddr4_C_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h22129 =
	     x__h22141 <<
	     ddr4_C_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h27741 =
	     x__h27753 <<
	     ddr4_D_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h28510 =
	     x__h28522 <<
	     ddr4_D_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h8596 =
	     x__h8608 <<
	     ddr4_A_deburster_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h9367 =
	     x__h9379 <<
	     ddr4_A_deburster_inSerial_shim_arff_rv$port1__read[20:18] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ddr4_A_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_A_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ddr4_A_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_A_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_A_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    19'd174762;
	ddr4_A_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_A_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_A_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ddr4_A_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_A_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_B_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_B_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ddr4_B_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_B_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_B_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    19'd174762;
	ddr4_B_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_B_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_B_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ddr4_B_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_B_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_C_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_C_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ddr4_C_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_C_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_C_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    19'd174762;
	ddr4_C_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_C_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_C_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ddr4_C_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_C_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_D_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_D_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ddr4_D_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_D_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_D_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    19'd174762;
	ddr4_D_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_D_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ddr4_D_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ddr4_D_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ddr4_D_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	dma_pcis_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	dma_pcis_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dma_pcis_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dma_pcis_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 18'd43690;
	dma_pcis_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    531'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	dma_pcis_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	rg_AXI4_wr_data_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_counter_4ns <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_last_vled <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_vdip <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (ddr4_A_deburster_flitReceived$EN)
	  ddr4_A_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      ddr4_A_deburster_flitReceived$D_IN;
	if (ddr4_A_deburster_inSerial_lastWasRead$EN)
	  ddr4_A_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      ddr4_A_deburster_inSerial_lastWasRead$D_IN;
	if (ddr4_A_deburster_inSerial_shim_arff_rv$EN)
	  ddr4_A_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_A_deburster_inSerial_shim_arff_rv$D_IN;
	if (ddr4_A_deburster_inSerial_shim_awff_rv$EN)
	  ddr4_A_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_A_deburster_inSerial_shim_awff_rv$D_IN;
	if (ddr4_A_deburster_inSerial_shim_bff_rv$EN)
	  ddr4_A_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_A_deburster_inSerial_shim_bff_rv$D_IN;
	if (ddr4_A_deburster_inSerial_shim_rff_rv$EN)
	  ddr4_A_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_A_deburster_inSerial_shim_rff_rv$D_IN;
	if (ddr4_A_deburster_inSerial_shim_wff_rv$EN)
	  ddr4_A_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_A_deburster_inSerial_shim_wff_rv$D_IN;
	if (ddr4_A_deburster_inSerial_state$EN)
	  ddr4_A_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      ddr4_A_deburster_inSerial_state$D_IN;
	if (ddr4_A_deburster_readsSent$EN)
	  ddr4_A_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      ddr4_A_deburster_readsSent$D_IN;
	if (ddr4_A_deburster_writesSent$EN)
	  ddr4_A_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      ddr4_A_deburster_writesSent$D_IN;
	if (ddr4_B_deburster_flitReceived$EN)
	  ddr4_B_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      ddr4_B_deburster_flitReceived$D_IN;
	if (ddr4_B_deburster_inSerial_lastWasRead$EN)
	  ddr4_B_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      ddr4_B_deburster_inSerial_lastWasRead$D_IN;
	if (ddr4_B_deburster_inSerial_shim_arff_rv$EN)
	  ddr4_B_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_B_deburster_inSerial_shim_arff_rv$D_IN;
	if (ddr4_B_deburster_inSerial_shim_awff_rv$EN)
	  ddr4_B_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_B_deburster_inSerial_shim_awff_rv$D_IN;
	if (ddr4_B_deburster_inSerial_shim_bff_rv$EN)
	  ddr4_B_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_B_deburster_inSerial_shim_bff_rv$D_IN;
	if (ddr4_B_deburster_inSerial_shim_rff_rv$EN)
	  ddr4_B_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_B_deburster_inSerial_shim_rff_rv$D_IN;
	if (ddr4_B_deburster_inSerial_shim_wff_rv$EN)
	  ddr4_B_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_B_deburster_inSerial_shim_wff_rv$D_IN;
	if (ddr4_B_deburster_inSerial_state$EN)
	  ddr4_B_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      ddr4_B_deburster_inSerial_state$D_IN;
	if (ddr4_B_deburster_readsSent$EN)
	  ddr4_B_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      ddr4_B_deburster_readsSent$D_IN;
	if (ddr4_B_deburster_writesSent$EN)
	  ddr4_B_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      ddr4_B_deburster_writesSent$D_IN;
	if (ddr4_C_deburster_flitReceived$EN)
	  ddr4_C_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      ddr4_C_deburster_flitReceived$D_IN;
	if (ddr4_C_deburster_inSerial_lastWasRead$EN)
	  ddr4_C_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      ddr4_C_deburster_inSerial_lastWasRead$D_IN;
	if (ddr4_C_deburster_inSerial_shim_arff_rv$EN)
	  ddr4_C_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_C_deburster_inSerial_shim_arff_rv$D_IN;
	if (ddr4_C_deburster_inSerial_shim_awff_rv$EN)
	  ddr4_C_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_C_deburster_inSerial_shim_awff_rv$D_IN;
	if (ddr4_C_deburster_inSerial_shim_bff_rv$EN)
	  ddr4_C_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_C_deburster_inSerial_shim_bff_rv$D_IN;
	if (ddr4_C_deburster_inSerial_shim_rff_rv$EN)
	  ddr4_C_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_C_deburster_inSerial_shim_rff_rv$D_IN;
	if (ddr4_C_deburster_inSerial_shim_wff_rv$EN)
	  ddr4_C_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_C_deburster_inSerial_shim_wff_rv$D_IN;
	if (ddr4_C_deburster_inSerial_state$EN)
	  ddr4_C_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      ddr4_C_deburster_inSerial_state$D_IN;
	if (ddr4_C_deburster_readsSent$EN)
	  ddr4_C_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      ddr4_C_deburster_readsSent$D_IN;
	if (ddr4_C_deburster_writesSent$EN)
	  ddr4_C_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      ddr4_C_deburster_writesSent$D_IN;
	if (ddr4_D_deburster_flitReceived$EN)
	  ddr4_D_deburster_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      ddr4_D_deburster_flitReceived$D_IN;
	if (ddr4_D_deburster_inSerial_lastWasRead$EN)
	  ddr4_D_deburster_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      ddr4_D_deburster_inSerial_lastWasRead$D_IN;
	if (ddr4_D_deburster_inSerial_shim_arff_rv$EN)
	  ddr4_D_deburster_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_D_deburster_inSerial_shim_arff_rv$D_IN;
	if (ddr4_D_deburster_inSerial_shim_awff_rv$EN)
	  ddr4_D_deburster_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_D_deburster_inSerial_shim_awff_rv$D_IN;
	if (ddr4_D_deburster_inSerial_shim_bff_rv$EN)
	  ddr4_D_deburster_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_D_deburster_inSerial_shim_bff_rv$D_IN;
	if (ddr4_D_deburster_inSerial_shim_rff_rv$EN)
	  ddr4_D_deburster_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_D_deburster_inSerial_shim_rff_rv$D_IN;
	if (ddr4_D_deburster_inSerial_shim_wff_rv$EN)
	  ddr4_D_deburster_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      ddr4_D_deburster_inSerial_shim_wff_rv$D_IN;
	if (ddr4_D_deburster_inSerial_state$EN)
	  ddr4_D_deburster_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      ddr4_D_deburster_inSerial_state$D_IN;
	if (ddr4_D_deburster_readsSent$EN)
	  ddr4_D_deburster_readsSent <= `BSV_ASSIGNMENT_DELAY
	      ddr4_D_deburster_readsSent$D_IN;
	if (ddr4_D_deburster_writesSent$EN)
	  ddr4_D_deburster_writesSent <= `BSV_ASSIGNMENT_DELAY
	      ddr4_D_deburster_writesSent$D_IN;
	if (dma_pcis_xactor_clearing$EN)
	  dma_pcis_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      dma_pcis_xactor_clearing$D_IN;
	if (dma_pcis_xactor_shim_arff_rv$EN)
	  dma_pcis_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      dma_pcis_xactor_shim_arff_rv$D_IN;
	if (dma_pcis_xactor_shim_awff_rv$EN)
	  dma_pcis_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      dma_pcis_xactor_shim_awff_rv$D_IN;
	if (dma_pcis_xactor_shim_bff_rv$EN)
	  dma_pcis_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      dma_pcis_xactor_shim_bff_rv$D_IN;
	if (dma_pcis_xactor_shim_rff_rv$EN)
	  dma_pcis_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      dma_pcis_xactor_shim_rff_rv$D_IN;
	if (dma_pcis_xactor_shim_wff_rv$EN)
	  dma_pcis_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      dma_pcis_xactor_shim_wff_rv$D_IN;
	if (rg_AXI4_wr_data_beat$EN)
	  rg_AXI4_wr_data_beat <= `BSV_ASSIGNMENT_DELAY
	      rg_AXI4_wr_data_beat$D_IN;
	if (rg_counter_4ns$EN)
	  rg_counter_4ns <= `BSV_ASSIGNMENT_DELAY rg_counter_4ns$D_IN;
	if (rg_last_vled$EN)
	  rg_last_vled <= `BSV_ASSIGNMENT_DELAY rg_last_vled$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_vdip$EN) rg_vdip <= `BSV_ASSIGNMENT_DELAY rg_vdip$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ddr4_A_deburster_flitReceived = 8'hAA;
    ddr4_A_deburster_inSerial_lastWasRead = 1'h0;
    ddr4_A_deburster_inSerial_shim_arff_rv =
	110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_A_deburster_inSerial_shim_awff_rv =
	110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_A_deburster_inSerial_shim_bff_rv = 19'h2AAAA;
    ddr4_A_deburster_inSerial_shim_rff_rv =
	532'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_A_deburster_inSerial_shim_wff_rv =
	578'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_A_deburster_inSerial_state = 2'h2;
    ddr4_A_deburster_readsSent = 8'hAA;
    ddr4_A_deburster_writesSent = 8'hAA;
    ddr4_B_deburster_flitReceived = 8'hAA;
    ddr4_B_deburster_inSerial_lastWasRead = 1'h0;
    ddr4_B_deburster_inSerial_shim_arff_rv =
	110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_B_deburster_inSerial_shim_awff_rv =
	110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_B_deburster_inSerial_shim_bff_rv = 19'h2AAAA;
    ddr4_B_deburster_inSerial_shim_rff_rv =
	532'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_B_deburster_inSerial_shim_wff_rv =
	578'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_B_deburster_inSerial_state = 2'h2;
    ddr4_B_deburster_readsSent = 8'hAA;
    ddr4_B_deburster_writesSent = 8'hAA;
    ddr4_C_deburster_flitReceived = 8'hAA;
    ddr4_C_deburster_inSerial_lastWasRead = 1'h0;
    ddr4_C_deburster_inSerial_shim_arff_rv =
	110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_C_deburster_inSerial_shim_awff_rv =
	110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_C_deburster_inSerial_shim_bff_rv = 19'h2AAAA;
    ddr4_C_deburster_inSerial_shim_rff_rv =
	532'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_C_deburster_inSerial_shim_wff_rv =
	578'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_C_deburster_inSerial_state = 2'h2;
    ddr4_C_deburster_readsSent = 8'hAA;
    ddr4_C_deburster_writesSent = 8'hAA;
    ddr4_D_deburster_flitReceived = 8'hAA;
    ddr4_D_deburster_inSerial_lastWasRead = 1'h0;
    ddr4_D_deburster_inSerial_shim_arff_rv =
	110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_D_deburster_inSerial_shim_awff_rv =
	110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_D_deburster_inSerial_shim_bff_rv = 19'h2AAAA;
    ddr4_D_deburster_inSerial_shim_rff_rv =
	532'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_D_deburster_inSerial_shim_wff_rv =
	578'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ddr4_D_deburster_inSerial_state = 2'h2;
    ddr4_D_deburster_readsSent = 8'hAA;
    ddr4_D_deburster_writesSent = 8'hAA;
    dma_pcis_xactor_clearing = 1'h0;
    dma_pcis_xactor_shim_arff_rv = 109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dma_pcis_xactor_shim_awff_rv = 109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dma_pcis_xactor_shim_bff_rv = 18'h2AAAA;
    dma_pcis_xactor_shim_rff_rv =
	531'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    dma_pcis_xactor_shim_wff_rv =
	578'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_AXI4_wr_data_beat = 8'hAA;
    rg_counter_4ns = 64'hAAAAAAAAAAAAAAAA;
    rg_last_vled = 16'hAAAA;
    rg_state = 2'h2;
    rg_vdip = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connecting)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connecting)
	$display("Bluespec AWSteria simulation v1.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connecting)
	$display("Copyright (c) 2020 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connecting)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connecting) $imported_c_host_connect(16'd30000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv)
	begin
	  TASK_c_host_recv___d1171 = $imported_c_host_recv(8'd79);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	$imported_c_host_send(comms$fo_BSV_to_C_bytevec_first, 8'd76);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_ddr4_A_deburster_inSerial_takeB)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 305, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_ddr4_A_deburster_inSerial_takeR] and\n  [RL_ddr4_A_deburster_inSerial_takeB] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_ddr4_B_deburster_inSerial_takeB)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 305, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_ddr4_B_deburster_inSerial_takeR] and\n  [RL_ddr4_B_deburster_inSerial_takeB] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_ddr4_C_deburster_inSerial_takeB)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 305, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_ddr4_C_deburster_inSerial_takeR] and\n  [RL_ddr4_C_deburster_inSerial_takeB] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeR &&
	  WILL_FIRE_RL_ddr4_D_deburster_inSerial_takeB)
	$display("Error: \"/home/nikhil/git_clones/CHERI_Flute/libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 305, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_ddr4_D_deburster_inSerial_takeR] and\n  [RL_ddr4_D_deburster_inSerial_takeB] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_dma_pcis_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ocl_xactor_u_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_addr)
	$display("Top_HW_Side.rl_connect_ocl_wr_addr:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_addr) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_addr)
	$write("AXI4Lite_AWFlit { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_addr)
	$write("'h%h", comms$fo_AXI4L_Wr_Addr_a32_u0_first[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_addr) $write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_addr)
	$write("'h%h", comms$fo_AXI4L_Wr_Addr_a32_u0_first[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_addr) $write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_addr) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_addr) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ocl_xactor_u_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_data)
	$display("Top_HW_Side.rl_connect_ocl_wr_data:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_data) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_data)
	$write("AXI4Lite_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_data)
	$write("'h%h", comms$fo_AXI4L_Wr_Data_d32_first[35:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_data) $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_data)
	$write("'h%h", comms$fo_AXI4L_Wr_Data_d32_first[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_data) $write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_data) $write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_data) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ocl_xactor_u_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[0] && aws_BSV_top$m_vled[0])
	$display("vled [%0d] turned on", $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[0] && !aws_BSV_top$m_vled[0])
	$display("vled [%0d] turned off", $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[1] && aws_BSV_top$m_vled[1])
	$display("vled [%0d] turned on", $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[1] && !aws_BSV_top$m_vled[1])
	$display("vled [%0d] turned off", $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[2] && aws_BSV_top$m_vled[2])
	$display("vled [%0d] turned on", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[2] && !aws_BSV_top$m_vled[2])
	$display("vled [%0d] turned off", $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[3] && aws_BSV_top$m_vled[3])
	$display("vled [%0d] turned on", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[3] && !aws_BSV_top$m_vled[3])
	$display("vled [%0d] turned off", $signed(32'd3));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[4] && aws_BSV_top$m_vled[4])
	$display("vled [%0d] turned on", $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[4] && !aws_BSV_top$m_vled[4])
	$display("vled [%0d] turned off", $signed(32'd4));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[5] && aws_BSV_top$m_vled[5])
	$display("vled [%0d] turned on", $signed(32'd5));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[5] && !aws_BSV_top$m_vled[5])
	$display("vled [%0d] turned off", $signed(32'd5));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[6] && aws_BSV_top$m_vled[6])
	$display("vled [%0d] turned on", $signed(32'd6));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[6] && !aws_BSV_top$m_vled[6])
	$display("vled [%0d] turned off", $signed(32'd6));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[7] && aws_BSV_top$m_vled[7])
	$display("vled [%0d] turned on", $signed(32'd7));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[7] && !aws_BSV_top$m_vled[7])
	$display("vled [%0d] turned off", $signed(32'd7));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[8] && aws_BSV_top$m_vled[8])
	$display("vled [%0d] turned on", $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[8] && !aws_BSV_top$m_vled[8])
	$display("vled [%0d] turned off", $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[9] && aws_BSV_top$m_vled[9])
	$display("vled [%0d] turned on", $signed(32'd9));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[9] && !aws_BSV_top$m_vled[9])
	$display("vled [%0d] turned off", $signed(32'd9));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[10] && aws_BSV_top$m_vled[10])
	$display("vled [%0d] turned on", $signed(32'd10));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[10] && !aws_BSV_top$m_vled[10])
	$display("vled [%0d] turned off", $signed(32'd10));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[11] && aws_BSV_top$m_vled[11])
	$display("vled [%0d] turned on", $signed(32'd11));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[11] && !aws_BSV_top$m_vled[11])
	$display("vled [%0d] turned off", $signed(32'd11));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[12] && aws_BSV_top$m_vled[12])
	$display("vled [%0d] turned on", $signed(32'd12));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[12] && !aws_BSV_top$m_vled[12])
	$display("vled [%0d] turned off", $signed(32'd12));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[13] && aws_BSV_top$m_vled[13])
	$display("vled [%0d] turned on", $signed(32'd13));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[13] && !aws_BSV_top$m_vled[13])
	$display("vled [%0d] turned off", $signed(32'd13));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[14] && aws_BSV_top$m_vled[14])
	$display("vled [%0d] turned on", $signed(32'd14));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[14] && !aws_BSV_top$m_vled[14])
	$display("vled [%0d] turned off", $signed(32'd14));
    if (RST_N != `BSV_RESET_VALUE)
      if (!rg_last_vled[15] && aws_BSV_top$m_vled[15])
	$display("vled [%0d] turned on", $signed(32'd15));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_last_vled[15] && !aws_BSV_top$m_vled[15])
	$display("vled [%0d] turned off", $signed(32'd15));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ocl_xactor_u_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_addr)
	$display("Top_HW_Side.rl_connect_ocl_rd_addr:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_addr) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_addr)
	$write("AXI4Lite_ARFlit { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_addr)
	$write("'h%h", comms$fo_AXI4L_Rd_Addr_a32_u0_first[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_addr) $write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_addr)
	$write("'h%h", comms$fo_AXI4L_Rd_Addr_a32_u0_first[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_addr) $write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_addr) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_addr) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_resp)
	$display("Top_HW_Side.rl_connect_ocl_wr_resp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_resp) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_resp)
	$write("AXI4L_Wr_Resp_u0 { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_resp)
	$write("'h%h", ocl_xactor_shim_bff$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_resp) $write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_resp) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_wr_resp) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ocl_xactor_u_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_data)
	$display("Top_HW_Side.rl_connect_ocl_rd_data:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_data) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_data)
	$write("AXI4L_Rd_Data_d32_u0 { ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_data)
	$write("'h%h", ocl_xactor_shim_rff$D_OUT[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_data) $write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_data)
	$write("'h%h", ocl_xactor_shim_rff$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_data) $write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_data) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connect_ocl_rd_data) $write("\n");
  end
  // synopsys translate_on
endmodule  // mkTop_HW_Side

