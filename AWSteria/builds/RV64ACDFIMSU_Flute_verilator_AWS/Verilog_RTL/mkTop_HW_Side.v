//
// Generated by Bluespec Compiler, version 2017.07.A (build e1df8052c, 2017-07-21)
//
//
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTop_HW_Side(CLK,
		     RST_N);
  input  CLK;
  input  RST_N;

  // register rg_counter_4ns
  reg [63 : 0] rg_counter_4ns;
  wire [63 : 0] rg_counter_4ns$D_IN;
  wire rg_counter_4ns$EN;

  // register rg_last_vled
  reg [15 : 0] rg_last_vled;
  wire [15 : 0] rg_last_vled$D_IN;
  wire rg_last_vled$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  wire [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_vdip
  reg [15 : 0] rg_vdip;
  wire [15 : 0] rg_vdip$D_IN;
  wire rg_vdip$EN;

  // ports of submodule aws_BSV_top
  wire [511 : 0] aws_BSV_top$ddr4_A_master_rdata,
		 aws_BSV_top$ddr4_A_master_wdata,
		 aws_BSV_top$ddr4_B_master_rdata,
		 aws_BSV_top$ddr4_B_master_wdata,
		 aws_BSV_top$ddr4_C_master_rdata,
		 aws_BSV_top$ddr4_C_master_wdata,
		 aws_BSV_top$ddr4_D_master_rdata,
		 aws_BSV_top$ddr4_D_master_wdata,
		 aws_BSV_top$dma_pcis_slave_rdata,
		 aws_BSV_top$dma_pcis_slave_wdata;
  wire [63 : 0] aws_BSV_top$ddr4_A_master_araddr,
		aws_BSV_top$ddr4_A_master_awaddr,
		aws_BSV_top$ddr4_A_master_wstrb,
		aws_BSV_top$ddr4_B_master_araddr,
		aws_BSV_top$ddr4_B_master_awaddr,
		aws_BSV_top$ddr4_B_master_wstrb,
		aws_BSV_top$ddr4_C_master_araddr,
		aws_BSV_top$ddr4_C_master_awaddr,
		aws_BSV_top$ddr4_C_master_wstrb,
		aws_BSV_top$ddr4_D_master_araddr,
		aws_BSV_top$ddr4_D_master_awaddr,
		aws_BSV_top$ddr4_D_master_wstrb,
		aws_BSV_top$dma_pcis_slave_araddr,
		aws_BSV_top$dma_pcis_slave_awaddr,
		aws_BSV_top$dma_pcis_slave_wstrb,
		aws_BSV_top$m_glcount0_glcount0,
		aws_BSV_top$m_glcount1_glcount1;
  wire [31 : 0] aws_BSV_top$ocl_slave_araddr,
		aws_BSV_top$ocl_slave_awaddr,
		aws_BSV_top$ocl_slave_rdata,
		aws_BSV_top$ocl_slave_wdata;
  wire [15 : 0] aws_BSV_top$ddr4_A_master_arid,
		aws_BSV_top$ddr4_A_master_awid,
		aws_BSV_top$ddr4_A_master_bid,
		aws_BSV_top$ddr4_A_master_rid,
		aws_BSV_top$ddr4_B_master_arid,
		aws_BSV_top$ddr4_B_master_awid,
		aws_BSV_top$ddr4_B_master_bid,
		aws_BSV_top$ddr4_B_master_rid,
		aws_BSV_top$ddr4_C_master_arid,
		aws_BSV_top$ddr4_C_master_awid,
		aws_BSV_top$ddr4_C_master_bid,
		aws_BSV_top$ddr4_C_master_rid,
		aws_BSV_top$ddr4_D_master_arid,
		aws_BSV_top$ddr4_D_master_awid,
		aws_BSV_top$ddr4_D_master_bid,
		aws_BSV_top$ddr4_D_master_rid,
		aws_BSV_top$dma_pcis_slave_arid,
		aws_BSV_top$dma_pcis_slave_awid,
		aws_BSV_top$dma_pcis_slave_bid,
		aws_BSV_top$dma_pcis_slave_rid,
		aws_BSV_top$m_vdip_vdip,
		aws_BSV_top$m_vled;
  wire [7 : 0] aws_BSV_top$ddr4_A_master_arlen,
	       aws_BSV_top$ddr4_A_master_awlen,
	       aws_BSV_top$ddr4_B_master_arlen,
	       aws_BSV_top$ddr4_B_master_awlen,
	       aws_BSV_top$ddr4_C_master_arlen,
	       aws_BSV_top$ddr4_C_master_awlen,
	       aws_BSV_top$ddr4_D_master_arlen,
	       aws_BSV_top$ddr4_D_master_awlen,
	       aws_BSV_top$dma_pcis_slave_arlen,
	       aws_BSV_top$dma_pcis_slave_awlen;
  wire [3 : 0] aws_BSV_top$ddr4_A_master_arcache,
	       aws_BSV_top$ddr4_A_master_arqos,
	       aws_BSV_top$ddr4_A_master_arregion,
	       aws_BSV_top$ddr4_A_master_awcache,
	       aws_BSV_top$ddr4_A_master_awqos,
	       aws_BSV_top$ddr4_A_master_awregion,
	       aws_BSV_top$ddr4_B_master_arcache,
	       aws_BSV_top$ddr4_B_master_arqos,
	       aws_BSV_top$ddr4_B_master_arregion,
	       aws_BSV_top$ddr4_B_master_awcache,
	       aws_BSV_top$ddr4_B_master_awqos,
	       aws_BSV_top$ddr4_B_master_awregion,
	       aws_BSV_top$ddr4_C_master_arcache,
	       aws_BSV_top$ddr4_C_master_arqos,
	       aws_BSV_top$ddr4_C_master_arregion,
	       aws_BSV_top$ddr4_C_master_awcache,
	       aws_BSV_top$ddr4_C_master_awqos,
	       aws_BSV_top$ddr4_C_master_awregion,
	       aws_BSV_top$ddr4_D_master_arcache,
	       aws_BSV_top$ddr4_D_master_arqos,
	       aws_BSV_top$ddr4_D_master_arregion,
	       aws_BSV_top$ddr4_D_master_awcache,
	       aws_BSV_top$ddr4_D_master_awqos,
	       aws_BSV_top$ddr4_D_master_awregion,
	       aws_BSV_top$dma_pcis_slave_arcache,
	       aws_BSV_top$dma_pcis_slave_arqos,
	       aws_BSV_top$dma_pcis_slave_arregion,
	       aws_BSV_top$dma_pcis_slave_awcache,
	       aws_BSV_top$dma_pcis_slave_awqos,
	       aws_BSV_top$dma_pcis_slave_awregion,
	       aws_BSV_top$m_ddr4_ready_ddr4_A_B_C_D_ready,
	       aws_BSV_top$ocl_slave_wstrb;
  wire [2 : 0] aws_BSV_top$ddr4_A_master_arprot,
	       aws_BSV_top$ddr4_A_master_arsize,
	       aws_BSV_top$ddr4_A_master_awprot,
	       aws_BSV_top$ddr4_A_master_awsize,
	       aws_BSV_top$ddr4_B_master_arprot,
	       aws_BSV_top$ddr4_B_master_arsize,
	       aws_BSV_top$ddr4_B_master_awprot,
	       aws_BSV_top$ddr4_B_master_awsize,
	       aws_BSV_top$ddr4_C_master_arprot,
	       aws_BSV_top$ddr4_C_master_arsize,
	       aws_BSV_top$ddr4_C_master_awprot,
	       aws_BSV_top$ddr4_C_master_awsize,
	       aws_BSV_top$ddr4_D_master_arprot,
	       aws_BSV_top$ddr4_D_master_arsize,
	       aws_BSV_top$ddr4_D_master_awprot,
	       aws_BSV_top$ddr4_D_master_awsize,
	       aws_BSV_top$dma_pcis_slave_arprot,
	       aws_BSV_top$dma_pcis_slave_arsize,
	       aws_BSV_top$dma_pcis_slave_awprot,
	       aws_BSV_top$dma_pcis_slave_awsize,
	       aws_BSV_top$ocl_slave_arprot,
	       aws_BSV_top$ocl_slave_awprot;
  wire [1 : 0] aws_BSV_top$ddr4_A_master_arburst,
	       aws_BSV_top$ddr4_A_master_awburst,
	       aws_BSV_top$ddr4_A_master_bresp,
	       aws_BSV_top$ddr4_A_master_rresp,
	       aws_BSV_top$ddr4_B_master_arburst,
	       aws_BSV_top$ddr4_B_master_awburst,
	       aws_BSV_top$ddr4_B_master_bresp,
	       aws_BSV_top$ddr4_B_master_rresp,
	       aws_BSV_top$ddr4_C_master_arburst,
	       aws_BSV_top$ddr4_C_master_awburst,
	       aws_BSV_top$ddr4_C_master_bresp,
	       aws_BSV_top$ddr4_C_master_rresp,
	       aws_BSV_top$ddr4_D_master_arburst,
	       aws_BSV_top$ddr4_D_master_awburst,
	       aws_BSV_top$ddr4_D_master_bresp,
	       aws_BSV_top$ddr4_D_master_rresp,
	       aws_BSV_top$dma_pcis_slave_arburst,
	       aws_BSV_top$dma_pcis_slave_awburst,
	       aws_BSV_top$dma_pcis_slave_bresp,
	       aws_BSV_top$dma_pcis_slave_rresp,
	       aws_BSV_top$ocl_slave_bresp,
	       aws_BSV_top$ocl_slave_rresp;
  wire aws_BSV_top$ddr4_A_master_arlock,
       aws_BSV_top$ddr4_A_master_arready,
       aws_BSV_top$ddr4_A_master_arvalid,
       aws_BSV_top$ddr4_A_master_awlock,
       aws_BSV_top$ddr4_A_master_awready,
       aws_BSV_top$ddr4_A_master_awvalid,
       aws_BSV_top$ddr4_A_master_bready,
       aws_BSV_top$ddr4_A_master_bvalid,
       aws_BSV_top$ddr4_A_master_rlast,
       aws_BSV_top$ddr4_A_master_rready,
       aws_BSV_top$ddr4_A_master_rvalid,
       aws_BSV_top$ddr4_A_master_wlast,
       aws_BSV_top$ddr4_A_master_wready,
       aws_BSV_top$ddr4_A_master_wvalid,
       aws_BSV_top$ddr4_B_master_arlock,
       aws_BSV_top$ddr4_B_master_arready,
       aws_BSV_top$ddr4_B_master_arvalid,
       aws_BSV_top$ddr4_B_master_awlock,
       aws_BSV_top$ddr4_B_master_awready,
       aws_BSV_top$ddr4_B_master_awvalid,
       aws_BSV_top$ddr4_B_master_bready,
       aws_BSV_top$ddr4_B_master_bvalid,
       aws_BSV_top$ddr4_B_master_rlast,
       aws_BSV_top$ddr4_B_master_rready,
       aws_BSV_top$ddr4_B_master_rvalid,
       aws_BSV_top$ddr4_B_master_wlast,
       aws_BSV_top$ddr4_B_master_wready,
       aws_BSV_top$ddr4_B_master_wvalid,
       aws_BSV_top$ddr4_C_master_arlock,
       aws_BSV_top$ddr4_C_master_arready,
       aws_BSV_top$ddr4_C_master_arvalid,
       aws_BSV_top$ddr4_C_master_awlock,
       aws_BSV_top$ddr4_C_master_awready,
       aws_BSV_top$ddr4_C_master_awvalid,
       aws_BSV_top$ddr4_C_master_bready,
       aws_BSV_top$ddr4_C_master_bvalid,
       aws_BSV_top$ddr4_C_master_rlast,
       aws_BSV_top$ddr4_C_master_rready,
       aws_BSV_top$ddr4_C_master_rvalid,
       aws_BSV_top$ddr4_C_master_wlast,
       aws_BSV_top$ddr4_C_master_wready,
       aws_BSV_top$ddr4_C_master_wvalid,
       aws_BSV_top$ddr4_D_master_arlock,
       aws_BSV_top$ddr4_D_master_arready,
       aws_BSV_top$ddr4_D_master_arvalid,
       aws_BSV_top$ddr4_D_master_awlock,
       aws_BSV_top$ddr4_D_master_awready,
       aws_BSV_top$ddr4_D_master_awvalid,
       aws_BSV_top$ddr4_D_master_bready,
       aws_BSV_top$ddr4_D_master_bvalid,
       aws_BSV_top$ddr4_D_master_rlast,
       aws_BSV_top$ddr4_D_master_rready,
       aws_BSV_top$ddr4_D_master_rvalid,
       aws_BSV_top$ddr4_D_master_wlast,
       aws_BSV_top$ddr4_D_master_wready,
       aws_BSV_top$ddr4_D_master_wvalid,
       aws_BSV_top$dma_pcis_slave_arlock,
       aws_BSV_top$dma_pcis_slave_arready,
       aws_BSV_top$dma_pcis_slave_arvalid,
       aws_BSV_top$dma_pcis_slave_awlock,
       aws_BSV_top$dma_pcis_slave_awready,
       aws_BSV_top$dma_pcis_slave_awvalid,
       aws_BSV_top$dma_pcis_slave_bready,
       aws_BSV_top$dma_pcis_slave_bvalid,
       aws_BSV_top$dma_pcis_slave_rlast,
       aws_BSV_top$dma_pcis_slave_rready,
       aws_BSV_top$dma_pcis_slave_rvalid,
       aws_BSV_top$dma_pcis_slave_wlast,
       aws_BSV_top$dma_pcis_slave_wready,
       aws_BSV_top$dma_pcis_slave_wvalid,
       aws_BSV_top$ocl_slave_arready,
       aws_BSV_top$ocl_slave_arvalid,
       aws_BSV_top$ocl_slave_awready,
       aws_BSV_top$ocl_slave_awvalid,
       aws_BSV_top$ocl_slave_bready,
       aws_BSV_top$ocl_slave_bvalid,
       aws_BSV_top$ocl_slave_rready,
       aws_BSV_top$ocl_slave_rvalid,
       aws_BSV_top$ocl_slave_wready,
       aws_BSV_top$ocl_slave_wvalid;

  // ports of submodule comms
  wire [631 : 0] comms$fi_C_to_BSV_bytevec_enq_x;
  wire [607 : 0] comms$fo_BSV_to_C_bytevec_first;
  wire [576 : 0] comms$fo_AXI4_Wr_Data_d512_u0_first;
  wire [530 : 0] comms$fi_AXI4_Rd_Data_i16_d512_u0_enq_x;
  wire [108 : 0] comms$fo_AXI4_Rd_Addr_i16_a64_u0_first,
		 comms$fo_AXI4_Wr_Addr_i16_a64_u0_first;
  wire [35 : 0] comms$fo_AXI4L_Wr_Data_d32_first;
  wire [34 : 0] comms$fo_AXI4L_Rd_Addr_a32_u0_first,
		comms$fo_AXI4L_Wr_Addr_a32_u0_first;
  wire [33 : 0] comms$fi_AXI4L_Rd_Data_d32_u0_enq_x;
  wire [17 : 0] comms$fi_AXI4_Wr_Resp_i16_u0_enq_x;
  wire [1 : 0] comms$fi_AXI4L_Wr_Resp_u0_enq_x;
  wire comms$EN_fi_AXI4L_Rd_Data_d32_u0_enq,
       comms$EN_fi_AXI4L_Wr_Resp_u0_enq,
       comms$EN_fi_AXI4_Rd_Data_i16_d512_u0_enq,
       comms$EN_fi_AXI4_Wr_Resp_i16_u0_enq,
       comms$EN_fi_C_to_BSV_bytevec_enq,
       comms$EN_fo_AXI4L_Rd_Addr_a32_u0_deq,
       comms$EN_fo_AXI4L_Wr_Addr_a32_u0_deq,
       comms$EN_fo_AXI4L_Wr_Data_d32_deq,
       comms$EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq,
       comms$EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq,
       comms$EN_fo_AXI4_Wr_Data_d512_u0_deq,
       comms$EN_fo_BSV_to_C_bytevec_deq,
       comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq,
       comms$RDY_fi_AXI4L_Wr_Resp_u0_enq,
       comms$RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq,
       comms$RDY_fi_AXI4_Wr_Resp_i16_u0_enq,
       comms$RDY_fi_C_to_BSV_bytevec_enq,
       comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq,
       comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first,
       comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq,
       comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first,
       comms$RDY_fo_AXI4L_Wr_Data_d32_deq,
       comms$RDY_fo_AXI4L_Wr_Data_d32_first,
       comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq,
       comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first,
       comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq,
       comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first,
       comms$RDY_fo_AXI4_Wr_Data_d512_u0_deq,
       comms$RDY_fo_AXI4_Wr_Data_d512_u0_first,
       comms$RDY_fo_BSV_to_C_bytevec_deq,
       comms$RDY_fo_BSV_to_C_bytevec_first;

  // ports of submodule ddr4_A
  wire [511 : 0] ddr4_A$rdata, ddr4_A$wdata;
  wire [63 : 0] ddr4_A$araddr, ddr4_A$awaddr, ddr4_A$wstrb;
  wire [15 : 0] ddr4_A$arid, ddr4_A$awid, ddr4_A$bid, ddr4_A$rid;
  wire [7 : 0] ddr4_A$arlen, ddr4_A$awlen;
  wire [3 : 0] ddr4_A$arcache,
	       ddr4_A$arqos,
	       ddr4_A$arregion,
	       ddr4_A$awcache,
	       ddr4_A$awqos,
	       ddr4_A$awregion;
  wire [2 : 0] ddr4_A$arprot, ddr4_A$arsize, ddr4_A$awprot, ddr4_A$awsize;
  wire [1 : 0] ddr4_A$arburst, ddr4_A$awburst, ddr4_A$bresp, ddr4_A$rresp;
  wire ddr4_A$arlock,
       ddr4_A$arready,
       ddr4_A$arvalid,
       ddr4_A$awlock,
       ddr4_A$awready,
       ddr4_A$awvalid,
       ddr4_A$bready,
       ddr4_A$bvalid,
       ddr4_A$rlast,
       ddr4_A$rready,
       ddr4_A$rvalid,
       ddr4_A$wlast,
       ddr4_A$wready,
       ddr4_A$wvalid;

  // ports of submodule ddr4_A_deburster
  wire [511 : 0] ddr4_A_deburster$from_master_rdata,
		 ddr4_A_deburster$from_master_wdata,
		 ddr4_A_deburster$to_slave_rdata,
		 ddr4_A_deburster$to_slave_wdata;
  wire [63 : 0] ddr4_A_deburster$from_master_araddr,
		ddr4_A_deburster$from_master_awaddr,
		ddr4_A_deburster$from_master_wstrb,
		ddr4_A_deburster$to_slave_araddr,
		ddr4_A_deburster$to_slave_awaddr,
		ddr4_A_deburster$to_slave_wstrb;
  wire [15 : 0] ddr4_A_deburster$from_master_arid,
		ddr4_A_deburster$from_master_awid,
		ddr4_A_deburster$from_master_bid,
		ddr4_A_deburster$from_master_rid,
		ddr4_A_deburster$to_slave_arid,
		ddr4_A_deburster$to_slave_awid,
		ddr4_A_deburster$to_slave_bid,
		ddr4_A_deburster$to_slave_rid;
  wire [7 : 0] ddr4_A_deburster$from_master_arlen,
	       ddr4_A_deburster$from_master_awlen,
	       ddr4_A_deburster$to_slave_arlen,
	       ddr4_A_deburster$to_slave_awlen;
  wire [3 : 0] ddr4_A_deburster$from_master_arcache,
	       ddr4_A_deburster$from_master_arqos,
	       ddr4_A_deburster$from_master_arregion,
	       ddr4_A_deburster$from_master_awcache,
	       ddr4_A_deburster$from_master_awqos,
	       ddr4_A_deburster$from_master_awregion,
	       ddr4_A_deburster$to_slave_arcache,
	       ddr4_A_deburster$to_slave_arqos,
	       ddr4_A_deburster$to_slave_arregion,
	       ddr4_A_deburster$to_slave_awcache,
	       ddr4_A_deburster$to_slave_awqos,
	       ddr4_A_deburster$to_slave_awregion;
  wire [2 : 0] ddr4_A_deburster$from_master_arprot,
	       ddr4_A_deburster$from_master_arsize,
	       ddr4_A_deburster$from_master_awprot,
	       ddr4_A_deburster$from_master_awsize,
	       ddr4_A_deburster$to_slave_arprot,
	       ddr4_A_deburster$to_slave_arsize,
	       ddr4_A_deburster$to_slave_awprot,
	       ddr4_A_deburster$to_slave_awsize;
  wire [1 : 0] ddr4_A_deburster$from_master_arburst,
	       ddr4_A_deburster$from_master_awburst,
	       ddr4_A_deburster$from_master_bresp,
	       ddr4_A_deburster$from_master_rresp,
	       ddr4_A_deburster$to_slave_arburst,
	       ddr4_A_deburster$to_slave_awburst,
	       ddr4_A_deburster$to_slave_bresp,
	       ddr4_A_deburster$to_slave_rresp;
  wire ddr4_A_deburster$EN_reset,
       ddr4_A_deburster$from_master_arlock,
       ddr4_A_deburster$from_master_arready,
       ddr4_A_deburster$from_master_arvalid,
       ddr4_A_deburster$from_master_awlock,
       ddr4_A_deburster$from_master_awready,
       ddr4_A_deburster$from_master_awvalid,
       ddr4_A_deburster$from_master_bready,
       ddr4_A_deburster$from_master_bvalid,
       ddr4_A_deburster$from_master_rlast,
       ddr4_A_deburster$from_master_rready,
       ddr4_A_deburster$from_master_rvalid,
       ddr4_A_deburster$from_master_wlast,
       ddr4_A_deburster$from_master_wready,
       ddr4_A_deburster$from_master_wvalid,
       ddr4_A_deburster$to_slave_arlock,
       ddr4_A_deburster$to_slave_arready,
       ddr4_A_deburster$to_slave_arvalid,
       ddr4_A_deburster$to_slave_awlock,
       ddr4_A_deburster$to_slave_awready,
       ddr4_A_deburster$to_slave_awvalid,
       ddr4_A_deburster$to_slave_bready,
       ddr4_A_deburster$to_slave_bvalid,
       ddr4_A_deburster$to_slave_rlast,
       ddr4_A_deburster$to_slave_rready,
       ddr4_A_deburster$to_slave_rvalid,
       ddr4_A_deburster$to_slave_wlast,
       ddr4_A_deburster$to_slave_wready,
       ddr4_A_deburster$to_slave_wvalid;

  // ports of submodule ddr4_B
  wire [511 : 0] ddr4_B$rdata, ddr4_B$wdata;
  wire [63 : 0] ddr4_B$araddr, ddr4_B$awaddr, ddr4_B$wstrb;
  wire [15 : 0] ddr4_B$arid, ddr4_B$awid, ddr4_B$bid, ddr4_B$rid;
  wire [7 : 0] ddr4_B$arlen, ddr4_B$awlen;
  wire [3 : 0] ddr4_B$arcache,
	       ddr4_B$arqos,
	       ddr4_B$arregion,
	       ddr4_B$awcache,
	       ddr4_B$awqos,
	       ddr4_B$awregion;
  wire [2 : 0] ddr4_B$arprot, ddr4_B$arsize, ddr4_B$awprot, ddr4_B$awsize;
  wire [1 : 0] ddr4_B$arburst, ddr4_B$awburst, ddr4_B$bresp, ddr4_B$rresp;
  wire ddr4_B$arlock,
       ddr4_B$arready,
       ddr4_B$arvalid,
       ddr4_B$awlock,
       ddr4_B$awready,
       ddr4_B$awvalid,
       ddr4_B$bready,
       ddr4_B$bvalid,
       ddr4_B$rlast,
       ddr4_B$rready,
       ddr4_B$rvalid,
       ddr4_B$wlast,
       ddr4_B$wready,
       ddr4_B$wvalid;

  // ports of submodule ddr4_B_deburster
  wire [511 : 0] ddr4_B_deburster$from_master_rdata,
		 ddr4_B_deburster$from_master_wdata,
		 ddr4_B_deburster$to_slave_rdata,
		 ddr4_B_deburster$to_slave_wdata;
  wire [63 : 0] ddr4_B_deburster$from_master_araddr,
		ddr4_B_deburster$from_master_awaddr,
		ddr4_B_deburster$from_master_wstrb,
		ddr4_B_deburster$to_slave_araddr,
		ddr4_B_deburster$to_slave_awaddr,
		ddr4_B_deburster$to_slave_wstrb;
  wire [15 : 0] ddr4_B_deburster$from_master_arid,
		ddr4_B_deburster$from_master_awid,
		ddr4_B_deburster$from_master_bid,
		ddr4_B_deburster$from_master_rid,
		ddr4_B_deburster$to_slave_arid,
		ddr4_B_deburster$to_slave_awid,
		ddr4_B_deburster$to_slave_bid,
		ddr4_B_deburster$to_slave_rid;
  wire [7 : 0] ddr4_B_deburster$from_master_arlen,
	       ddr4_B_deburster$from_master_awlen,
	       ddr4_B_deburster$to_slave_arlen,
	       ddr4_B_deburster$to_slave_awlen;
  wire [3 : 0] ddr4_B_deburster$from_master_arcache,
	       ddr4_B_deburster$from_master_arqos,
	       ddr4_B_deburster$from_master_arregion,
	       ddr4_B_deburster$from_master_awcache,
	       ddr4_B_deburster$from_master_awqos,
	       ddr4_B_deburster$from_master_awregion,
	       ddr4_B_deburster$to_slave_arcache,
	       ddr4_B_deburster$to_slave_arqos,
	       ddr4_B_deburster$to_slave_arregion,
	       ddr4_B_deburster$to_slave_awcache,
	       ddr4_B_deburster$to_slave_awqos,
	       ddr4_B_deburster$to_slave_awregion;
  wire [2 : 0] ddr4_B_deburster$from_master_arprot,
	       ddr4_B_deburster$from_master_arsize,
	       ddr4_B_deburster$from_master_awprot,
	       ddr4_B_deburster$from_master_awsize,
	       ddr4_B_deburster$to_slave_arprot,
	       ddr4_B_deburster$to_slave_arsize,
	       ddr4_B_deburster$to_slave_awprot,
	       ddr4_B_deburster$to_slave_awsize;
  wire [1 : 0] ddr4_B_deburster$from_master_arburst,
	       ddr4_B_deburster$from_master_awburst,
	       ddr4_B_deburster$from_master_bresp,
	       ddr4_B_deburster$from_master_rresp,
	       ddr4_B_deburster$to_slave_arburst,
	       ddr4_B_deburster$to_slave_awburst,
	       ddr4_B_deburster$to_slave_bresp,
	       ddr4_B_deburster$to_slave_rresp;
  wire ddr4_B_deburster$EN_reset,
       ddr4_B_deburster$from_master_arlock,
       ddr4_B_deburster$from_master_arready,
       ddr4_B_deburster$from_master_arvalid,
       ddr4_B_deburster$from_master_awlock,
       ddr4_B_deburster$from_master_awready,
       ddr4_B_deburster$from_master_awvalid,
       ddr4_B_deburster$from_master_bready,
       ddr4_B_deburster$from_master_bvalid,
       ddr4_B_deburster$from_master_rlast,
       ddr4_B_deburster$from_master_rready,
       ddr4_B_deburster$from_master_rvalid,
       ddr4_B_deburster$from_master_wlast,
       ddr4_B_deburster$from_master_wready,
       ddr4_B_deburster$from_master_wvalid,
       ddr4_B_deburster$to_slave_arlock,
       ddr4_B_deburster$to_slave_arready,
       ddr4_B_deburster$to_slave_arvalid,
       ddr4_B_deburster$to_slave_awlock,
       ddr4_B_deburster$to_slave_awready,
       ddr4_B_deburster$to_slave_awvalid,
       ddr4_B_deburster$to_slave_bready,
       ddr4_B_deburster$to_slave_bvalid,
       ddr4_B_deburster$to_slave_rlast,
       ddr4_B_deburster$to_slave_rready,
       ddr4_B_deburster$to_slave_rvalid,
       ddr4_B_deburster$to_slave_wlast,
       ddr4_B_deburster$to_slave_wready,
       ddr4_B_deburster$to_slave_wvalid;

  // ports of submodule ddr4_C
  wire [511 : 0] ddr4_C$rdata, ddr4_C$wdata;
  wire [63 : 0] ddr4_C$araddr, ddr4_C$awaddr, ddr4_C$wstrb;
  wire [15 : 0] ddr4_C$arid, ddr4_C$awid, ddr4_C$bid, ddr4_C$rid;
  wire [7 : 0] ddr4_C$arlen, ddr4_C$awlen;
  wire [3 : 0] ddr4_C$arcache,
	       ddr4_C$arqos,
	       ddr4_C$arregion,
	       ddr4_C$awcache,
	       ddr4_C$awqos,
	       ddr4_C$awregion;
  wire [2 : 0] ddr4_C$arprot, ddr4_C$arsize, ddr4_C$awprot, ddr4_C$awsize;
  wire [1 : 0] ddr4_C$arburst, ddr4_C$awburst, ddr4_C$bresp, ddr4_C$rresp;
  wire ddr4_C$arlock,
       ddr4_C$arready,
       ddr4_C$arvalid,
       ddr4_C$awlock,
       ddr4_C$awready,
       ddr4_C$awvalid,
       ddr4_C$bready,
       ddr4_C$bvalid,
       ddr4_C$rlast,
       ddr4_C$rready,
       ddr4_C$rvalid,
       ddr4_C$wlast,
       ddr4_C$wready,
       ddr4_C$wvalid;

  // ports of submodule ddr4_C_deburster
  wire [511 : 0] ddr4_C_deburster$from_master_rdata,
		 ddr4_C_deburster$from_master_wdata,
		 ddr4_C_deburster$to_slave_rdata,
		 ddr4_C_deburster$to_slave_wdata;
  wire [63 : 0] ddr4_C_deburster$from_master_araddr,
		ddr4_C_deburster$from_master_awaddr,
		ddr4_C_deburster$from_master_wstrb,
		ddr4_C_deburster$to_slave_araddr,
		ddr4_C_deburster$to_slave_awaddr,
		ddr4_C_deburster$to_slave_wstrb;
  wire [15 : 0] ddr4_C_deburster$from_master_arid,
		ddr4_C_deburster$from_master_awid,
		ddr4_C_deburster$from_master_bid,
		ddr4_C_deburster$from_master_rid,
		ddr4_C_deburster$to_slave_arid,
		ddr4_C_deburster$to_slave_awid,
		ddr4_C_deburster$to_slave_bid,
		ddr4_C_deburster$to_slave_rid;
  wire [7 : 0] ddr4_C_deburster$from_master_arlen,
	       ddr4_C_deburster$from_master_awlen,
	       ddr4_C_deburster$to_slave_arlen,
	       ddr4_C_deburster$to_slave_awlen;
  wire [3 : 0] ddr4_C_deburster$from_master_arcache,
	       ddr4_C_deburster$from_master_arqos,
	       ddr4_C_deburster$from_master_arregion,
	       ddr4_C_deburster$from_master_awcache,
	       ddr4_C_deburster$from_master_awqos,
	       ddr4_C_deburster$from_master_awregion,
	       ddr4_C_deburster$to_slave_arcache,
	       ddr4_C_deburster$to_slave_arqos,
	       ddr4_C_deburster$to_slave_arregion,
	       ddr4_C_deburster$to_slave_awcache,
	       ddr4_C_deburster$to_slave_awqos,
	       ddr4_C_deburster$to_slave_awregion;
  wire [2 : 0] ddr4_C_deburster$from_master_arprot,
	       ddr4_C_deburster$from_master_arsize,
	       ddr4_C_deburster$from_master_awprot,
	       ddr4_C_deburster$from_master_awsize,
	       ddr4_C_deburster$to_slave_arprot,
	       ddr4_C_deburster$to_slave_arsize,
	       ddr4_C_deburster$to_slave_awprot,
	       ddr4_C_deburster$to_slave_awsize;
  wire [1 : 0] ddr4_C_deburster$from_master_arburst,
	       ddr4_C_deburster$from_master_awburst,
	       ddr4_C_deburster$from_master_bresp,
	       ddr4_C_deburster$from_master_rresp,
	       ddr4_C_deburster$to_slave_arburst,
	       ddr4_C_deburster$to_slave_awburst,
	       ddr4_C_deburster$to_slave_bresp,
	       ddr4_C_deburster$to_slave_rresp;
  wire ddr4_C_deburster$EN_reset,
       ddr4_C_deburster$from_master_arlock,
       ddr4_C_deburster$from_master_arready,
       ddr4_C_deburster$from_master_arvalid,
       ddr4_C_deburster$from_master_awlock,
       ddr4_C_deburster$from_master_awready,
       ddr4_C_deburster$from_master_awvalid,
       ddr4_C_deburster$from_master_bready,
       ddr4_C_deburster$from_master_bvalid,
       ddr4_C_deburster$from_master_rlast,
       ddr4_C_deburster$from_master_rready,
       ddr4_C_deburster$from_master_rvalid,
       ddr4_C_deburster$from_master_wlast,
       ddr4_C_deburster$from_master_wready,
       ddr4_C_deburster$from_master_wvalid,
       ddr4_C_deburster$to_slave_arlock,
       ddr4_C_deburster$to_slave_arready,
       ddr4_C_deburster$to_slave_arvalid,
       ddr4_C_deburster$to_slave_awlock,
       ddr4_C_deburster$to_slave_awready,
       ddr4_C_deburster$to_slave_awvalid,
       ddr4_C_deburster$to_slave_bready,
       ddr4_C_deburster$to_slave_bvalid,
       ddr4_C_deburster$to_slave_rlast,
       ddr4_C_deburster$to_slave_rready,
       ddr4_C_deburster$to_slave_rvalid,
       ddr4_C_deburster$to_slave_wlast,
       ddr4_C_deburster$to_slave_wready,
       ddr4_C_deburster$to_slave_wvalid;

  // ports of submodule ddr4_D
  wire [511 : 0] ddr4_D$rdata, ddr4_D$wdata;
  wire [63 : 0] ddr4_D$araddr, ddr4_D$awaddr, ddr4_D$wstrb;
  wire [15 : 0] ddr4_D$arid, ddr4_D$awid, ddr4_D$bid, ddr4_D$rid;
  wire [7 : 0] ddr4_D$arlen, ddr4_D$awlen;
  wire [3 : 0] ddr4_D$arcache,
	       ddr4_D$arqos,
	       ddr4_D$arregion,
	       ddr4_D$awcache,
	       ddr4_D$awqos,
	       ddr4_D$awregion;
  wire [2 : 0] ddr4_D$arprot, ddr4_D$arsize, ddr4_D$awprot, ddr4_D$awsize;
  wire [1 : 0] ddr4_D$arburst, ddr4_D$awburst, ddr4_D$bresp, ddr4_D$rresp;
  wire ddr4_D$arlock,
       ddr4_D$arready,
       ddr4_D$arvalid,
       ddr4_D$awlock,
       ddr4_D$awready,
       ddr4_D$awvalid,
       ddr4_D$bready,
       ddr4_D$bvalid,
       ddr4_D$rlast,
       ddr4_D$rready,
       ddr4_D$rvalid,
       ddr4_D$wlast,
       ddr4_D$wready,
       ddr4_D$wvalid;

  // ports of submodule ddr4_D_deburster
  wire [511 : 0] ddr4_D_deburster$from_master_rdata,
		 ddr4_D_deburster$from_master_wdata,
		 ddr4_D_deburster$to_slave_rdata,
		 ddr4_D_deburster$to_slave_wdata;
  wire [63 : 0] ddr4_D_deburster$from_master_araddr,
		ddr4_D_deburster$from_master_awaddr,
		ddr4_D_deburster$from_master_wstrb,
		ddr4_D_deburster$to_slave_araddr,
		ddr4_D_deburster$to_slave_awaddr,
		ddr4_D_deburster$to_slave_wstrb;
  wire [15 : 0] ddr4_D_deburster$from_master_arid,
		ddr4_D_deburster$from_master_awid,
		ddr4_D_deburster$from_master_bid,
		ddr4_D_deburster$from_master_rid,
		ddr4_D_deburster$to_slave_arid,
		ddr4_D_deburster$to_slave_awid,
		ddr4_D_deburster$to_slave_bid,
		ddr4_D_deburster$to_slave_rid;
  wire [7 : 0] ddr4_D_deburster$from_master_arlen,
	       ddr4_D_deburster$from_master_awlen,
	       ddr4_D_deburster$to_slave_arlen,
	       ddr4_D_deburster$to_slave_awlen;
  wire [3 : 0] ddr4_D_deburster$from_master_arcache,
	       ddr4_D_deburster$from_master_arqos,
	       ddr4_D_deburster$from_master_arregion,
	       ddr4_D_deburster$from_master_awcache,
	       ddr4_D_deburster$from_master_awqos,
	       ddr4_D_deburster$from_master_awregion,
	       ddr4_D_deburster$to_slave_arcache,
	       ddr4_D_deburster$to_slave_arqos,
	       ddr4_D_deburster$to_slave_arregion,
	       ddr4_D_deburster$to_slave_awcache,
	       ddr4_D_deburster$to_slave_awqos,
	       ddr4_D_deburster$to_slave_awregion;
  wire [2 : 0] ddr4_D_deburster$from_master_arprot,
	       ddr4_D_deburster$from_master_arsize,
	       ddr4_D_deburster$from_master_awprot,
	       ddr4_D_deburster$from_master_awsize,
	       ddr4_D_deburster$to_slave_arprot,
	       ddr4_D_deburster$to_slave_arsize,
	       ddr4_D_deburster$to_slave_awprot,
	       ddr4_D_deburster$to_slave_awsize;
  wire [1 : 0] ddr4_D_deburster$from_master_arburst,
	       ddr4_D_deburster$from_master_awburst,
	       ddr4_D_deburster$from_master_bresp,
	       ddr4_D_deburster$from_master_rresp,
	       ddr4_D_deburster$to_slave_arburst,
	       ddr4_D_deburster$to_slave_awburst,
	       ddr4_D_deburster$to_slave_bresp,
	       ddr4_D_deburster$to_slave_rresp;
  wire ddr4_D_deburster$EN_reset,
       ddr4_D_deburster$from_master_arlock,
       ddr4_D_deburster$from_master_arready,
       ddr4_D_deburster$from_master_arvalid,
       ddr4_D_deburster$from_master_awlock,
       ddr4_D_deburster$from_master_awready,
       ddr4_D_deburster$from_master_awvalid,
       ddr4_D_deburster$from_master_bready,
       ddr4_D_deburster$from_master_bvalid,
       ddr4_D_deburster$from_master_rlast,
       ddr4_D_deburster$from_master_rready,
       ddr4_D_deburster$from_master_rvalid,
       ddr4_D_deburster$from_master_wlast,
       ddr4_D_deburster$from_master_wready,
       ddr4_D_deburster$from_master_wvalid,
       ddr4_D_deburster$to_slave_arlock,
       ddr4_D_deburster$to_slave_arready,
       ddr4_D_deburster$to_slave_arvalid,
       ddr4_D_deburster$to_slave_awlock,
       ddr4_D_deburster$to_slave_awready,
       ddr4_D_deburster$to_slave_awvalid,
       ddr4_D_deburster$to_slave_bready,
       ddr4_D_deburster$to_slave_bvalid,
       ddr4_D_deburster$to_slave_rlast,
       ddr4_D_deburster$to_slave_rready,
       ddr4_D_deburster$to_slave_rvalid,
       ddr4_D_deburster$to_slave_wlast,
       ddr4_D_deburster$to_slave_wready,
       ddr4_D_deburster$to_slave_wvalid;

  // ports of submodule dma_pcis_xactor_f_rd_addr
  wire [108 : 0] dma_pcis_xactor_f_rd_addr$D_IN,
		 dma_pcis_xactor_f_rd_addr$D_OUT;
  wire dma_pcis_xactor_f_rd_addr$CLR,
       dma_pcis_xactor_f_rd_addr$DEQ,
       dma_pcis_xactor_f_rd_addr$EMPTY_N,
       dma_pcis_xactor_f_rd_addr$ENQ,
       dma_pcis_xactor_f_rd_addr$FULL_N;

  // ports of submodule dma_pcis_xactor_f_rd_data
  wire [530 : 0] dma_pcis_xactor_f_rd_data$D_IN,
		 dma_pcis_xactor_f_rd_data$D_OUT;
  wire dma_pcis_xactor_f_rd_data$CLR,
       dma_pcis_xactor_f_rd_data$DEQ,
       dma_pcis_xactor_f_rd_data$EMPTY_N,
       dma_pcis_xactor_f_rd_data$ENQ,
       dma_pcis_xactor_f_rd_data$FULL_N;

  // ports of submodule dma_pcis_xactor_f_wr_addr
  wire [108 : 0] dma_pcis_xactor_f_wr_addr$D_IN,
		 dma_pcis_xactor_f_wr_addr$D_OUT;
  wire dma_pcis_xactor_f_wr_addr$CLR,
       dma_pcis_xactor_f_wr_addr$DEQ,
       dma_pcis_xactor_f_wr_addr$EMPTY_N,
       dma_pcis_xactor_f_wr_addr$ENQ,
       dma_pcis_xactor_f_wr_addr$FULL_N;

  // ports of submodule dma_pcis_xactor_f_wr_data
  wire [576 : 0] dma_pcis_xactor_f_wr_data$D_IN,
		 dma_pcis_xactor_f_wr_data$D_OUT;
  wire dma_pcis_xactor_f_wr_data$CLR,
       dma_pcis_xactor_f_wr_data$DEQ,
       dma_pcis_xactor_f_wr_data$EMPTY_N,
       dma_pcis_xactor_f_wr_data$ENQ,
       dma_pcis_xactor_f_wr_data$FULL_N;

  // ports of submodule dma_pcis_xactor_f_wr_resp
  wire [17 : 0] dma_pcis_xactor_f_wr_resp$D_IN,
		dma_pcis_xactor_f_wr_resp$D_OUT;
  wire dma_pcis_xactor_f_wr_resp$CLR,
       dma_pcis_xactor_f_wr_resp$DEQ,
       dma_pcis_xactor_f_wr_resp$EMPTY_N,
       dma_pcis_xactor_f_wr_resp$ENQ,
       dma_pcis_xactor_f_wr_resp$FULL_N;

  // ports of submodule ocl_xactor_f_rd_addr
  wire [34 : 0] ocl_xactor_f_rd_addr$D_IN, ocl_xactor_f_rd_addr$D_OUT;
  wire ocl_xactor_f_rd_addr$CLR,
       ocl_xactor_f_rd_addr$DEQ,
       ocl_xactor_f_rd_addr$EMPTY_N,
       ocl_xactor_f_rd_addr$ENQ,
       ocl_xactor_f_rd_addr$FULL_N;

  // ports of submodule ocl_xactor_f_rd_data
  wire [33 : 0] ocl_xactor_f_rd_data$D_IN, ocl_xactor_f_rd_data$D_OUT;
  wire ocl_xactor_f_rd_data$CLR,
       ocl_xactor_f_rd_data$DEQ,
       ocl_xactor_f_rd_data$EMPTY_N,
       ocl_xactor_f_rd_data$ENQ,
       ocl_xactor_f_rd_data$FULL_N;

  // ports of submodule ocl_xactor_f_wr_addr
  wire [34 : 0] ocl_xactor_f_wr_addr$D_IN, ocl_xactor_f_wr_addr$D_OUT;
  wire ocl_xactor_f_wr_addr$CLR,
       ocl_xactor_f_wr_addr$DEQ,
       ocl_xactor_f_wr_addr$EMPTY_N,
       ocl_xactor_f_wr_addr$ENQ,
       ocl_xactor_f_wr_addr$FULL_N;

  // ports of submodule ocl_xactor_f_wr_data
  wire [35 : 0] ocl_xactor_f_wr_data$D_IN, ocl_xactor_f_wr_data$D_OUT;
  wire ocl_xactor_f_wr_data$CLR,
       ocl_xactor_f_wr_data$DEQ,
       ocl_xactor_f_wr_data$EMPTY_N,
       ocl_xactor_f_wr_data$ENQ,
       ocl_xactor_f_wr_data$FULL_N;

  // ports of submodule ocl_xactor_f_wr_resp
  wire [1 : 0] ocl_xactor_f_wr_resp$D_IN, ocl_xactor_f_wr_resp$D_OUT;
  wire ocl_xactor_f_wr_resp$CLR,
       ocl_xactor_f_wr_resp$DEQ,
       ocl_xactor_f_wr_resp$EMPTY_N,
       ocl_xactor_f_wr_resp$ENQ,
       ocl_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_connect_dma_pcis_rd_addr,
       CAN_FIRE_RL_rl_connect_dma_pcis_rd_data,
       CAN_FIRE_RL_rl_connect_dma_pcis_wr_addr,
       CAN_FIRE_RL_rl_connect_dma_pcis_wr_data,
       CAN_FIRE_RL_rl_connect_dma_pcis_wr_resp,
       CAN_FIRE_RL_rl_connect_ocl_rd_addr,
       CAN_FIRE_RL_rl_connect_ocl_rd_data,
       CAN_FIRE_RL_rl_connect_ocl_wr_addr,
       CAN_FIRE_RL_rl_connect_ocl_wr_data,
       CAN_FIRE_RL_rl_connect_ocl_wr_resp,
       CAN_FIRE_RL_rl_connecting,
       CAN_FIRE_RL_rl_host_recv,
       CAN_FIRE_RL_rl_host_send,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_addr_channel_1,
       CAN_FIRE_RL_rl_rd_addr_channel_2,
       CAN_FIRE_RL_rl_rd_addr_channel_3,
       CAN_FIRE_RL_rl_rd_addr_channel_4,
       CAN_FIRE_RL_rl_rd_addr_channel_5,
       CAN_FIRE_RL_rl_rd_addr_channel_6,
       CAN_FIRE_RL_rl_rd_addr_channel_7,
       CAN_FIRE_RL_rl_rd_addr_channel_8,
       CAN_FIRE_RL_rl_rd_addr_channel_9,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_rd_data_channel_1,
       CAN_FIRE_RL_rl_rd_data_channel_2,
       CAN_FIRE_RL_rl_rd_data_channel_3,
       CAN_FIRE_RL_rl_rd_data_channel_4,
       CAN_FIRE_RL_rl_rd_data_channel_5,
       CAN_FIRE_RL_rl_rd_data_channel_6,
       CAN_FIRE_RL_rl_rd_data_channel_7,
       CAN_FIRE_RL_rl_rd_data_channel_8,
       CAN_FIRE_RL_rl_rd_data_channel_9,
       CAN_FIRE_RL_rl_start_when_connected,
       CAN_FIRE_RL_rl_status_signals,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_addr_channel_1,
       CAN_FIRE_RL_rl_wr_addr_channel_2,
       CAN_FIRE_RL_rl_wr_addr_channel_3,
       CAN_FIRE_RL_rl_wr_addr_channel_4,
       CAN_FIRE_RL_rl_wr_addr_channel_5,
       CAN_FIRE_RL_rl_wr_addr_channel_6,
       CAN_FIRE_RL_rl_wr_addr_channel_7,
       CAN_FIRE_RL_rl_wr_addr_channel_8,
       CAN_FIRE_RL_rl_wr_addr_channel_9,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_data_channel_1,
       CAN_FIRE_RL_rl_wr_data_channel_2,
       CAN_FIRE_RL_rl_wr_data_channel_3,
       CAN_FIRE_RL_rl_wr_data_channel_4,
       CAN_FIRE_RL_rl_wr_data_channel_5,
       CAN_FIRE_RL_rl_wr_data_channel_6,
       CAN_FIRE_RL_rl_wr_data_channel_7,
       CAN_FIRE_RL_rl_wr_data_channel_8,
       CAN_FIRE_RL_rl_wr_data_channel_9,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_RL_rl_wr_response_channel_1,
       CAN_FIRE_RL_rl_wr_response_channel_2,
       CAN_FIRE_RL_rl_wr_response_channel_3,
       CAN_FIRE_RL_rl_wr_response_channel_4,
       CAN_FIRE_RL_rl_wr_response_channel_5,
       CAN_FIRE_RL_rl_wr_response_channel_6,
       CAN_FIRE_RL_rl_wr_response_channel_7,
       CAN_FIRE_RL_rl_wr_response_channel_8,
       CAN_FIRE_RL_rl_wr_response_channel_9,
       WILL_FIRE_RL_rl_connect_dma_pcis_rd_addr,
       WILL_FIRE_RL_rl_connect_dma_pcis_rd_data,
       WILL_FIRE_RL_rl_connect_dma_pcis_wr_addr,
       WILL_FIRE_RL_rl_connect_dma_pcis_wr_data,
       WILL_FIRE_RL_rl_connect_dma_pcis_wr_resp,
       WILL_FIRE_RL_rl_connect_ocl_rd_addr,
       WILL_FIRE_RL_rl_connect_ocl_rd_data,
       WILL_FIRE_RL_rl_connect_ocl_wr_addr,
       WILL_FIRE_RL_rl_connect_ocl_wr_data,
       WILL_FIRE_RL_rl_connect_ocl_wr_resp,
       WILL_FIRE_RL_rl_connecting,
       WILL_FIRE_RL_rl_host_recv,
       WILL_FIRE_RL_rl_host_send,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_addr_channel_1,
       WILL_FIRE_RL_rl_rd_addr_channel_2,
       WILL_FIRE_RL_rl_rd_addr_channel_3,
       WILL_FIRE_RL_rl_rd_addr_channel_4,
       WILL_FIRE_RL_rl_rd_addr_channel_5,
       WILL_FIRE_RL_rl_rd_addr_channel_6,
       WILL_FIRE_RL_rl_rd_addr_channel_7,
       WILL_FIRE_RL_rl_rd_addr_channel_8,
       WILL_FIRE_RL_rl_rd_addr_channel_9,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_rd_data_channel_1,
       WILL_FIRE_RL_rl_rd_data_channel_2,
       WILL_FIRE_RL_rl_rd_data_channel_3,
       WILL_FIRE_RL_rl_rd_data_channel_4,
       WILL_FIRE_RL_rl_rd_data_channel_5,
       WILL_FIRE_RL_rl_rd_data_channel_6,
       WILL_FIRE_RL_rl_rd_data_channel_7,
       WILL_FIRE_RL_rl_rd_data_channel_8,
       WILL_FIRE_RL_rl_rd_data_channel_9,
       WILL_FIRE_RL_rl_start_when_connected,
       WILL_FIRE_RL_rl_status_signals,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_addr_channel_1,
       WILL_FIRE_RL_rl_wr_addr_channel_2,
       WILL_FIRE_RL_rl_wr_addr_channel_3,
       WILL_FIRE_RL_rl_wr_addr_channel_4,
       WILL_FIRE_RL_rl_wr_addr_channel_5,
       WILL_FIRE_RL_rl_wr_addr_channel_6,
       WILL_FIRE_RL_rl_wr_addr_channel_7,
       WILL_FIRE_RL_rl_wr_addr_channel_8,
       WILL_FIRE_RL_rl_wr_addr_channel_9,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_data_channel_1,
       WILL_FIRE_RL_rl_wr_data_channel_2,
       WILL_FIRE_RL_rl_wr_data_channel_3,
       WILL_FIRE_RL_rl_wr_data_channel_4,
       WILL_FIRE_RL_rl_wr_data_channel_5,
       WILL_FIRE_RL_rl_wr_data_channel_6,
       WILL_FIRE_RL_rl_wr_data_channel_7,
       WILL_FIRE_RL_rl_wr_data_channel_8,
       WILL_FIRE_RL_rl_wr_data_channel_9,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_RL_rl_wr_response_channel_1,
       WILL_FIRE_RL_rl_wr_response_channel_2,
       WILL_FIRE_RL_rl_wr_response_channel_3,
       WILL_FIRE_RL_rl_wr_response_channel_4,
       WILL_FIRE_RL_rl_wr_response_channel_5,
       WILL_FIRE_RL_rl_wr_response_channel_6,
       WILL_FIRE_RL_rl_wr_response_channel_7,
       WILL_FIRE_RL_rl_wr_response_channel_8,
       WILL_FIRE_RL_rl_wr_response_channel_9;

  // declarations used by system tasks
  // synopsys translate_off
  reg [631 : 0] TASK_c_host_recv___d359;
  // synopsys translate_on

  // submodule aws_BSV_top
  mkAWS_BSV_Top aws_BSV_top(.CLK(CLK),
			    .RST_N(RST_N),
			    .ddr4_A_master_arready(aws_BSV_top$ddr4_A_master_arready),
			    .ddr4_A_master_awready(aws_BSV_top$ddr4_A_master_awready),
			    .ddr4_A_master_bid(aws_BSV_top$ddr4_A_master_bid),
			    .ddr4_A_master_bresp(aws_BSV_top$ddr4_A_master_bresp),
			    .ddr4_A_master_bvalid(aws_BSV_top$ddr4_A_master_bvalid),
			    .ddr4_A_master_rdata(aws_BSV_top$ddr4_A_master_rdata),
			    .ddr4_A_master_rid(aws_BSV_top$ddr4_A_master_rid),
			    .ddr4_A_master_rlast(aws_BSV_top$ddr4_A_master_rlast),
			    .ddr4_A_master_rresp(aws_BSV_top$ddr4_A_master_rresp),
			    .ddr4_A_master_rvalid(aws_BSV_top$ddr4_A_master_rvalid),
			    .ddr4_A_master_wready(aws_BSV_top$ddr4_A_master_wready),
			    .ddr4_B_master_arready(aws_BSV_top$ddr4_B_master_arready),
			    .ddr4_B_master_awready(aws_BSV_top$ddr4_B_master_awready),
			    .ddr4_B_master_bid(aws_BSV_top$ddr4_B_master_bid),
			    .ddr4_B_master_bresp(aws_BSV_top$ddr4_B_master_bresp),
			    .ddr4_B_master_bvalid(aws_BSV_top$ddr4_B_master_bvalid),
			    .ddr4_B_master_rdata(aws_BSV_top$ddr4_B_master_rdata),
			    .ddr4_B_master_rid(aws_BSV_top$ddr4_B_master_rid),
			    .ddr4_B_master_rlast(aws_BSV_top$ddr4_B_master_rlast),
			    .ddr4_B_master_rresp(aws_BSV_top$ddr4_B_master_rresp),
			    .ddr4_B_master_rvalid(aws_BSV_top$ddr4_B_master_rvalid),
			    .ddr4_B_master_wready(aws_BSV_top$ddr4_B_master_wready),
			    .ddr4_C_master_arready(aws_BSV_top$ddr4_C_master_arready),
			    .ddr4_C_master_awready(aws_BSV_top$ddr4_C_master_awready),
			    .ddr4_C_master_bid(aws_BSV_top$ddr4_C_master_bid),
			    .ddr4_C_master_bresp(aws_BSV_top$ddr4_C_master_bresp),
			    .ddr4_C_master_bvalid(aws_BSV_top$ddr4_C_master_bvalid),
			    .ddr4_C_master_rdata(aws_BSV_top$ddr4_C_master_rdata),
			    .ddr4_C_master_rid(aws_BSV_top$ddr4_C_master_rid),
			    .ddr4_C_master_rlast(aws_BSV_top$ddr4_C_master_rlast),
			    .ddr4_C_master_rresp(aws_BSV_top$ddr4_C_master_rresp),
			    .ddr4_C_master_rvalid(aws_BSV_top$ddr4_C_master_rvalid),
			    .ddr4_C_master_wready(aws_BSV_top$ddr4_C_master_wready),
			    .ddr4_D_master_arready(aws_BSV_top$ddr4_D_master_arready),
			    .ddr4_D_master_awready(aws_BSV_top$ddr4_D_master_awready),
			    .ddr4_D_master_bid(aws_BSV_top$ddr4_D_master_bid),
			    .ddr4_D_master_bresp(aws_BSV_top$ddr4_D_master_bresp),
			    .ddr4_D_master_bvalid(aws_BSV_top$ddr4_D_master_bvalid),
			    .ddr4_D_master_rdata(aws_BSV_top$ddr4_D_master_rdata),
			    .ddr4_D_master_rid(aws_BSV_top$ddr4_D_master_rid),
			    .ddr4_D_master_rlast(aws_BSV_top$ddr4_D_master_rlast),
			    .ddr4_D_master_rresp(aws_BSV_top$ddr4_D_master_rresp),
			    .ddr4_D_master_rvalid(aws_BSV_top$ddr4_D_master_rvalid),
			    .ddr4_D_master_wready(aws_BSV_top$ddr4_D_master_wready),
			    .dma_pcis_slave_araddr(aws_BSV_top$dma_pcis_slave_araddr),
			    .dma_pcis_slave_arburst(aws_BSV_top$dma_pcis_slave_arburst),
			    .dma_pcis_slave_arcache(aws_BSV_top$dma_pcis_slave_arcache),
			    .dma_pcis_slave_arid(aws_BSV_top$dma_pcis_slave_arid),
			    .dma_pcis_slave_arlen(aws_BSV_top$dma_pcis_slave_arlen),
			    .dma_pcis_slave_arlock(aws_BSV_top$dma_pcis_slave_arlock),
			    .dma_pcis_slave_arprot(aws_BSV_top$dma_pcis_slave_arprot),
			    .dma_pcis_slave_arqos(aws_BSV_top$dma_pcis_slave_arqos),
			    .dma_pcis_slave_arregion(aws_BSV_top$dma_pcis_slave_arregion),
			    .dma_pcis_slave_arsize(aws_BSV_top$dma_pcis_slave_arsize),
			    .dma_pcis_slave_arvalid(aws_BSV_top$dma_pcis_slave_arvalid),
			    .dma_pcis_slave_awaddr(aws_BSV_top$dma_pcis_slave_awaddr),
			    .dma_pcis_slave_awburst(aws_BSV_top$dma_pcis_slave_awburst),
			    .dma_pcis_slave_awcache(aws_BSV_top$dma_pcis_slave_awcache),
			    .dma_pcis_slave_awid(aws_BSV_top$dma_pcis_slave_awid),
			    .dma_pcis_slave_awlen(aws_BSV_top$dma_pcis_slave_awlen),
			    .dma_pcis_slave_awlock(aws_BSV_top$dma_pcis_slave_awlock),
			    .dma_pcis_slave_awprot(aws_BSV_top$dma_pcis_slave_awprot),
			    .dma_pcis_slave_awqos(aws_BSV_top$dma_pcis_slave_awqos),
			    .dma_pcis_slave_awregion(aws_BSV_top$dma_pcis_slave_awregion),
			    .dma_pcis_slave_awsize(aws_BSV_top$dma_pcis_slave_awsize),
			    .dma_pcis_slave_awvalid(aws_BSV_top$dma_pcis_slave_awvalid),
			    .dma_pcis_slave_bready(aws_BSV_top$dma_pcis_slave_bready),
			    .dma_pcis_slave_rready(aws_BSV_top$dma_pcis_slave_rready),
			    .dma_pcis_slave_wdata(aws_BSV_top$dma_pcis_slave_wdata),
			    .dma_pcis_slave_wlast(aws_BSV_top$dma_pcis_slave_wlast),
			    .dma_pcis_slave_wstrb(aws_BSV_top$dma_pcis_slave_wstrb),
			    .dma_pcis_slave_wvalid(aws_BSV_top$dma_pcis_slave_wvalid),
			    .m_ddr4_ready_ddr4_A_B_C_D_ready(aws_BSV_top$m_ddr4_ready_ddr4_A_B_C_D_ready),
			    .m_glcount0_glcount0(aws_BSV_top$m_glcount0_glcount0),
			    .m_glcount1_glcount1(aws_BSV_top$m_glcount1_glcount1),
			    .m_vdip_vdip(aws_BSV_top$m_vdip_vdip),
			    .ocl_slave_araddr(aws_BSV_top$ocl_slave_araddr),
			    .ocl_slave_arprot(aws_BSV_top$ocl_slave_arprot),
			    .ocl_slave_arvalid(aws_BSV_top$ocl_slave_arvalid),
			    .ocl_slave_awaddr(aws_BSV_top$ocl_slave_awaddr),
			    .ocl_slave_awprot(aws_BSV_top$ocl_slave_awprot),
			    .ocl_slave_awvalid(aws_BSV_top$ocl_slave_awvalid),
			    .ocl_slave_bready(aws_BSV_top$ocl_slave_bready),
			    .ocl_slave_rready(aws_BSV_top$ocl_slave_rready),
			    .ocl_slave_wdata(aws_BSV_top$ocl_slave_wdata),
			    .ocl_slave_wstrb(aws_BSV_top$ocl_slave_wstrb),
			    .ocl_slave_wvalid(aws_BSV_top$ocl_slave_wvalid),
			    .dma_pcis_slave_awready(aws_BSV_top$dma_pcis_slave_awready),
			    .dma_pcis_slave_wready(aws_BSV_top$dma_pcis_slave_wready),
			    .dma_pcis_slave_bvalid(aws_BSV_top$dma_pcis_slave_bvalid),
			    .dma_pcis_slave_bid(aws_BSV_top$dma_pcis_slave_bid),
			    .dma_pcis_slave_bresp(aws_BSV_top$dma_pcis_slave_bresp),
			    .dma_pcis_slave_arready(aws_BSV_top$dma_pcis_slave_arready),
			    .dma_pcis_slave_rvalid(aws_BSV_top$dma_pcis_slave_rvalid),
			    .dma_pcis_slave_rid(aws_BSV_top$dma_pcis_slave_rid),
			    .dma_pcis_slave_rdata(aws_BSV_top$dma_pcis_slave_rdata),
			    .dma_pcis_slave_rresp(aws_BSV_top$dma_pcis_slave_rresp),
			    .dma_pcis_slave_rlast(aws_BSV_top$dma_pcis_slave_rlast),
			    .ocl_slave_awready(aws_BSV_top$ocl_slave_awready),
			    .ocl_slave_wready(aws_BSV_top$ocl_slave_wready),
			    .ocl_slave_bvalid(aws_BSV_top$ocl_slave_bvalid),
			    .ocl_slave_bresp(aws_BSV_top$ocl_slave_bresp),
			    .ocl_slave_arready(aws_BSV_top$ocl_slave_arready),
			    .ocl_slave_rvalid(aws_BSV_top$ocl_slave_rvalid),
			    .ocl_slave_rresp(aws_BSV_top$ocl_slave_rresp),
			    .ocl_slave_rdata(aws_BSV_top$ocl_slave_rdata),
			    .ddr4_A_master_awvalid(aws_BSV_top$ddr4_A_master_awvalid),
			    .ddr4_A_master_awid(aws_BSV_top$ddr4_A_master_awid),
			    .ddr4_A_master_awaddr(aws_BSV_top$ddr4_A_master_awaddr),
			    .ddr4_A_master_awlen(aws_BSV_top$ddr4_A_master_awlen),
			    .ddr4_A_master_awsize(aws_BSV_top$ddr4_A_master_awsize),
			    .ddr4_A_master_awburst(aws_BSV_top$ddr4_A_master_awburst),
			    .ddr4_A_master_awlock(aws_BSV_top$ddr4_A_master_awlock),
			    .ddr4_A_master_awcache(aws_BSV_top$ddr4_A_master_awcache),
			    .ddr4_A_master_awprot(aws_BSV_top$ddr4_A_master_awprot),
			    .ddr4_A_master_awqos(aws_BSV_top$ddr4_A_master_awqos),
			    .ddr4_A_master_awregion(aws_BSV_top$ddr4_A_master_awregion),
			    .ddr4_A_master_wvalid(aws_BSV_top$ddr4_A_master_wvalid),
			    .ddr4_A_master_wdata(aws_BSV_top$ddr4_A_master_wdata),
			    .ddr4_A_master_wstrb(aws_BSV_top$ddr4_A_master_wstrb),
			    .ddr4_A_master_wlast(aws_BSV_top$ddr4_A_master_wlast),
			    .ddr4_A_master_bready(aws_BSV_top$ddr4_A_master_bready),
			    .ddr4_A_master_arvalid(aws_BSV_top$ddr4_A_master_arvalid),
			    .ddr4_A_master_arid(aws_BSV_top$ddr4_A_master_arid),
			    .ddr4_A_master_araddr(aws_BSV_top$ddr4_A_master_araddr),
			    .ddr4_A_master_arlen(aws_BSV_top$ddr4_A_master_arlen),
			    .ddr4_A_master_arsize(aws_BSV_top$ddr4_A_master_arsize),
			    .ddr4_A_master_arburst(aws_BSV_top$ddr4_A_master_arburst),
			    .ddr4_A_master_arlock(aws_BSV_top$ddr4_A_master_arlock),
			    .ddr4_A_master_arcache(aws_BSV_top$ddr4_A_master_arcache),
			    .ddr4_A_master_arprot(aws_BSV_top$ddr4_A_master_arprot),
			    .ddr4_A_master_arqos(aws_BSV_top$ddr4_A_master_arqos),
			    .ddr4_A_master_arregion(aws_BSV_top$ddr4_A_master_arregion),
			    .ddr4_A_master_rready(aws_BSV_top$ddr4_A_master_rready),
			    .ddr4_B_master_awvalid(aws_BSV_top$ddr4_B_master_awvalid),
			    .ddr4_B_master_awid(aws_BSV_top$ddr4_B_master_awid),
			    .ddr4_B_master_awaddr(aws_BSV_top$ddr4_B_master_awaddr),
			    .ddr4_B_master_awlen(aws_BSV_top$ddr4_B_master_awlen),
			    .ddr4_B_master_awsize(aws_BSV_top$ddr4_B_master_awsize),
			    .ddr4_B_master_awburst(aws_BSV_top$ddr4_B_master_awburst),
			    .ddr4_B_master_awlock(aws_BSV_top$ddr4_B_master_awlock),
			    .ddr4_B_master_awcache(aws_BSV_top$ddr4_B_master_awcache),
			    .ddr4_B_master_awprot(aws_BSV_top$ddr4_B_master_awprot),
			    .ddr4_B_master_awqos(aws_BSV_top$ddr4_B_master_awqos),
			    .ddr4_B_master_awregion(aws_BSV_top$ddr4_B_master_awregion),
			    .ddr4_B_master_wvalid(aws_BSV_top$ddr4_B_master_wvalid),
			    .ddr4_B_master_wdata(aws_BSV_top$ddr4_B_master_wdata),
			    .ddr4_B_master_wstrb(aws_BSV_top$ddr4_B_master_wstrb),
			    .ddr4_B_master_wlast(aws_BSV_top$ddr4_B_master_wlast),
			    .ddr4_B_master_bready(aws_BSV_top$ddr4_B_master_bready),
			    .ddr4_B_master_arvalid(aws_BSV_top$ddr4_B_master_arvalid),
			    .ddr4_B_master_arid(aws_BSV_top$ddr4_B_master_arid),
			    .ddr4_B_master_araddr(aws_BSV_top$ddr4_B_master_araddr),
			    .ddr4_B_master_arlen(aws_BSV_top$ddr4_B_master_arlen),
			    .ddr4_B_master_arsize(aws_BSV_top$ddr4_B_master_arsize),
			    .ddr4_B_master_arburst(aws_BSV_top$ddr4_B_master_arburst),
			    .ddr4_B_master_arlock(aws_BSV_top$ddr4_B_master_arlock),
			    .ddr4_B_master_arcache(aws_BSV_top$ddr4_B_master_arcache),
			    .ddr4_B_master_arprot(aws_BSV_top$ddr4_B_master_arprot),
			    .ddr4_B_master_arqos(aws_BSV_top$ddr4_B_master_arqos),
			    .ddr4_B_master_arregion(aws_BSV_top$ddr4_B_master_arregion),
			    .ddr4_B_master_rready(aws_BSV_top$ddr4_B_master_rready),
			    .ddr4_C_master_awvalid(aws_BSV_top$ddr4_C_master_awvalid),
			    .ddr4_C_master_awid(aws_BSV_top$ddr4_C_master_awid),
			    .ddr4_C_master_awaddr(aws_BSV_top$ddr4_C_master_awaddr),
			    .ddr4_C_master_awlen(aws_BSV_top$ddr4_C_master_awlen),
			    .ddr4_C_master_awsize(aws_BSV_top$ddr4_C_master_awsize),
			    .ddr4_C_master_awburst(aws_BSV_top$ddr4_C_master_awburst),
			    .ddr4_C_master_awlock(aws_BSV_top$ddr4_C_master_awlock),
			    .ddr4_C_master_awcache(aws_BSV_top$ddr4_C_master_awcache),
			    .ddr4_C_master_awprot(aws_BSV_top$ddr4_C_master_awprot),
			    .ddr4_C_master_awqos(aws_BSV_top$ddr4_C_master_awqos),
			    .ddr4_C_master_awregion(aws_BSV_top$ddr4_C_master_awregion),
			    .ddr4_C_master_wvalid(aws_BSV_top$ddr4_C_master_wvalid),
			    .ddr4_C_master_wdata(aws_BSV_top$ddr4_C_master_wdata),
			    .ddr4_C_master_wstrb(aws_BSV_top$ddr4_C_master_wstrb),
			    .ddr4_C_master_wlast(aws_BSV_top$ddr4_C_master_wlast),
			    .ddr4_C_master_bready(aws_BSV_top$ddr4_C_master_bready),
			    .ddr4_C_master_arvalid(aws_BSV_top$ddr4_C_master_arvalid),
			    .ddr4_C_master_arid(aws_BSV_top$ddr4_C_master_arid),
			    .ddr4_C_master_araddr(aws_BSV_top$ddr4_C_master_araddr),
			    .ddr4_C_master_arlen(aws_BSV_top$ddr4_C_master_arlen),
			    .ddr4_C_master_arsize(aws_BSV_top$ddr4_C_master_arsize),
			    .ddr4_C_master_arburst(aws_BSV_top$ddr4_C_master_arburst),
			    .ddr4_C_master_arlock(aws_BSV_top$ddr4_C_master_arlock),
			    .ddr4_C_master_arcache(aws_BSV_top$ddr4_C_master_arcache),
			    .ddr4_C_master_arprot(aws_BSV_top$ddr4_C_master_arprot),
			    .ddr4_C_master_arqos(aws_BSV_top$ddr4_C_master_arqos),
			    .ddr4_C_master_arregion(aws_BSV_top$ddr4_C_master_arregion),
			    .ddr4_C_master_rready(aws_BSV_top$ddr4_C_master_rready),
			    .ddr4_D_master_awvalid(aws_BSV_top$ddr4_D_master_awvalid),
			    .ddr4_D_master_awid(aws_BSV_top$ddr4_D_master_awid),
			    .ddr4_D_master_awaddr(aws_BSV_top$ddr4_D_master_awaddr),
			    .ddr4_D_master_awlen(aws_BSV_top$ddr4_D_master_awlen),
			    .ddr4_D_master_awsize(aws_BSV_top$ddr4_D_master_awsize),
			    .ddr4_D_master_awburst(aws_BSV_top$ddr4_D_master_awburst),
			    .ddr4_D_master_awlock(aws_BSV_top$ddr4_D_master_awlock),
			    .ddr4_D_master_awcache(aws_BSV_top$ddr4_D_master_awcache),
			    .ddr4_D_master_awprot(aws_BSV_top$ddr4_D_master_awprot),
			    .ddr4_D_master_awqos(aws_BSV_top$ddr4_D_master_awqos),
			    .ddr4_D_master_awregion(aws_BSV_top$ddr4_D_master_awregion),
			    .ddr4_D_master_wvalid(aws_BSV_top$ddr4_D_master_wvalid),
			    .ddr4_D_master_wdata(aws_BSV_top$ddr4_D_master_wdata),
			    .ddr4_D_master_wstrb(aws_BSV_top$ddr4_D_master_wstrb),
			    .ddr4_D_master_wlast(aws_BSV_top$ddr4_D_master_wlast),
			    .ddr4_D_master_bready(aws_BSV_top$ddr4_D_master_bready),
			    .ddr4_D_master_arvalid(aws_BSV_top$ddr4_D_master_arvalid),
			    .ddr4_D_master_arid(aws_BSV_top$ddr4_D_master_arid),
			    .ddr4_D_master_araddr(aws_BSV_top$ddr4_D_master_araddr),
			    .ddr4_D_master_arlen(aws_BSV_top$ddr4_D_master_arlen),
			    .ddr4_D_master_arsize(aws_BSV_top$ddr4_D_master_arsize),
			    .ddr4_D_master_arburst(aws_BSV_top$ddr4_D_master_arburst),
			    .ddr4_D_master_arlock(aws_BSV_top$ddr4_D_master_arlock),
			    .ddr4_D_master_arcache(aws_BSV_top$ddr4_D_master_arcache),
			    .ddr4_D_master_arprot(aws_BSV_top$ddr4_D_master_arprot),
			    .ddr4_D_master_arqos(aws_BSV_top$ddr4_D_master_arqos),
			    .ddr4_D_master_arregion(aws_BSV_top$ddr4_D_master_arregion),
			    .ddr4_D_master_rready(aws_BSV_top$ddr4_D_master_rready),
			    .m_vled(aws_BSV_top$m_vled));

  // submodule comms
  mkBytevec comms(.CLK(CLK),
		  .RST_N(RST_N),
		  .fi_AXI4L_Rd_Data_d32_u0_enq_x(comms$fi_AXI4L_Rd_Data_d32_u0_enq_x),
		  .fi_AXI4L_Wr_Resp_u0_enq_x(comms$fi_AXI4L_Wr_Resp_u0_enq_x),
		  .fi_AXI4_Rd_Data_i16_d512_u0_enq_x(comms$fi_AXI4_Rd_Data_i16_d512_u0_enq_x),
		  .fi_AXI4_Wr_Resp_i16_u0_enq_x(comms$fi_AXI4_Wr_Resp_i16_u0_enq_x),
		  .fi_C_to_BSV_bytevec_enq_x(comms$fi_C_to_BSV_bytevec_enq_x),
		  .EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq(comms$EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq),
		  .EN_fo_AXI4_Wr_Data_d512_u0_deq(comms$EN_fo_AXI4_Wr_Data_d512_u0_deq),
		  .EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq(comms$EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq),
		  .EN_fo_AXI4L_Wr_Addr_a32_u0_deq(comms$EN_fo_AXI4L_Wr_Addr_a32_u0_deq),
		  .EN_fo_AXI4L_Wr_Data_d32_deq(comms$EN_fo_AXI4L_Wr_Data_d32_deq),
		  .EN_fo_AXI4L_Rd_Addr_a32_u0_deq(comms$EN_fo_AXI4L_Rd_Addr_a32_u0_deq),
		  .EN_fi_AXI4_Wr_Resp_i16_u0_enq(comms$EN_fi_AXI4_Wr_Resp_i16_u0_enq),
		  .EN_fi_AXI4_Rd_Data_i16_d512_u0_enq(comms$EN_fi_AXI4_Rd_Data_i16_d512_u0_enq),
		  .EN_fi_AXI4L_Wr_Resp_u0_enq(comms$EN_fi_AXI4L_Wr_Resp_u0_enq),
		  .EN_fi_AXI4L_Rd_Data_d32_u0_enq(comms$EN_fi_AXI4L_Rd_Data_d32_u0_enq),
		  .EN_fi_C_to_BSV_bytevec_enq(comms$EN_fi_C_to_BSV_bytevec_enq),
		  .EN_fo_BSV_to_C_bytevec_deq(comms$EN_fo_BSV_to_C_bytevec_deq),
		  .fo_AXI4_Wr_Addr_i16_a64_u0_first(comms$fo_AXI4_Wr_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first(comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq(comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq),
		  .fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty(),
		  .RDY_fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty(),
		  .fo_AXI4_Wr_Data_d512_u0_first(comms$fo_AXI4_Wr_Data_d512_u0_first),
		  .RDY_fo_AXI4_Wr_Data_d512_u0_first(comms$RDY_fo_AXI4_Wr_Data_d512_u0_first),
		  .RDY_fo_AXI4_Wr_Data_d512_u0_deq(comms$RDY_fo_AXI4_Wr_Data_d512_u0_deq),
		  .fo_AXI4_Wr_Data_d512_u0_notEmpty(),
		  .RDY_fo_AXI4_Wr_Data_d512_u0_notEmpty(),
		  .fo_AXI4_Rd_Addr_i16_a64_u0_first(comms$fo_AXI4_Rd_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first(comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq(comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq),
		  .fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty(),
		  .RDY_fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty(),
		  .fo_AXI4L_Wr_Addr_a32_u0_first(comms$fo_AXI4L_Wr_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Wr_Addr_a32_u0_first(comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Wr_Addr_a32_u0_deq(comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq),
		  .fo_AXI4L_Wr_Addr_a32_u0_notEmpty(),
		  .RDY_fo_AXI4L_Wr_Addr_a32_u0_notEmpty(),
		  .fo_AXI4L_Wr_Data_d32_first(comms$fo_AXI4L_Wr_Data_d32_first),
		  .RDY_fo_AXI4L_Wr_Data_d32_first(comms$RDY_fo_AXI4L_Wr_Data_d32_first),
		  .RDY_fo_AXI4L_Wr_Data_d32_deq(comms$RDY_fo_AXI4L_Wr_Data_d32_deq),
		  .fo_AXI4L_Wr_Data_d32_notEmpty(),
		  .RDY_fo_AXI4L_Wr_Data_d32_notEmpty(),
		  .fo_AXI4L_Rd_Addr_a32_u0_first(comms$fo_AXI4L_Rd_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Rd_Addr_a32_u0_first(comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Rd_Addr_a32_u0_deq(comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq),
		  .fo_AXI4L_Rd_Addr_a32_u0_notEmpty(),
		  .RDY_fo_AXI4L_Rd_Addr_a32_u0_notEmpty(),
		  .RDY_fi_AXI4_Wr_Resp_i16_u0_enq(comms$RDY_fi_AXI4_Wr_Resp_i16_u0_enq),
		  .fi_AXI4_Wr_Resp_i16_u0_notFull(),
		  .RDY_fi_AXI4_Wr_Resp_i16_u0_notFull(),
		  .RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq(comms$RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq),
		  .fi_AXI4_Rd_Data_i16_d512_u0_notFull(),
		  .RDY_fi_AXI4_Rd_Data_i16_d512_u0_notFull(),
		  .RDY_fi_AXI4L_Wr_Resp_u0_enq(comms$RDY_fi_AXI4L_Wr_Resp_u0_enq),
		  .fi_AXI4L_Wr_Resp_u0_notFull(),
		  .RDY_fi_AXI4L_Wr_Resp_u0_notFull(),
		  .RDY_fi_AXI4L_Rd_Data_d32_u0_enq(comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq),
		  .fi_AXI4L_Rd_Data_d32_u0_notFull(),
		  .RDY_fi_AXI4L_Rd_Data_d32_u0_notFull(),
		  .RDY_fi_C_to_BSV_bytevec_enq(comms$RDY_fi_C_to_BSV_bytevec_enq),
		  .fi_C_to_BSV_bytevec_notFull(),
		  .RDY_fi_C_to_BSV_bytevec_notFull(),
		  .fo_BSV_to_C_bytevec_first(comms$fo_BSV_to_C_bytevec_first),
		  .RDY_fo_BSV_to_C_bytevec_first(comms$RDY_fo_BSV_to_C_bytevec_first),
		  .RDY_fo_BSV_to_C_bytevec_deq(comms$RDY_fo_BSV_to_C_bytevec_deq),
		  .fo_BSV_to_C_bytevec_notEmpty(),
		  .RDY_fo_BSV_to_C_bytevec_notEmpty());

  // submodule ddr4_A
  mkMem_Model #(.ddr4_num(2'd0)) ddr4_A(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_A$araddr),
					.arburst(ddr4_A$arburst),
					.arcache(ddr4_A$arcache),
					.arid(ddr4_A$arid),
					.arlen(ddr4_A$arlen),
					.arlock(ddr4_A$arlock),
					.arprot(ddr4_A$arprot),
					.arqos(ddr4_A$arqos),
					.arregion(ddr4_A$arregion),
					.arsize(ddr4_A$arsize),
					.arvalid(ddr4_A$arvalid),
					.awaddr(ddr4_A$awaddr),
					.awburst(ddr4_A$awburst),
					.awcache(ddr4_A$awcache),
					.awid(ddr4_A$awid),
					.awlen(ddr4_A$awlen),
					.awlock(ddr4_A$awlock),
					.awprot(ddr4_A$awprot),
					.awqos(ddr4_A$awqos),
					.awregion(ddr4_A$awregion),
					.awsize(ddr4_A$awsize),
					.awvalid(ddr4_A$awvalid),
					.bready(ddr4_A$bready),
					.rready(ddr4_A$rready),
					.wdata(ddr4_A$wdata),
					.wlast(ddr4_A$wlast),
					.wstrb(ddr4_A$wstrb),
					.wvalid(ddr4_A$wvalid),
					.awready(ddr4_A$awready),
					.wready(ddr4_A$wready),
					.bvalid(ddr4_A$bvalid),
					.bid(ddr4_A$bid),
					.bresp(ddr4_A$bresp),
					.arready(ddr4_A$arready),
					.rvalid(ddr4_A$rvalid),
					.rid(ddr4_A$rid),
					.rdata(ddr4_A$rdata),
					.rresp(ddr4_A$rresp),
					.rlast(ddr4_A$rlast));

  // submodule ddr4_A_deburster
  mkAXI4_Deburster_DDR4 ddr4_A_deburster(.CLK(CLK),
					 .RST_N(RST_N),
					 .from_master_araddr(ddr4_A_deburster$from_master_araddr),
					 .from_master_arburst(ddr4_A_deburster$from_master_arburst),
					 .from_master_arcache(ddr4_A_deburster$from_master_arcache),
					 .from_master_arid(ddr4_A_deburster$from_master_arid),
					 .from_master_arlen(ddr4_A_deburster$from_master_arlen),
					 .from_master_arlock(ddr4_A_deburster$from_master_arlock),
					 .from_master_arprot(ddr4_A_deburster$from_master_arprot),
					 .from_master_arqos(ddr4_A_deburster$from_master_arqos),
					 .from_master_arregion(ddr4_A_deburster$from_master_arregion),
					 .from_master_arsize(ddr4_A_deburster$from_master_arsize),
					 .from_master_arvalid(ddr4_A_deburster$from_master_arvalid),
					 .from_master_awaddr(ddr4_A_deburster$from_master_awaddr),
					 .from_master_awburst(ddr4_A_deburster$from_master_awburst),
					 .from_master_awcache(ddr4_A_deburster$from_master_awcache),
					 .from_master_awid(ddr4_A_deburster$from_master_awid),
					 .from_master_awlen(ddr4_A_deburster$from_master_awlen),
					 .from_master_awlock(ddr4_A_deburster$from_master_awlock),
					 .from_master_awprot(ddr4_A_deburster$from_master_awprot),
					 .from_master_awqos(ddr4_A_deburster$from_master_awqos),
					 .from_master_awregion(ddr4_A_deburster$from_master_awregion),
					 .from_master_awsize(ddr4_A_deburster$from_master_awsize),
					 .from_master_awvalid(ddr4_A_deburster$from_master_awvalid),
					 .from_master_bready(ddr4_A_deburster$from_master_bready),
					 .from_master_rready(ddr4_A_deburster$from_master_rready),
					 .from_master_wdata(ddr4_A_deburster$from_master_wdata),
					 .from_master_wlast(ddr4_A_deburster$from_master_wlast),
					 .from_master_wstrb(ddr4_A_deburster$from_master_wstrb),
					 .from_master_wvalid(ddr4_A_deburster$from_master_wvalid),
					 .to_slave_arready(ddr4_A_deburster$to_slave_arready),
					 .to_slave_awready(ddr4_A_deburster$to_slave_awready),
					 .to_slave_bid(ddr4_A_deburster$to_slave_bid),
					 .to_slave_bresp(ddr4_A_deburster$to_slave_bresp),
					 .to_slave_bvalid(ddr4_A_deburster$to_slave_bvalid),
					 .to_slave_rdata(ddr4_A_deburster$to_slave_rdata),
					 .to_slave_rid(ddr4_A_deburster$to_slave_rid),
					 .to_slave_rlast(ddr4_A_deburster$to_slave_rlast),
					 .to_slave_rresp(ddr4_A_deburster$to_slave_rresp),
					 .to_slave_rvalid(ddr4_A_deburster$to_slave_rvalid),
					 .to_slave_wready(ddr4_A_deburster$to_slave_wready),
					 .EN_reset(ddr4_A_deburster$EN_reset),
					 .RDY_reset(),
					 .from_master_awready(ddr4_A_deburster$from_master_awready),
					 .from_master_wready(ddr4_A_deburster$from_master_wready),
					 .from_master_bvalid(ddr4_A_deburster$from_master_bvalid),
					 .from_master_bid(ddr4_A_deburster$from_master_bid),
					 .from_master_bresp(ddr4_A_deburster$from_master_bresp),
					 .from_master_arready(ddr4_A_deburster$from_master_arready),
					 .from_master_rvalid(ddr4_A_deburster$from_master_rvalid),
					 .from_master_rid(ddr4_A_deburster$from_master_rid),
					 .from_master_rdata(ddr4_A_deburster$from_master_rdata),
					 .from_master_rresp(ddr4_A_deburster$from_master_rresp),
					 .from_master_rlast(ddr4_A_deburster$from_master_rlast),
					 .to_slave_awvalid(ddr4_A_deburster$to_slave_awvalid),
					 .to_slave_awid(ddr4_A_deburster$to_slave_awid),
					 .to_slave_awaddr(ddr4_A_deburster$to_slave_awaddr),
					 .to_slave_awlen(ddr4_A_deburster$to_slave_awlen),
					 .to_slave_awsize(ddr4_A_deburster$to_slave_awsize),
					 .to_slave_awburst(ddr4_A_deburster$to_slave_awburst),
					 .to_slave_awlock(ddr4_A_deburster$to_slave_awlock),
					 .to_slave_awcache(ddr4_A_deburster$to_slave_awcache),
					 .to_slave_awprot(ddr4_A_deburster$to_slave_awprot),
					 .to_slave_awqos(ddr4_A_deburster$to_slave_awqos),
					 .to_slave_awregion(ddr4_A_deburster$to_slave_awregion),
					 .to_slave_wvalid(ddr4_A_deburster$to_slave_wvalid),
					 .to_slave_wdata(ddr4_A_deburster$to_slave_wdata),
					 .to_slave_wstrb(ddr4_A_deburster$to_slave_wstrb),
					 .to_slave_wlast(ddr4_A_deburster$to_slave_wlast),
					 .to_slave_bready(ddr4_A_deburster$to_slave_bready),
					 .to_slave_arvalid(ddr4_A_deburster$to_slave_arvalid),
					 .to_slave_arid(ddr4_A_deburster$to_slave_arid),
					 .to_slave_araddr(ddr4_A_deburster$to_slave_araddr),
					 .to_slave_arlen(ddr4_A_deburster$to_slave_arlen),
					 .to_slave_arsize(ddr4_A_deburster$to_slave_arsize),
					 .to_slave_arburst(ddr4_A_deburster$to_slave_arburst),
					 .to_slave_arlock(ddr4_A_deburster$to_slave_arlock),
					 .to_slave_arcache(ddr4_A_deburster$to_slave_arcache),
					 .to_slave_arprot(ddr4_A_deburster$to_slave_arprot),
					 .to_slave_arqos(ddr4_A_deburster$to_slave_arqos),
					 .to_slave_arregion(ddr4_A_deburster$to_slave_arregion),
					 .to_slave_rready(ddr4_A_deburster$to_slave_rready));

  // submodule ddr4_B
  mkMem_Model #(.ddr4_num(2'd1)) ddr4_B(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_B$araddr),
					.arburst(ddr4_B$arburst),
					.arcache(ddr4_B$arcache),
					.arid(ddr4_B$arid),
					.arlen(ddr4_B$arlen),
					.arlock(ddr4_B$arlock),
					.arprot(ddr4_B$arprot),
					.arqos(ddr4_B$arqos),
					.arregion(ddr4_B$arregion),
					.arsize(ddr4_B$arsize),
					.arvalid(ddr4_B$arvalid),
					.awaddr(ddr4_B$awaddr),
					.awburst(ddr4_B$awburst),
					.awcache(ddr4_B$awcache),
					.awid(ddr4_B$awid),
					.awlen(ddr4_B$awlen),
					.awlock(ddr4_B$awlock),
					.awprot(ddr4_B$awprot),
					.awqos(ddr4_B$awqos),
					.awregion(ddr4_B$awregion),
					.awsize(ddr4_B$awsize),
					.awvalid(ddr4_B$awvalid),
					.bready(ddr4_B$bready),
					.rready(ddr4_B$rready),
					.wdata(ddr4_B$wdata),
					.wlast(ddr4_B$wlast),
					.wstrb(ddr4_B$wstrb),
					.wvalid(ddr4_B$wvalid),
					.awready(ddr4_B$awready),
					.wready(ddr4_B$wready),
					.bvalid(ddr4_B$bvalid),
					.bid(ddr4_B$bid),
					.bresp(ddr4_B$bresp),
					.arready(ddr4_B$arready),
					.rvalid(ddr4_B$rvalid),
					.rid(ddr4_B$rid),
					.rdata(ddr4_B$rdata),
					.rresp(ddr4_B$rresp),
					.rlast(ddr4_B$rlast));

  // submodule ddr4_B_deburster
  mkAXI4_Deburster_DDR4 ddr4_B_deburster(.CLK(CLK),
					 .RST_N(RST_N),
					 .from_master_araddr(ddr4_B_deburster$from_master_araddr),
					 .from_master_arburst(ddr4_B_deburster$from_master_arburst),
					 .from_master_arcache(ddr4_B_deburster$from_master_arcache),
					 .from_master_arid(ddr4_B_deburster$from_master_arid),
					 .from_master_arlen(ddr4_B_deburster$from_master_arlen),
					 .from_master_arlock(ddr4_B_deburster$from_master_arlock),
					 .from_master_arprot(ddr4_B_deburster$from_master_arprot),
					 .from_master_arqos(ddr4_B_deburster$from_master_arqos),
					 .from_master_arregion(ddr4_B_deburster$from_master_arregion),
					 .from_master_arsize(ddr4_B_deburster$from_master_arsize),
					 .from_master_arvalid(ddr4_B_deburster$from_master_arvalid),
					 .from_master_awaddr(ddr4_B_deburster$from_master_awaddr),
					 .from_master_awburst(ddr4_B_deburster$from_master_awburst),
					 .from_master_awcache(ddr4_B_deburster$from_master_awcache),
					 .from_master_awid(ddr4_B_deburster$from_master_awid),
					 .from_master_awlen(ddr4_B_deburster$from_master_awlen),
					 .from_master_awlock(ddr4_B_deburster$from_master_awlock),
					 .from_master_awprot(ddr4_B_deburster$from_master_awprot),
					 .from_master_awqos(ddr4_B_deburster$from_master_awqos),
					 .from_master_awregion(ddr4_B_deburster$from_master_awregion),
					 .from_master_awsize(ddr4_B_deburster$from_master_awsize),
					 .from_master_awvalid(ddr4_B_deburster$from_master_awvalid),
					 .from_master_bready(ddr4_B_deburster$from_master_bready),
					 .from_master_rready(ddr4_B_deburster$from_master_rready),
					 .from_master_wdata(ddr4_B_deburster$from_master_wdata),
					 .from_master_wlast(ddr4_B_deburster$from_master_wlast),
					 .from_master_wstrb(ddr4_B_deburster$from_master_wstrb),
					 .from_master_wvalid(ddr4_B_deburster$from_master_wvalid),
					 .to_slave_arready(ddr4_B_deburster$to_slave_arready),
					 .to_slave_awready(ddr4_B_deburster$to_slave_awready),
					 .to_slave_bid(ddr4_B_deburster$to_slave_bid),
					 .to_slave_bresp(ddr4_B_deburster$to_slave_bresp),
					 .to_slave_bvalid(ddr4_B_deburster$to_slave_bvalid),
					 .to_slave_rdata(ddr4_B_deburster$to_slave_rdata),
					 .to_slave_rid(ddr4_B_deburster$to_slave_rid),
					 .to_slave_rlast(ddr4_B_deburster$to_slave_rlast),
					 .to_slave_rresp(ddr4_B_deburster$to_slave_rresp),
					 .to_slave_rvalid(ddr4_B_deburster$to_slave_rvalid),
					 .to_slave_wready(ddr4_B_deburster$to_slave_wready),
					 .EN_reset(ddr4_B_deburster$EN_reset),
					 .RDY_reset(),
					 .from_master_awready(ddr4_B_deburster$from_master_awready),
					 .from_master_wready(ddr4_B_deburster$from_master_wready),
					 .from_master_bvalid(ddr4_B_deburster$from_master_bvalid),
					 .from_master_bid(ddr4_B_deburster$from_master_bid),
					 .from_master_bresp(ddr4_B_deburster$from_master_bresp),
					 .from_master_arready(ddr4_B_deburster$from_master_arready),
					 .from_master_rvalid(ddr4_B_deburster$from_master_rvalid),
					 .from_master_rid(ddr4_B_deburster$from_master_rid),
					 .from_master_rdata(ddr4_B_deburster$from_master_rdata),
					 .from_master_rresp(ddr4_B_deburster$from_master_rresp),
					 .from_master_rlast(ddr4_B_deburster$from_master_rlast),
					 .to_slave_awvalid(ddr4_B_deburster$to_slave_awvalid),
					 .to_slave_awid(ddr4_B_deburster$to_slave_awid),
					 .to_slave_awaddr(ddr4_B_deburster$to_slave_awaddr),
					 .to_slave_awlen(ddr4_B_deburster$to_slave_awlen),
					 .to_slave_awsize(ddr4_B_deburster$to_slave_awsize),
					 .to_slave_awburst(ddr4_B_deburster$to_slave_awburst),
					 .to_slave_awlock(ddr4_B_deburster$to_slave_awlock),
					 .to_slave_awcache(ddr4_B_deburster$to_slave_awcache),
					 .to_slave_awprot(ddr4_B_deburster$to_slave_awprot),
					 .to_slave_awqos(ddr4_B_deburster$to_slave_awqos),
					 .to_slave_awregion(ddr4_B_deburster$to_slave_awregion),
					 .to_slave_wvalid(ddr4_B_deburster$to_slave_wvalid),
					 .to_slave_wdata(ddr4_B_deburster$to_slave_wdata),
					 .to_slave_wstrb(ddr4_B_deburster$to_slave_wstrb),
					 .to_slave_wlast(ddr4_B_deburster$to_slave_wlast),
					 .to_slave_bready(ddr4_B_deburster$to_slave_bready),
					 .to_slave_arvalid(ddr4_B_deburster$to_slave_arvalid),
					 .to_slave_arid(ddr4_B_deburster$to_slave_arid),
					 .to_slave_araddr(ddr4_B_deburster$to_slave_araddr),
					 .to_slave_arlen(ddr4_B_deburster$to_slave_arlen),
					 .to_slave_arsize(ddr4_B_deburster$to_slave_arsize),
					 .to_slave_arburst(ddr4_B_deburster$to_slave_arburst),
					 .to_slave_arlock(ddr4_B_deburster$to_slave_arlock),
					 .to_slave_arcache(ddr4_B_deburster$to_slave_arcache),
					 .to_slave_arprot(ddr4_B_deburster$to_slave_arprot),
					 .to_slave_arqos(ddr4_B_deburster$to_slave_arqos),
					 .to_slave_arregion(ddr4_B_deburster$to_slave_arregion),
					 .to_slave_rready(ddr4_B_deburster$to_slave_rready));

  // submodule ddr4_C
  mkMem_Model #(.ddr4_num(2'd2)) ddr4_C(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_C$araddr),
					.arburst(ddr4_C$arburst),
					.arcache(ddr4_C$arcache),
					.arid(ddr4_C$arid),
					.arlen(ddr4_C$arlen),
					.arlock(ddr4_C$arlock),
					.arprot(ddr4_C$arprot),
					.arqos(ddr4_C$arqos),
					.arregion(ddr4_C$arregion),
					.arsize(ddr4_C$arsize),
					.arvalid(ddr4_C$arvalid),
					.awaddr(ddr4_C$awaddr),
					.awburst(ddr4_C$awburst),
					.awcache(ddr4_C$awcache),
					.awid(ddr4_C$awid),
					.awlen(ddr4_C$awlen),
					.awlock(ddr4_C$awlock),
					.awprot(ddr4_C$awprot),
					.awqos(ddr4_C$awqos),
					.awregion(ddr4_C$awregion),
					.awsize(ddr4_C$awsize),
					.awvalid(ddr4_C$awvalid),
					.bready(ddr4_C$bready),
					.rready(ddr4_C$rready),
					.wdata(ddr4_C$wdata),
					.wlast(ddr4_C$wlast),
					.wstrb(ddr4_C$wstrb),
					.wvalid(ddr4_C$wvalid),
					.awready(ddr4_C$awready),
					.wready(ddr4_C$wready),
					.bvalid(ddr4_C$bvalid),
					.bid(ddr4_C$bid),
					.bresp(ddr4_C$bresp),
					.arready(ddr4_C$arready),
					.rvalid(ddr4_C$rvalid),
					.rid(ddr4_C$rid),
					.rdata(ddr4_C$rdata),
					.rresp(ddr4_C$rresp),
					.rlast(ddr4_C$rlast));

  // submodule ddr4_C_deburster
  mkAXI4_Deburster_DDR4 ddr4_C_deburster(.CLK(CLK),
					 .RST_N(RST_N),
					 .from_master_araddr(ddr4_C_deburster$from_master_araddr),
					 .from_master_arburst(ddr4_C_deburster$from_master_arburst),
					 .from_master_arcache(ddr4_C_deburster$from_master_arcache),
					 .from_master_arid(ddr4_C_deburster$from_master_arid),
					 .from_master_arlen(ddr4_C_deburster$from_master_arlen),
					 .from_master_arlock(ddr4_C_deburster$from_master_arlock),
					 .from_master_arprot(ddr4_C_deburster$from_master_arprot),
					 .from_master_arqos(ddr4_C_deburster$from_master_arqos),
					 .from_master_arregion(ddr4_C_deburster$from_master_arregion),
					 .from_master_arsize(ddr4_C_deburster$from_master_arsize),
					 .from_master_arvalid(ddr4_C_deburster$from_master_arvalid),
					 .from_master_awaddr(ddr4_C_deburster$from_master_awaddr),
					 .from_master_awburst(ddr4_C_deburster$from_master_awburst),
					 .from_master_awcache(ddr4_C_deburster$from_master_awcache),
					 .from_master_awid(ddr4_C_deburster$from_master_awid),
					 .from_master_awlen(ddr4_C_deburster$from_master_awlen),
					 .from_master_awlock(ddr4_C_deburster$from_master_awlock),
					 .from_master_awprot(ddr4_C_deburster$from_master_awprot),
					 .from_master_awqos(ddr4_C_deburster$from_master_awqos),
					 .from_master_awregion(ddr4_C_deburster$from_master_awregion),
					 .from_master_awsize(ddr4_C_deburster$from_master_awsize),
					 .from_master_awvalid(ddr4_C_deburster$from_master_awvalid),
					 .from_master_bready(ddr4_C_deburster$from_master_bready),
					 .from_master_rready(ddr4_C_deburster$from_master_rready),
					 .from_master_wdata(ddr4_C_deburster$from_master_wdata),
					 .from_master_wlast(ddr4_C_deburster$from_master_wlast),
					 .from_master_wstrb(ddr4_C_deburster$from_master_wstrb),
					 .from_master_wvalid(ddr4_C_deburster$from_master_wvalid),
					 .to_slave_arready(ddr4_C_deburster$to_slave_arready),
					 .to_slave_awready(ddr4_C_deburster$to_slave_awready),
					 .to_slave_bid(ddr4_C_deburster$to_slave_bid),
					 .to_slave_bresp(ddr4_C_deburster$to_slave_bresp),
					 .to_slave_bvalid(ddr4_C_deburster$to_slave_bvalid),
					 .to_slave_rdata(ddr4_C_deburster$to_slave_rdata),
					 .to_slave_rid(ddr4_C_deburster$to_slave_rid),
					 .to_slave_rlast(ddr4_C_deburster$to_slave_rlast),
					 .to_slave_rresp(ddr4_C_deburster$to_slave_rresp),
					 .to_slave_rvalid(ddr4_C_deburster$to_slave_rvalid),
					 .to_slave_wready(ddr4_C_deburster$to_slave_wready),
					 .EN_reset(ddr4_C_deburster$EN_reset),
					 .RDY_reset(),
					 .from_master_awready(ddr4_C_deburster$from_master_awready),
					 .from_master_wready(ddr4_C_deburster$from_master_wready),
					 .from_master_bvalid(ddr4_C_deburster$from_master_bvalid),
					 .from_master_bid(ddr4_C_deburster$from_master_bid),
					 .from_master_bresp(ddr4_C_deburster$from_master_bresp),
					 .from_master_arready(ddr4_C_deburster$from_master_arready),
					 .from_master_rvalid(ddr4_C_deburster$from_master_rvalid),
					 .from_master_rid(ddr4_C_deburster$from_master_rid),
					 .from_master_rdata(ddr4_C_deburster$from_master_rdata),
					 .from_master_rresp(ddr4_C_deburster$from_master_rresp),
					 .from_master_rlast(ddr4_C_deburster$from_master_rlast),
					 .to_slave_awvalid(ddr4_C_deburster$to_slave_awvalid),
					 .to_slave_awid(ddr4_C_deburster$to_slave_awid),
					 .to_slave_awaddr(ddr4_C_deburster$to_slave_awaddr),
					 .to_slave_awlen(ddr4_C_deburster$to_slave_awlen),
					 .to_slave_awsize(ddr4_C_deburster$to_slave_awsize),
					 .to_slave_awburst(ddr4_C_deburster$to_slave_awburst),
					 .to_slave_awlock(ddr4_C_deburster$to_slave_awlock),
					 .to_slave_awcache(ddr4_C_deburster$to_slave_awcache),
					 .to_slave_awprot(ddr4_C_deburster$to_slave_awprot),
					 .to_slave_awqos(ddr4_C_deburster$to_slave_awqos),
					 .to_slave_awregion(ddr4_C_deburster$to_slave_awregion),
					 .to_slave_wvalid(ddr4_C_deburster$to_slave_wvalid),
					 .to_slave_wdata(ddr4_C_deburster$to_slave_wdata),
					 .to_slave_wstrb(ddr4_C_deburster$to_slave_wstrb),
					 .to_slave_wlast(ddr4_C_deburster$to_slave_wlast),
					 .to_slave_bready(ddr4_C_deburster$to_slave_bready),
					 .to_slave_arvalid(ddr4_C_deburster$to_slave_arvalid),
					 .to_slave_arid(ddr4_C_deburster$to_slave_arid),
					 .to_slave_araddr(ddr4_C_deburster$to_slave_araddr),
					 .to_slave_arlen(ddr4_C_deburster$to_slave_arlen),
					 .to_slave_arsize(ddr4_C_deburster$to_slave_arsize),
					 .to_slave_arburst(ddr4_C_deburster$to_slave_arburst),
					 .to_slave_arlock(ddr4_C_deburster$to_slave_arlock),
					 .to_slave_arcache(ddr4_C_deburster$to_slave_arcache),
					 .to_slave_arprot(ddr4_C_deburster$to_slave_arprot),
					 .to_slave_arqos(ddr4_C_deburster$to_slave_arqos),
					 .to_slave_arregion(ddr4_C_deburster$to_slave_arregion),
					 .to_slave_rready(ddr4_C_deburster$to_slave_rready));

  // submodule ddr4_D
  mkMem_Model #(.ddr4_num(2'd3)) ddr4_D(.CLK(CLK),
					.RST_N(RST_N),
					.araddr(ddr4_D$araddr),
					.arburst(ddr4_D$arburst),
					.arcache(ddr4_D$arcache),
					.arid(ddr4_D$arid),
					.arlen(ddr4_D$arlen),
					.arlock(ddr4_D$arlock),
					.arprot(ddr4_D$arprot),
					.arqos(ddr4_D$arqos),
					.arregion(ddr4_D$arregion),
					.arsize(ddr4_D$arsize),
					.arvalid(ddr4_D$arvalid),
					.awaddr(ddr4_D$awaddr),
					.awburst(ddr4_D$awburst),
					.awcache(ddr4_D$awcache),
					.awid(ddr4_D$awid),
					.awlen(ddr4_D$awlen),
					.awlock(ddr4_D$awlock),
					.awprot(ddr4_D$awprot),
					.awqos(ddr4_D$awqos),
					.awregion(ddr4_D$awregion),
					.awsize(ddr4_D$awsize),
					.awvalid(ddr4_D$awvalid),
					.bready(ddr4_D$bready),
					.rready(ddr4_D$rready),
					.wdata(ddr4_D$wdata),
					.wlast(ddr4_D$wlast),
					.wstrb(ddr4_D$wstrb),
					.wvalid(ddr4_D$wvalid),
					.awready(ddr4_D$awready),
					.wready(ddr4_D$wready),
					.bvalid(ddr4_D$bvalid),
					.bid(ddr4_D$bid),
					.bresp(ddr4_D$bresp),
					.arready(ddr4_D$arready),
					.rvalid(ddr4_D$rvalid),
					.rid(ddr4_D$rid),
					.rdata(ddr4_D$rdata),
					.rresp(ddr4_D$rresp),
					.rlast(ddr4_D$rlast));

  // submodule ddr4_D_deburster
  mkAXI4_Deburster_DDR4 ddr4_D_deburster(.CLK(CLK),
					 .RST_N(RST_N),
					 .from_master_araddr(ddr4_D_deburster$from_master_araddr),
					 .from_master_arburst(ddr4_D_deburster$from_master_arburst),
					 .from_master_arcache(ddr4_D_deburster$from_master_arcache),
					 .from_master_arid(ddr4_D_deburster$from_master_arid),
					 .from_master_arlen(ddr4_D_deburster$from_master_arlen),
					 .from_master_arlock(ddr4_D_deburster$from_master_arlock),
					 .from_master_arprot(ddr4_D_deburster$from_master_arprot),
					 .from_master_arqos(ddr4_D_deburster$from_master_arqos),
					 .from_master_arregion(ddr4_D_deburster$from_master_arregion),
					 .from_master_arsize(ddr4_D_deburster$from_master_arsize),
					 .from_master_arvalid(ddr4_D_deburster$from_master_arvalid),
					 .from_master_awaddr(ddr4_D_deburster$from_master_awaddr),
					 .from_master_awburst(ddr4_D_deburster$from_master_awburst),
					 .from_master_awcache(ddr4_D_deburster$from_master_awcache),
					 .from_master_awid(ddr4_D_deburster$from_master_awid),
					 .from_master_awlen(ddr4_D_deburster$from_master_awlen),
					 .from_master_awlock(ddr4_D_deburster$from_master_awlock),
					 .from_master_awprot(ddr4_D_deburster$from_master_awprot),
					 .from_master_awqos(ddr4_D_deburster$from_master_awqos),
					 .from_master_awregion(ddr4_D_deburster$from_master_awregion),
					 .from_master_awsize(ddr4_D_deburster$from_master_awsize),
					 .from_master_awvalid(ddr4_D_deburster$from_master_awvalid),
					 .from_master_bready(ddr4_D_deburster$from_master_bready),
					 .from_master_rready(ddr4_D_deburster$from_master_rready),
					 .from_master_wdata(ddr4_D_deburster$from_master_wdata),
					 .from_master_wlast(ddr4_D_deburster$from_master_wlast),
					 .from_master_wstrb(ddr4_D_deburster$from_master_wstrb),
					 .from_master_wvalid(ddr4_D_deburster$from_master_wvalid),
					 .to_slave_arready(ddr4_D_deburster$to_slave_arready),
					 .to_slave_awready(ddr4_D_deburster$to_slave_awready),
					 .to_slave_bid(ddr4_D_deburster$to_slave_bid),
					 .to_slave_bresp(ddr4_D_deburster$to_slave_bresp),
					 .to_slave_bvalid(ddr4_D_deburster$to_slave_bvalid),
					 .to_slave_rdata(ddr4_D_deburster$to_slave_rdata),
					 .to_slave_rid(ddr4_D_deburster$to_slave_rid),
					 .to_slave_rlast(ddr4_D_deburster$to_slave_rlast),
					 .to_slave_rresp(ddr4_D_deburster$to_slave_rresp),
					 .to_slave_rvalid(ddr4_D_deburster$to_slave_rvalid),
					 .to_slave_wready(ddr4_D_deburster$to_slave_wready),
					 .EN_reset(ddr4_D_deburster$EN_reset),
					 .RDY_reset(),
					 .from_master_awready(ddr4_D_deburster$from_master_awready),
					 .from_master_wready(ddr4_D_deburster$from_master_wready),
					 .from_master_bvalid(ddr4_D_deburster$from_master_bvalid),
					 .from_master_bid(ddr4_D_deburster$from_master_bid),
					 .from_master_bresp(ddr4_D_deburster$from_master_bresp),
					 .from_master_arready(ddr4_D_deburster$from_master_arready),
					 .from_master_rvalid(ddr4_D_deburster$from_master_rvalid),
					 .from_master_rid(ddr4_D_deburster$from_master_rid),
					 .from_master_rdata(ddr4_D_deburster$from_master_rdata),
					 .from_master_rresp(ddr4_D_deburster$from_master_rresp),
					 .from_master_rlast(ddr4_D_deburster$from_master_rlast),
					 .to_slave_awvalid(ddr4_D_deburster$to_slave_awvalid),
					 .to_slave_awid(ddr4_D_deburster$to_slave_awid),
					 .to_slave_awaddr(ddr4_D_deburster$to_slave_awaddr),
					 .to_slave_awlen(ddr4_D_deburster$to_slave_awlen),
					 .to_slave_awsize(ddr4_D_deburster$to_slave_awsize),
					 .to_slave_awburst(ddr4_D_deburster$to_slave_awburst),
					 .to_slave_awlock(ddr4_D_deburster$to_slave_awlock),
					 .to_slave_awcache(ddr4_D_deburster$to_slave_awcache),
					 .to_slave_awprot(ddr4_D_deburster$to_slave_awprot),
					 .to_slave_awqos(ddr4_D_deburster$to_slave_awqos),
					 .to_slave_awregion(ddr4_D_deburster$to_slave_awregion),
					 .to_slave_wvalid(ddr4_D_deburster$to_slave_wvalid),
					 .to_slave_wdata(ddr4_D_deburster$to_slave_wdata),
					 .to_slave_wstrb(ddr4_D_deburster$to_slave_wstrb),
					 .to_slave_wlast(ddr4_D_deburster$to_slave_wlast),
					 .to_slave_bready(ddr4_D_deburster$to_slave_bready),
					 .to_slave_arvalid(ddr4_D_deburster$to_slave_arvalid),
					 .to_slave_arid(ddr4_D_deburster$to_slave_arid),
					 .to_slave_araddr(ddr4_D_deburster$to_slave_araddr),
					 .to_slave_arlen(ddr4_D_deburster$to_slave_arlen),
					 .to_slave_arsize(ddr4_D_deburster$to_slave_arsize),
					 .to_slave_arburst(ddr4_D_deburster$to_slave_arburst),
					 .to_slave_arlock(ddr4_D_deburster$to_slave_arlock),
					 .to_slave_arcache(ddr4_D_deburster$to_slave_arcache),
					 .to_slave_arprot(ddr4_D_deburster$to_slave_arprot),
					 .to_slave_arqos(ddr4_D_deburster$to_slave_arqos),
					 .to_slave_arregion(ddr4_D_deburster$to_slave_arregion),
					 .to_slave_rready(ddr4_D_deburster$to_slave_rready));

  // submodule dma_pcis_xactor_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) dma_pcis_xactor_f_rd_addr(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(dma_pcis_xactor_f_rd_addr$D_IN),
						     .ENQ(dma_pcis_xactor_f_rd_addr$ENQ),
						     .DEQ(dma_pcis_xactor_f_rd_addr$DEQ),
						     .CLR(dma_pcis_xactor_f_rd_addr$CLR),
						     .D_OUT(dma_pcis_xactor_f_rd_addr$D_OUT),
						     .FULL_N(dma_pcis_xactor_f_rd_addr$FULL_N),
						     .EMPTY_N(dma_pcis_xactor_f_rd_addr$EMPTY_N));

  // submodule dma_pcis_xactor_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(32'd1)) dma_pcis_xactor_f_rd_data(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(dma_pcis_xactor_f_rd_data$D_IN),
						     .ENQ(dma_pcis_xactor_f_rd_data$ENQ),
						     .DEQ(dma_pcis_xactor_f_rd_data$DEQ),
						     .CLR(dma_pcis_xactor_f_rd_data$CLR),
						     .D_OUT(dma_pcis_xactor_f_rd_data$D_OUT),
						     .FULL_N(dma_pcis_xactor_f_rd_data$FULL_N),
						     .EMPTY_N(dma_pcis_xactor_f_rd_data$EMPTY_N));

  // submodule dma_pcis_xactor_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(32'd1)) dma_pcis_xactor_f_wr_addr(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(dma_pcis_xactor_f_wr_addr$D_IN),
						     .ENQ(dma_pcis_xactor_f_wr_addr$ENQ),
						     .DEQ(dma_pcis_xactor_f_wr_addr$DEQ),
						     .CLR(dma_pcis_xactor_f_wr_addr$CLR),
						     .D_OUT(dma_pcis_xactor_f_wr_addr$D_OUT),
						     .FULL_N(dma_pcis_xactor_f_wr_addr$FULL_N),
						     .EMPTY_N(dma_pcis_xactor_f_wr_addr$EMPTY_N));

  // submodule dma_pcis_xactor_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) dma_pcis_xactor_f_wr_data(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(dma_pcis_xactor_f_wr_data$D_IN),
						     .ENQ(dma_pcis_xactor_f_wr_data$ENQ),
						     .DEQ(dma_pcis_xactor_f_wr_data$DEQ),
						     .CLR(dma_pcis_xactor_f_wr_data$CLR),
						     .D_OUT(dma_pcis_xactor_f_wr_data$D_OUT),
						     .FULL_N(dma_pcis_xactor_f_wr_data$FULL_N),
						     .EMPTY_N(dma_pcis_xactor_f_wr_data$EMPTY_N));

  // submodule dma_pcis_xactor_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) dma_pcis_xactor_f_wr_resp(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(dma_pcis_xactor_f_wr_resp$D_IN),
						     .ENQ(dma_pcis_xactor_f_wr_resp$ENQ),
						     .DEQ(dma_pcis_xactor_f_wr_resp$DEQ),
						     .CLR(dma_pcis_xactor_f_wr_resp$CLR),
						     .D_OUT(dma_pcis_xactor_f_wr_resp$D_OUT),
						     .FULL_N(dma_pcis_xactor_f_wr_resp$FULL_N),
						     .EMPTY_N(dma_pcis_xactor_f_wr_resp$EMPTY_N));

  // submodule ocl_xactor_f_rd_addr
  FIFO2 #(.width(32'd35), .guarded(32'd1)) ocl_xactor_f_rd_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_rd_addr$D_IN),
								.ENQ(ocl_xactor_f_rd_addr$ENQ),
								.DEQ(ocl_xactor_f_rd_addr$DEQ),
								.CLR(ocl_xactor_f_rd_addr$CLR),
								.D_OUT(ocl_xactor_f_rd_addr$D_OUT),
								.FULL_N(ocl_xactor_f_rd_addr$FULL_N),
								.EMPTY_N(ocl_xactor_f_rd_addr$EMPTY_N));

  // submodule ocl_xactor_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(32'd1)) ocl_xactor_f_rd_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_rd_data$D_IN),
								.ENQ(ocl_xactor_f_rd_data$ENQ),
								.DEQ(ocl_xactor_f_rd_data$DEQ),
								.CLR(ocl_xactor_f_rd_data$CLR),
								.D_OUT(ocl_xactor_f_rd_data$D_OUT),
								.FULL_N(ocl_xactor_f_rd_data$FULL_N),
								.EMPTY_N(ocl_xactor_f_rd_data$EMPTY_N));

  // submodule ocl_xactor_f_wr_addr
  FIFO2 #(.width(32'd35), .guarded(32'd1)) ocl_xactor_f_wr_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_wr_addr$D_IN),
								.ENQ(ocl_xactor_f_wr_addr$ENQ),
								.DEQ(ocl_xactor_f_wr_addr$DEQ),
								.CLR(ocl_xactor_f_wr_addr$CLR),
								.D_OUT(ocl_xactor_f_wr_addr$D_OUT),
								.FULL_N(ocl_xactor_f_wr_addr$FULL_N),
								.EMPTY_N(ocl_xactor_f_wr_addr$EMPTY_N));

  // submodule ocl_xactor_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(32'd1)) ocl_xactor_f_wr_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_wr_data$D_IN),
								.ENQ(ocl_xactor_f_wr_data$ENQ),
								.DEQ(ocl_xactor_f_wr_data$DEQ),
								.CLR(ocl_xactor_f_wr_data$CLR),
								.D_OUT(ocl_xactor_f_wr_data$D_OUT),
								.FULL_N(ocl_xactor_f_wr_data$FULL_N),
								.EMPTY_N(ocl_xactor_f_wr_data$EMPTY_N));

  // submodule ocl_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ocl_xactor_f_wr_resp(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(ocl_xactor_f_wr_resp$D_IN),
							       .ENQ(ocl_xactor_f_wr_resp$ENQ),
							       .DEQ(ocl_xactor_f_wr_resp$DEQ),
							       .CLR(ocl_xactor_f_wr_resp$CLR),
							       .D_OUT(ocl_xactor_f_wr_resp$D_OUT),
							       .FULL_N(ocl_xactor_f_wr_resp$FULL_N),
							       .EMPTY_N(ocl_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_rl_wr_addr_channel_1
  assign CAN_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;

  // rule RL_rl_wr_data_channel_1
  assign CAN_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_response_channel_1
  assign CAN_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_1
  assign CAN_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;

  // rule RL_rl_rd_data_channel_1
  assign CAN_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_2
  assign CAN_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;

  // rule RL_rl_wr_data_channel_2
  assign CAN_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_response_channel_2
  assign CAN_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_2
  assign CAN_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;

  // rule RL_rl_rd_data_channel_2
  assign CAN_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_3
  assign CAN_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;

  // rule RL_rl_wr_data_channel_3
  assign CAN_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;

  // rule RL_rl_wr_response_channel_3
  assign CAN_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_3
  assign CAN_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;

  // rule RL_rl_rd_data_channel_3
  assign CAN_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_4
  assign CAN_FIRE_RL_rl_wr_addr_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_4 = 1'd1 ;

  // rule RL_rl_wr_data_channel_4
  assign CAN_FIRE_RL_rl_wr_data_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_4 = 1'd1 ;

  // rule RL_rl_wr_response_channel_4
  assign CAN_FIRE_RL_rl_wr_response_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_4 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_4
  assign CAN_FIRE_RL_rl_rd_addr_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_4 = 1'd1 ;

  // rule RL_rl_rd_data_channel_4
  assign CAN_FIRE_RL_rl_rd_data_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_4 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_5
  assign CAN_FIRE_RL_rl_wr_addr_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_5 = 1'd1 ;

  // rule RL_rl_wr_data_channel_5
  assign CAN_FIRE_RL_rl_wr_data_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_5 = 1'd1 ;

  // rule RL_rl_wr_response_channel_5
  assign CAN_FIRE_RL_rl_wr_response_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_5 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_5
  assign CAN_FIRE_RL_rl_rd_addr_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_5 = 1'd1 ;

  // rule RL_rl_rd_data_channel_5
  assign CAN_FIRE_RL_rl_rd_data_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_5 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_6
  assign CAN_FIRE_RL_rl_wr_addr_channel_6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_6 = 1'd1 ;

  // rule RL_rl_wr_data_channel_6
  assign CAN_FIRE_RL_rl_wr_data_channel_6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_6 = 1'd1 ;

  // rule RL_rl_wr_response_channel_6
  assign CAN_FIRE_RL_rl_wr_response_channel_6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_6 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_6
  assign CAN_FIRE_RL_rl_rd_addr_channel_6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_6 = 1'd1 ;

  // rule RL_rl_rd_data_channel_6
  assign CAN_FIRE_RL_rl_rd_data_channel_6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_6 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_7
  assign CAN_FIRE_RL_rl_wr_addr_channel_7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_7 = 1'd1 ;

  // rule RL_rl_wr_data_channel_7
  assign CAN_FIRE_RL_rl_wr_data_channel_7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_7 = 1'd1 ;

  // rule RL_rl_wr_response_channel_7
  assign CAN_FIRE_RL_rl_wr_response_channel_7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_7 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_7
  assign CAN_FIRE_RL_rl_rd_addr_channel_7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_7 = 1'd1 ;

  // rule RL_rl_rd_data_channel_7
  assign CAN_FIRE_RL_rl_rd_data_channel_7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_7 = 1'd1 ;

  // rule RL_rl_connecting
  assign CAN_FIRE_RL_rl_connecting = rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_connecting = rg_state == 2'd0 ;

  // rule RL_rl_start_when_connected
  assign CAN_FIRE_RL_rl_start_when_connected = rg_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_start_when_connected = rg_state == 2'd1 ;

  // rule RL_rl_host_recv
  assign CAN_FIRE_RL_rl_host_recv =
	     comms$RDY_fi_C_to_BSV_bytevec_enq && rg_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_host_recv = CAN_FIRE_RL_rl_host_recv ;

  // rule RL_rl_host_send
  assign CAN_FIRE_RL_rl_host_send =
	     comms$RDY_fo_BSV_to_C_bytevec_deq &&
	     comms$RDY_fo_BSV_to_C_bytevec_first &&
	     rg_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_host_send = CAN_FIRE_RL_rl_host_send ;

  // rule RL_rl_wr_addr_channel_8
  assign CAN_FIRE_RL_rl_wr_addr_channel_8 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_8 = 1'd1 ;

  // rule RL_rl_wr_data_channel_8
  assign CAN_FIRE_RL_rl_wr_data_channel_8 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_8 = 1'd1 ;

  // rule RL_rl_wr_response_channel_8
  assign CAN_FIRE_RL_rl_wr_response_channel_8 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_8 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_8
  assign CAN_FIRE_RL_rl_rd_addr_channel_8 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_8 = 1'd1 ;

  // rule RL_rl_rd_data_channel_8
  assign CAN_FIRE_RL_rl_rd_data_channel_8 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_8 = 1'd1 ;

  // rule RL_rl_connect_dma_pcis_wr_addr
  assign CAN_FIRE_RL_rl_connect_dma_pcis_wr_addr =
	     comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq &&
	     comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first &&
	     dma_pcis_xactor_f_wr_addr$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_dma_pcis_wr_addr =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_addr ;

  // rule RL_rl_connect_dma_pcis_wr_data
  assign CAN_FIRE_RL_rl_connect_dma_pcis_wr_data =
	     comms$RDY_fo_AXI4_Wr_Data_d512_u0_deq &&
	     comms$RDY_fo_AXI4_Wr_Data_d512_u0_first &&
	     dma_pcis_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_dma_pcis_wr_data =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_data ;

  // rule RL_rl_connect_dma_pcis_rd_addr
  assign CAN_FIRE_RL_rl_connect_dma_pcis_rd_addr =
	     comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq &&
	     comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first &&
	     dma_pcis_xactor_f_rd_addr$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_dma_pcis_rd_addr =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_addr ;

  // rule RL_rl_wr_addr_channel_9
  assign CAN_FIRE_RL_rl_wr_addr_channel_9 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_9 = 1'd1 ;

  // rule RL_rl_wr_data_channel_9
  assign CAN_FIRE_RL_rl_wr_data_channel_9 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_9 = 1'd1 ;

  // rule RL_rl_wr_response_channel_9
  assign CAN_FIRE_RL_rl_wr_response_channel_9 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_9 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_9
  assign CAN_FIRE_RL_rl_rd_addr_channel_9 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_9 = 1'd1 ;

  // rule RL_rl_rd_data_channel_9
  assign CAN_FIRE_RL_rl_rd_data_channel_9 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_9 = 1'd1 ;

  // rule RL_rl_connect_ocl_wr_addr
  assign CAN_FIRE_RL_rl_connect_ocl_wr_addr =
	     comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq &&
	     comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first &&
	     ocl_xactor_f_wr_addr$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_ocl_wr_addr =
	     CAN_FIRE_RL_rl_connect_ocl_wr_addr ;

  // rule RL_rl_connect_ocl_wr_data
  assign CAN_FIRE_RL_rl_connect_ocl_wr_data =
	     comms$RDY_fo_AXI4L_Wr_Data_d32_deq &&
	     comms$RDY_fo_AXI4L_Wr_Data_d32_first &&
	     ocl_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_ocl_wr_data =
	     CAN_FIRE_RL_rl_connect_ocl_wr_data ;

  // rule RL_rl_connect_ocl_rd_addr
  assign CAN_FIRE_RL_rl_connect_ocl_rd_addr =
	     comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq &&
	     comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first &&
	     ocl_xactor_f_rd_addr$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_ocl_rd_addr =
	     CAN_FIRE_RL_rl_connect_ocl_rd_addr ;

  // rule RL_rl_connect_dma_pcis_wr_resp
  assign CAN_FIRE_RL_rl_connect_dma_pcis_wr_resp =
	     comms$RDY_fi_AXI4_Wr_Resp_i16_u0_enq &&
	     dma_pcis_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect_dma_pcis_wr_resp =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_resp ;

  // rule RL_rl_connect_dma_pcis_rd_data
  assign CAN_FIRE_RL_rl_connect_dma_pcis_rd_data =
	     comms$RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq &&
	     dma_pcis_xactor_f_rd_data$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect_dma_pcis_rd_data =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_data ;

  // rule RL_rl_connect_ocl_wr_resp
  assign CAN_FIRE_RL_rl_connect_ocl_wr_resp =
	     comms$RDY_fi_AXI4L_Wr_Resp_u0_enq &&
	     ocl_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect_ocl_wr_resp =
	     CAN_FIRE_RL_rl_connect_ocl_wr_resp ;

  // rule RL_rl_connect_ocl_rd_data
  assign CAN_FIRE_RL_rl_connect_ocl_rd_data =
	     comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq &&
	     ocl_xactor_f_rd_data$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect_ocl_rd_data =
	     CAN_FIRE_RL_rl_connect_ocl_rd_data ;

  // rule RL_rl_status_signals
  assign CAN_FIRE_RL_rl_status_signals = 1'd1 ;
  assign WILL_FIRE_RL_rl_status_signals = 1'd1 ;

  // register rg_counter_4ns
  assign rg_counter_4ns$D_IN =
	     rg_counter_4ns +
	     64'b0000000000000000000000000000000000000000000000000000000000000101 ;
  assign rg_counter_4ns$EN = 1'd1 ;

  // register rg_last_vled
  assign rg_last_vled$D_IN = aws_BSV_top$m_vled ;
  assign rg_last_vled$EN = 1'd1 ;

  // register rg_state
  assign rg_state$D_IN = WILL_FIRE_RL_rl_connecting ? 2'd1 : 2'd2 ;
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_connecting ||
	     WILL_FIRE_RL_rl_start_when_connected ;

  // register rg_vdip
  assign rg_vdip$D_IN = 16'h0 ;
  assign rg_vdip$EN = 1'b0 ;

  // submodule aws_BSV_top
  assign aws_BSV_top$ddr4_A_master_arready =
	     ddr4_A_deburster$from_master_arready ;
  assign aws_BSV_top$ddr4_A_master_awready =
	     ddr4_A_deburster$from_master_awready ;
  assign aws_BSV_top$ddr4_A_master_bid = ddr4_A_deburster$from_master_bid ;
  assign aws_BSV_top$ddr4_A_master_bresp =
	     ddr4_A_deburster$from_master_bresp ;
  assign aws_BSV_top$ddr4_A_master_bvalid =
	     ddr4_A_deburster$from_master_bvalid ;
  assign aws_BSV_top$ddr4_A_master_rdata =
	     ddr4_A_deburster$from_master_rdata ;
  assign aws_BSV_top$ddr4_A_master_rid = ddr4_A_deburster$from_master_rid ;
  assign aws_BSV_top$ddr4_A_master_rlast =
	     ddr4_A_deburster$from_master_rlast ;
  assign aws_BSV_top$ddr4_A_master_rresp =
	     ddr4_A_deburster$from_master_rresp ;
  assign aws_BSV_top$ddr4_A_master_rvalid =
	     ddr4_A_deburster$from_master_rvalid ;
  assign aws_BSV_top$ddr4_A_master_wready =
	     ddr4_A_deburster$from_master_wready ;
  assign aws_BSV_top$ddr4_B_master_arready =
	     ddr4_B_deburster$from_master_arready ;
  assign aws_BSV_top$ddr4_B_master_awready =
	     ddr4_B_deburster$from_master_awready ;
  assign aws_BSV_top$ddr4_B_master_bid = ddr4_B_deburster$from_master_bid ;
  assign aws_BSV_top$ddr4_B_master_bresp =
	     ddr4_B_deburster$from_master_bresp ;
  assign aws_BSV_top$ddr4_B_master_bvalid =
	     ddr4_B_deburster$from_master_bvalid ;
  assign aws_BSV_top$ddr4_B_master_rdata =
	     ddr4_B_deburster$from_master_rdata ;
  assign aws_BSV_top$ddr4_B_master_rid = ddr4_B_deburster$from_master_rid ;
  assign aws_BSV_top$ddr4_B_master_rlast =
	     ddr4_B_deburster$from_master_rlast ;
  assign aws_BSV_top$ddr4_B_master_rresp =
	     ddr4_B_deburster$from_master_rresp ;
  assign aws_BSV_top$ddr4_B_master_rvalid =
	     ddr4_B_deburster$from_master_rvalid ;
  assign aws_BSV_top$ddr4_B_master_wready =
	     ddr4_B_deburster$from_master_wready ;
  assign aws_BSV_top$ddr4_C_master_arready =
	     ddr4_C_deburster$from_master_arready ;
  assign aws_BSV_top$ddr4_C_master_awready =
	     ddr4_C_deburster$from_master_awready ;
  assign aws_BSV_top$ddr4_C_master_bid = ddr4_C_deburster$from_master_bid ;
  assign aws_BSV_top$ddr4_C_master_bresp =
	     ddr4_C_deburster$from_master_bresp ;
  assign aws_BSV_top$ddr4_C_master_bvalid =
	     ddr4_C_deburster$from_master_bvalid ;
  assign aws_BSV_top$ddr4_C_master_rdata =
	     ddr4_C_deburster$from_master_rdata ;
  assign aws_BSV_top$ddr4_C_master_rid = ddr4_C_deburster$from_master_rid ;
  assign aws_BSV_top$ddr4_C_master_rlast =
	     ddr4_C_deburster$from_master_rlast ;
  assign aws_BSV_top$ddr4_C_master_rresp =
	     ddr4_C_deburster$from_master_rresp ;
  assign aws_BSV_top$ddr4_C_master_rvalid =
	     ddr4_C_deburster$from_master_rvalid ;
  assign aws_BSV_top$ddr4_C_master_wready =
	     ddr4_C_deburster$from_master_wready ;
  assign aws_BSV_top$ddr4_D_master_arready =
	     ddr4_D_deburster$from_master_arready ;
  assign aws_BSV_top$ddr4_D_master_awready =
	     ddr4_D_deburster$from_master_awready ;
  assign aws_BSV_top$ddr4_D_master_bid = ddr4_D_deburster$from_master_bid ;
  assign aws_BSV_top$ddr4_D_master_bresp =
	     ddr4_D_deburster$from_master_bresp ;
  assign aws_BSV_top$ddr4_D_master_bvalid =
	     ddr4_D_deburster$from_master_bvalid ;
  assign aws_BSV_top$ddr4_D_master_rdata =
	     ddr4_D_deburster$from_master_rdata ;
  assign aws_BSV_top$ddr4_D_master_rid = ddr4_D_deburster$from_master_rid ;
  assign aws_BSV_top$ddr4_D_master_rlast =
	     ddr4_D_deburster$from_master_rlast ;
  assign aws_BSV_top$ddr4_D_master_rresp =
	     ddr4_D_deburster$from_master_rresp ;
  assign aws_BSV_top$ddr4_D_master_rvalid =
	     ddr4_D_deburster$from_master_rvalid ;
  assign aws_BSV_top$ddr4_D_master_wready =
	     ddr4_D_deburster$from_master_wready ;
  assign aws_BSV_top$dma_pcis_slave_araddr =
	     dma_pcis_xactor_f_rd_addr$D_OUT[92:29] ;
  assign aws_BSV_top$dma_pcis_slave_arburst =
	     dma_pcis_xactor_f_rd_addr$D_OUT[17:16] ;
  assign aws_BSV_top$dma_pcis_slave_arcache =
	     dma_pcis_xactor_f_rd_addr$D_OUT[14:11] ;
  assign aws_BSV_top$dma_pcis_slave_arid =
	     dma_pcis_xactor_f_rd_addr$D_OUT[108:93] ;
  assign aws_BSV_top$dma_pcis_slave_arlen =
	     dma_pcis_xactor_f_rd_addr$D_OUT[28:21] ;
  assign aws_BSV_top$dma_pcis_slave_arlock =
	     dma_pcis_xactor_f_rd_addr$D_OUT[15] ;
  assign aws_BSV_top$dma_pcis_slave_arprot =
	     dma_pcis_xactor_f_rd_addr$D_OUT[10:8] ;
  assign aws_BSV_top$dma_pcis_slave_arqos =
	     dma_pcis_xactor_f_rd_addr$D_OUT[7:4] ;
  assign aws_BSV_top$dma_pcis_slave_arregion =
	     dma_pcis_xactor_f_rd_addr$D_OUT[3:0] ;
  assign aws_BSV_top$dma_pcis_slave_arsize =
	     dma_pcis_xactor_f_rd_addr$D_OUT[20:18] ;
  assign aws_BSV_top$dma_pcis_slave_arvalid =
	     dma_pcis_xactor_f_rd_addr$EMPTY_N ;
  assign aws_BSV_top$dma_pcis_slave_awaddr =
	     dma_pcis_xactor_f_wr_addr$D_OUT[92:29] ;
  assign aws_BSV_top$dma_pcis_slave_awburst =
	     dma_pcis_xactor_f_wr_addr$D_OUT[17:16] ;
  assign aws_BSV_top$dma_pcis_slave_awcache =
	     dma_pcis_xactor_f_wr_addr$D_OUT[14:11] ;
  assign aws_BSV_top$dma_pcis_slave_awid =
	     dma_pcis_xactor_f_wr_addr$D_OUT[108:93] ;
  assign aws_BSV_top$dma_pcis_slave_awlen =
	     dma_pcis_xactor_f_wr_addr$D_OUT[28:21] ;
  assign aws_BSV_top$dma_pcis_slave_awlock =
	     dma_pcis_xactor_f_wr_addr$D_OUT[15] ;
  assign aws_BSV_top$dma_pcis_slave_awprot =
	     dma_pcis_xactor_f_wr_addr$D_OUT[10:8] ;
  assign aws_BSV_top$dma_pcis_slave_awqos =
	     dma_pcis_xactor_f_wr_addr$D_OUT[7:4] ;
  assign aws_BSV_top$dma_pcis_slave_awregion =
	     dma_pcis_xactor_f_wr_addr$D_OUT[3:0] ;
  assign aws_BSV_top$dma_pcis_slave_awsize =
	     dma_pcis_xactor_f_wr_addr$D_OUT[20:18] ;
  assign aws_BSV_top$dma_pcis_slave_awvalid =
	     dma_pcis_xactor_f_wr_addr$EMPTY_N ;
  assign aws_BSV_top$dma_pcis_slave_bready =
	     dma_pcis_xactor_f_wr_resp$FULL_N ;
  assign aws_BSV_top$dma_pcis_slave_rready =
	     dma_pcis_xactor_f_rd_data$FULL_N ;
  assign aws_BSV_top$dma_pcis_slave_wdata =
	     dma_pcis_xactor_f_wr_data$D_OUT[576:65] ;
  assign aws_BSV_top$dma_pcis_slave_wlast =
	     dma_pcis_xactor_f_wr_data$D_OUT[0] ;
  assign aws_BSV_top$dma_pcis_slave_wstrb =
	     dma_pcis_xactor_f_wr_data$D_OUT[64:1] ;
  assign aws_BSV_top$dma_pcis_slave_wvalid =
	     dma_pcis_xactor_f_wr_data$EMPTY_N ;
  assign aws_BSV_top$m_ddr4_ready_ddr4_A_B_C_D_ready = 4'd15 ;
  assign aws_BSV_top$m_glcount0_glcount0 = { 1'd0, rg_counter_4ns[63:1] } ;
  assign aws_BSV_top$m_glcount1_glcount1 = { 1'd0, rg_counter_4ns[63:1] } ;
  assign aws_BSV_top$m_vdip_vdip = rg_vdip ;
  assign aws_BSV_top$ocl_slave_araddr = ocl_xactor_f_rd_addr$D_OUT[34:3] ;
  assign aws_BSV_top$ocl_slave_arprot = ocl_xactor_f_rd_addr$D_OUT[2:0] ;
  assign aws_BSV_top$ocl_slave_arvalid = ocl_xactor_f_rd_addr$EMPTY_N ;
  assign aws_BSV_top$ocl_slave_awaddr = ocl_xactor_f_wr_addr$D_OUT[34:3] ;
  assign aws_BSV_top$ocl_slave_awprot = ocl_xactor_f_wr_addr$D_OUT[2:0] ;
  assign aws_BSV_top$ocl_slave_awvalid = ocl_xactor_f_wr_addr$EMPTY_N ;
  assign aws_BSV_top$ocl_slave_bready = ocl_xactor_f_wr_resp$FULL_N ;
  assign aws_BSV_top$ocl_slave_rready = ocl_xactor_f_rd_data$FULL_N ;
  assign aws_BSV_top$ocl_slave_wdata = ocl_xactor_f_wr_data$D_OUT[35:4] ;
  assign aws_BSV_top$ocl_slave_wstrb = ocl_xactor_f_wr_data$D_OUT[3:0] ;
  assign aws_BSV_top$ocl_slave_wvalid = ocl_xactor_f_wr_data$EMPTY_N ;

  // submodule comms
  assign comms$fi_AXI4L_Rd_Data_d32_u0_enq_x =
	     { ocl_xactor_f_rd_data$D_OUT[31:0],
	       ocl_xactor_f_rd_data$D_OUT[33:32] } ;
  assign comms$fi_AXI4L_Wr_Resp_u0_enq_x = ocl_xactor_f_wr_resp$D_OUT ;
  assign comms$fi_AXI4_Rd_Data_i16_d512_u0_enq_x =
	     dma_pcis_xactor_f_rd_data$D_OUT ;
  assign comms$fi_AXI4_Wr_Resp_i16_u0_enq_x =
	     dma_pcis_xactor_f_wr_resp$D_OUT ;
  assign comms$fi_C_to_BSV_bytevec_enq_x = TASK_c_host_recv___d359 ;
  assign comms$EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_addr ;
  assign comms$EN_fo_AXI4_Wr_Data_d512_u0_deq =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_data ;
  assign comms$EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_addr ;
  assign comms$EN_fo_AXI4L_Wr_Addr_a32_u0_deq =
	     CAN_FIRE_RL_rl_connect_ocl_wr_addr ;
  assign comms$EN_fo_AXI4L_Wr_Data_d32_deq =
	     CAN_FIRE_RL_rl_connect_ocl_wr_data ;
  assign comms$EN_fo_AXI4L_Rd_Addr_a32_u0_deq =
	     CAN_FIRE_RL_rl_connect_ocl_rd_addr ;
  assign comms$EN_fi_AXI4_Wr_Resp_i16_u0_enq =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_resp ;
  assign comms$EN_fi_AXI4_Rd_Data_i16_d512_u0_enq =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_data ;
  assign comms$EN_fi_AXI4L_Wr_Resp_u0_enq =
	     CAN_FIRE_RL_rl_connect_ocl_wr_resp ;
  assign comms$EN_fi_AXI4L_Rd_Data_d32_u0_enq =
	     CAN_FIRE_RL_rl_connect_ocl_rd_data ;
  assign comms$EN_fi_C_to_BSV_bytevec_enq =
	     WILL_FIRE_RL_rl_host_recv &&
	     TASK_c_host_recv___d359[7:0] != 8'd0 ;
  assign comms$EN_fo_BSV_to_C_bytevec_deq = CAN_FIRE_RL_rl_host_send ;

  // submodule ddr4_A
  assign ddr4_A$araddr = ddr4_A_deburster$to_slave_araddr ;
  assign ddr4_A$arburst = ddr4_A_deburster$to_slave_arburst ;
  assign ddr4_A$arcache = ddr4_A_deburster$to_slave_arcache ;
  assign ddr4_A$arid = ddr4_A_deburster$to_slave_arid ;
  assign ddr4_A$arlen = ddr4_A_deburster$to_slave_arlen ;
  assign ddr4_A$arlock = ddr4_A_deburster$to_slave_arlock ;
  assign ddr4_A$arprot = ddr4_A_deburster$to_slave_arprot ;
  assign ddr4_A$arqos = ddr4_A_deburster$to_slave_arqos ;
  assign ddr4_A$arregion = ddr4_A_deburster$to_slave_arregion ;
  assign ddr4_A$arsize = ddr4_A_deburster$to_slave_arsize ;
  assign ddr4_A$arvalid = ddr4_A_deburster$to_slave_arvalid ;
  assign ddr4_A$awaddr = ddr4_A_deburster$to_slave_awaddr ;
  assign ddr4_A$awburst = ddr4_A_deburster$to_slave_awburst ;
  assign ddr4_A$awcache = ddr4_A_deburster$to_slave_awcache ;
  assign ddr4_A$awid = ddr4_A_deburster$to_slave_awid ;
  assign ddr4_A$awlen = ddr4_A_deburster$to_slave_awlen ;
  assign ddr4_A$awlock = ddr4_A_deburster$to_slave_awlock ;
  assign ddr4_A$awprot = ddr4_A_deburster$to_slave_awprot ;
  assign ddr4_A$awqos = ddr4_A_deburster$to_slave_awqos ;
  assign ddr4_A$awregion = ddr4_A_deburster$to_slave_awregion ;
  assign ddr4_A$awsize = ddr4_A_deburster$to_slave_awsize ;
  assign ddr4_A$awvalid = ddr4_A_deburster$to_slave_awvalid ;
  assign ddr4_A$bready = ddr4_A_deburster$to_slave_bready ;
  assign ddr4_A$rready = ddr4_A_deburster$to_slave_rready ;
  assign ddr4_A$wdata = ddr4_A_deburster$to_slave_wdata ;
  assign ddr4_A$wlast = ddr4_A_deburster$to_slave_wlast ;
  assign ddr4_A$wstrb = ddr4_A_deburster$to_slave_wstrb ;
  assign ddr4_A$wvalid = ddr4_A_deburster$to_slave_wvalid ;

  // submodule ddr4_A_deburster
  assign ddr4_A_deburster$from_master_araddr =
	     aws_BSV_top$ddr4_A_master_araddr ;
  assign ddr4_A_deburster$from_master_arburst =
	     aws_BSV_top$ddr4_A_master_arburst ;
  assign ddr4_A_deburster$from_master_arcache =
	     aws_BSV_top$ddr4_A_master_arcache ;
  assign ddr4_A_deburster$from_master_arid = aws_BSV_top$ddr4_A_master_arid ;
  assign ddr4_A_deburster$from_master_arlen =
	     aws_BSV_top$ddr4_A_master_arlen ;
  assign ddr4_A_deburster$from_master_arlock =
	     aws_BSV_top$ddr4_A_master_arlock ;
  assign ddr4_A_deburster$from_master_arprot =
	     aws_BSV_top$ddr4_A_master_arprot ;
  assign ddr4_A_deburster$from_master_arqos =
	     aws_BSV_top$ddr4_A_master_arqos ;
  assign ddr4_A_deburster$from_master_arregion =
	     aws_BSV_top$ddr4_A_master_arregion ;
  assign ddr4_A_deburster$from_master_arsize =
	     aws_BSV_top$ddr4_A_master_arsize ;
  assign ddr4_A_deburster$from_master_arvalid =
	     aws_BSV_top$ddr4_A_master_arvalid ;
  assign ddr4_A_deburster$from_master_awaddr =
	     aws_BSV_top$ddr4_A_master_awaddr ;
  assign ddr4_A_deburster$from_master_awburst =
	     aws_BSV_top$ddr4_A_master_awburst ;
  assign ddr4_A_deburster$from_master_awcache =
	     aws_BSV_top$ddr4_A_master_awcache ;
  assign ddr4_A_deburster$from_master_awid = aws_BSV_top$ddr4_A_master_awid ;
  assign ddr4_A_deburster$from_master_awlen =
	     aws_BSV_top$ddr4_A_master_awlen ;
  assign ddr4_A_deburster$from_master_awlock =
	     aws_BSV_top$ddr4_A_master_awlock ;
  assign ddr4_A_deburster$from_master_awprot =
	     aws_BSV_top$ddr4_A_master_awprot ;
  assign ddr4_A_deburster$from_master_awqos =
	     aws_BSV_top$ddr4_A_master_awqos ;
  assign ddr4_A_deburster$from_master_awregion =
	     aws_BSV_top$ddr4_A_master_awregion ;
  assign ddr4_A_deburster$from_master_awsize =
	     aws_BSV_top$ddr4_A_master_awsize ;
  assign ddr4_A_deburster$from_master_awvalid =
	     aws_BSV_top$ddr4_A_master_awvalid ;
  assign ddr4_A_deburster$from_master_bready =
	     aws_BSV_top$ddr4_A_master_bready ;
  assign ddr4_A_deburster$from_master_rready =
	     aws_BSV_top$ddr4_A_master_rready ;
  assign ddr4_A_deburster$from_master_wdata =
	     aws_BSV_top$ddr4_A_master_wdata ;
  assign ddr4_A_deburster$from_master_wlast =
	     aws_BSV_top$ddr4_A_master_wlast ;
  assign ddr4_A_deburster$from_master_wstrb =
	     aws_BSV_top$ddr4_A_master_wstrb ;
  assign ddr4_A_deburster$from_master_wvalid =
	     aws_BSV_top$ddr4_A_master_wvalid ;
  assign ddr4_A_deburster$to_slave_arready = ddr4_A$arready ;
  assign ddr4_A_deburster$to_slave_awready = ddr4_A$awready ;
  assign ddr4_A_deburster$to_slave_bid = ddr4_A$bid ;
  assign ddr4_A_deburster$to_slave_bresp = ddr4_A$bresp ;
  assign ddr4_A_deburster$to_slave_bvalid = ddr4_A$bvalid ;
  assign ddr4_A_deburster$to_slave_rdata = ddr4_A$rdata ;
  assign ddr4_A_deburster$to_slave_rid = ddr4_A$rid ;
  assign ddr4_A_deburster$to_slave_rlast = ddr4_A$rlast ;
  assign ddr4_A_deburster$to_slave_rresp = ddr4_A$rresp ;
  assign ddr4_A_deburster$to_slave_rvalid = ddr4_A$rvalid ;
  assign ddr4_A_deburster$to_slave_wready = ddr4_A$wready ;
  assign ddr4_A_deburster$EN_reset = 1'b0 ;

  // submodule ddr4_B
  assign ddr4_B$araddr = ddr4_B_deburster$to_slave_araddr ;
  assign ddr4_B$arburst = ddr4_B_deburster$to_slave_arburst ;
  assign ddr4_B$arcache = ddr4_B_deburster$to_slave_arcache ;
  assign ddr4_B$arid = ddr4_B_deburster$to_slave_arid ;
  assign ddr4_B$arlen = ddr4_B_deburster$to_slave_arlen ;
  assign ddr4_B$arlock = ddr4_B_deburster$to_slave_arlock ;
  assign ddr4_B$arprot = ddr4_B_deburster$to_slave_arprot ;
  assign ddr4_B$arqos = ddr4_B_deburster$to_slave_arqos ;
  assign ddr4_B$arregion = ddr4_B_deburster$to_slave_arregion ;
  assign ddr4_B$arsize = ddr4_B_deburster$to_slave_arsize ;
  assign ddr4_B$arvalid = ddr4_B_deburster$to_slave_arvalid ;
  assign ddr4_B$awaddr = ddr4_B_deburster$to_slave_awaddr ;
  assign ddr4_B$awburst = ddr4_B_deburster$to_slave_awburst ;
  assign ddr4_B$awcache = ddr4_B_deburster$to_slave_awcache ;
  assign ddr4_B$awid = ddr4_B_deburster$to_slave_awid ;
  assign ddr4_B$awlen = ddr4_B_deburster$to_slave_awlen ;
  assign ddr4_B$awlock = ddr4_B_deburster$to_slave_awlock ;
  assign ddr4_B$awprot = ddr4_B_deburster$to_slave_awprot ;
  assign ddr4_B$awqos = ddr4_B_deburster$to_slave_awqos ;
  assign ddr4_B$awregion = ddr4_B_deburster$to_slave_awregion ;
  assign ddr4_B$awsize = ddr4_B_deburster$to_slave_awsize ;
  assign ddr4_B$awvalid = ddr4_B_deburster$to_slave_awvalid ;
  assign ddr4_B$bready = ddr4_B_deburster$to_slave_bready ;
  assign ddr4_B$rready = ddr4_B_deburster$to_slave_rready ;
  assign ddr4_B$wdata = ddr4_B_deburster$to_slave_wdata ;
  assign ddr4_B$wlast = ddr4_B_deburster$to_slave_wlast ;
  assign ddr4_B$wstrb = ddr4_B_deburster$to_slave_wstrb ;
  assign ddr4_B$wvalid = ddr4_B_deburster$to_slave_wvalid ;

  // submodule ddr4_B_deburster
  assign ddr4_B_deburster$from_master_araddr =
	     aws_BSV_top$ddr4_B_master_araddr ;
  assign ddr4_B_deburster$from_master_arburst =
	     aws_BSV_top$ddr4_B_master_arburst ;
  assign ddr4_B_deburster$from_master_arcache =
	     aws_BSV_top$ddr4_B_master_arcache ;
  assign ddr4_B_deburster$from_master_arid = aws_BSV_top$ddr4_B_master_arid ;
  assign ddr4_B_deburster$from_master_arlen =
	     aws_BSV_top$ddr4_B_master_arlen ;
  assign ddr4_B_deburster$from_master_arlock =
	     aws_BSV_top$ddr4_B_master_arlock ;
  assign ddr4_B_deburster$from_master_arprot =
	     aws_BSV_top$ddr4_B_master_arprot ;
  assign ddr4_B_deburster$from_master_arqos =
	     aws_BSV_top$ddr4_B_master_arqos ;
  assign ddr4_B_deburster$from_master_arregion =
	     aws_BSV_top$ddr4_B_master_arregion ;
  assign ddr4_B_deburster$from_master_arsize =
	     aws_BSV_top$ddr4_B_master_arsize ;
  assign ddr4_B_deburster$from_master_arvalid =
	     aws_BSV_top$ddr4_B_master_arvalid ;
  assign ddr4_B_deburster$from_master_awaddr =
	     aws_BSV_top$ddr4_B_master_awaddr ;
  assign ddr4_B_deburster$from_master_awburst =
	     aws_BSV_top$ddr4_B_master_awburst ;
  assign ddr4_B_deburster$from_master_awcache =
	     aws_BSV_top$ddr4_B_master_awcache ;
  assign ddr4_B_deburster$from_master_awid = aws_BSV_top$ddr4_B_master_awid ;
  assign ddr4_B_deburster$from_master_awlen =
	     aws_BSV_top$ddr4_B_master_awlen ;
  assign ddr4_B_deburster$from_master_awlock =
	     aws_BSV_top$ddr4_B_master_awlock ;
  assign ddr4_B_deburster$from_master_awprot =
	     aws_BSV_top$ddr4_B_master_awprot ;
  assign ddr4_B_deburster$from_master_awqos =
	     aws_BSV_top$ddr4_B_master_awqos ;
  assign ddr4_B_deburster$from_master_awregion =
	     aws_BSV_top$ddr4_B_master_awregion ;
  assign ddr4_B_deburster$from_master_awsize =
	     aws_BSV_top$ddr4_B_master_awsize ;
  assign ddr4_B_deburster$from_master_awvalid =
	     aws_BSV_top$ddr4_B_master_awvalid ;
  assign ddr4_B_deburster$from_master_bready =
	     aws_BSV_top$ddr4_B_master_bready ;
  assign ddr4_B_deburster$from_master_rready =
	     aws_BSV_top$ddr4_B_master_rready ;
  assign ddr4_B_deburster$from_master_wdata =
	     aws_BSV_top$ddr4_B_master_wdata ;
  assign ddr4_B_deburster$from_master_wlast =
	     aws_BSV_top$ddr4_B_master_wlast ;
  assign ddr4_B_deburster$from_master_wstrb =
	     aws_BSV_top$ddr4_B_master_wstrb ;
  assign ddr4_B_deburster$from_master_wvalid =
	     aws_BSV_top$ddr4_B_master_wvalid ;
  assign ddr4_B_deburster$to_slave_arready = ddr4_B$arready ;
  assign ddr4_B_deburster$to_slave_awready = ddr4_B$awready ;
  assign ddr4_B_deburster$to_slave_bid = ddr4_B$bid ;
  assign ddr4_B_deburster$to_slave_bresp = ddr4_B$bresp ;
  assign ddr4_B_deburster$to_slave_bvalid = ddr4_B$bvalid ;
  assign ddr4_B_deburster$to_slave_rdata = ddr4_B$rdata ;
  assign ddr4_B_deburster$to_slave_rid = ddr4_B$rid ;
  assign ddr4_B_deburster$to_slave_rlast = ddr4_B$rlast ;
  assign ddr4_B_deburster$to_slave_rresp = ddr4_B$rresp ;
  assign ddr4_B_deburster$to_slave_rvalid = ddr4_B$rvalid ;
  assign ddr4_B_deburster$to_slave_wready = ddr4_B$wready ;
  assign ddr4_B_deburster$EN_reset = 1'b0 ;

  // submodule ddr4_C
  assign ddr4_C$araddr = ddr4_C_deburster$to_slave_araddr ;
  assign ddr4_C$arburst = ddr4_C_deburster$to_slave_arburst ;
  assign ddr4_C$arcache = ddr4_C_deburster$to_slave_arcache ;
  assign ddr4_C$arid = ddr4_C_deburster$to_slave_arid ;
  assign ddr4_C$arlen = ddr4_C_deburster$to_slave_arlen ;
  assign ddr4_C$arlock = ddr4_C_deburster$to_slave_arlock ;
  assign ddr4_C$arprot = ddr4_C_deburster$to_slave_arprot ;
  assign ddr4_C$arqos = ddr4_C_deburster$to_slave_arqos ;
  assign ddr4_C$arregion = ddr4_C_deburster$to_slave_arregion ;
  assign ddr4_C$arsize = ddr4_C_deburster$to_slave_arsize ;
  assign ddr4_C$arvalid = ddr4_C_deburster$to_slave_arvalid ;
  assign ddr4_C$awaddr = ddr4_C_deburster$to_slave_awaddr ;
  assign ddr4_C$awburst = ddr4_C_deburster$to_slave_awburst ;
  assign ddr4_C$awcache = ddr4_C_deburster$to_slave_awcache ;
  assign ddr4_C$awid = ddr4_C_deburster$to_slave_awid ;
  assign ddr4_C$awlen = ddr4_C_deburster$to_slave_awlen ;
  assign ddr4_C$awlock = ddr4_C_deburster$to_slave_awlock ;
  assign ddr4_C$awprot = ddr4_C_deburster$to_slave_awprot ;
  assign ddr4_C$awqos = ddr4_C_deburster$to_slave_awqos ;
  assign ddr4_C$awregion = ddr4_C_deburster$to_slave_awregion ;
  assign ddr4_C$awsize = ddr4_C_deburster$to_slave_awsize ;
  assign ddr4_C$awvalid = ddr4_C_deburster$to_slave_awvalid ;
  assign ddr4_C$bready = ddr4_C_deburster$to_slave_bready ;
  assign ddr4_C$rready = ddr4_C_deburster$to_slave_rready ;
  assign ddr4_C$wdata = ddr4_C_deburster$to_slave_wdata ;
  assign ddr4_C$wlast = ddr4_C_deburster$to_slave_wlast ;
  assign ddr4_C$wstrb = ddr4_C_deburster$to_slave_wstrb ;
  assign ddr4_C$wvalid = ddr4_C_deburster$to_slave_wvalid ;

  // submodule ddr4_C_deburster
  assign ddr4_C_deburster$from_master_araddr =
	     aws_BSV_top$ddr4_C_master_araddr ;
  assign ddr4_C_deburster$from_master_arburst =
	     aws_BSV_top$ddr4_C_master_arburst ;
  assign ddr4_C_deburster$from_master_arcache =
	     aws_BSV_top$ddr4_C_master_arcache ;
  assign ddr4_C_deburster$from_master_arid = aws_BSV_top$ddr4_C_master_arid ;
  assign ddr4_C_deburster$from_master_arlen =
	     aws_BSV_top$ddr4_C_master_arlen ;
  assign ddr4_C_deburster$from_master_arlock =
	     aws_BSV_top$ddr4_C_master_arlock ;
  assign ddr4_C_deburster$from_master_arprot =
	     aws_BSV_top$ddr4_C_master_arprot ;
  assign ddr4_C_deburster$from_master_arqos =
	     aws_BSV_top$ddr4_C_master_arqos ;
  assign ddr4_C_deburster$from_master_arregion =
	     aws_BSV_top$ddr4_C_master_arregion ;
  assign ddr4_C_deburster$from_master_arsize =
	     aws_BSV_top$ddr4_C_master_arsize ;
  assign ddr4_C_deburster$from_master_arvalid =
	     aws_BSV_top$ddr4_C_master_arvalid ;
  assign ddr4_C_deburster$from_master_awaddr =
	     aws_BSV_top$ddr4_C_master_awaddr ;
  assign ddr4_C_deburster$from_master_awburst =
	     aws_BSV_top$ddr4_C_master_awburst ;
  assign ddr4_C_deburster$from_master_awcache =
	     aws_BSV_top$ddr4_C_master_awcache ;
  assign ddr4_C_deburster$from_master_awid = aws_BSV_top$ddr4_C_master_awid ;
  assign ddr4_C_deburster$from_master_awlen =
	     aws_BSV_top$ddr4_C_master_awlen ;
  assign ddr4_C_deburster$from_master_awlock =
	     aws_BSV_top$ddr4_C_master_awlock ;
  assign ddr4_C_deburster$from_master_awprot =
	     aws_BSV_top$ddr4_C_master_awprot ;
  assign ddr4_C_deburster$from_master_awqos =
	     aws_BSV_top$ddr4_C_master_awqos ;
  assign ddr4_C_deburster$from_master_awregion =
	     aws_BSV_top$ddr4_C_master_awregion ;
  assign ddr4_C_deburster$from_master_awsize =
	     aws_BSV_top$ddr4_C_master_awsize ;
  assign ddr4_C_deburster$from_master_awvalid =
	     aws_BSV_top$ddr4_C_master_awvalid ;
  assign ddr4_C_deburster$from_master_bready =
	     aws_BSV_top$ddr4_C_master_bready ;
  assign ddr4_C_deburster$from_master_rready =
	     aws_BSV_top$ddr4_C_master_rready ;
  assign ddr4_C_deburster$from_master_wdata =
	     aws_BSV_top$ddr4_C_master_wdata ;
  assign ddr4_C_deburster$from_master_wlast =
	     aws_BSV_top$ddr4_C_master_wlast ;
  assign ddr4_C_deburster$from_master_wstrb =
	     aws_BSV_top$ddr4_C_master_wstrb ;
  assign ddr4_C_deburster$from_master_wvalid =
	     aws_BSV_top$ddr4_C_master_wvalid ;
  assign ddr4_C_deburster$to_slave_arready = ddr4_C$arready ;
  assign ddr4_C_deburster$to_slave_awready = ddr4_C$awready ;
  assign ddr4_C_deburster$to_slave_bid = ddr4_C$bid ;
  assign ddr4_C_deburster$to_slave_bresp = ddr4_C$bresp ;
  assign ddr4_C_deburster$to_slave_bvalid = ddr4_C$bvalid ;
  assign ddr4_C_deburster$to_slave_rdata = ddr4_C$rdata ;
  assign ddr4_C_deburster$to_slave_rid = ddr4_C$rid ;
  assign ddr4_C_deburster$to_slave_rlast = ddr4_C$rlast ;
  assign ddr4_C_deburster$to_slave_rresp = ddr4_C$rresp ;
  assign ddr4_C_deburster$to_slave_rvalid = ddr4_C$rvalid ;
  assign ddr4_C_deburster$to_slave_wready = ddr4_C$wready ;
  assign ddr4_C_deburster$EN_reset = 1'b0 ;

  // submodule ddr4_D
  assign ddr4_D$araddr = ddr4_D_deburster$to_slave_araddr ;
  assign ddr4_D$arburst = ddr4_D_deburster$to_slave_arburst ;
  assign ddr4_D$arcache = ddr4_D_deburster$to_slave_arcache ;
  assign ddr4_D$arid = ddr4_D_deburster$to_slave_arid ;
  assign ddr4_D$arlen = ddr4_D_deburster$to_slave_arlen ;
  assign ddr4_D$arlock = ddr4_D_deburster$to_slave_arlock ;
  assign ddr4_D$arprot = ddr4_D_deburster$to_slave_arprot ;
  assign ddr4_D$arqos = ddr4_D_deburster$to_slave_arqos ;
  assign ddr4_D$arregion = ddr4_D_deburster$to_slave_arregion ;
  assign ddr4_D$arsize = ddr4_D_deburster$to_slave_arsize ;
  assign ddr4_D$arvalid = ddr4_D_deburster$to_slave_arvalid ;
  assign ddr4_D$awaddr = ddr4_D_deburster$to_slave_awaddr ;
  assign ddr4_D$awburst = ddr4_D_deburster$to_slave_awburst ;
  assign ddr4_D$awcache = ddr4_D_deburster$to_slave_awcache ;
  assign ddr4_D$awid = ddr4_D_deburster$to_slave_awid ;
  assign ddr4_D$awlen = ddr4_D_deburster$to_slave_awlen ;
  assign ddr4_D$awlock = ddr4_D_deburster$to_slave_awlock ;
  assign ddr4_D$awprot = ddr4_D_deburster$to_slave_awprot ;
  assign ddr4_D$awqos = ddr4_D_deburster$to_slave_awqos ;
  assign ddr4_D$awregion = ddr4_D_deburster$to_slave_awregion ;
  assign ddr4_D$awsize = ddr4_D_deburster$to_slave_awsize ;
  assign ddr4_D$awvalid = ddr4_D_deburster$to_slave_awvalid ;
  assign ddr4_D$bready = ddr4_D_deburster$to_slave_bready ;
  assign ddr4_D$rready = ddr4_D_deburster$to_slave_rready ;
  assign ddr4_D$wdata = ddr4_D_deburster$to_slave_wdata ;
  assign ddr4_D$wlast = ddr4_D_deburster$to_slave_wlast ;
  assign ddr4_D$wstrb = ddr4_D_deburster$to_slave_wstrb ;
  assign ddr4_D$wvalid = ddr4_D_deburster$to_slave_wvalid ;

  // submodule ddr4_D_deburster
  assign ddr4_D_deburster$from_master_araddr =
	     aws_BSV_top$ddr4_D_master_araddr ;
  assign ddr4_D_deburster$from_master_arburst =
	     aws_BSV_top$ddr4_D_master_arburst ;
  assign ddr4_D_deburster$from_master_arcache =
	     aws_BSV_top$ddr4_D_master_arcache ;
  assign ddr4_D_deburster$from_master_arid = aws_BSV_top$ddr4_D_master_arid ;
  assign ddr4_D_deburster$from_master_arlen =
	     aws_BSV_top$ddr4_D_master_arlen ;
  assign ddr4_D_deburster$from_master_arlock =
	     aws_BSV_top$ddr4_D_master_arlock ;
  assign ddr4_D_deburster$from_master_arprot =
	     aws_BSV_top$ddr4_D_master_arprot ;
  assign ddr4_D_deburster$from_master_arqos =
	     aws_BSV_top$ddr4_D_master_arqos ;
  assign ddr4_D_deburster$from_master_arregion =
	     aws_BSV_top$ddr4_D_master_arregion ;
  assign ddr4_D_deburster$from_master_arsize =
	     aws_BSV_top$ddr4_D_master_arsize ;
  assign ddr4_D_deburster$from_master_arvalid =
	     aws_BSV_top$ddr4_D_master_arvalid ;
  assign ddr4_D_deburster$from_master_awaddr =
	     aws_BSV_top$ddr4_D_master_awaddr ;
  assign ddr4_D_deburster$from_master_awburst =
	     aws_BSV_top$ddr4_D_master_awburst ;
  assign ddr4_D_deburster$from_master_awcache =
	     aws_BSV_top$ddr4_D_master_awcache ;
  assign ddr4_D_deburster$from_master_awid = aws_BSV_top$ddr4_D_master_awid ;
  assign ddr4_D_deburster$from_master_awlen =
	     aws_BSV_top$ddr4_D_master_awlen ;
  assign ddr4_D_deburster$from_master_awlock =
	     aws_BSV_top$ddr4_D_master_awlock ;
  assign ddr4_D_deburster$from_master_awprot =
	     aws_BSV_top$ddr4_D_master_awprot ;
  assign ddr4_D_deburster$from_master_awqos =
	     aws_BSV_top$ddr4_D_master_awqos ;
  assign ddr4_D_deburster$from_master_awregion =
	     aws_BSV_top$ddr4_D_master_awregion ;
  assign ddr4_D_deburster$from_master_awsize =
	     aws_BSV_top$ddr4_D_master_awsize ;
  assign ddr4_D_deburster$from_master_awvalid =
	     aws_BSV_top$ddr4_D_master_awvalid ;
  assign ddr4_D_deburster$from_master_bready =
	     aws_BSV_top$ddr4_D_master_bready ;
  assign ddr4_D_deburster$from_master_rready =
	     aws_BSV_top$ddr4_D_master_rready ;
  assign ddr4_D_deburster$from_master_wdata =
	     aws_BSV_top$ddr4_D_master_wdata ;
  assign ddr4_D_deburster$from_master_wlast =
	     aws_BSV_top$ddr4_D_master_wlast ;
  assign ddr4_D_deburster$from_master_wstrb =
	     aws_BSV_top$ddr4_D_master_wstrb ;
  assign ddr4_D_deburster$from_master_wvalid =
	     aws_BSV_top$ddr4_D_master_wvalid ;
  assign ddr4_D_deburster$to_slave_arready = ddr4_D$arready ;
  assign ddr4_D_deburster$to_slave_awready = ddr4_D$awready ;
  assign ddr4_D_deburster$to_slave_bid = ddr4_D$bid ;
  assign ddr4_D_deburster$to_slave_bresp = ddr4_D$bresp ;
  assign ddr4_D_deburster$to_slave_bvalid = ddr4_D$bvalid ;
  assign ddr4_D_deburster$to_slave_rdata = ddr4_D$rdata ;
  assign ddr4_D_deburster$to_slave_rid = ddr4_D$rid ;
  assign ddr4_D_deburster$to_slave_rlast = ddr4_D$rlast ;
  assign ddr4_D_deburster$to_slave_rresp = ddr4_D$rresp ;
  assign ddr4_D_deburster$to_slave_rvalid = ddr4_D$rvalid ;
  assign ddr4_D_deburster$to_slave_wready = ddr4_D$wready ;
  assign ddr4_D_deburster$EN_reset = 1'b0 ;

  // submodule dma_pcis_xactor_f_rd_addr
  assign dma_pcis_xactor_f_rd_addr$D_IN =
	     comms$fo_AXI4_Rd_Addr_i16_a64_u0_first ;
  assign dma_pcis_xactor_f_rd_addr$ENQ =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_addr ;
  assign dma_pcis_xactor_f_rd_addr$DEQ =
	     dma_pcis_xactor_f_rd_addr$EMPTY_N &&
	     aws_BSV_top$dma_pcis_slave_arready ;
  assign dma_pcis_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule dma_pcis_xactor_f_rd_data
  assign dma_pcis_xactor_f_rd_data$D_IN =
	     { aws_BSV_top$dma_pcis_slave_rid,
	       aws_BSV_top$dma_pcis_slave_rdata,
	       aws_BSV_top$dma_pcis_slave_rresp,
	       aws_BSV_top$dma_pcis_slave_rlast } ;
  assign dma_pcis_xactor_f_rd_data$ENQ =
	     aws_BSV_top$dma_pcis_slave_rvalid &&
	     dma_pcis_xactor_f_rd_data$FULL_N ;
  assign dma_pcis_xactor_f_rd_data$DEQ =
	     CAN_FIRE_RL_rl_connect_dma_pcis_rd_data ;
  assign dma_pcis_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule dma_pcis_xactor_f_wr_addr
  assign dma_pcis_xactor_f_wr_addr$D_IN =
	     comms$fo_AXI4_Wr_Addr_i16_a64_u0_first ;
  assign dma_pcis_xactor_f_wr_addr$ENQ =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_addr ;
  assign dma_pcis_xactor_f_wr_addr$DEQ =
	     dma_pcis_xactor_f_wr_addr$EMPTY_N &&
	     aws_BSV_top$dma_pcis_slave_awready ;
  assign dma_pcis_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule dma_pcis_xactor_f_wr_data
  assign dma_pcis_xactor_f_wr_data$D_IN =
	     comms$fo_AXI4_Wr_Data_d512_u0_first ;
  assign dma_pcis_xactor_f_wr_data$ENQ =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_data ;
  assign dma_pcis_xactor_f_wr_data$DEQ =
	     dma_pcis_xactor_f_wr_data$EMPTY_N &&
	     aws_BSV_top$dma_pcis_slave_wready ;
  assign dma_pcis_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule dma_pcis_xactor_f_wr_resp
  assign dma_pcis_xactor_f_wr_resp$D_IN =
	     { aws_BSV_top$dma_pcis_slave_bid,
	       aws_BSV_top$dma_pcis_slave_bresp } ;
  assign dma_pcis_xactor_f_wr_resp$ENQ =
	     aws_BSV_top$dma_pcis_slave_bvalid &&
	     dma_pcis_xactor_f_wr_resp$FULL_N ;
  assign dma_pcis_xactor_f_wr_resp$DEQ =
	     CAN_FIRE_RL_rl_connect_dma_pcis_wr_resp ;
  assign dma_pcis_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule ocl_xactor_f_rd_addr
  assign ocl_xactor_f_rd_addr$D_IN = comms$fo_AXI4L_Rd_Addr_a32_u0_first ;
  assign ocl_xactor_f_rd_addr$ENQ =
	     comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq &&
	     comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first &&
	     ocl_xactor_f_rd_addr$FULL_N ;
  assign ocl_xactor_f_rd_addr$DEQ =
	     ocl_xactor_f_rd_addr$EMPTY_N && aws_BSV_top$ocl_slave_arready ;
  assign ocl_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule ocl_xactor_f_rd_data
  assign ocl_xactor_f_rd_data$D_IN =
	     { aws_BSV_top$ocl_slave_rresp, aws_BSV_top$ocl_slave_rdata } ;
  assign ocl_xactor_f_rd_data$ENQ =
	     aws_BSV_top$ocl_slave_rvalid && ocl_xactor_f_rd_data$FULL_N ;
  assign ocl_xactor_f_rd_data$DEQ =
	     comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq &&
	     ocl_xactor_f_rd_data$EMPTY_N ;
  assign ocl_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule ocl_xactor_f_wr_addr
  assign ocl_xactor_f_wr_addr$D_IN = comms$fo_AXI4L_Wr_Addr_a32_u0_first ;
  assign ocl_xactor_f_wr_addr$ENQ =
	     comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq &&
	     comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first &&
	     ocl_xactor_f_wr_addr$FULL_N ;
  assign ocl_xactor_f_wr_addr$DEQ =
	     ocl_xactor_f_wr_addr$EMPTY_N && aws_BSV_top$ocl_slave_awready ;
  assign ocl_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule ocl_xactor_f_wr_data
  assign ocl_xactor_f_wr_data$D_IN = comms$fo_AXI4L_Wr_Data_d32_first ;
  assign ocl_xactor_f_wr_data$ENQ =
	     comms$RDY_fo_AXI4L_Wr_Data_d32_deq &&
	     comms$RDY_fo_AXI4L_Wr_Data_d32_first &&
	     ocl_xactor_f_wr_data$FULL_N ;
  assign ocl_xactor_f_wr_data$DEQ =
	     ocl_xactor_f_wr_data$EMPTY_N && aws_BSV_top$ocl_slave_wready ;
  assign ocl_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule ocl_xactor_f_wr_resp
  assign ocl_xactor_f_wr_resp$D_IN = aws_BSV_top$ocl_slave_bresp ;
  assign ocl_xactor_f_wr_resp$ENQ =
	     aws_BSV_top$ocl_slave_bvalid && ocl_xactor_f_wr_resp$FULL_N ;
  assign ocl_xactor_f_wr_resp$DEQ =
	     comms$RDY_fi_AXI4L_Wr_Resp_u0_enq &&
	     ocl_xactor_f_wr_resp$EMPTY_N ;
  assign ocl_xactor_f_wr_resp$CLR = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_counter_4ns <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_last_vled <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_vdip <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (rg_counter_4ns$EN)
	  rg_counter_4ns <= `BSV_ASSIGNMENT_DELAY rg_counter_4ns$D_IN;
	if (rg_last_vled$EN)
	  rg_last_vled <= `BSV_ASSIGNMENT_DELAY rg_last_vled$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_vdip$EN) rg_vdip <= `BSV_ASSIGNMENT_DELAY rg_vdip$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_counter_4ns = 64'hAAAAAAAAAAAAAAAA;
    rg_last_vled = 16'hAAAA;
    rg_state = 2'h2;
    rg_vdip = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connecting)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connecting)
	$display("Bluespec AWSteria simulation v1.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connecting)
	$display("Copyright (c) 2020 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connecting)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_connecting) $imported_c_host_connect(16'd30000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv)
	begin
	  TASK_c_host_recv___d359 = $imported_c_host_recv(8'd79);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	$imported_c_host_send(comms$fo_BSV_to_C_bytevec_first, 8'd76);
  end
  // synopsys translate_on
endmodule  // mkTop_HW_Side

