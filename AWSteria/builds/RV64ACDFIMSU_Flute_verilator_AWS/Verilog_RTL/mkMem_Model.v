//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
//
//
//
// Ports:
// Name                         I/O  size props
// awready                        O     1
// wready                         O     1
// bid                            O    16
// bresp                          O     2
// bvalid                         O     1
// arready                        O     1
// rid                            O    16
// rdata                          O   512
// rresp                          O     2
// rlast                          O     1
// rvalid                         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// awid                           I    16
// awaddr                         I    64
// awlen                          I     8
// awsize                         I     3
// awburst                        I     2
// awlock                         I     1
// awcache                        I     4
// awprot                         I     3
// awqos                          I     4
// awregion                       I     4
// wdata                          I   512
// wstrb                          I    64
// wlast                          I     1
// bready                         I     1
// arid                           I    16
// araddr                         I    64
// arlen                          I     8
// arsize                         I     3
// arburst                        I     2
// arlock                         I     1
// arcache                        I     4
// arprot                         I     3
// arqos                          I     4
// arregion                       I     4
// rready                         I     1
// awvalid                        I     1
// wvalid                         I     1
// arvalid                        I     1
//
// Combinational paths from inputs to outputs:
//   (awid,
//    awaddr,
//    awlen,
//    awsize,
//    awburst,
//    awlock,
//    awcache,
//    awprot,
//    awqos,
//    awregion,
//    wdata,
//    wstrb,
//    wlast,
//    awvalid,
//    wvalid) -> bid
//   (awid,
//    awaddr,
//    awlen,
//    awsize,
//    awburst,
//    awlock,
//    awcache,
//    awprot,
//    awqos,
//    awregion,
//    wdata,
//    wstrb,
//    wlast,
//    awvalid,
//    wvalid) -> bresp
//   (awid,
//    awaddr,
//    awlen,
//    awsize,
//    awburst,
//    awlock,
//    awcache,
//    awprot,
//    awqos,
//    awregion,
//    wdata,
//    wstrb,
//    wlast,
//    awvalid,
//    wvalid) -> buser
//   (awid,
//    awaddr,
//    awlen,
//    awsize,
//    awburst,
//    awlock,
//    awcache,
//    awprot,
//    awqos,
//    awregion,
//    wdata,
//    wstrb,
//    wlast,
//    awvalid,
//    wvalid) -> bvalid
//   (arid,
//    araddr,
//    arlen,
//    arsize,
//    arburst,
//    arlock,
//    arcache,
//    arprot,
//    arqos,
//    arregion,
//    arvalid) -> rid
//   (arid,
//    araddr,
//    arlen,
//    arsize,
//    arburst,
//    arlock,
//    arcache,
//    arprot,
//    arqos,
//    arregion,
//    arvalid) -> rdata
//   (arid,
//    araddr,
//    arlen,
//    arsize,
//    arburst,
//    arlock,
//    arcache,
//    arprot,
//    arqos,
//    arregion,
//    arvalid) -> rresp
//   (arid,
//    araddr,
//    arlen,
//    arsize,
//    arburst,
//    arlock,
//    arcache,
//    arprot,
//    arqos,
//    arregion,
//    arvalid) -> rlast
//   (arid,
//    araddr,
//    arlen,
//    arsize,
//    arburst,
//    arlock,
//    arcache,
//    arprot,
//    arqos,
//    arregion,
//    arvalid) -> ruser
//   (arid,
//    araddr,
//    arlen,
//    arsize,
//    arburst,
//    arlock,
//    arcache,
//    arprot,
//    arqos,
//    arregion,
//    arvalid) -> rvalid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMem_Model(CLK,
		   RST_N,

		   awid,
		   awaddr,
		   awlen,
		   awsize,
		   awburst,
		   awlock,
		   awcache,
		   awprot,
		   awqos,
		   awregion,
		   awvalid,

		   awready,

		   wdata,
		   wstrb,
		   wlast,
		   wvalid,

		   wready,

		   bid,

		   bresp,

		   bvalid,

		   bready,

		   arid,
		   araddr,
		   arlen,
		   arsize,
		   arburst,
		   arlock,
		   arcache,
		   arprot,
		   arqos,
		   arregion,
		   arvalid,

		   arready,

		   rid,

		   rdata,

		   rresp,

		   rlast,

		   rvalid,

		   rready);
  parameter [1 : 0] ddr4_num = 2'b0;
  input  CLK;
  input  RST_N;

  // action method aw_awflit
  input  [15 : 0] awid;
  input  [63 : 0] awaddr;
  input  [7 : 0] awlen;
  input  [2 : 0] awsize;
  input  [1 : 0] awburst;
  input  awlock;
  input  [3 : 0] awcache;
  input  [2 : 0] awprot;
  input  [3 : 0] awqos;
  input  [3 : 0] awregion;
  input  awvalid;

  // value method aw_awready
  output awready;

  // action method w_wflit
  input  [511 : 0] wdata;
  input  [63 : 0] wstrb;
  input  wlast;
  input  wvalid;

  // value method w_wready
  output wready;

  // value method b_bid
  output [15 : 0] bid;

  // value method b_bresp
  output [1 : 0] bresp;

  // value method b_buser

  // value method b_bvalid
  output bvalid;

  // action method b_bready
  input  bready;

  // action method ar_arflit
  input  [15 : 0] arid;
  input  [63 : 0] araddr;
  input  [7 : 0] arlen;
  input  [2 : 0] arsize;
  input  [1 : 0] arburst;
  input  arlock;
  input  [3 : 0] arcache;
  input  [2 : 0] arprot;
  input  [3 : 0] arqos;
  input  [3 : 0] arregion;
  input  arvalid;

  // value method ar_arready
  output arready;

  // value method r_rid
  output [15 : 0] rid;

  // value method r_rdata
  output [511 : 0] rdata;

  // value method r_rresp
  output [1 : 0] rresp;

  // value method r_rlast
  output rlast;

  // value method r_ruser

  // value method r_rvalid
  output rvalid;

  // action method r_rready
  input  rready;

  // signals for module outputs
  wire [511 : 0] rdata;
  wire [15 : 0] bid, rid;
  wire [1 : 0] bresp, rresp;
  wire arready, awready, bvalid, rlast, rvalid, wready;

  // inlined wires
  wire [577 : 0] axi4_xactor_shim_wff_rv$port0__write_1,
		 axi4_xactor_shim_wff_rv$port1__read,
		 axi4_xactor_shim_wff_rv$port2__read,
		 axi4_xactor_shim_wff_rv$port3__read;
  wire [576 : 0] axi4_xactor_ug_slave_u_w_putWire$wget;
  wire [531 : 0] axi4_xactor_shim_rff_rv$port0__write_1,
		 axi4_xactor_shim_rff_rv$port1__read,
		 axi4_xactor_shim_rff_rv$port2__read,
		 axi4_xactor_shim_rff_rv$port3__read;
  wire [109 : 0] axi4_xactor_shim_arff_rv$port0__write_1,
		 axi4_xactor_shim_arff_rv$port1__read,
		 axi4_xactor_shim_arff_rv$port2__read,
		 axi4_xactor_shim_arff_rv$port3__read,
		 axi4_xactor_shim_awff_rv$port0__write_1,
		 axi4_xactor_shim_awff_rv$port1__read,
		 axi4_xactor_shim_awff_rv$port2__read,
		 axi4_xactor_shim_awff_rv$port3__read;
  wire [108 : 0] axi4_xactor_ug_slave_u_ar_putWire$wget,
		 axi4_xactor_ug_slave_u_aw_putWire$wget;
  wire [18 : 0] axi4_xactor_shim_bff_rv$port0__write_1,
		axi4_xactor_shim_bff_rv$port1__read,
		axi4_xactor_shim_bff_rv$port2__read,
		axi4_xactor_shim_bff_rv$port3__read;
  wire axi4_xactor_ug_slave_u_ar_putWire$whas,
       axi4_xactor_ug_slave_u_aw_putWire$whas,
       axi4_xactor_ug_slave_u_b_dropWire$whas,
       axi4_xactor_ug_slave_u_r_dropWire$whas,
       axi4_xactor_ug_slave_u_w_putWire$whas;

  // register axi4_xactor_clearing
  reg axi4_xactor_clearing;
  wire axi4_xactor_clearing$D_IN, axi4_xactor_clearing$EN;

  // register axi4_xactor_shim_arff_rv
  reg [109 : 0] axi4_xactor_shim_arff_rv;
  wire [109 : 0] axi4_xactor_shim_arff_rv$D_IN;
  wire axi4_xactor_shim_arff_rv$EN;

  // register axi4_xactor_shim_awff_rv
  reg [109 : 0] axi4_xactor_shim_awff_rv;
  wire [109 : 0] axi4_xactor_shim_awff_rv$D_IN;
  wire axi4_xactor_shim_awff_rv$EN;

  // register axi4_xactor_shim_bff_rv
  reg [18 : 0] axi4_xactor_shim_bff_rv;
  wire [18 : 0] axi4_xactor_shim_bff_rv$D_IN;
  wire axi4_xactor_shim_bff_rv$EN;

  // register axi4_xactor_shim_rff_rv
  reg [531 : 0] axi4_xactor_shim_rff_rv;
  wire [531 : 0] axi4_xactor_shim_rff_rv$D_IN;
  wire axi4_xactor_shim_rff_rv$EN;

  // register axi4_xactor_shim_wff_rv
  reg [577 : 0] axi4_xactor_shim_wff_rv;
  wire [577 : 0] axi4_xactor_shim_wff_rv$D_IN;
  wire axi4_xactor_shim_wff_rv$EN;

  // ports of submodule rf
  wire [511 : 0] rf$D_IN, rf$D_OUT_1, rf$D_OUT_2;
  wire [63 : 0] rf$ADDR_1,
		rf$ADDR_2,
		rf$ADDR_3,
		rf$ADDR_4,
		rf$ADDR_5,
		rf$ADDR_IN;
  wire rf$WE;

  // rule scheduling signals
  wire CAN_FIRE_RL_axi4_xactor_do_clear,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_ar_doPut,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_ar_warnDoPut,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_aw_doPut,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_aw_warnDoPut,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_b_doDrop,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_b_setPeek,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_b_warnDoDrop,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_r_doDrop,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_r_setPeek,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_r_warnDoDrop,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_w_doPut,
       CAN_FIRE_RL_axi4_xactor_ug_slave_u_w_warnDoPut,
       CAN_FIRE_RL_rl_rd_req,
       CAN_FIRE_RL_rl_wr_req,
       CAN_FIRE_ar_arflit,
       CAN_FIRE_aw_awflit,
       CAN_FIRE_b_bready,
       CAN_FIRE_r_rready,
       CAN_FIRE_w_wflit,
       WILL_FIRE_RL_axi4_xactor_do_clear,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_ar_doPut,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_ar_warnDoPut,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_aw_doPut,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_aw_warnDoPut,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_b_doDrop,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_b_setPeek,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_b_warnDoDrop,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_r_doDrop,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_r_setPeek,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_r_warnDoDrop,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_w_doPut,
       WILL_FIRE_RL_axi4_xactor_ug_slave_u_w_warnDoPut,
       WILL_FIRE_RL_rl_rd_req,
       WILL_FIRE_RL_rl_wr_req,
       WILL_FIRE_ar_arflit,
       WILL_FIRE_aw_awflit,
       WILL_FIRE_b_bready,
       WILL_FIRE_r_rready,
       WILL_FIRE_w_wflit;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h3352;
  reg [31 : 0] v__h3436;
  reg [31 : 0] v__h4005;
  reg [31 : 0] v__h4073;
  reg [31 : 0] v__h3346;
  reg [31 : 0] v__h3430;
  reg [31 : 0] v__h3999;
  reg [31 : 0] v__h4067;
  // synopsys translate_on

  // remaining internal signals
  wire [530 : 0] axi4_xactor_shim_rff_rvport1__read_BITS_530_TO_0__q2;
  wire [511 : 0] mask__h4139,
		 x1_avValue_rdata__h3518,
		 x__h4150,
		 y__h4151,
		 y__h4152,
		 y_avValue_rdata__h3530;
  wire [63 : 0] addr_base__h3109,
		addr_impl_last__h3111,
		addr_last__h3110,
		offset_b__h3297,
		offset_b__h3952;
  wire [17 : 0] axi4_xactor_shim_bff_rvport1__read_BITS_17_TO_0__q1;
  wire [1 : 0] IF_NOT_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_ax_ETC___d373,
	       IF_NOT_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_ax_ETC___d78;
  wire _0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d54,
       _0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d92,
       axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d57,
       axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d65,
       axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d103,
       axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d94;

  // action method aw_awflit
  assign CAN_FIRE_aw_awflit = 1'd1 ;
  assign WILL_FIRE_aw_awflit = awvalid ;

  // value method aw_awready
  assign awready = !axi4_xactor_shim_awff_rv[109] ;

  // action method w_wflit
  assign CAN_FIRE_w_wflit = 1'd1 ;
  assign WILL_FIRE_w_wflit = wvalid ;

  // value method w_wready
  assign wready = !axi4_xactor_shim_wff_rv[577] ;

  // value method b_bid
  assign bid = axi4_xactor_shim_bff_rvport1__read_BITS_17_TO_0__q1[17:2] ;

  // value method b_bresp
  assign bresp = axi4_xactor_shim_bff_rvport1__read_BITS_17_TO_0__q1[1:0] ;

  // value method b_bvalid
  assign bvalid = axi4_xactor_shim_bff_rv$port1__read[18] ;

  // action method b_bready
  assign CAN_FIRE_b_bready = 1'd1 ;
  assign WILL_FIRE_b_bready = 1'd1 ;

  // action method ar_arflit
  assign CAN_FIRE_ar_arflit = 1'd1 ;
  assign WILL_FIRE_ar_arflit = arvalid ;

  // value method ar_arready
  assign arready = !axi4_xactor_shim_arff_rv[109] ;

  // value method r_rid
  assign rid = axi4_xactor_shim_rff_rvport1__read_BITS_530_TO_0__q2[530:515] ;

  // value method r_rdata
  assign rdata = axi4_xactor_shim_rff_rvport1__read_BITS_530_TO_0__q2[514:3] ;

  // value method r_rresp
  assign rresp = axi4_xactor_shim_rff_rvport1__read_BITS_530_TO_0__q2[2:1] ;

  // value method r_rlast
  assign rlast = axi4_xactor_shim_rff_rvport1__read_BITS_530_TO_0__q2[0] ;

  // value method r_rvalid
  assign rvalid = axi4_xactor_shim_rff_rv$port1__read[531] ;

  // action method r_rready
  assign CAN_FIRE_r_rready = 1'd1 ;
  assign WILL_FIRE_r_rready = 1'd1 ;

  // submodule rf
  RegFile #(.addr_width(32'd64),
	    .data_width(32'd512),
	    .lo(64'd0),
	    .hi(64'd67108863)) rf(.CLK(CLK),
				  .ADDR_1(rf$ADDR_1),
				  .ADDR_2(rf$ADDR_2),
				  .ADDR_3(rf$ADDR_3),
				  .ADDR_4(rf$ADDR_4),
				  .ADDR_5(rf$ADDR_5),
				  .ADDR_IN(rf$ADDR_IN),
				  .D_IN(rf$D_IN),
				  .WE(rf$WE),
				  .D_OUT_1(rf$D_OUT_1),
				  .D_OUT_2(rf$D_OUT_2),
				  .D_OUT_3(),
				  .D_OUT_4(),
				  .D_OUT_5());

  // rule RL_axi4_xactor_ug_slave_u_aw_warnDoPut
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_aw_warnDoPut =
	     axi4_xactor_ug_slave_u_aw_putWire$whas &&
	     axi4_xactor_shim_awff_rv[109] ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_aw_warnDoPut =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_aw_warnDoPut ;

  // rule RL_axi4_xactor_ug_slave_u_aw_doPut
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_aw_doPut =
	     !axi4_xactor_shim_awff_rv[109] &&
	     axi4_xactor_ug_slave_u_aw_putWire$whas ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_aw_doPut =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_aw_doPut ;

  // rule RL_axi4_xactor_ug_slave_u_w_warnDoPut
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_w_warnDoPut =
	     axi4_xactor_ug_slave_u_w_putWire$whas &&
	     axi4_xactor_shim_wff_rv[577] ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_w_warnDoPut =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_w_warnDoPut ;

  // rule RL_axi4_xactor_ug_slave_u_w_doPut
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_w_doPut =
	     !axi4_xactor_shim_wff_rv[577] &&
	     axi4_xactor_ug_slave_u_w_putWire$whas ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_w_doPut =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_w_doPut ;

  // rule RL_axi4_xactor_ug_slave_u_ar_warnDoPut
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_ar_warnDoPut =
	     axi4_xactor_ug_slave_u_ar_putWire$whas &&
	     axi4_xactor_shim_arff_rv[109] ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_ar_warnDoPut =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_ar_warnDoPut ;

  // rule RL_axi4_xactor_ug_slave_u_ar_doPut
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_ar_doPut =
	     !axi4_xactor_shim_arff_rv[109] &&
	     axi4_xactor_ug_slave_u_ar_putWire$whas ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_ar_doPut =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_ar_doPut ;

  // rule RL_rl_rd_req
  assign CAN_FIRE_RL_rl_rd_req =
	     !axi4_xactor_clearing &&
	     axi4_xactor_shim_arff_rv$port1__read[109] &&
	     !axi4_xactor_shim_rff_rv[531] ;
  assign WILL_FIRE_RL_rl_rd_req = CAN_FIRE_RL_rl_rd_req ;

  // rule RL_rl_wr_req
  assign CAN_FIRE_RL_rl_wr_req =
	     !axi4_xactor_clearing &&
	     axi4_xactor_shim_awff_rv$port1__read[109] &&
	     axi4_xactor_shim_wff_rv$port1__read[577] &&
	     !axi4_xactor_shim_bff_rv[18] ;
  assign WILL_FIRE_RL_rl_wr_req = CAN_FIRE_RL_rl_wr_req ;

  // rule RL_axi4_xactor_ug_slave_u_b_setPeek
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_b_setPeek =
	     axi4_xactor_shim_bff_rv$port1__read[18] ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_b_setPeek =
	     axi4_xactor_shim_bff_rv$port1__read[18] ;

  // rule RL_axi4_xactor_ug_slave_u_b_warnDoDrop
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_b_warnDoDrop =
	     axi4_xactor_ug_slave_u_b_dropWire$whas &&
	     !axi4_xactor_shim_bff_rv$port1__read[18] ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_b_warnDoDrop =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_b_warnDoDrop ;

  // rule RL_axi4_xactor_ug_slave_u_b_doDrop
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_b_doDrop =
	     axi4_xactor_shim_bff_rv$port1__read[18] &&
	     axi4_xactor_ug_slave_u_b_dropWire$whas ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_b_doDrop =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_b_doDrop ;

  // rule RL_axi4_xactor_ug_slave_u_r_setPeek
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_r_setPeek =
	     axi4_xactor_shim_rff_rv$port1__read[531] ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_r_setPeek =
	     axi4_xactor_shim_rff_rv$port1__read[531] ;

  // rule RL_axi4_xactor_ug_slave_u_r_warnDoDrop
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_r_warnDoDrop =
	     axi4_xactor_ug_slave_u_r_dropWire$whas &&
	     !axi4_xactor_shim_rff_rv$port1__read[531] ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_r_warnDoDrop =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_r_warnDoDrop ;

  // rule RL_axi4_xactor_ug_slave_u_r_doDrop
  assign CAN_FIRE_RL_axi4_xactor_ug_slave_u_r_doDrop =
	     axi4_xactor_shim_rff_rv$port1__read[531] &&
	     axi4_xactor_ug_slave_u_r_dropWire$whas ;
  assign WILL_FIRE_RL_axi4_xactor_ug_slave_u_r_doDrop =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_r_doDrop ;

  // rule RL_axi4_xactor_do_clear
  assign CAN_FIRE_RL_axi4_xactor_do_clear = axi4_xactor_clearing ;
  assign WILL_FIRE_RL_axi4_xactor_do_clear = axi4_xactor_clearing ;

  // inlined wires
  assign axi4_xactor_ug_slave_u_aw_putWire$wget =
	     { awid,
	       awaddr,
	       awlen,
	       awsize,
	       awburst,
	       awlock,
	       awcache,
	       awprot,
	       awqos,
	       awregion } ;
  assign axi4_xactor_ug_slave_u_aw_putWire$whas =
	     awvalid && !axi4_xactor_shim_awff_rv[109] ;
  assign axi4_xactor_ug_slave_u_w_putWire$wget = { wdata, wstrb, wlast } ;
  assign axi4_xactor_ug_slave_u_w_putWire$whas =
	     wvalid && !axi4_xactor_shim_wff_rv[577] ;
  assign axi4_xactor_ug_slave_u_ar_putWire$wget =
	     { arid,
	       araddr,
	       arlen,
	       arsize,
	       arburst,
	       arlock,
	       arcache,
	       arprot,
	       arqos,
	       arregion } ;
  assign axi4_xactor_ug_slave_u_ar_putWire$whas =
	     arvalid && !axi4_xactor_shim_arff_rv[109] ;
  assign axi4_xactor_ug_slave_u_b_dropWire$whas =
	     axi4_xactor_shim_bff_rv$port1__read[18] && bready ;
  assign axi4_xactor_ug_slave_u_r_dropWire$whas =
	     axi4_xactor_shim_rff_rv$port1__read[531] && rready ;
  assign axi4_xactor_shim_awff_rv$port0__write_1 =
	     { 1'd1, axi4_xactor_ug_slave_u_aw_putWire$wget } ;
  assign axi4_xactor_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_aw_doPut ?
	       axi4_xactor_shim_awff_rv$port0__write_1 :
	       axi4_xactor_shim_awff_rv ;
  assign axi4_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_rl_wr_req ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_xactor_shim_awff_rv$port1__read ;
  assign axi4_xactor_shim_awff_rv$port3__read =
	     axi4_xactor_clearing ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_xactor_shim_awff_rv$port2__read ;
  assign axi4_xactor_shim_wff_rv$port0__write_1 =
	     { 1'd1, axi4_xactor_ug_slave_u_w_putWire$wget } ;
  assign axi4_xactor_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_w_doPut ?
	       axi4_xactor_shim_wff_rv$port0__write_1 :
	       axi4_xactor_shim_wff_rv ;
  assign axi4_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_rl_wr_req ?
	       578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_xactor_shim_wff_rv$port1__read ;
  assign axi4_xactor_shim_wff_rv$port3__read =
	     axi4_xactor_clearing ?
	       578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_xactor_shim_wff_rv$port2__read ;
  assign axi4_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_xactor_shim_awff_rv$port1__read[108:93],
	       IF_NOT_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_ax_ETC___d373 } ;
  assign axi4_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_rl_wr_req ?
	       axi4_xactor_shim_bff_rv$port0__write_1 :
	       axi4_xactor_shim_bff_rv ;
  assign axi4_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_b_doDrop ?
	       19'd174762 :
	       axi4_xactor_shim_bff_rv$port1__read ;
  assign axi4_xactor_shim_bff_rv$port3__read =
	     axi4_xactor_clearing ?
	       19'd174762 :
	       axi4_xactor_shim_bff_rv$port2__read ;
  assign axi4_xactor_shim_arff_rv$port0__write_1 =
	     { 1'd1, axi4_xactor_ug_slave_u_ar_putWire$wget } ;
  assign axi4_xactor_shim_arff_rv$port1__read =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_ar_doPut ?
	       axi4_xactor_shim_arff_rv$port0__write_1 :
	       axi4_xactor_shim_arff_rv ;
  assign axi4_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_rl_rd_req ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_xactor_shim_arff_rv$port1__read ;
  assign axi4_xactor_shim_arff_rv$port3__read =
	     axi4_xactor_clearing ?
	       110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_xactor_shim_arff_rv$port2__read ;
  assign axi4_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       axi4_xactor_shim_arff_rv$port1__read[108:93],
	       x1_avValue_rdata__h3518,
	       IF_NOT_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_ax_ETC___d78,
	       1'd1 } ;
  assign axi4_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_rl_rd_req ?
	       axi4_xactor_shim_rff_rv$port0__write_1 :
	       axi4_xactor_shim_rff_rv ;
  assign axi4_xactor_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_axi4_xactor_ug_slave_u_r_doDrop ?
	       532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_xactor_shim_rff_rv$port1__read ;
  assign axi4_xactor_shim_rff_rv$port3__read =
	     axi4_xactor_clearing ?
	       532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       axi4_xactor_shim_rff_rv$port2__read ;

  // register axi4_xactor_clearing
  assign axi4_xactor_clearing$D_IN = 1'd0 ;
  assign axi4_xactor_clearing$EN = axi4_xactor_clearing ;

  // register axi4_xactor_shim_arff_rv
  assign axi4_xactor_shim_arff_rv$D_IN =
	     axi4_xactor_shim_arff_rv$port3__read ;
  assign axi4_xactor_shim_arff_rv$EN = 1'b1 ;

  // register axi4_xactor_shim_awff_rv
  assign axi4_xactor_shim_awff_rv$D_IN =
	     axi4_xactor_shim_awff_rv$port3__read ;
  assign axi4_xactor_shim_awff_rv$EN = 1'b1 ;

  // register axi4_xactor_shim_bff_rv
  assign axi4_xactor_shim_bff_rv$D_IN = axi4_xactor_shim_bff_rv$port3__read ;
  assign axi4_xactor_shim_bff_rv$EN = 1'b1 ;

  // register axi4_xactor_shim_rff_rv
  assign axi4_xactor_shim_rff_rv$D_IN = axi4_xactor_shim_rff_rv$port3__read ;
  assign axi4_xactor_shim_rff_rv$EN = 1'b1 ;

  // register axi4_xactor_shim_wff_rv
  assign axi4_xactor_shim_wff_rv$D_IN = axi4_xactor_shim_wff_rv$port3__read ;
  assign axi4_xactor_shim_wff_rv$EN = 1'b1 ;

  // submodule rf
  assign rf$ADDR_1 = { 6'd0, offset_b__h3952[63:6] } ;
  assign rf$ADDR_2 = { 6'd0, offset_b__h3297[63:6] } ;
  assign rf$ADDR_3 = 64'h0 ;
  assign rf$ADDR_4 = 64'h0 ;
  assign rf$ADDR_5 = 64'h0 ;
  assign rf$ADDR_IN = { 6'd0, offset_b__h3952[63:6] } ;
  assign rf$D_IN = x__h4150 | y__h4151 ;
  assign rf$WE =
	     WILL_FIRE_RL_rl_wr_req &&
	     _0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d92 &&
	     axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d94 &&
	     axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d103 ;

  // remaining internal signals
  assign IF_NOT_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_ax_ETC___d373 =
	     (!_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d92 ||
	      !axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d94) ?
	       2'd2 :
	       (axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d103 ?
		  2'd0 :
		  2'd2) ;
  assign IF_NOT_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_ax_ETC___d78 =
	     (!_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d54 ||
	      !axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d57) ?
	       2'd2 :
	       (axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d65 ?
		  2'd0 :
		  2'd2) ;
  assign _0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d54 =
	     addr_base__h3109 <= axi4_xactor_shim_arff_rv$port1__read[92:29] ;
  assign _0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d92 =
	     addr_base__h3109 <= axi4_xactor_shim_awff_rv$port1__read[92:29] ;
  assign addr_base__h3109 = { 28'b0, ddr4_num, 34'h0 } ;
  assign addr_impl_last__h3111 = addr_base__h3109 + 64'h00000000FFFFFFFF ;
  assign addr_last__h3110 = { 28'b0, ddr4_num, 34'h3FFFFFFFF } ;
  assign axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d57 =
	     axi4_xactor_shim_arff_rv$port1__read[92:29] <= addr_last__h3110 ;
  assign axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d65 =
	     offset_b__h3297 <= addr_impl_last__h3111 ;
  assign axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d103 =
	     offset_b__h3952 <= addr_impl_last__h3111 ;
  assign axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d94 =
	     axi4_xactor_shim_awff_rv$port1__read[92:29] <= addr_last__h3110 ;
  assign axi4_xactor_shim_bff_rvport1__read_BITS_17_TO_0__q1 =
	     axi4_xactor_shim_bff_rv$port1__read[17:0] ;
  assign axi4_xactor_shim_rff_rvport1__read_BITS_530_TO_0__q2 =
	     axi4_xactor_shim_rff_rv$port1__read[530:0] ;
  assign mask__h4139 =
	     { axi4_xactor_shim_wff_rv$port1__read[64] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[63] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[62] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[61] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[60] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[59] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[58] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[57] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[56] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[55] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[54] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[53] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[52] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[51] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[50] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[49] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[48] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[47] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[46] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[45] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[44] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[43] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[42] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[41] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[40] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[39] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[38] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[37] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[36] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[35] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[34] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[33] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[32] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[31] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[30] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[29] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[28] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[27] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[26] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[25] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[24] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[23] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[22] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[21] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[20] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[19] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[18] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[17] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[16] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[15] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[14] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[13] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[12] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[11] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[10] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[9] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[8] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[7] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[6] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[5] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[4] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[3] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[2] ? 8'hFF : 8'h0,
	       axi4_xactor_shim_wff_rv$port1__read[1] ? 8'hFF : 8'h0 } ;
  assign offset_b__h3297 =
	     axi4_xactor_shim_arff_rv$port1__read[92:29] - addr_base__h3109 ;
  assign offset_b__h3952 =
	     axi4_xactor_shim_awff_rv$port1__read[92:29] - addr_base__h3109 ;
  assign x1_avValue_rdata__h3518 =
	     (!_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d54 ||
	      !axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d57 ||
	      !axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d65) ?
	       y_avValue_rdata__h3530 :
	       rf$D_OUT_2 ;
  assign x__h4150 = rf$D_OUT_1 & y__h4152 ;
  assign y__h4151 =
	     axi4_xactor_shim_wff_rv$port1__read[576:65] & mask__h4139 ;
  assign y__h4152 =
	     { axi4_xactor_shim_wff_rv$port1__read[64] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[63] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[62] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[61] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[60] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[59] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[58] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[57] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[56] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[55] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[54] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[53] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[52] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[51] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[50] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[49] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[48] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[47] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[46] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[45] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[44] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[43] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[42] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[41] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[40] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[39] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[38] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[37] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[36] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[35] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[34] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[33] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[32] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[31] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[30] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[29] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[28] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[27] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[26] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[25] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[24] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[23] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[22] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[21] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[20] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[19] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[18] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[17] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[16] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[15] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[14] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[13] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[12] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[11] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[10] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[9] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[8] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[7] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[6] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[5] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[4] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[3] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[2] ? 8'd0 : 8'd255,
	       axi4_xactor_shim_wff_rv$port1__read[1] ? 8'd0 : 8'd255 } ;
  assign y_avValue_rdata__h3530 =
	     { 448'd0, axi4_xactor_shim_arff_rv$port1__read[92:29] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        axi4_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	axi4_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	axi4_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    110'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA;
	axi4_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 19'd174762;
	axi4_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    532'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	axi4_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    578'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (axi4_xactor_clearing$EN)
	  axi4_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      axi4_xactor_clearing$D_IN;
	if (axi4_xactor_shim_arff_rv$EN)
	  axi4_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_xactor_shim_arff_rv$D_IN;
	if (axi4_xactor_shim_awff_rv$EN)
	  axi4_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_xactor_shim_awff_rv$D_IN;
	if (axi4_xactor_shim_bff_rv$EN)
	  axi4_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_xactor_shim_bff_rv$D_IN;
	if (axi4_xactor_shim_rff_rv$EN)
	  axi4_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_xactor_shim_rff_rv$D_IN;
	if (axi4_xactor_shim_wff_rv$EN)
	  axi4_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      axi4_xactor_shim_wff_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    axi4_xactor_clearing = 1'h0;
    axi4_xactor_shim_arff_rv = 110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_xactor_shim_awff_rv = 110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_xactor_shim_bff_rv = 19'h2AAAA;
    axi4_xactor_shim_rff_rv =
	532'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    axi4_xactor_shim_wff_rv =
	578'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axi4_xactor_ug_slave_u_aw_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axi4_xactor_ug_slave_u_w_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axi4_xactor_ug_slave_u_ar_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rd_req &&
	  (!_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d54 ||
	   !axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d57))
	begin
	  v__h3352 = $stime;
	  #0;
	end
    v__h3346 = v__h3352 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rd_req &&
	  (!_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d54 ||
	   !axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d57))
	$display("%0d: Mem_Model [%0d]: rl_rd_req: @ %0h -> OUT OF BOUNDS",
		 v__h3346,
		 ddr4_num,
		 axi4_xactor_shim_arff_rv$port1__read[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rd_req &&
	  _0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d54 &&
	  axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d57 &&
	  !axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d65)
	begin
	  v__h3436 = $stime;
	  #0;
	end
    v__h3430 = v__h3436 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rd_req &&
	  _0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d54 &&
	  axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d57 &&
	  !axi4_xactor_shim_arff_rv_port1__read__5_BITS_9_ETC___d65)
	$display("%0d: Mem_Model [%0d]: rl_rd_req: @ %0h -> OUT OF IMPLEMENTED BOUNDS",
		 v__h3430,
		 ddr4_num,
		 axi4_xactor_shim_arff_rv$port1__read[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_wr_req &&
	  (!_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d92 ||
	   !axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d94))
	begin
	  v__h4005 = $stime;
	  #0;
	end
    v__h3999 = v__h4005 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_wr_req &&
	  (!_0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d92 ||
	   !axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d94))
	$display("%0d: Mem_Model [%0d]: rl_wr_req: @ %0h <= %0h strb %0h: OUT OF BOUNDS",
		 v__h3999,
		 ddr4_num,
		 axi4_xactor_shim_awff_rv$port1__read[92:29],
		 axi4_xactor_shim_wff_rv$port1__read[576:65],
		 axi4_xactor_shim_wff_rv$port1__read[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_wr_req &&
	  _0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d92 &&
	  axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d94 &&
	  !axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d103)
	begin
	  v__h4073 = $stime;
	  #0;
	end
    v__h4067 = v__h4073 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_wr_req &&
	  _0b0_CONCAT_ddr4_num_CONCAT_0x0_2_ULE_axi4_xact_ETC___d92 &&
	  axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d94 &&
	  !axi4_xactor_shim_awff_rv_port1__read__1_BITS_9_ETC___d103)
	$display("%0d: Mem_Model [%0d]: rl_wr_req: @ %0h <= %0h strb %0h: OUT OF IMPLEMENTED BOUNDS",
		 v__h4067,
		 ddr4_num,
		 axi4_xactor_shim_awff_rv$port1__read[92:29],
		 axi4_xactor_shim_wff_rv$port1__read[576:65],
		 axi4_xactor_shim_wff_rv$port1__read[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axi4_xactor_ug_slave_u_b_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_axi4_xactor_ug_slave_u_r_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkMem_Model

