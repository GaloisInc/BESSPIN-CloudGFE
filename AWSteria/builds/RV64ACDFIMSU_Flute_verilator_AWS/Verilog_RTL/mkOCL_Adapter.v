//
// Generated by Bluespec Compiler, version 2017.07.A (build e1df8052c, 2017-07-21)
//
//
//
//
// Ports:
// Name                         I/O  size props
// ocl_slave_awready              O     1 reg
// ocl_slave_wready               O     1 reg
// ocl_slave_bvalid               O     1 reg
// ocl_slave_bresp                O     2 reg
// ocl_slave_arready              O     1 reg
// ocl_slave_rvalid               O     1 reg
// ocl_slave_rresp                O     2 reg
// ocl_slave_rdata                O    32 reg
// v_from_host_0_first            O    32 reg
// RDY_v_from_host_0_first        O     1 reg
// RDY_v_from_host_0_deq          O     1 reg
// v_from_host_0_notEmpty         O     1 reg
// RDY_v_from_host_0_notEmpty     O     1 const
// v_from_host_1_first            O    32 reg
// RDY_v_from_host_1_first        O     1 reg
// RDY_v_from_host_1_deq          O     1 reg
// v_from_host_1_notEmpty         O     1 reg
// RDY_v_from_host_1_notEmpty     O     1 const
// v_from_host_2_first            O    32 reg
// RDY_v_from_host_2_first        O     1 reg
// RDY_v_from_host_2_deq          O     1 reg
// v_from_host_2_notEmpty         O     1 reg
// RDY_v_from_host_2_notEmpty     O     1 const
// v_from_host_3_first            O    32 reg
// RDY_v_from_host_3_first        O     1 reg
// RDY_v_from_host_3_deq          O     1 reg
// v_from_host_3_notEmpty         O     1 reg
// RDY_v_from_host_3_notEmpty     O     1 const
// v_from_host_4_first            O    32 reg
// RDY_v_from_host_4_first        O     1 reg
// RDY_v_from_host_4_deq          O     1 reg
// v_from_host_4_notEmpty         O     1 reg
// RDY_v_from_host_4_notEmpty     O     1 const
// RDY_v_to_host_0_enq            O     1 reg
// v_to_host_0_notFull            O     1 reg
// RDY_v_to_host_0_notFull        O     1 const
// RDY_v_to_host_1_enq            O     1 reg
// v_to_host_1_notFull            O     1 reg
// RDY_v_to_host_1_notFull        O     1 const
// RDY_v_to_host_2_enq            O     1 reg
// v_to_host_2_notFull            O     1 reg
// RDY_v_to_host_2_notFull        O     1 const
// RDY_v_to_host_3_enq            O     1 reg
// v_to_host_3_notFull            O     1 reg
// RDY_v_to_host_3_notFull        O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ocl_slave_awvalid              I     1
// ocl_slave_awaddr               I    32 reg
// ocl_slave_awprot               I     3 reg
// ocl_slave_wvalid               I     1
// ocl_slave_wdata                I    32 reg
// ocl_slave_wstrb                I     4 reg
// ocl_slave_bready               I     1
// ocl_slave_arvalid              I     1
// ocl_slave_araddr               I    32 reg
// ocl_slave_arprot               I     3 reg
// ocl_slave_rready               I     1
// v_to_host_0_enq_x              I    32 reg
// v_to_host_1_enq_x              I    32 reg
// v_to_host_2_enq_x              I    32 reg
// v_to_host_3_enq_x              I    32 reg
// EN_v_from_host_0_deq           I     1
// EN_v_from_host_1_deq           I     1
// EN_v_from_host_2_deq           I     1
// EN_v_from_host_3_deq           I     1
// EN_v_from_host_4_deq           I     1
// EN_v_to_host_0_enq             I     1
// EN_v_to_host_1_enq             I     1
// EN_v_to_host_2_enq             I     1
// EN_v_to_host_3_enq             I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkOCL_Adapter(CLK,
		     RST_N,

		     ocl_slave_awvalid,
		     ocl_slave_awaddr,
		     ocl_slave_awprot,

		     ocl_slave_awready,

		     ocl_slave_wvalid,
		     ocl_slave_wdata,
		     ocl_slave_wstrb,

		     ocl_slave_wready,

		     ocl_slave_bvalid,

		     ocl_slave_bresp,

		     ocl_slave_bready,

		     ocl_slave_arvalid,
		     ocl_slave_araddr,
		     ocl_slave_arprot,

		     ocl_slave_arready,

		     ocl_slave_rvalid,

		     ocl_slave_rresp,

		     ocl_slave_rdata,

		     ocl_slave_rready,

		     v_from_host_0_first,
		     RDY_v_from_host_0_first,

		     EN_v_from_host_0_deq,
		     RDY_v_from_host_0_deq,

		     v_from_host_0_notEmpty,
		     RDY_v_from_host_0_notEmpty,

		     v_from_host_1_first,
		     RDY_v_from_host_1_first,

		     EN_v_from_host_1_deq,
		     RDY_v_from_host_1_deq,

		     v_from_host_1_notEmpty,
		     RDY_v_from_host_1_notEmpty,

		     v_from_host_2_first,
		     RDY_v_from_host_2_first,

		     EN_v_from_host_2_deq,
		     RDY_v_from_host_2_deq,

		     v_from_host_2_notEmpty,
		     RDY_v_from_host_2_notEmpty,

		     v_from_host_3_first,
		     RDY_v_from_host_3_first,

		     EN_v_from_host_3_deq,
		     RDY_v_from_host_3_deq,

		     v_from_host_3_notEmpty,
		     RDY_v_from_host_3_notEmpty,

		     v_from_host_4_first,
		     RDY_v_from_host_4_first,

		     EN_v_from_host_4_deq,
		     RDY_v_from_host_4_deq,

		     v_from_host_4_notEmpty,
		     RDY_v_from_host_4_notEmpty,

		     v_to_host_0_enq_x,
		     EN_v_to_host_0_enq,
		     RDY_v_to_host_0_enq,

		     v_to_host_0_notFull,
		     RDY_v_to_host_0_notFull,

		     v_to_host_1_enq_x,
		     EN_v_to_host_1_enq,
		     RDY_v_to_host_1_enq,

		     v_to_host_1_notFull,
		     RDY_v_to_host_1_notFull,

		     v_to_host_2_enq_x,
		     EN_v_to_host_2_enq,
		     RDY_v_to_host_2_enq,

		     v_to_host_2_notFull,
		     RDY_v_to_host_2_notFull,

		     v_to_host_3_enq_x,
		     EN_v_to_host_3_enq,
		     RDY_v_to_host_3_enq,

		     v_to_host_3_notFull,
		     RDY_v_to_host_3_notFull);
  input  CLK;
  input  RST_N;

  // action method ocl_slave_m_awvalid
  input  ocl_slave_awvalid;
  input  [31 : 0] ocl_slave_awaddr;
  input  [2 : 0] ocl_slave_awprot;

  // value method ocl_slave_m_awready
  output ocl_slave_awready;

  // action method ocl_slave_m_wvalid
  input  ocl_slave_wvalid;
  input  [31 : 0] ocl_slave_wdata;
  input  [3 : 0] ocl_slave_wstrb;

  // value method ocl_slave_m_wready
  output ocl_slave_wready;

  // value method ocl_slave_m_bvalid
  output ocl_slave_bvalid;

  // value method ocl_slave_m_bresp
  output [1 : 0] ocl_slave_bresp;

  // value method ocl_slave_m_buser

  // action method ocl_slave_m_bready
  input  ocl_slave_bready;

  // action method ocl_slave_m_arvalid
  input  ocl_slave_arvalid;
  input  [31 : 0] ocl_slave_araddr;
  input  [2 : 0] ocl_slave_arprot;

  // value method ocl_slave_m_arready
  output ocl_slave_arready;

  // value method ocl_slave_m_rvalid
  output ocl_slave_rvalid;

  // value method ocl_slave_m_rresp
  output [1 : 0] ocl_slave_rresp;

  // value method ocl_slave_m_rdata
  output [31 : 0] ocl_slave_rdata;

  // value method ocl_slave_m_ruser

  // action method ocl_slave_m_rready
  input  ocl_slave_rready;

  // value method v_from_host_0_first
  output [31 : 0] v_from_host_0_first;
  output RDY_v_from_host_0_first;

  // action method v_from_host_0_deq
  input  EN_v_from_host_0_deq;
  output RDY_v_from_host_0_deq;

  // value method v_from_host_0_notEmpty
  output v_from_host_0_notEmpty;
  output RDY_v_from_host_0_notEmpty;

  // value method v_from_host_1_first
  output [31 : 0] v_from_host_1_first;
  output RDY_v_from_host_1_first;

  // action method v_from_host_1_deq
  input  EN_v_from_host_1_deq;
  output RDY_v_from_host_1_deq;

  // value method v_from_host_1_notEmpty
  output v_from_host_1_notEmpty;
  output RDY_v_from_host_1_notEmpty;

  // value method v_from_host_2_first
  output [31 : 0] v_from_host_2_first;
  output RDY_v_from_host_2_first;

  // action method v_from_host_2_deq
  input  EN_v_from_host_2_deq;
  output RDY_v_from_host_2_deq;

  // value method v_from_host_2_notEmpty
  output v_from_host_2_notEmpty;
  output RDY_v_from_host_2_notEmpty;

  // value method v_from_host_3_first
  output [31 : 0] v_from_host_3_first;
  output RDY_v_from_host_3_first;

  // action method v_from_host_3_deq
  input  EN_v_from_host_3_deq;
  output RDY_v_from_host_3_deq;

  // value method v_from_host_3_notEmpty
  output v_from_host_3_notEmpty;
  output RDY_v_from_host_3_notEmpty;

  // value method v_from_host_4_first
  output [31 : 0] v_from_host_4_first;
  output RDY_v_from_host_4_first;

  // action method v_from_host_4_deq
  input  EN_v_from_host_4_deq;
  output RDY_v_from_host_4_deq;

  // value method v_from_host_4_notEmpty
  output v_from_host_4_notEmpty;
  output RDY_v_from_host_4_notEmpty;

  // action method v_to_host_0_enq
  input  [31 : 0] v_to_host_0_enq_x;
  input  EN_v_to_host_0_enq;
  output RDY_v_to_host_0_enq;

  // value method v_to_host_0_notFull
  output v_to_host_0_notFull;
  output RDY_v_to_host_0_notFull;

  // action method v_to_host_1_enq
  input  [31 : 0] v_to_host_1_enq_x;
  input  EN_v_to_host_1_enq;
  output RDY_v_to_host_1_enq;

  // value method v_to_host_1_notFull
  output v_to_host_1_notFull;
  output RDY_v_to_host_1_notFull;

  // action method v_to_host_2_enq
  input  [31 : 0] v_to_host_2_enq_x;
  input  EN_v_to_host_2_enq;
  output RDY_v_to_host_2_enq;

  // value method v_to_host_2_notFull
  output v_to_host_2_notFull;
  output RDY_v_to_host_2_notFull;

  // action method v_to_host_3_enq
  input  [31 : 0] v_to_host_3_enq_x;
  input  EN_v_to_host_3_enq;
  output RDY_v_to_host_3_enq;

  // value method v_to_host_3_notFull
  output v_to_host_3_notFull;
  output RDY_v_to_host_3_notFull;

  // signals for module outputs
  wire [31 : 0] ocl_slave_rdata,
		v_from_host_0_first,
		v_from_host_1_first,
		v_from_host_2_first,
		v_from_host_3_first,
		v_from_host_4_first;
  wire [1 : 0] ocl_slave_bresp, ocl_slave_rresp;
  wire RDY_v_from_host_0_deq,
       RDY_v_from_host_0_first,
       RDY_v_from_host_0_notEmpty,
       RDY_v_from_host_1_deq,
       RDY_v_from_host_1_first,
       RDY_v_from_host_1_notEmpty,
       RDY_v_from_host_2_deq,
       RDY_v_from_host_2_first,
       RDY_v_from_host_2_notEmpty,
       RDY_v_from_host_3_deq,
       RDY_v_from_host_3_first,
       RDY_v_from_host_3_notEmpty,
       RDY_v_from_host_4_deq,
       RDY_v_from_host_4_first,
       RDY_v_from_host_4_notEmpty,
       RDY_v_to_host_0_enq,
       RDY_v_to_host_0_notFull,
       RDY_v_to_host_1_enq,
       RDY_v_to_host_1_notFull,
       RDY_v_to_host_2_enq,
       RDY_v_to_host_2_notFull,
       RDY_v_to_host_3_enq,
       RDY_v_to_host_3_notFull,
       ocl_slave_arready,
       ocl_slave_awready,
       ocl_slave_bvalid,
       ocl_slave_rvalid,
       ocl_slave_wready,
       v_from_host_0_notEmpty,
       v_from_host_1_notEmpty,
       v_from_host_2_notEmpty,
       v_from_host_3_notEmpty,
       v_from_host_4_notEmpty,
       v_to_host_0_notFull,
       v_to_host_1_notFull,
       v_to_host_2_notFull,
       v_to_host_3_notFull;

  // ports of submodule ocl_xactor_f_rd_addr
  wire [34 : 0] ocl_xactor_f_rd_addr$D_IN, ocl_xactor_f_rd_addr$D_OUT;
  wire ocl_xactor_f_rd_addr$CLR,
       ocl_xactor_f_rd_addr$DEQ,
       ocl_xactor_f_rd_addr$EMPTY_N,
       ocl_xactor_f_rd_addr$ENQ,
       ocl_xactor_f_rd_addr$FULL_N;

  // ports of submodule ocl_xactor_f_rd_data
  wire [33 : 0] ocl_xactor_f_rd_data$D_IN, ocl_xactor_f_rd_data$D_OUT;
  wire ocl_xactor_f_rd_data$CLR,
       ocl_xactor_f_rd_data$DEQ,
       ocl_xactor_f_rd_data$EMPTY_N,
       ocl_xactor_f_rd_data$ENQ,
       ocl_xactor_f_rd_data$FULL_N;

  // ports of submodule ocl_xactor_f_wr_addr
  wire [34 : 0] ocl_xactor_f_wr_addr$D_IN, ocl_xactor_f_wr_addr$D_OUT;
  wire ocl_xactor_f_wr_addr$CLR,
       ocl_xactor_f_wr_addr$DEQ,
       ocl_xactor_f_wr_addr$EMPTY_N,
       ocl_xactor_f_wr_addr$ENQ,
       ocl_xactor_f_wr_addr$FULL_N;

  // ports of submodule ocl_xactor_f_wr_data
  wire [35 : 0] ocl_xactor_f_wr_data$D_IN, ocl_xactor_f_wr_data$D_OUT;
  wire ocl_xactor_f_wr_data$CLR,
       ocl_xactor_f_wr_data$DEQ,
       ocl_xactor_f_wr_data$EMPTY_N,
       ocl_xactor_f_wr_data$ENQ,
       ocl_xactor_f_wr_data$FULL_N;

  // ports of submodule ocl_xactor_f_wr_resp
  wire [1 : 0] ocl_xactor_f_wr_resp$D_IN, ocl_xactor_f_wr_resp$D_OUT;
  wire ocl_xactor_f_wr_resp$CLR,
       ocl_xactor_f_wr_resp$DEQ,
       ocl_xactor_f_wr_resp$EMPTY_N,
       ocl_xactor_f_wr_resp$ENQ,
       ocl_xactor_f_wr_resp$FULL_N;

  // ports of submodule v_f_from_host_0
  wire [31 : 0] v_f_from_host_0$D_IN, v_f_from_host_0$D_OUT;
  wire v_f_from_host_0$CLR,
       v_f_from_host_0$DEQ,
       v_f_from_host_0$EMPTY_N,
       v_f_from_host_0$ENQ,
       v_f_from_host_0$FULL_N;

  // ports of submodule v_f_from_host_1
  wire [31 : 0] v_f_from_host_1$D_IN, v_f_from_host_1$D_OUT;
  wire v_f_from_host_1$CLR,
       v_f_from_host_1$DEQ,
       v_f_from_host_1$EMPTY_N,
       v_f_from_host_1$ENQ,
       v_f_from_host_1$FULL_N;

  // ports of submodule v_f_from_host_2
  wire [31 : 0] v_f_from_host_2$D_IN, v_f_from_host_2$D_OUT;
  wire v_f_from_host_2$CLR,
       v_f_from_host_2$DEQ,
       v_f_from_host_2$EMPTY_N,
       v_f_from_host_2$ENQ,
       v_f_from_host_2$FULL_N;

  // ports of submodule v_f_from_host_3
  wire [31 : 0] v_f_from_host_3$D_IN, v_f_from_host_3$D_OUT;
  wire v_f_from_host_3$CLR,
       v_f_from_host_3$DEQ,
       v_f_from_host_3$EMPTY_N,
       v_f_from_host_3$ENQ,
       v_f_from_host_3$FULL_N;

  // ports of submodule v_f_from_host_4
  wire [31 : 0] v_f_from_host_4$D_IN, v_f_from_host_4$D_OUT;
  wire v_f_from_host_4$CLR,
       v_f_from_host_4$DEQ,
       v_f_from_host_4$EMPTY_N,
       v_f_from_host_4$ENQ,
       v_f_from_host_4$FULL_N;

  // ports of submodule v_f_to_host_0
  wire [31 : 0] v_f_to_host_0$D_IN, v_f_to_host_0$D_OUT;
  wire v_f_to_host_0$CLR,
       v_f_to_host_0$DEQ,
       v_f_to_host_0$EMPTY_N,
       v_f_to_host_0$ENQ,
       v_f_to_host_0$FULL_N;

  // ports of submodule v_f_to_host_1
  wire [31 : 0] v_f_to_host_1$D_IN, v_f_to_host_1$D_OUT;
  wire v_f_to_host_1$CLR,
       v_f_to_host_1$DEQ,
       v_f_to_host_1$EMPTY_N,
       v_f_to_host_1$ENQ,
       v_f_to_host_1$FULL_N;

  // ports of submodule v_f_to_host_2
  wire [31 : 0] v_f_to_host_2$D_IN, v_f_to_host_2$D_OUT;
  wire v_f_to_host_2$CLR,
       v_f_to_host_2$DEQ,
       v_f_to_host_2$EMPTY_N,
       v_f_to_host_2$ENQ,
       v_f_to_host_2$FULL_N;

  // ports of submodule v_f_to_host_3
  wire [31 : 0] v_f_to_host_3$D_IN, v_f_to_host_3$D_OUT;
  wire v_f_to_host_3$CLR,
       v_f_to_host_3$DEQ,
       v_f_to_host_3$EMPTY_N,
       v_f_to_host_3$ENQ,
       v_f_to_host_3$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_AXI4L_rd,
       CAN_FIRE_RL_rl_AXI4L_wr,
       CAN_FIRE_ocl_slave_m_arvalid,
       CAN_FIRE_ocl_slave_m_awvalid,
       CAN_FIRE_ocl_slave_m_bready,
       CAN_FIRE_ocl_slave_m_rready,
       CAN_FIRE_ocl_slave_m_wvalid,
       CAN_FIRE_v_from_host_0_deq,
       CAN_FIRE_v_from_host_1_deq,
       CAN_FIRE_v_from_host_2_deq,
       CAN_FIRE_v_from_host_3_deq,
       CAN_FIRE_v_from_host_4_deq,
       CAN_FIRE_v_to_host_0_enq,
       CAN_FIRE_v_to_host_1_enq,
       CAN_FIRE_v_to_host_2_enq,
       CAN_FIRE_v_to_host_3_enq,
       WILL_FIRE_RL_rl_AXI4L_rd,
       WILL_FIRE_RL_rl_AXI4L_wr,
       WILL_FIRE_ocl_slave_m_arvalid,
       WILL_FIRE_ocl_slave_m_awvalid,
       WILL_FIRE_ocl_slave_m_bready,
       WILL_FIRE_ocl_slave_m_rready,
       WILL_FIRE_ocl_slave_m_wvalid,
       WILL_FIRE_v_from_host_0_deq,
       WILL_FIRE_v_from_host_1_deq,
       WILL_FIRE_v_from_host_2_deq,
       WILL_FIRE_v_from_host_3_deq,
       WILL_FIRE_v_from_host_4_deq,
       WILL_FIRE_v_to_host_0_enq,
       WILL_FIRE_v_to_host_1_enq,
       WILL_FIRE_v_to_host_2_enq,
       WILL_FIRE_v_to_host_3_enq;

  // remaining internal signals
  reg [31 : 0] rdr___1_rdata__h2910;
  reg CASE_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BI_ETC___d78,
      CASE_0_CONCAT_ocl_xactor_f_wr_addr_first_BITS__ETC___d26,
      SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19,
      SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72,
      x__h3069;
  wire [33 : 0] IF_ocl_xactor_f_rd_addr_first__2_BITS_5_TO_3_5_ETC___d118;
  wire [31 : 0] ocl_xactor_f_rd_addrD_OUT_BITS_34_TO_3_MINUS__ETC__q2,
		ocl_xactor_f_wr_addrD_OUT_BITS_34_TO_3_MINUS__ETC__q1,
		rdr___1_rdata__h2631,
		x1_avValue_rdata__h2955,
		x1_avValue_rdata__h2966,
		x__h1777,
		x__h2400,
		x__h2548;
  wire _0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d59,
       _0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d63,
       _0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10,
       ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d102,
       ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d54,
       ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d92,
       ocl_xactor_f_rd_data_i_notFull__1_AND_NOT_ocl__ETC___d83,
       ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6,
       ocl_xactor_f_wr_resp_i_notFull_AND_ocl_xactor__ETC___d29;

  // action method ocl_slave_m_awvalid
  assign CAN_FIRE_ocl_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_ocl_slave_m_awvalid = 1'd1 ;

  // value method ocl_slave_m_awready
  assign ocl_slave_awready = ocl_xactor_f_wr_addr$FULL_N ;

  // action method ocl_slave_m_wvalid
  assign CAN_FIRE_ocl_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_ocl_slave_m_wvalid = 1'd1 ;

  // value method ocl_slave_m_wready
  assign ocl_slave_wready = ocl_xactor_f_wr_data$FULL_N ;

  // value method ocl_slave_m_bvalid
  assign ocl_slave_bvalid = ocl_xactor_f_wr_resp$EMPTY_N ;

  // value method ocl_slave_m_bresp
  assign ocl_slave_bresp = ocl_xactor_f_wr_resp$D_OUT ;

  // action method ocl_slave_m_bready
  assign CAN_FIRE_ocl_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_ocl_slave_m_bready = 1'd1 ;

  // action method ocl_slave_m_arvalid
  assign CAN_FIRE_ocl_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_ocl_slave_m_arvalid = 1'd1 ;

  // value method ocl_slave_m_arready
  assign ocl_slave_arready = ocl_xactor_f_rd_addr$FULL_N ;

  // value method ocl_slave_m_rvalid
  assign ocl_slave_rvalid = ocl_xactor_f_rd_data$EMPTY_N ;

  // value method ocl_slave_m_rresp
  assign ocl_slave_rresp = ocl_xactor_f_rd_data$D_OUT[33:32] ;

  // value method ocl_slave_m_rdata
  assign ocl_slave_rdata = ocl_xactor_f_rd_data$D_OUT[31:0] ;

  // action method ocl_slave_m_rready
  assign CAN_FIRE_ocl_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_ocl_slave_m_rready = 1'd1 ;

  // value method v_from_host_0_first
  assign v_from_host_0_first = v_f_from_host_0$D_OUT ;
  assign RDY_v_from_host_0_first = v_f_from_host_0$EMPTY_N ;

  // action method v_from_host_0_deq
  assign RDY_v_from_host_0_deq = v_f_from_host_0$EMPTY_N ;
  assign CAN_FIRE_v_from_host_0_deq = v_f_from_host_0$EMPTY_N ;
  assign WILL_FIRE_v_from_host_0_deq = EN_v_from_host_0_deq ;

  // value method v_from_host_0_notEmpty
  assign v_from_host_0_notEmpty = v_f_from_host_0$EMPTY_N ;
  assign RDY_v_from_host_0_notEmpty = 1'd1 ;

  // value method v_from_host_1_first
  assign v_from_host_1_first = v_f_from_host_1$D_OUT ;
  assign RDY_v_from_host_1_first = v_f_from_host_1$EMPTY_N ;

  // action method v_from_host_1_deq
  assign RDY_v_from_host_1_deq = v_f_from_host_1$EMPTY_N ;
  assign CAN_FIRE_v_from_host_1_deq = v_f_from_host_1$EMPTY_N ;
  assign WILL_FIRE_v_from_host_1_deq = EN_v_from_host_1_deq ;

  // value method v_from_host_1_notEmpty
  assign v_from_host_1_notEmpty = v_f_from_host_1$EMPTY_N ;
  assign RDY_v_from_host_1_notEmpty = 1'd1 ;

  // value method v_from_host_2_first
  assign v_from_host_2_first = v_f_from_host_2$D_OUT ;
  assign RDY_v_from_host_2_first = v_f_from_host_2$EMPTY_N ;

  // action method v_from_host_2_deq
  assign RDY_v_from_host_2_deq = v_f_from_host_2$EMPTY_N ;
  assign CAN_FIRE_v_from_host_2_deq = v_f_from_host_2$EMPTY_N ;
  assign WILL_FIRE_v_from_host_2_deq = EN_v_from_host_2_deq ;

  // value method v_from_host_2_notEmpty
  assign v_from_host_2_notEmpty = v_f_from_host_2$EMPTY_N ;
  assign RDY_v_from_host_2_notEmpty = 1'd1 ;

  // value method v_from_host_3_first
  assign v_from_host_3_first = v_f_from_host_3$D_OUT ;
  assign RDY_v_from_host_3_first = v_f_from_host_3$EMPTY_N ;

  // action method v_from_host_3_deq
  assign RDY_v_from_host_3_deq = v_f_from_host_3$EMPTY_N ;
  assign CAN_FIRE_v_from_host_3_deq = v_f_from_host_3$EMPTY_N ;
  assign WILL_FIRE_v_from_host_3_deq = EN_v_from_host_3_deq ;

  // value method v_from_host_3_notEmpty
  assign v_from_host_3_notEmpty = v_f_from_host_3$EMPTY_N ;
  assign RDY_v_from_host_3_notEmpty = 1'd1 ;

  // value method v_from_host_4_first
  assign v_from_host_4_first = v_f_from_host_4$D_OUT ;
  assign RDY_v_from_host_4_first = v_f_from_host_4$EMPTY_N ;

  // action method v_from_host_4_deq
  assign RDY_v_from_host_4_deq = v_f_from_host_4$EMPTY_N ;
  assign CAN_FIRE_v_from_host_4_deq = v_f_from_host_4$EMPTY_N ;
  assign WILL_FIRE_v_from_host_4_deq = EN_v_from_host_4_deq ;

  // value method v_from_host_4_notEmpty
  assign v_from_host_4_notEmpty = v_f_from_host_4$EMPTY_N ;
  assign RDY_v_from_host_4_notEmpty = 1'd1 ;

  // action method v_to_host_0_enq
  assign RDY_v_to_host_0_enq = v_f_to_host_0$FULL_N ;
  assign CAN_FIRE_v_to_host_0_enq = v_f_to_host_0$FULL_N ;
  assign WILL_FIRE_v_to_host_0_enq = EN_v_to_host_0_enq ;

  // value method v_to_host_0_notFull
  assign v_to_host_0_notFull = v_f_to_host_0$FULL_N ;
  assign RDY_v_to_host_0_notFull = 1'd1 ;

  // action method v_to_host_1_enq
  assign RDY_v_to_host_1_enq = v_f_to_host_1$FULL_N ;
  assign CAN_FIRE_v_to_host_1_enq = v_f_to_host_1$FULL_N ;
  assign WILL_FIRE_v_to_host_1_enq = EN_v_to_host_1_enq ;

  // value method v_to_host_1_notFull
  assign v_to_host_1_notFull = v_f_to_host_1$FULL_N ;
  assign RDY_v_to_host_1_notFull = 1'd1 ;

  // action method v_to_host_2_enq
  assign RDY_v_to_host_2_enq = v_f_to_host_2$FULL_N ;
  assign CAN_FIRE_v_to_host_2_enq = v_f_to_host_2$FULL_N ;
  assign WILL_FIRE_v_to_host_2_enq = EN_v_to_host_2_enq ;

  // value method v_to_host_2_notFull
  assign v_to_host_2_notFull = v_f_to_host_2$FULL_N ;
  assign RDY_v_to_host_2_notFull = 1'd1 ;

  // action method v_to_host_3_enq
  assign RDY_v_to_host_3_enq = v_f_to_host_3$FULL_N ;
  assign CAN_FIRE_v_to_host_3_enq = v_f_to_host_3$FULL_N ;
  assign WILL_FIRE_v_to_host_3_enq = EN_v_to_host_3_enq ;

  // value method v_to_host_3_notFull
  assign v_to_host_3_notFull = v_f_to_host_3$FULL_N ;
  assign RDY_v_to_host_3_notFull = 1'd1 ;

  // submodule ocl_xactor_f_rd_addr
  FIFO2 #(.width(32'd35), .guarded(32'd1)) ocl_xactor_f_rd_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_rd_addr$D_IN),
								.ENQ(ocl_xactor_f_rd_addr$ENQ),
								.DEQ(ocl_xactor_f_rd_addr$DEQ),
								.CLR(ocl_xactor_f_rd_addr$CLR),
								.D_OUT(ocl_xactor_f_rd_addr$D_OUT),
								.FULL_N(ocl_xactor_f_rd_addr$FULL_N),
								.EMPTY_N(ocl_xactor_f_rd_addr$EMPTY_N));

  // submodule ocl_xactor_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(32'd1)) ocl_xactor_f_rd_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_rd_data$D_IN),
								.ENQ(ocl_xactor_f_rd_data$ENQ),
								.DEQ(ocl_xactor_f_rd_data$DEQ),
								.CLR(ocl_xactor_f_rd_data$CLR),
								.D_OUT(ocl_xactor_f_rd_data$D_OUT),
								.FULL_N(ocl_xactor_f_rd_data$FULL_N),
								.EMPTY_N(ocl_xactor_f_rd_data$EMPTY_N));

  // submodule ocl_xactor_f_wr_addr
  FIFO2 #(.width(32'd35), .guarded(32'd1)) ocl_xactor_f_wr_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_wr_addr$D_IN),
								.ENQ(ocl_xactor_f_wr_addr$ENQ),
								.DEQ(ocl_xactor_f_wr_addr$DEQ),
								.CLR(ocl_xactor_f_wr_addr$CLR),
								.D_OUT(ocl_xactor_f_wr_addr$D_OUT),
								.FULL_N(ocl_xactor_f_wr_addr$FULL_N),
								.EMPTY_N(ocl_xactor_f_wr_addr$EMPTY_N));

  // submodule ocl_xactor_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(32'd1)) ocl_xactor_f_wr_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ocl_xactor_f_wr_data$D_IN),
								.ENQ(ocl_xactor_f_wr_data$ENQ),
								.DEQ(ocl_xactor_f_wr_data$DEQ),
								.CLR(ocl_xactor_f_wr_data$CLR),
								.D_OUT(ocl_xactor_f_wr_data$D_OUT),
								.FULL_N(ocl_xactor_f_wr_data$FULL_N),
								.EMPTY_N(ocl_xactor_f_wr_data$EMPTY_N));

  // submodule ocl_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ocl_xactor_f_wr_resp(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(ocl_xactor_f_wr_resp$D_IN),
							       .ENQ(ocl_xactor_f_wr_resp$ENQ),
							       .DEQ(ocl_xactor_f_wr_resp$DEQ),
							       .CLR(ocl_xactor_f_wr_resp$CLR),
							       .D_OUT(ocl_xactor_f_wr_resp$D_OUT),
							       .FULL_N(ocl_xactor_f_wr_resp$FULL_N),
							       .EMPTY_N(ocl_xactor_f_wr_resp$EMPTY_N));

  // submodule v_f_from_host_0
  FIFO2 #(.width(32'd32), .guarded(32'd1)) v_f_from_host_0(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(v_f_from_host_0$D_IN),
							   .ENQ(v_f_from_host_0$ENQ),
							   .DEQ(v_f_from_host_0$DEQ),
							   .CLR(v_f_from_host_0$CLR),
							   .D_OUT(v_f_from_host_0$D_OUT),
							   .FULL_N(v_f_from_host_0$FULL_N),
							   .EMPTY_N(v_f_from_host_0$EMPTY_N));

  // submodule v_f_from_host_1
  FIFO2 #(.width(32'd32), .guarded(32'd1)) v_f_from_host_1(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(v_f_from_host_1$D_IN),
							   .ENQ(v_f_from_host_1$ENQ),
							   .DEQ(v_f_from_host_1$DEQ),
							   .CLR(v_f_from_host_1$CLR),
							   .D_OUT(v_f_from_host_1$D_OUT),
							   .FULL_N(v_f_from_host_1$FULL_N),
							   .EMPTY_N(v_f_from_host_1$EMPTY_N));

  // submodule v_f_from_host_2
  FIFO2 #(.width(32'd32), .guarded(32'd1)) v_f_from_host_2(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(v_f_from_host_2$D_IN),
							   .ENQ(v_f_from_host_2$ENQ),
							   .DEQ(v_f_from_host_2$DEQ),
							   .CLR(v_f_from_host_2$CLR),
							   .D_OUT(v_f_from_host_2$D_OUT),
							   .FULL_N(v_f_from_host_2$FULL_N),
							   .EMPTY_N(v_f_from_host_2$EMPTY_N));

  // submodule v_f_from_host_3
  FIFO2 #(.width(32'd32), .guarded(32'd1)) v_f_from_host_3(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(v_f_from_host_3$D_IN),
							   .ENQ(v_f_from_host_3$ENQ),
							   .DEQ(v_f_from_host_3$DEQ),
							   .CLR(v_f_from_host_3$CLR),
							   .D_OUT(v_f_from_host_3$D_OUT),
							   .FULL_N(v_f_from_host_3$FULL_N),
							   .EMPTY_N(v_f_from_host_3$EMPTY_N));

  // submodule v_f_from_host_4
  FIFO2 #(.width(32'd32), .guarded(32'd1)) v_f_from_host_4(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(v_f_from_host_4$D_IN),
							   .ENQ(v_f_from_host_4$ENQ),
							   .DEQ(v_f_from_host_4$DEQ),
							   .CLR(v_f_from_host_4$CLR),
							   .D_OUT(v_f_from_host_4$D_OUT),
							   .FULL_N(v_f_from_host_4$FULL_N),
							   .EMPTY_N(v_f_from_host_4$EMPTY_N));

  // submodule v_f_to_host_0
  FIFO2 #(.width(32'd32), .guarded(32'd1)) v_f_to_host_0(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(v_f_to_host_0$D_IN),
							 .ENQ(v_f_to_host_0$ENQ),
							 .DEQ(v_f_to_host_0$DEQ),
							 .CLR(v_f_to_host_0$CLR),
							 .D_OUT(v_f_to_host_0$D_OUT),
							 .FULL_N(v_f_to_host_0$FULL_N),
							 .EMPTY_N(v_f_to_host_0$EMPTY_N));

  // submodule v_f_to_host_1
  FIFO2 #(.width(32'd32), .guarded(32'd1)) v_f_to_host_1(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(v_f_to_host_1$D_IN),
							 .ENQ(v_f_to_host_1$ENQ),
							 .DEQ(v_f_to_host_1$DEQ),
							 .CLR(v_f_to_host_1$CLR),
							 .D_OUT(v_f_to_host_1$D_OUT),
							 .FULL_N(v_f_to_host_1$FULL_N),
							 .EMPTY_N(v_f_to_host_1$EMPTY_N));

  // submodule v_f_to_host_2
  FIFO2 #(.width(32'd32), .guarded(32'd1)) v_f_to_host_2(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(v_f_to_host_2$D_IN),
							 .ENQ(v_f_to_host_2$ENQ),
							 .DEQ(v_f_to_host_2$DEQ),
							 .CLR(v_f_to_host_2$CLR),
							 .D_OUT(v_f_to_host_2$D_OUT),
							 .FULL_N(v_f_to_host_2$FULL_N),
							 .EMPTY_N(v_f_to_host_2$EMPTY_N));

  // submodule v_f_to_host_3
  FIFO2 #(.width(32'd32), .guarded(32'd1)) v_f_to_host_3(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(v_f_to_host_3$D_IN),
							 .ENQ(v_f_to_host_3$ENQ),
							 .DEQ(v_f_to_host_3$DEQ),
							 .CLR(v_f_to_host_3$CLR),
							 .D_OUT(v_f_to_host_3$D_OUT),
							 .FULL_N(v_f_to_host_3$FULL_N),
							 .EMPTY_N(v_f_to_host_3$EMPTY_N));

  // rule RL_rl_AXI4L_rd
  assign CAN_FIRE_RL_rl_AXI4L_rd =
	     ocl_xactor_f_rd_addr$EMPTY_N &&
	     ocl_xactor_f_rd_data_i_notFull__1_AND_NOT_ocl__ETC___d83 ;
  assign WILL_FIRE_RL_rl_AXI4L_rd = CAN_FIRE_RL_rl_AXI4L_rd ;

  // rule RL_rl_AXI4L_wr
  assign CAN_FIRE_RL_rl_AXI4L_wr =
	     ocl_xactor_f_wr_addr$EMPTY_N && ocl_xactor_f_wr_data$EMPTY_N &&
	     ocl_xactor_f_wr_resp_i_notFull_AND_ocl_xactor__ETC___d29 ;
  assign WILL_FIRE_RL_rl_AXI4L_wr = CAN_FIRE_RL_rl_AXI4L_wr ;

  // submodule ocl_xactor_f_rd_addr
  assign ocl_xactor_f_rd_addr$D_IN = { ocl_slave_araddr, ocl_slave_arprot } ;
  assign ocl_xactor_f_rd_addr$ENQ =
	     ocl_slave_arvalid && ocl_xactor_f_rd_addr$FULL_N ;
  assign ocl_xactor_f_rd_addr$DEQ = CAN_FIRE_RL_rl_AXI4L_rd ;
  assign ocl_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule ocl_xactor_f_rd_data
  assign ocl_xactor_f_rd_data$D_IN =
	     (!ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d54 &&
	      _0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d59) ?
	       ((ocl_xactor_f_rd_addr$D_OUT[5:3] == 3'b100) ?
		  { 33'd0, x__h3069 } :
		  34'h2FFFFFFFF) :
	       (_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d63 ?
		  IF_ocl_xactor_f_rd_addr_first__2_BITS_5_TO_3_5_ETC___d118 :
		  34'h3FFFFFFFF) ;
  assign ocl_xactor_f_rd_data$ENQ = CAN_FIRE_RL_rl_AXI4L_rd ;
  assign ocl_xactor_f_rd_data$DEQ =
	     ocl_slave_rready && ocl_xactor_f_rd_data$EMPTY_N ;
  assign ocl_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule ocl_xactor_f_wr_addr
  assign ocl_xactor_f_wr_addr$D_IN = { ocl_slave_awaddr, ocl_slave_awprot } ;
  assign ocl_xactor_f_wr_addr$ENQ =
	     ocl_slave_awvalid && ocl_xactor_f_wr_addr$FULL_N ;
  assign ocl_xactor_f_wr_addr$DEQ = CAN_FIRE_RL_rl_AXI4L_wr ;
  assign ocl_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule ocl_xactor_f_wr_data
  assign ocl_xactor_f_wr_data$D_IN = { ocl_slave_wdata, ocl_slave_wstrb } ;
  assign ocl_xactor_f_wr_data$ENQ =
	     ocl_slave_wvalid && ocl_xactor_f_wr_data$FULL_N ;
  assign ocl_xactor_f_wr_data$DEQ = CAN_FIRE_RL_rl_AXI4L_wr ;
  assign ocl_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule ocl_xactor_f_wr_resp
  assign ocl_xactor_f_wr_resp$D_IN =
	     (!ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6 &&
	      _0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10) ?
	       (SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 ?
		  2'd0 :
		  2'd2) :
	       2'd3 ;
  assign ocl_xactor_f_wr_resp$ENQ = CAN_FIRE_RL_rl_AXI4L_wr ;
  assign ocl_xactor_f_wr_resp$DEQ =
	     ocl_slave_bready && ocl_xactor_f_wr_resp$EMPTY_N ;
  assign ocl_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule v_f_from_host_0
  assign v_f_from_host_0$D_IN = ocl_xactor_f_wr_data$D_OUT[35:4] ;
  assign v_f_from_host_0$ENQ =
	     WILL_FIRE_RL_rl_AXI4L_wr && x__h1777 == 32'd0 &&
	     !ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6 &&
	     _0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10 &&
	     SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 ;
  assign v_f_from_host_0$DEQ = EN_v_from_host_0_deq ;
  assign v_f_from_host_0$CLR = 1'b0 ;

  // submodule v_f_from_host_1
  assign v_f_from_host_1$D_IN = ocl_xactor_f_wr_data$D_OUT[35:4] ;
  assign v_f_from_host_1$ENQ =
	     WILL_FIRE_RL_rl_AXI4L_wr && x__h1777 == 32'd1 &&
	     !ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6 &&
	     _0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10 &&
	     SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 ;
  assign v_f_from_host_1$DEQ = EN_v_from_host_1_deq ;
  assign v_f_from_host_1$CLR = 1'b0 ;

  // submodule v_f_from_host_2
  assign v_f_from_host_2$D_IN = ocl_xactor_f_wr_data$D_OUT[35:4] ;
  assign v_f_from_host_2$ENQ =
	     WILL_FIRE_RL_rl_AXI4L_wr && x__h1777 == 32'd2 &&
	     !ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6 &&
	     _0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10 &&
	     SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 ;
  assign v_f_from_host_2$DEQ = EN_v_from_host_2_deq ;
  assign v_f_from_host_2$CLR = 1'b0 ;

  // submodule v_f_from_host_3
  assign v_f_from_host_3$D_IN = ocl_xactor_f_wr_data$D_OUT[35:4] ;
  assign v_f_from_host_3$ENQ =
	     WILL_FIRE_RL_rl_AXI4L_wr && x__h1777 == 32'd3 &&
	     !ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6 &&
	     _0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10 &&
	     SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 ;
  assign v_f_from_host_3$DEQ = EN_v_from_host_3_deq ;
  assign v_f_from_host_3$CLR = 1'b0 ;

  // submodule v_f_from_host_4
  assign v_f_from_host_4$D_IN = ocl_xactor_f_wr_data$D_OUT[35:4] ;
  assign v_f_from_host_4$ENQ =
	     WILL_FIRE_RL_rl_AXI4L_wr && x__h1777 == 32'd4 &&
	     !ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6 &&
	     _0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10 &&
	     SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 ;
  assign v_f_from_host_4$DEQ = EN_v_from_host_4_deq ;
  assign v_f_from_host_4$CLR = 1'b0 ;

  // submodule v_f_to_host_0
  assign v_f_to_host_0$D_IN = v_to_host_0_enq_x ;
  assign v_f_to_host_0$ENQ = EN_v_to_host_0_enq ;
  assign v_f_to_host_0$DEQ =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h2548 == 32'd0 &&
	     ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d92 ;
  assign v_f_to_host_0$CLR = 1'b0 ;

  // submodule v_f_to_host_1
  assign v_f_to_host_1$D_IN = v_to_host_1_enq_x ;
  assign v_f_to_host_1$ENQ = EN_v_to_host_1_enq ;
  assign v_f_to_host_1$DEQ =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h2548 == 32'd1 &&
	     ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d92 ;
  assign v_f_to_host_1$CLR = 1'b0 ;

  // submodule v_f_to_host_2
  assign v_f_to_host_2$D_IN = v_to_host_2_enq_x ;
  assign v_f_to_host_2$ENQ = EN_v_to_host_2_enq ;
  assign v_f_to_host_2$DEQ =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h2548 == 32'd2 &&
	     ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d92 ;
  assign v_f_to_host_2$CLR = 1'b0 ;

  // submodule v_f_to_host_3
  assign v_f_to_host_3$D_IN = v_to_host_3_enq_x ;
  assign v_f_to_host_3$ENQ = EN_v_to_host_3_enq ;
  assign v_f_to_host_3$DEQ =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h2548 == 32'd3 &&
	     ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d92 ;
  assign v_f_to_host_3$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_ocl_xactor_f_rd_addr_first__2_BITS_5_TO_3_5_ETC___d118 =
	     { (ocl_xactor_f_rd_addr$D_OUT[5:3] == 3'b100 ||
		SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72) ?
		 2'd0 :
		 2'd2,
	       x1_avValue_rdata__h2966 } ;
  assign _0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d59 =
	     x__h2400 < 32'd5 ;
  assign _0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d63 =
	     x__h2548 < 32'd4 ;
  assign _0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10 =
	     x__h1777 < 32'd5 ;
  assign ocl_xactor_f_rd_addrD_OUT_BITS_34_TO_3_MINUS__ETC__q2 =
	     ocl_xactor_f_rd_addr$D_OUT[34:3] - 32'h00001000 ;
  assign ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d102 =
	     (ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d54 ||
	      !_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d59) &&
	     _0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d63 &&
	     ocl_xactor_f_rd_addr$D_OUT[5:3] != 3'b100 &&
	     !SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72 ;
  assign ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d54 =
	     ocl_xactor_f_rd_addr$D_OUT[34:3] < 32'h00001000 ;
  assign ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d92 =
	     (ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d54 ||
	      !_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d59) &&
	     _0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d63 &&
	     ocl_xactor_f_rd_addr$D_OUT[5:3] != 3'b100 &&
	     SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72 ;
  assign ocl_xactor_f_rd_data_i_notFull__1_AND_NOT_ocl__ETC___d83 =
	     ocl_xactor_f_rd_data$FULL_N &&
	     (!ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d54 &&
	      _0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d59 ||
	      !_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d63 ||
	      ocl_xactor_f_rd_addr$D_OUT[5:3] == 3'b100 ||
	      !SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72 ||
	      CASE_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BI_ETC___d78) ;
  assign ocl_xactor_f_wr_addrD_OUT_BITS_34_TO_3_MINUS__ETC__q1 =
	     ocl_xactor_f_wr_addr$D_OUT[34:3] - 32'h00001000 ;
  assign ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6 =
	     ocl_xactor_f_wr_addr$D_OUT[34:3] < 32'h00001000 ;
  assign ocl_xactor_f_wr_resp_i_notFull_AND_ocl_xactor__ETC___d29 =
	     ocl_xactor_f_wr_resp$FULL_N &&
	     (ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6 ||
	      !_0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10 ||
	      !SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 ||
	      CASE_0_CONCAT_ocl_xactor_f_wr_addr_first_BITS__ETC___d26) ;
  assign rdr___1_rdata__h2631 =
	     { 31'd0,
	       SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72 } ;
  assign x1_avValue_rdata__h2955 =
	     SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72 ?
	       rdr___1_rdata__h2910 :
	       32'hFFFFFFFF ;
  assign x1_avValue_rdata__h2966 =
	     (ocl_xactor_f_rd_addr$D_OUT[5:3] == 3'b100) ?
	       rdr___1_rdata__h2631 :
	       x1_avValue_rdata__h2955 ;
  assign x__h1777 =
	     { 3'd0,
	       ocl_xactor_f_wr_addrD_OUT_BITS_34_TO_3_MINUS__ETC__q1[31:3] } ;
  assign x__h2400 =
	     { 3'd0,
	       ocl_xactor_f_rd_addrD_OUT_BITS_34_TO_3_MINUS__ETC__q2[31:3] } ;
  assign x__h2548 = { 3'd0, ocl_xactor_f_rd_addr$D_OUT[34:6] } ;
  always@(x__h2548 or
	  v_f_to_host_0$D_OUT or
	  v_f_to_host_1$D_OUT or v_f_to_host_2$D_OUT or v_f_to_host_3$D_OUT)
  begin
    case (x__h2548)
      32'd0: rdr___1_rdata__h2910 = v_f_to_host_0$D_OUT;
      32'd1: rdr___1_rdata__h2910 = v_f_to_host_1$D_OUT;
      32'd2: rdr___1_rdata__h2910 = v_f_to_host_2$D_OUT;
      32'd3: rdr___1_rdata__h2910 = v_f_to_host_3$D_OUT;
      default: rdr___1_rdata__h2910 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(x__h2400 or
	  v_f_from_host_0$FULL_N or
	  v_f_from_host_1$FULL_N or
	  v_f_from_host_2$FULL_N or
	  v_f_from_host_3$FULL_N or v_f_from_host_4$FULL_N)
  begin
    case (x__h2400)
      32'd0: x__h3069 = v_f_from_host_0$FULL_N;
      32'd1: x__h3069 = v_f_from_host_1$FULL_N;
      32'd2: x__h3069 = v_f_from_host_2$FULL_N;
      32'd3: x__h3069 = v_f_from_host_3$FULL_N;
      32'd4: x__h3069 = v_f_from_host_4$FULL_N;
      default: x__h3069 = 1'b0 /* unspecified value */ ;
    endcase
  end
  always@(x__h1777 or
	  v_f_from_host_0$FULL_N or
	  v_f_from_host_1$FULL_N or
	  v_f_from_host_2$FULL_N or
	  v_f_from_host_3$FULL_N or v_f_from_host_4$FULL_N)
  begin
    case (x__h1777)
      32'd0:
	  SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 =
	      v_f_from_host_0$FULL_N;
      32'd1:
	  SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 =
	      v_f_from_host_1$FULL_N;
      32'd2:
	  SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 =
	      v_f_from_host_2$FULL_N;
      32'd3:
	  SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 =
	      v_f_from_host_3$FULL_N;
      32'd4:
	  SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 =
	      v_f_from_host_4$FULL_N;
      default: SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19 =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  always@(x__h2548 or
	  v_f_to_host_0$EMPTY_N or
	  v_f_to_host_1$EMPTY_N or
	  v_f_to_host_2$EMPTY_N or v_f_to_host_3$EMPTY_N)
  begin
    case (x__h2548)
      32'd0:
	  SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72 =
	      v_f_to_host_0$EMPTY_N;
      32'd1:
	  SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72 =
	      v_f_to_host_1$EMPTY_N;
      32'd2:
	  SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72 =
	      v_f_to_host_2$EMPTY_N;
      32'd3:
	  SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72 =
	      v_f_to_host_3$EMPTY_N;
      default: SEL_ARR_v_f_to_host_0_notEmpty__7_v_f_to_host__ETC___d72 =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  always@(x__h2548 or
	  v_f_to_host_0$EMPTY_N or
	  v_f_to_host_1$EMPTY_N or
	  v_f_to_host_2$EMPTY_N or v_f_to_host_3$EMPTY_N)
  begin
    case (x__h2548)
      32'd0:
	  CASE_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BI_ETC___d78 =
	      v_f_to_host_0$EMPTY_N;
      32'd1:
	  CASE_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BI_ETC___d78 =
	      v_f_to_host_1$EMPTY_N;
      32'd2:
	  CASE_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BI_ETC___d78 =
	      v_f_to_host_2$EMPTY_N;
      32'd3:
	  CASE_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BI_ETC___d78 =
	      v_f_to_host_3$EMPTY_N;
      default: CASE_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BI_ETC___d78 =
		   1'd1;
    endcase
  end
  always@(x__h1777 or
	  v_f_from_host_0$FULL_N or
	  v_f_from_host_1$FULL_N or
	  v_f_from_host_2$FULL_N or
	  v_f_from_host_3$FULL_N or v_f_from_host_4$FULL_N)
  begin
    case (x__h1777)
      32'd0:
	  CASE_0_CONCAT_ocl_xactor_f_wr_addr_first_BITS__ETC___d26 =
	      v_f_from_host_0$FULL_N;
      32'd1:
	  CASE_0_CONCAT_ocl_xactor_f_wr_addr_first_BITS__ETC___d26 =
	      v_f_from_host_1$FULL_N;
      32'd2:
	  CASE_0_CONCAT_ocl_xactor_f_wr_addr_first_BITS__ETC___d26 =
	      v_f_from_host_2$FULL_N;
      32'd3:
	  CASE_0_CONCAT_ocl_xactor_f_wr_addr_first_BITS__ETC___d26 =
	      v_f_from_host_3$FULL_N;
      32'd4:
	  CASE_0_CONCAT_ocl_xactor_f_wr_addr_first_BITS__ETC___d26 =
	      v_f_from_host_4$FULL_N;
      default: CASE_0_CONCAT_ocl_xactor_f_wr_addr_first_BITS__ETC___d26 =
		   1'd1;
    endcase
  end

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_rd &&
	  !ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d54 &&
	  _0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d59 &&
	  ocl_xactor_f_rd_addr$D_OUT[5:3] != 3'b100)
	$display("ERROR: AWS_OCL_Adapter.rl_AXI4L_rd: ERROR: unknown rd addr %0h",
		 ocl_xactor_f_rd_addr$D_OUT[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_rd &&
	  ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d102)
	$display("ERROR: AWS_OCL_Adapter.rl_AXI4L_rd: addr %0h; ERROR: data read on empty chan [%0d]",
		 ocl_xactor_f_rd_addr$D_OUT[34:3],
		 x__h2548);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_rd &&
	  (ocl_xactor_f_rd_addr_first__2_BITS_34_TO_3_3_U_ETC___d54 ||
	   !_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d59) &&
	  !_0_CONCAT_ocl_xactor_f_rd_addr_first__2_BITS_34_ETC___d63)
	$display("ERROR: AWS_OCL_Adapter.rl_AXI4L_rd: unknown read addr %0h",
		 ocl_xactor_f_rd_addr$D_OUT[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_wr &&
	  !ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6 &&
	  _0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10 &&
	  !SEL_ARR_v_f_from_host_0_notFull__3_v_f_from_ho_ETC___d19)
	$display("ERROR: AWS_OCL_Adapter.rl_AXI4L_wr: addr %0h data %0h; chan [%0d] overflow",
		 ocl_xactor_f_wr_addr$D_OUT[34:3],
		 ocl_xactor_f_wr_data$D_OUT[35:4],
		 x__h1777);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_wr &&
	  (ocl_xactor_f_wr_addr_first_BITS_34_TO_3_ULT_0x_ETC___d6 ||
	   !_0_CONCAT_ocl_xactor_f_wr_addr_first_BITS_34_TO_ETC___d10))
	$display("ERROR: AWS_OCL_Adapter.rl_AXI4L_wr: addr %0h data %0h; unknown addr",
		 ocl_xactor_f_wr_addr$D_OUT[34:3],
		 ocl_xactor_f_wr_data$D_OUT[35:4]);
  end
  // synopsys translate_on
endmodule  // mkOCL_Adapter

